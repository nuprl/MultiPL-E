language: go_test.go
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, n := range numbers {\n\
    \        result = append(result, n)\n        if i < len(numbers) - 1 {\n     \
    \       result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073395
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, number := range numbers\
    \ {\n        result = append(result, number)\n        if i < len(numbers) - 1\
    \ {\n            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, e := range numbers {\n\
    \        result = append(result, e)\n        if i+1 < len(numbers) {\n       \
    \     result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var (\n        head = numbers[0]\n        tail = numbers[1:]\n    )\n    var\
    \ ret = intersperse(tail, delimeter)\n    ret = append([]int{head}, ret...)\n\
    \    if len(ret) > 1 {\n        ret = append(ret, delimeter)\n    }\n    return\
    \ ret\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp8l_p8zgr_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    newNumbers := make([]int, len(numbers) * 2 - 1)\n    j := 0\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        newNumbers[j] = numbers[i]\n        j++\n\
    \        if i != len(numbers) - 1 {\n            newNumbers[j] = delimeter\n \
    \           j++\n        }\n    }\n    return newNumbers\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := []int{numbers[0]}\n    for _, number := range numbers[1:] {\n   \
    \     result = append(result, delimeter, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    result := []int{numbers[0]}\n\
    \    for _, v := range numbers[1:] {\n        result = append(result, delimeter)\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n \
    \   for i := 1; i < len(numbers); i++ {\n        result[i * 2 - 1] = delimeter\n\
    \        result[i * 2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, n := range numbers {\n\
    \        result = append(result, n)\n        if i < len(numbers) - 1 {\n     \
    \       result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073395
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var results []int\n    if len(numbers) == 0 {\n        return\
    \ results\n    }\n    for i, v := range numbers {\n        results = append(results,\
    \ v)\n        if i != len(numbers) - 1 {\n            results = append(results,\
    \ delimeter)\n        }\n    }\n    return results\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, 2 * len(numbers) - 1)\n    for _, n := range numbers\
    \ {\n        result = append(result, n)\n        if n != numbers[len(numbers)\
    \ - 1] {\n            result = append(result, delimeter)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__2\
    \ (0.00s)\n        tmpi2sswt9c_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers)*2-1)\n    for i, j := 0,\
    \ 0; i < len(numbers)-1; i, j = i+1, j+2 {\n        result[j] = numbers[i]\n \
    \       result[j+1] = delimeter\n    }\n    result[len(result)-1] = numbers[len(numbers)-1]\n\
    \    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp39rfppe9_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp39rfppe9_test.go:30\
    \ +0x2a\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := []int{numbers[0]}\n    for _, number := range numbers[1:] {\n    \
    \    result = append(result, delimeter, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    result := make([]int,\
    \ 2 * len(numbers) - 1)\n    for i := 0; i < len(numbers); i++ {\n        result[2\
    \ * i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[2 *\
    \ i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := make([]int, 0, 2 * len(numbers) - 1)\n    for i, number := range\
    \ numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // TODO\n    return nil\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp70bseadl_test.go:33: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[]'\n    --- FAIL: TestIntersperse/test_num__2\
    \ (0.00s)\n        tmp70bseadl_test.go:33: expected '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers) * 2 - 1)\n    i := 0\n    for ; i < len(numbers)\
    \ - 1; i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] =\
    \ delimeter\n    }\n    result[i * 2] = numbers[i]\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    for i, number\
    \ := range numbers {\n        if i != 0 {\n            result[i*2-1] = delimeter\n\
    \        }\n        result[i*2] = number\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpp9fybxpo_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpp9fybxpo_test.go:31\
    \ +0x47\ntesting.tRunner(0xc0001a01a0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers)*2-1)\n    result[0] = numbers[0]\n    idx\
    \ := 1\n    for _, num := range numbers[1:] {\n        result[idx] = delimeter\n\
    \        result[idx+1] = num\n        idx += 2\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    var result []int\n    result = append(result, numbers[0])\n    for i := 1;\
    \ i < len(numbers); i++ {\n        result = append(result, delimeter)\n      \
    \  result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    res := make([]int, 0)\n    for i, v := range numbers {\n \
    \       res = append(res, v)\n        if i < len(numbers) - 1 {\n            res\
    \ = append(res, delimeter)\n        }\n    }\n    return res\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers)*2-1)\n    result[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        result[i*2-1] = delimeter\n       \
    \ result[i*2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var interspersed []int\n\n    for i, number := range numbers\
    \ {\n        interspersed = append(interspersed, number)\n        if i != len(numbers)\
    \ - 1 {\n            interspersed = append(interspersed, delimeter)\n        }\n\
    \    }\n\n    return interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, number := range numbers {\n \
    \       result = append(result, number)\n        if i + 1 < len(numbers) {\n \
    \           result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  first := numbers[0]\n    rest := numbers[1:]\n    var result []int\n    for\
    \ i, num := range rest {\n        result = append(result, num)\n        if i <\
    \ len(rest) - 1 {\n            result = append(result, delimeter)\n        }\n\
    \    }\n    return append([]int{first}, result...)\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp1_fqanrq_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8)\
    \ %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2\
    \ (0.00s)\n        tmp1_fqanrq_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    prev := numbers[0]\n    result = append(result, prev)\n\
    \    for _, number := range numbers[1:] {\n        result = append(result, delimeter)\n\
    \        result = append(result, number)\n        prev = number\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, 2 * len(numbers) - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, v := range numbers[1:] {\n        result = append(result,\
    \ delimeter, v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var new_numbers []int\n    for i, number := range numbers\
    \ {\n        new_numbers = append(new_numbers, number)\n        if i < len(numbers)\
    \ - 1 {\n            new_numbers = append(new_numbers, delimeter)\n        }\n\
    \    }\n    return new_numbers\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var res []int\n    if len(numbers) == 0 {\n        return\
    \ res\n    }\n    res = append(res, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        res = append(res, delimeter)\n        res = append(res, numbers[i])\n\
    \    }\n    return res\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for _, n := range numbers {\n      \
    \  result = append(result, n)\n        result = append(result, delimeter)\n  \
    \  }\n    return result[:len(result)-1]\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpjusz4di8_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpjusz4di8_test.go:29\
    \ +0x1c\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, 2 * len(numbers) - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, n := range numbers[1:] {\n        result = append(result,\
    \ delimeter, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    if len(numbers) == 1 {\n        return numbers\n    }\n\n    interpersed\
    \ := make([]int, 2 * len(numbers) - 1)\n    interpersed[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        interpersed[i * 2 - 1] = delimeter\n\
    \        interpersed[i * 2] = numbers[i]\n    }\n\n    return interpersed\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   res := []int{numbers[0]}\n    for _, n := range numbers[1:] {\n        res\
    \ = append(res, delimeter, n)\n    }\n    return res\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, n := range numbers {\n      \
    \  result = append(result, n)\n        if i != len(numbers) - 1 {\n          \
    \  result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    output := make([]int, 0)\n    if len(numbers) == 0 {\n   \
    \     return output\n    }\n    for i, v := range numbers {\n        output =\
    \ append(output, v)\n        if i < len(numbers) - 1 {\n            output = append(output,\
    \ delimeter)\n        }\n    }\n    return output\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    if len(numbers) == 0 {\n        return\
    \ result\n    }\n\n    result = append(result, numbers[0])\n    for i := 1; i\
    \ < len(numbers); i++ {\n        result = append(result, delimeter)\n        result\
    \ = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, elem := range numbers\
    \ {\n        result = append(result, elem)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    newNumbers := make([]int, 0)\n    if len(numbers) == 0 {\n\
    \        return newNumbers\n    }\n\n    for i, n := range numbers {\n       \
    \ newNumbers = append(newNumbers, n)\n        if i < len(numbers) - 1 {\n    \
    \        newNumbers = append(newNumbers, delimeter)\n        }\n    }\n    return\
    \ newNumbers\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    ret := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        ret[i * 2] = numbers[i]\n        if i != len(numbers) - 1 {\n\
    \            ret[i * 2 + 1] = delimeter\n        }\n    }\n    return ret\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := []int{numbers[0]}\n    for _, number := range numbers[1:] {\n  \
    \      result = append(result, delimeter, number)\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    length := len(numbers)\n    if length == 0 {\n        return\
    \ numbers\n    }\n    result := make([]int, length * 2 - 1)\n    for i := 0; i\
    \ < length - 1; i++ {\n        result[i * 2] = numbers[i]\n        result[i *\
    \ 2 + 1] = delimeter\n    }\n    result[length * 2 - 2] = numbers[length - 1]\n\
    \    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    output := make([]int, 0)\n    for i, number := range numbers\
    \ {\n        output = append(output, number)\n        if i != len(numbers) - 1\
    \ {\n            output = append(output, delimeter)\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    output := make([]int, 0)\n    for i, v := range numbers {\n\
    \        output = append(output, v)\n        if i != len(numbers) - 1 {\n    \
    \        output = append(output, delimeter)\n        }\n    }\n    return output\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    for index, number := range\
    \ numbers {\n        if index > 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n  \
    \  for i := 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n\
    \    for _, n := range numbers[1:] {\n        result = append(result, delimeter,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   // Is there a better way to do this?\n    result := make([]int, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result[i * 2]\
    \ = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result)\
    \ - 1] = numbers[len(numbers) - 1]\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    length := len(numbers)\n    for i :=\
    \ 0; i < length; i++ {\n        result = append(result, numbers[i])\n        if\
    \ i < length - 1 {\n            result = append(result, delimeter)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    if len(numbers) == 0 {\n   \
    \     return result\n    }\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073451
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    i := 0\n\
    \    for _, num := range numbers {\n        result[i] = num\n        i++\n   \
    \     if i < len(result) {\n            result[i] = delimeter\n            i++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpqhfjnfm7_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpqhfjnfm7_test.go:34\
    \ +0x47\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  interspersed := make([]int, len(numbers) * 2 - 1)\n    for i, number := range\
    \ numbers {\n        interspersed[i * 2] = number\n        if i != len(numbers)\
    \ - 1 {\n            interspersed[i * 2 + 1] = delimeter\n        }\n    }\n \
    \   return interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i != len(numbers) - 1 {\n          \
    \  result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var results []int\n    length := len(numbers)\n    if length\
    \ == 0 {\n        return results\n    }\n    for i := 0; i < length - 1; i++ {\n\
    \        results = append(results, numbers[i])\n        results = append(results,\
    \ delimeter)\n    }\n    results = append(results, numbers[length - 1])\n    return\
    \ results\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var ret []int\n    last_index := len(numbers) - 1\n    for\
    \ i, e := range numbers {\n        ret = append(ret, e)\n        if i != last_index\
    \ {\n            ret = append(ret, delimeter)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // Handle empty list\n    if len(numbers) == 0 {\n       \
    \ return numbers\n    }\n\n    // Handle 1-item list\n    if len(numbers) == 1\
    \ {\n        return numbers\n    }\n\n    // Allocate room for the result\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n\n    // Copy first item\n\
    \    result = append(result, numbers[0])\n\n    // Copy the remaining items and\
    \ add the delimeter in-between\n    for i := 1; i < len(numbers); i++ {\n    \
    \    result = append(result, delimeter)\n        result = append(result, numbers[i])\n\
    \    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    result = append(result, numbers[0])\n    for i := 1;\
    \ i < len(numbers); i++ {\n        result = append(result, delimeter)\n      \
    \  result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, number := range numbers[1:] {\n        result = append(result,\
    \ delimeter, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    out := make([]int, len(numbers) * 2 - 1)\n    for i, number := range numbers\
    \ {\n        if i == 0 {\n            out[0] = number\n        } else {\n    \
    \        out[i * 2 - 1] = delimeter\n            out[i * 2] = number\n       \
    \ }\n    }\n    return out\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    // 1, 2, 3\n    // 1, 4, 2, 4, 3\n    result := []int{numbers[0]}\n\n   \
    \ for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    interspersed :=\
    \ make([]int, 0, len(numbers)*2)\n    for i, x := range numbers {\n        if\
    \ i != 0 {\n            interspersed = append(interspersed, delimeter)\n     \
    \   }\n        interspersed = append(interspersed, x)\n    }\n    return interspersed\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var res []int\n    switch {\n    case len(numbers) <= 1:\n\
    \        res = make([]int, len(numbers))\n        copy(res, numbers)\n    default:\n\
    \        res = make([]int, len(numbers) * 2 - 1)\n        for i := 0; i < len(numbers)\
    \ - 1; i++ {\n            res[i * 2] = numbers[i]\n            res[i * 2 + 1]\
    \ = delimeter\n        }\n        res[len(res) - 1] = numbers[len(numbers) - 1]\n\
    \    }\n    return res\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    ret := make([]int, 2 * len(numbers) - 1)\n    ret[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        ret[2 * i - 1] = delimeter\n      \
    \  ret[2 * i] = numbers[i]\n    }\n    return ret\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := []int{numbers[0]}\n    for _, num := range numbers[1:] {\n      \
    \  result = append(result, delimeter, num)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    var result []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        result\
    \ = append(result, numbers[i])\n        result = append(result, delimeter)\n \
    \   }\n    result = append(result, numbers[len(numbers) - 1])\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073395
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var output []int\n    if len(numbers) == 0 {\n        return\
    \ output\n    }\n\n    for index, number := range numbers {\n        output =\
    \ append(output, number)\n        if index < len(numbers) - 1 {\n            output\
    \ = append(output, delimeter)\n        }\n    }\n    return output\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers)*2-1)\n    result[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        result[i*2-1] = delimeter\n       \
    \ result[i*2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    result = append(result, numbers[0])\n    for _, e :=\
    \ range numbers[1:] {\n        result = append(result, delimeter)\n        result\
    \ = append(result, e)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  size := 2 * len(numbers) - 1\n    result := make([]int, size)\n    result[0]\
    \ = numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n        result[2\
    \ * i + 1] = delimeter\n        result[2 * i + 2] = numbers[i + 1]\n    }\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073451
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var delimeters []int\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        delimeters = append(delimeters, delimeter)\n    }\n    return\
    \ intersperseLists(numbers, delimeters)\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4obnurdo_test.go:18:12: undefined: intersperseLists

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    var result []int\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    interspersed := make([]int, 0, len(numbers) * 2)\n    for\
    \ i, num := range numbers {\n        if i != 0 {\n            interspersed = append(interspersed,\
    \ delimeter)\n        }\n        interspersed = append(interspersed, num)\n  \
    \  }\n    return interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n  \
    \  for i := 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, v := range numbers {\n\
    \        result = append(result, v)\n        if i != len(numbers) - 1 {\n    \
    \        result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var newNumbers []int\n    for i, v := range numbers {\n  \
    \      newNumbers = append(newNumbers, v)\n        if i != len(numbers) - 1 {\n\
    \            newNumbers = append(newNumbers, delimeter)\n        }\n    }\n  \
    \  return newNumbers\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073453
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var output []int\n    if len(numbers) == 0 {\n        return\
    \ output\n    }\n    output = append(output, numbers[0])\n    for i := 1; i <\
    \ len(numbers); i++ {\n        output = append(output, delimeter)\n        output\
    \ = append(output, numbers[i])\n    }\n    return output\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, v := range numbers {\n\
    \        result = append(result, v)\n        if i < len(numbers) - 1 {\n     \
    \       result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, number := range numbers[1:] {\n        result = append(result,\
    \ delimeter, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    length := len(numbers)\n   \
    \ for i := 0; i < length; i++ {\n        result = append(result, numbers[i])\n\
    \        if i < length - 1 {\n            result = append(result, delimeter)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, e := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, e)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    result = append(result, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpkxrp_ltl_test.go:15\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpkxrp_ltl_test.go:30\
    \ +0x2f\ntesting.tRunner(0xc0001031e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    lenNumbers := len(numbers)\n\
    \    if lenNumbers > 0 {\n        if lenNumbers == 1 {\n            result = append(result,\
    \ numbers[0])\n        } else {\n            for i := 0; i < lenNumbers - 1; i++\
    \ {\n                result = append(result, numbers[i])\n                result\
    \ = append(result, delimeter)\n            }\n            result = append(result,\
    \ numbers[lenNumbers - 1])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    ret := make([]int, 0)\n    if len(numbers) > 0 {\n       \
    \ ret = append(ret, numbers[0])\n    }\n    for i := 1; i < len(numbers); i++\
    \ {\n        ret = append(ret, delimeter)\n        ret = append(ret, numbers[i])\n\
    \    }\n    return ret\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    var result []int\n\
    \    for _, number := range numbers {\n        result = append(result, number)\n\
    \        result = append(result, delimeter)\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var ret []int\n    var i int\n\n    if len(numbers) == 0 {\n\
    \        return numbers\n    }\n\n    ret = append(ret, numbers[0])\n    for i\
    \ = 1; i < len(numbers); i++ {\n        ret = append(ret, delimeter)\n       \
    \ ret = append(ret, numbers[i])\n    }\n\n    return ret\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] =\
    \ delimeter\n    }\n    result[len(result) - 1] = numbers[len(numbers) - 1]\n\
    \    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // Base case\n    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    // Recursive case\n    return append([]int{numbers[0]},\n        \
    \            append([]int{delimeter},\n                        intersperse(numbers[1:],\
    \ delimeter)...))\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg90mrr0v_test.go:20:21:\
    \ cannot use append([]int{\u2026}, intersperse(numbers[1:], delimeter)...) (value\
    \ of type []int) as type int in argument to append\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073453
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i != len(numbers) - 1 {\n          \
    \  result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[2 * i - 1] = delimeter\n\
    \        result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    prev := false\n    for _, num := range\
    \ numbers {\n        if prev {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, num)\n        prev = true\n    }\n\
    \    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // empty list, short-circuit and return it\n    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n\n    for _, num := range\
    \ numbers[1:] {\n        result = append(result, delimeter, num)\n    }\n\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, 2 * len(numbers) - 1)\n    for i, n := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, num := range numbers[1:] {\n        result = append(result,\
    \ delimeter, num)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    result := make([]int,\
    \ 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[2 * i - 1] = delimeter\n        result[2 * i] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var newNumbers []int\n    for i := 0; i < len(numbers); i++ {\n        newNumbers\
    \ = append(newNumbers, numbers[i])\n        if i != len(numbers) - 1 {\n     \
    \       newNumbers = append(newNumbers, delimeter)\n        }\n    }\n    return\
    \ newNumbers\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    ret := make([]int, 0, 2 * len(numbers))\n    for i, v := range numbers {\n\
    \        if i > 0 {\n            ret = append(ret, delimeter)\n        }\n   \
    \     ret = append(ret, v)\n    }\n    return ret\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  r := []int{numbers[0]}\n    for _, n := range numbers[1:] {\n        r = append(r,\
    \ delimeter, n)\n    }\n    return r\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    list := make([]int, 0, len(numbers) * 2 - 1)\n    for i, v := range numbers\
    \ {\n        if i > 0 {\n            list = append(list, delimeter)\n        }\n\
    \        list = append(list, v)\n    }\n    return list\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    interspersed := make([]int, 2 * len(numbers) - 1)\n    interspersed[0] =\
    \ numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        interspersed[2\
    \ * i - 1] = delimeter\n        interspersed[2 * i] = numbers[i]\n    }\n    return\
    \ interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    output := make([]int, 0)\n    for i, n := range numbers {\n\
    \        output = append(output, n)\n        if i < len(numbers) - 1 {\n     \
    \       output = append(output, delimeter)\n        }\n    }\n    return output\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073454
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073455
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var res []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        res = append(res,\
    \ numbers[i])\n        res = append(res, delimeter)\n    }\n    res = append(res,\
    \ numbers[len(numbers) - 1])\n    return res\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n\n    if len(numbers) == 0 {\n        return\
    \ result\n    }\n\n    for i, num := range numbers {\n        result = append(result,\
    \ num)\n        if i < len(numbers) - 1 {\n            result = append(result,\
    \ delimeter)\n        }\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    res := make([]int, 0)\n    if len(numbers) > 0 {\n       \
    \ res = append(res, numbers[0])\n    }\n    for i := 1; i < len(numbers); i++\
    \ {\n        res = append(res, delimeter)\n        res = append(res, numbers[i])\n\
    \    }\n    return res\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // Base case\n    if len(numbers) == 0 {\n        return numbers\n\
    \    }\n    if len(numbers) == 1 {\n        return numbers\n    }\n\n    // Recursive\
    \ case\n    head := numbers[0]\n    tail := numbers[1:]\n    tail = intersperse(tail,\
    \ delimeter)\n    var newTail []int\n    newTail = append(newTail, head)\n   \
    \ newTail = append(newTail, delimeter)\n    newTail = append(newTail, tail...)\n\
    \    return newTail\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    if len(numbers) == 0 {\n   \
    \     return result\n    }\n    for i, number := range numbers {\n        result\
    \ = append(result, number)\n        if i != len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, _ := range numbers\
    \ {\n        result = append(result, numbers[i])\n        if i < len(numbers)\
    \ - 1 {\n            result = append(result, delimeter)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        result\
    \ = append(result, numbers[i])\n        result = append(result, delimeter)\n \
    \   }\n    result = append(result, numbers[len(numbers) - 1])\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var output []int\n    for i, x := range numbers {\n      \
    \  output = append(output, x)\n        if i != len(numbers) - 1 {\n          \
    \  output = append(output, delimeter)\n        }\n    }\n    return output\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    result[0]\
    \ = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        result[2 * i\
    \ - 1] = delimeter\n        result[2 * i] = numbers[i]\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp_laltcyq_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp_laltcyq_test.go:30\
    \ +0x2a\ntesting.tRunner(0xc000192680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    ret := make([]int, 0)\n    for i, n := range numbers {\n \
    \       ret = append(ret, n)\n        if i != len(numbers) - 1 {\n           \
    \ ret = append(ret, delimeter)\n        }\n    }\n    return ret\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    if len(numbers) > 0 {\n    \
    \    result = append(result, numbers[0])\n        for i := 1; i < len(numbers);\
    \ i++ {\n            result = append(result, delimeter)\n            result =\
    \ append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, number := range\
    \ numbers {\n        if i != 0 {\n            result = append(result, delimeter)\n\
    \        }\n        result = append(result, number)\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  ret := make([]int, 0, len(numbers) * 2 - 1)\n    ret = append(ret, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        ret = append(ret, delimeter)\n\
    \        ret = append(ret, numbers[i])\n    }\n    return ret\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    interspersed := make([]int, 0)\n    // don't forget edge cases\n\
    \    if len(numbers) == 0 {\n        return interspersed\n    }\n    // first\
    \ element can't be a delimeter\n    interspersed = append(interspersed, numbers[0])\n\
    \    for _, num := range numbers[1:] {\n        interspersed = append(interspersed,\
    \ delimeter)\n        interspersed = append(interspersed, num)\n    }\n    return\
    \ interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    output := make([]int, 0)\n    for _, number := range numbers\
    \ {\n        output = append(output, number)\n        output = append(output,\
    \ delimeter)\n    }\n    if len(output) > 0 {\n        output = output[:len(output)-1]\n\
    \    }\n    return output\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers)*2-1)\n    result[0] = numbers[0]\n   \
    \ for i := 1; i < len(numbers); i++ {\n        result[2*i-1] = delimeter\n   \
    \     result[2*i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var interspersed []int\n    for i, number := range numbers\
    \ {\n        interspersed = append(interspersed, number)\n        if i < len(numbers)\
    \ - 1 {\n            interspersed = append(interspersed, delimeter)\n        }\n\
    \    }\n    return interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n \
    \ candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    var result []int\n    result = append(result, numbers[0])\n    for _, number\
    \ := range numbers[1:] {\n        result = append(result, delimeter)\n       \
    \ result = append(result, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 0, len(numbers) * 2 - 1)\n    for i, n := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  interspersed := make([]int, len(numbers)*2-1)\n    for i, n := range numbers\
    \ {\n        interspersed[i*2] = n\n        if i < len(numbers)-1 {\n        \
    \    interspersed[i*2+1] = delimeter\n        }\n    }\n    return interspersed\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, 2 * len(numbers) - 1)\n    result[0] = numbers[0]\n  \
    \  result[1] = delimeter\n    for i := 1; i < len(numbers); i++ {\n        result[2\
    \ * i - 1] = numbers[i]\n        result[2 * i] = delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp5szch3ra_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8)\
    \ %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, v := range numbers {\n\
    \        result = append(result, v)\n        if i != len(numbers) - 1 {\n    \
    \        result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073451
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, value := range numbers\
    \ {\n        result = append(result, value)\n        if i < len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  r := make([]int, len(numbers) * 2 - 1)\n    for i, v := range numbers {\n \
    \       r[i * 2] = v\n        if i + 1 < len(numbers) {\n            r[i * 2 +\
    \ 1] = delimeter\n        }\n    }\n    return r\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, len(numbers) * 2 - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, num := range numbers[1:] {\n        result = append(result,\
    \ delimeter, num)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := []int{numbers[0]}\n    for _, n := range numbers[1:] {\n        result\
    \ = append(result, delimeter, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073346
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    var result []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        result\
    \ = append(result, numbers[i])\n        result = append(result, delimeter)\n \
    \   }\n    result = append(result, numbers[len(numbers) - 1])\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    newNumbers := make([]int, 2 * len(numbers) - 1)\n    j :=\
    \ 0\n    for i := 0; i < len(numbers); i++ {\n        newNumbers[j] = numbers[i]\n\
    \        j += 1\n        if i < len(numbers) - 1 {\n            newNumbers[j]\
    \ = delimeter\n            j += 1\n        }\n    }\n    return newNumbers\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp85i2k66k_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp85i2k66k_test.go:34\
    \ +0x47\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    l := len(numbers)\n    if l <= 1 {\n        return numbers\n\
    \    }\n\n    // NOTE: \u4F7F\u7528\u5207\u7247\u521B\u5EFA\u65B0\u7684\u5207\u7247\
    \uFF0C\u5219\u4F1A\u590D\u5236\u5143\u7D20\uFF0C\u7A7A\u95F4\u589E\u957F\u7684\
    \u5E45\u5EA6\u4E3A2\u500D\n    // \u7A7A\u95F4\u590D\u6742\u5EA6O(n)\n    interspersed\
    \ := make([]int, l*2 - 1)\n    for i := 0; i < l - 1; i++ {\n        interspersed[i*2]\
    \ = numbers[i]\n        interspersed[i*2 + 1] = delimeter\n    }\n    interspersed[l*2\
    \ - 2] = numbers[l - 1]\n\n    return interspersed\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073456
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    n := len(numbers)\n    if n <= 1 {\n        return numbers\n\
    \    }\n\n    result := make([]int, 2 * n - 1)\n    for i := 0; i < n; i++ {\n\
    \        result[2 * i] = numbers[i]\n        if i < n - 1 {\n            result[2\
    \ * i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073457
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers)*2-1)\n    for i, n := range numbers {\n \
    \       result[i*2] = n\n        if i < len(numbers)-1 {\n            result[i*2+1]\
    \ = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 0, 2 * len(numbers) - 1)\n    result = append(result,\
    \ numbers[0])\n    for _, number := range numbers[1:] {\n        result = append(result,\
    \ delimeter, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[i * 2 - 1] = delimeter\n\
    \        result[i * 2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, number := range numbers {\n \
    \       result = append(result, number)\n        if i + 1 < len(numbers) {\n \
    \           result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    out := make([]int, 0, len(numbers) * 2)\n    n := len(numbers)\n\
    \    if n == 0 {\n        return numbers\n    }\n    for i := 0; i < n - 1; i++\
    \ {\n        out = append(out, numbers[i], delimeter)\n    }\n    out = append(out,\
    \ numbers[n - 1])\n    return out\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073459
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, 2 * len(numbers) - 1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[2 * i] = numbers[i]\n        if i < len(numbers) - 1 {\n\
    \            result[2 * i + 1] = delimeter\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    return intersperse_recursive(numbers, delimeter, 1)\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwlm3zq92_test.go:14:12: undefined: intersperse_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073458
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    result[0]\
    \ = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n        result[i * 2\
    \ - 1] = delimeter\n        result[i * 2] = numbers[i]\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x548d20})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpv5vjcluh_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpv5vjcluh_test.go:30\
    \ +0x2a\ntesting.tRunner(0xc0001201a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        result[i * 2 - 1] = delimeter\n\
    \        result[i * 2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := []int{numbers[0]}\n    for _, n := range numbers[1:] {\n      \
    \  result = append(result, delimeter, n)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    if len(numbers) == 0 {\n        return\
    \ result\n    }\n    result = append(result, numbers[0])\n    for _, number :=\
    \ range numbers[1:] {\n        result = append(result, delimeter)\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, x := range numbers {\n\
    \        result = append(result, x)\n        if i < len(numbers) - 1 {\n     \
    \       result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    results := make([]int, 0, len(numbers) * 2 - 1)\n    results = append(results,\
    \ numbers[0])\n    for _, num := range numbers[1:] {\n        results = append(results,\
    \ delimeter, num)\n    }\n    return results\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    ret := make([]int, 0, len(numbers)*2-1)\n    for i := 0; i < len(numbers)-1;\
    \ i++ {\n        ret = append(ret, numbers[i], delimeter)\n    }\n    ret = append(ret,\
    \ numbers[len(numbers)-1])\n    return ret\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  res := make([]int, 0, len(numbers) * 2 - 1)\n    for idx, n := range numbers\
    \ {\n        if idx != 0 {\n            res = append(res, delimeter)\n       \
    \ }\n        res = append(res, n)\n    }\n    return res\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073459
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := []int{numbers[0]}\n    for i := 1; i < len(numbers); i++ {\n  \
    \      result = append(result, delimeter)\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    for i, v\
    \ := range numbers {\n        result[i * 2] = v\n        if i < len(numbers) -\
    \ 1 {\n            result[i * 2 + 1] = delimeter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp576rsq5n_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp576rsq5n_test.go:31\
    \ +0x47\ntesting.tRunner(0xc000199040, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  interspersed := make([]int, 2 * len(numbers) - 1)\n    for i, n := range numbers\
    \ {\n        interspersed[2 * i] = n\n        if i < len(numbers) - 1 {\n    \
    \        interspersed[2 * i + 1] = delimeter\n        }\n    }\n    return interspersed\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   result := make([]int, len(numbers)*2-1)\n    result[0] = numbers[0]\n    for\
    \ i, v := range numbers[1:] {\n        result[i*2+1] = delimeter\n        result[i*2+2]\
    \ = v\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n \
    \ candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  output := make([]int, len(numbers) * 2 - 1)\n    for index, number := range\
    \ numbers {\n        output[index * 2] = number\n        if index < len(numbers)\
    \ - 1 {\n            output[index * 2 + 1] = delimeter\n        }\n    }\n   \
    \ return output\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, 0, len(numbers)*2-1)\n    for i, n := range numbers\
    \ {\n        if i != 0 {\n            result = append(result, delimeter)\n   \
    \     }\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := []int{numbers[0]}\n    for _, i := range numbers[1:] {\n      \
    \  result = append(result, delimeter, i)\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // Handle special case of empty input\n    if len(numbers)\
    \ == 0 {\n        return numbers\n    }\n\n    // The first element is never proceeded\
    \ by a delimeter\n    output := []int{numbers[0]}\n\n    // Insert delimeter between\
    \ every two elements of the input\n    for _, num := range numbers[1:] {\n   \
    \     output = append(output, delimeter, num)\n    }\n\n    return output\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    n := len(numbers)\n    if n\
    \ == 0 {\n        return result\n    }\n    for i, x := range numbers {\n    \
    \    result = append(result, x)\n        if i < n - 1 {\n            result =\
    \ append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    interspersed := make([]int, 0)\n    for i, number := range\
    \ numbers {\n        interspersed = append(interspersed, number)\n        if i\
    \ != len(numbers) - 1 {\n            interspersed = append(interspersed, delimeter)\n\
    \        }\n    }\n    return interspersed\n}\n\n//------------------------------------------------------------------------------\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, n := range numbers {\n      \
    \  result = append(result, n)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073395
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ var result []int\n    for i := range numbers {\n        if i != 0 {\n      \
    \      result = append(result, delimeter)\n        }\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073458
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  res := make([]int, 0, len(numbers) * 2 - 1)\n    res = append(res, numbers[0])\n\
    \    for i := 1; i < len(numbers); i++ {\n        res = append(res, delimeter)\n\
    \        res = append(res, numbers[i])\n    }\n    return res\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073459
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var output []int\n    for i, _ := range numbers {\n      \
    \  output = append(output, numbers[i])\n        if i != len(numbers) - 1 {\n \
    \           output = append(output, delimeter)\n        }\n    }\n    return output\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    // make sure that\
    \ output slice has enough capacity\n    output := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        output = append(output,\
    \ numbers[i])\n        output = append(output, delimeter)\n    }\n    output =\
    \ append(output, numbers[len(numbers) - 1])\n    return output\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    if len(numbers) == 1 {\n        return []int{numbers[0]}\n    }\n\n    result\
    \ := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers) - 1;\
    \ i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n\
    \    }\n    result[len(result) - 1] = numbers[len(numbers) - 1]\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    if len(numbers) == 0 {\n        return\
    \ result\n    }\n    for i, num := range numbers {\n        result = append(result,\
    \ num)\n        if i < len(numbers) - 1 {\n            result = append(result,\
    \ delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ ret := make([]int, 0, len(numbers)*2-1)\n    ret = append(ret, numbers[0])\n\
    \    for _, number := range numbers[1:] {\n        ret = append(ret, delimeter,\
    \ number)\n    }\n    return ret\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ interspersed := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers);\
    \ i++ {\n        interspersed[i * 2] = numbers[i]\n        if i < len(numbers)\
    \ - 1 {\n            interspersed[i * 2 + 1] = delimeter\n        }\n    }\n \
    \   return interspersed\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    n := len(numbers)\n    if n > 0 {\n\
    \        result = append(result, numbers[0])\n        for i := 1; i < n; i++ {\n\
    \            result = append(result, delimeter)\n            result = append(result,\
    \ numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    if len(numbers) == 0 {\n        return\
    \ result\n    }\n\n    for i, number := range numbers {\n        result = append(result,\
    \ number)\n        if i != len(numbers) - 1 {\n            result = append(result,\
    \ delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, n := range numbers {\n\
    \        result = append(result, n)\n        if i < len(numbers) - 1 {\n     \
    \       result = append(result, delimeter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073395
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers) * 2 - 1)\n    for i, n\
    \ := range numbers {\n        result[i * 2] = n\n        if i != len(numbers)\
    \ - 1 {\n            result[i * 2 + 1] = delimeter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len\
    \ out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x502980, 0x5490e0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp098wt0tl_test.go:14\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp098wt0tl_test.go:31\
    \ +0x47\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return numbers\n    }\n    var result []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // TODO: Implement me\n    return nil\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpax_5w6hu_test.go:33: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[]'\n    --- FAIL: TestIntersperse/test_num__2\
    \ (0.00s)\n        tmpax_5w6hu_test.go:33: expected '[%!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    length := len(numbers)\n    if length == 0 {\n        return\
    \ numbers\n    }\n    result := make([]int, 2 * length - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < length; i++ {\n        result[2 * i - 1] = delimeter\n  \
    \      result[2 * i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    var interspersed []int\n    for i, e := range numbers {\n        if i !=\
    \ 0 {\n            interspersed = append(interspersed, delimeter)\n        }\n\
    \        interspersed = append(interspersed, e)\n    }\n    return interspersed\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  // Prefix the first element\n    var result = []int{numbers[0]}\n    // Take\
    \ delimeter and the next element from input\n    // and append to the result\n\
    \    for _, n := range numbers[1:] {\n        result = append(result, delimeter,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    length := len(numbers)\n    if length == 0 {\n        return\
    \ numbers\n    }\n\n    result := make([]int, length + (length - 1))\n    result[0]\
    \ = numbers[0]\n    index := 1\n    for i := 1; i < length; i++ {\n        result[index]\
    \ = delimeter\n        index++\n        result[index] = numbers[i]\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, num := range numbers\
    \ {\n        result = append(result, num)\n        if i != len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  output := make([]int, 0, len(numbers) * 2 - 1)\n    output = append(output,\
    \ numbers[0])\n    for _, v := range numbers[1:] {\n        output = append(output,\
    \ delimeter, v)\n    }\n    return output\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    if (len(numbers) == 0) {\n        return\
    \ result\n    }\n    result = append(result, numbers[0])\n    for i := 1; i <\
    \ len(numbers); i++ {\n        result = append(result, delimeter)\n        result\
    \ = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for _, v := range numbers {\n      \
    \  result = append(result, v)\n        if len(result) > 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpfe55gmrw_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8)\
    \ %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    size := len(numbers)\n    if size == 0 {\n        return numbers\n\
    \    }\n\n    result := make([]int, 2 * size - 1)\n    result[0] = numbers[0]\n\
    \    for i := 1; i < size; i++ {\n        j := 2 * i - 1\n        result[j] =\
    \ delimeter\n        result[j + 1] = numbers[i]\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, v := range numbers {\n      \
    \  result = append(result, v)\n        if i < len(numbers) - 1 {\n           \
    \ result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073449
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  var result []int\n    for i := 0; i < len(numbers) - 1; i++ {\n        result\
    \ = append(result, numbers[i])\n        result = append(result, delimeter)\n \
    \   }\n    result = append(result, numbers[len(numbers) - 1])\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n \
    \   out := make([]int, len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        out[i * 2] = numbers[i]\n        out[i * 2 + 1] = delimeter\n\
    \    }\n    out[len(out) - 1] = numbers[len(numbers) - 1]\n    return out\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, 0, len(numbers)*2)\n    for i, number := range numbers\
    \ {\n        if i != 0 {\n            result = append(result, delimeter)\n   \
    \     }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, 0)\n    for i, number := range numbers\
    \ {\n        result = append(result, number)\n        if i < len(numbers) - 1\
    \ {\n            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073446
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n \
    \   for i := 1; i < len(numbers); i++ {\n        result[i * 2 - 1] = delimeter\n\
    \        result[i * 2] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073344
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := []int{numbers[0]}\n    for _, num := range numbers[1:] {\n    \
    \    result = append(result, delimeter, num)\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    // Insert a delimeter between first number and the rest numbers\n\
    \    // Then the problem reduces to insert delimeter between the rest of numbers\n\
    \    if len(numbers) <= 1 {\n        return numbers\n    } else {\n        var\
    \ result []int\n        result = append(result, numbers[0])\n        result =\
    \ append(result, delimeter)\n        rest := intersperse(numbers[1:], delimeter)\n\
    \        result = append(result, rest...)\n        return result\n    }\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073461
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    var result []int\n    for i, number := range numbers {\n \
    \       result = append(result, number)\n        if i != len(numbers) - 1 {\n\
    \            result = append(result, delimeter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073461
