name: HumanEval_121_solution
language: go_test.go
prompt: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
  // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13,\
  \ 24, 321})\n// 0\nfunc solution(lst []int) int {\n"
tests: "func TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3,\
  \ 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}),\
  \ expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     {\
  \ actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
  \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected:\
  \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sum := 0\n    for i, val := range lst {\n        if i % 2 == 0\
    \ && val % 2 != 0 {\n            sum += val\n        }\n    }\n    return sum\n\
    }\n", "    sum := 0\n    for i, n := range lst {\n        if i % 2 == 0 && n %\
    \ 2 != 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n", "  \
    \  // return a list of integers\n    var res int = 0\n    for i, num := range\
    \ lst {\n        if i % 2 == 0 && num % 2 != 0 {\n            res += num\n   \
    \     }\n    }\n    return res\n}\n", "    result := 0\n    for i, v := range\
    \ lst {\n        if i % 2 == 0 && v % 2 != 0 {\n            result += v\n    \
    \    }\n    }\n    return result\n}\n", "    sum := 0\n    for i, n := range lst\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n", "    sum := 0\n    for i, v := range lst {\n   \
    \     if i % 2 == 0 && v % 2 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n", "    var ans int = 0\n    for i, v := range lst {\n   \
    \     if i%2 == 0 && v%2 != 0 {\n            ans += v\n        }\n    }\n    return\
    \ ans\n}\n", "    sum := 0\n    for i, e := range lst {\n        if i%2 == 0 &&\
    \ e%2 != 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n", " \
    \   ans := 0\n    for i := 0; i < len(lst); i += 2 {\n        if lst[i] & 1 ==\
    \ 1 {\n            ans += lst[i]\n        }\n    }\n    return ans\n}\n", "  \
    \  var sum int\n    for i, val := range lst {\n        if i % 2 == 0 && val %\
    \ 2 != 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n", " \
    \   sum := 0\n    for i, num := range lst {\n        if i % 2 == 0 && num % 2\
    \ != 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n", "  \
    \  var sum int = 0\n    for i, v := range lst {\n        if i % 2 == 0 && v %\
    \ 2 != 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n", "  \
    \  var sum int\n    for i, n := range lst {\n        if i % 2 == 0 && n % 2 !=\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n", "    sum\
    \ := 0\n    for i, e := range lst {\n        if (i + 1) % 2 == 0 && e % 2 != 0\
    \ {\n            sum += e\n        }\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    for i, v := range lst {\n        if (i+1)%2 == 0 && v%2 != 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n", "    var sum int\n\
    \    for i, val := range lst {\n        if i % 2 == 0 && val % 2 != 0 {\n    \
    \        sum += val\n        }\n    }\n    return sum\n}\n", "    sum := 0\n \
    \   for i, num := range lst {\n        if i % 2 == 0 && num % 2 != 0 {\n     \
    \       sum += num\n        }\n    }\n    return sum\n}\n", "\tsum := 0\n\tfor\
    \ idx, num := range lst {\n\t\tif (idx + 1) % 2 == 0 && num % 2 != 0 {\n\t\t\t\
    sum += num\n\t\t}\n\t}\n\treturn sum\n}\n", "    // Your code here\n    l := len(lst)\n\
    \    i := 0\n    var result int\n    for i < l {\n        if i % 2 == 0 {\n  \
    \          if lst[i] % 2 != 0 {\n                result += lst[i]\n          \
    \  }\n        }\n        i += 1\n    }\n    return result\n}\n", "    sum := 0\n\
    \    for i, n := range lst {\n        if i % 2 == 0 && n % 2 != 0 {\n        \
    \    sum += n\n        }\n    }\n    return sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
