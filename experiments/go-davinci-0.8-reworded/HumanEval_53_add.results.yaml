language: go_test.go
name: HumanEval_53_add
results:
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    // return x + y\n    return 0\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1),\
    \ expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp1ijxc76w_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp1ijxc76w_test.go:35: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp1ijxc76w_test.go:35: expected '%!s(int=5)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp1ijxc76w_test.go:35: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__4 (0.00s)\n\
    \        tmp1ijxc76w_test.go:35: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    sum := x + y\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1),\
    \ expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    var sum int\n    sum = x + y\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    var result int\n    result = x + y\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0),\
    \ expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual:\
    \ candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    // This is a comment\n    return x + y\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0,\
    \ 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    // Add two numbers\n    return x + y\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0,\
    \ 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    // TODO\n    return x + y\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0, 1),\
    \ expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    //TODO: Your code here\n    return x + y\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0,\
    \ 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    // TODO add the two numbers x and y and return the sum\n\
    \    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0, 1), expected: 1 },\n     { actual: candidate(1,\
    \ 0), expected: 1 },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual:\
    \ candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 5), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    var sum int\n    sum = x + y\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    var sum int = x + y\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0,\
    \ 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1 },\n     { actual:\
    \ candidate(2, 3), expected: 5 },\n     { actual: candidate(5, 7), expected: 12\
    \ },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    var result int = x + y\n    return result\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n\treturn x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073540
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x\
    \ int, y int) int {\n    return x + y\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(0, 1), expected: 1 },\n   \
    \  { actual: candidate(1, 0), expected: 1 },\n     { actual: candidate(2, 3),\
    \ expected: 5 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual:\
    \ candidate(7, 5), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
