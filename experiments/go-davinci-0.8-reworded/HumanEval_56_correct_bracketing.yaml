name: HumanEval_56_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n    \
  \ { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
  <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n\
  \     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
  <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n\
  \     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
  <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
  \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var stack []string\n    for _, bracket := range brackets {\n  \
    \      b := string(bracket)\n        if b == \"<\" {\n            stack = append(stack,\
    \ b)\n        } else if b == \">\" {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n", "    if brackets == \"\"\
    \ {\n        return true\n    }\n    open := 0\n    close := 0\n    for _, b :=\
    \ range brackets {\n        if b == '<' {\n            open++\n        } else\
    \ {\n            close++\n        }\n        if close > open {\n            return\
    \ false\n        }\n    }\n    return open == close\n}\n", "    left := 0\n  \
    \  for _, b := range brackets {\n        if b == '<' {\n            left += 1\n\
    \        } else {\n            if left == 0 {\n                return false\n\
    \            }\n            left -= 1\n        }\n    }\n    return left == 0\n\
    }\n", "    count := 0\n    for _, r := range brackets {\n        if r == '<' {\n\
    \            count += 1\n        } else if r == '>' {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n", "    var stack []byte\n    for _, bracket := range\
    \ brackets {\n        b := byte(bracket)\n        if b == '<' {\n            stack\
    \ = append(stack, b)\n        } else {\n            // b == '>'\n            if\
    \ len(stack) == 0 {\n                return false\n            }\n           \
    \ stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n\
    }\n", "    var stack []string\n    for _, b := range brackets {\n        fmt.Println(string(b))\n\
    \        if b == '<' {\n            stack = append(stack, string(b))\n       \
    \ } else if b == '>' {\n            if len(stack) == 0 {\n                return\
    \ false\n            }\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    return len(stack) == 0\n}\n", "    var count int\n    for _, bracket\
    \ := range brackets {\n        if bracket == '<' {\n            count++\n    \
    \    } else {\n            count--\n        }\n        if count < 0 {\n      \
    \      return false\n        }\n    }\n    return count == 0\n}\n", "    // Fill\
    \ me in\n    return false\n}\n", "    t := 0\n    for _, char := range brackets\
    \ {\n        if char == '<' {\n            t += 1\n        } else {\n        \
    \    t -= 1\n        }\n        if t < 0 {\n            return false\n       \
    \ }\n    }\n    return t == 0\n}\n", "    if brackets == \"\" {\n        return\
    \ true\n    }\n    opening := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            opening += 1\n        } else {\n            opening\
    \ -= 1\n        }\n        if opening < 0 {\n            return false\n      \
    \  }\n    }\n    return opening == 0\n}\n", "    return true\n}\n", "    n :=\
    \ 0\n    for _, x := range brackets {\n        if x == '<' {\n            n +=\
    \ 1\n        } else {\n            n -= 1\n        }\n        if n < 0 {\n   \
    \         return false\n        }\n    }\n    return n == 0\n}\n", "    // insert\
    \ your code here\n    return false\n}\n", "    return false\n}\n", "    sum :=\
    \ 0\n    for _, c := range brackets {\n        switch c {\n        case '<':\n\
    \            sum++\n        case '>':\n            sum--\n        }\n        if\
    \ sum < 0 {\n            return false\n        }\n    }\n    return sum == 0\n\
    }\n", "    if len(brackets) == 0 {\n        return true\n    }\n    if len(brackets)\
    \ == 1 {\n        return false\n    }\n    count := 0\n    for _, bracket := range\
    \ brackets {\n        if bracket == '<' {\n            count++\n        } else\
    \ {\n            count--\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0\n}\n", "    if len(brackets)\
    \ == 0 {\n        return true\n    }\n    counter := 0\n    for _, bracket :=\
    \ range brackets {\n        if string(bracket) == \"<\" {\n            counter++\n\
    \        } else {\n            counter--\n        }\n        if counter < 0 {\n\
    \            return false\n        }\n    }\n    return counter == 0\n}\n", " \
    \   balance := 0\n    for _, bracket := range brackets {\n        if bracket ==\
    \ '<' {\n            balance += 1\n        } else if bracket == '>' {\n      \
    \      balance -= 1\n        }\n        if balance < 0 {\n            return false\n\
    \        }\n    }\n    return balance == 0\n}\n", "    // implementation here\n\
    \    return false\n}\n", "    // Write your code here\n    if brackets == \"\"\
    \ {\n        return true\n    }\n\n    var count int\n    for _, b := range brackets\
    \ {\n        if b == '<' {\n            count += 1\n        } else {\n       \
    \     count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
