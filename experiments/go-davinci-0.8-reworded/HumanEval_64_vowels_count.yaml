name: HumanEval_64_vowels_count
language: go_test.go
prompt: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function vowels_count which takes a string representing\n// a word as\
  \ input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\n"
tests: "func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
  \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
  \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
  keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n    \
  \ { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var count int = 0\n    for _, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    count := 0\n    for _, v := range\
    \ s {\n        switch v {\n        case 'a', 'e', 'i', 'o', 'u':\n           \
    \ count += 1\n        case 'y':\n            if s[len(s)-1] == 'y' {\n       \
    \         count += 1\n            }\n        }\n    }\n    return count\n}\n",
  "\tvowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tc := 0\n\tfor\
    \ _, letter := range s {\n\t\tif string(letter) == \"y\" && len(s) == 1 {\n\t\t\
    \tc++\n\t\t} else if len(s) > 1 && string(letter) == \"y\" && string(s[len(s)-1])\
    \ != \"y\" {\n\t\t\tcontinue\n\t\t} else if (string(letter) == \"y\" && string(s[len(s)-1])\
    \ == \"y\") || contains(vowels, string(letter)) {\n\t\t\tc++\n\t\t}\n\t}\n\treturn\
    \ c\n}\n", "    var count int = 0\n    var vowel string = \"aeiouy\"\n    var\
    \ y bool = false\n    var o []string\n    o = strings.Split(s, \"\")\n    for\
    \ _, x := range o {\n        if strings.Contains(vowel, x) {\n            count++\n\
    \        }\n        if x == \"y\" {\n            y = true\n        }\n    }\n\
    \    if y {\n        count--\n    }\n    return count\n}\n", "    num := 0\n \
    \   for i := 0; i < len(s); i++ {\n        if is_vowel(s[i]) {\n            num\
    \ += 1\n        }\n    }\n    return num\n}\n", "    m := make(map[rune]int)\n\
    \    m['a'] = 1\n    m['e'] = 1\n    m['i'] = 1\n    m['o'] = 1\n    m['u'] =\
    \ 1\n    m['y'] = 1\n    count := 0\n    y_count := 0\n    for _, c := range s\
    \ {\n        if m[c] == 1 {\n            count += 1\n        }\n        if m[c]\
    \ == 1 && c == 'y' {\n            y_count += 1\n        }\n    }\n    if y_count\
    \ > 0 && count > y_count {\n        count -= 1\n    }\n    return count\n}\n",
  "    // To convert a string to lowercase, use\n    // l_s := strings.ToLower(s)\n\
    \    count := 0\n    for _, c := range s {\n        switch c {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            count += 1\n        }\n    }\n    if count\
    \ > 0 && s[len(s)-1] == 'y' {\n        count += 1\n    }\n    return count\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count := 0\n   \
    \ for _, char := range s {\n        char_s := string(char)\n        if char_s\
    \ == \"y\" && count > 0 {\n            continue\n        }\n        for _, vowel\
    \ := range vowels {\n            if char_s == vowel {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n", "    count := 0\n\
    \    for _, char := range s {\n        if is_vowel(char) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "\t// loop through string\n\t// check\
    \ if rune is a vowel\n\t// convert to lowercase\n\t// if count, add one to counter\n\
    \tcount := 0\n\tfor _, r := range s {\n\t\tif r == 'a' || r == 'e' || r == 'i'\
    \ || r == 'o' || r == 'u' || r == 'y' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n\
    }\n", "\t// write your code here\n\treturn 0\n}\n", "    vowels := \"aeiou\"\n\
    \    count := 0\n    for _, c := range s {\n        if vowels[c - 'a'] != 0 {\n\
    \            count++\n        }\n    }\n    if s[len(s) - 1] == 'y' {\n      \
    \  count++\n    }\n    return count\n}\n", "    return 0\n}\n", "    vowels :=\
    \ map[rune]bool{\n        'a': true,\n        'e': true,\n        'i': true,\n\
    \        'o': true,\n        'u': true,\n    }\n    word := []rune(s)\n    count\
    \ := 0\n    for i, letter := range word {\n        if vowels[letter] {\n     \
    \       count++\n        }\n        if i == len(word) - 1 && letter == 'y' {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    vowels :=\
    \ \"aeiou\"\n    count := 0\n    for _, r := range s {\n        r = unicode.ToLower(r)\n\
    \        if strings.Contains(vowels, string(r)) {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    r := make([]rune, len(s))\n    for i, c := range s {\n        r[i]\
    \ = c\n    }\n    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'y'}\n    count :=\
    \ 0\n    for i, c := range r {\n        if string(c) == \"y\" && i == len(r)-1\
    \ {\n            count += 1\n        } else if contains(vowels, c) {\n       \
    \     count += 1\n        }\n    }\n    return count\n}\n", "    vowels := 0\n\
    \    last := \"\"\n    for _, ch := range s {\n        if ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u' {\n            vowels += 1\n        }\n\
    \        last = string(ch)\n    }\n    if last == \"y\" {\n        vowels += 1\n\
    \    }\n    return vowels\n}\n", "    count := 0\n    for _,c := range s {\n \
    \       switch string(c) {\n        case \"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\":\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for i, char := range s {\n        switch char {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n           \
    \ if i == len(s) - 1 {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n", "    n := 0\n    for i := 0; i < len(s); i++ {\n\
    \        switch s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            n++\n\
    \        case 'y':\n            if i == len(s) - 1 {\n                n++\n  \
    \          }\n        }\n    }\n    return n\n}\n", "    // your code here\n \
    \   return 0\n}\n", "    count := 0\n    n := len(s)\n    last := n - 1\n    for\
    \ i, r := range s {\n        switch r {\n        case 'a', 'e', 'i', 'o', 'u':\n\
    \            count++\n        case 'y':\n            if i == last {\n        \
    \        count++\n            }\n        }\n    }\n    return count\n}\n", " \
    \   count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    counter := 0\n    for _, c := range s\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'y' {\n            counter += 1\n        }\n    }\n    return counter\n}\n",
  "    var total int\n    for _, char := range s {\n        if char == 'a' || char\
    \ == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            total++\n\
    \        }\n    }\n    return total\n}\n", "    count := 0\n    if s[len(s)-1]\
    \ == 'y' {\n        count++\n    }\n    for _, v := range s {\n        switch\
    \ v {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    n := 0\n    for i,v := range s {\n      \
    \  if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' || (v == 'y' &&\
    \ i == len(s)-1) {\n            n += 1\n        }\n    }\n    return n\n}\n",
  "    var count int\n    for _, c := range s {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    var count int\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            count++\n        }\n        if s[i] == 'y' && i ==\
    \ len(s)-1 {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   sum := 0\n    for index, char := range s {\n        if char == 'a' || char\
    \ == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            sum++\n \
    \       } else if char == 'y' && index == len(s) - 1 {\n            sum++\n  \
    \      }\n    }\n    return sum\n}\n", "    c := 0\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' {\n            c++\n        }\n    }\n    if s[len(s)-1] == 'y'\
    \ {\n        c++\n    }\n    return c\n}\n", "    n := 0\n    for i := 0; i <\
    \ len(s); i++ {\n        switch s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n\
    \            n++\n        case 'y':\n            if i == len(s) - 1 {\n      \
    \          n++\n            }\n        }\n    }\n    return n\n}\n", "    vowels\
    \ := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"\
    i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var cnt int\n\
    \    for i, c := range s {\n        if _, ok := vowels[string(c)]; ok {\n    \
    \        cnt++\n        }\n        if string(c) == \"y\" && i != len(s)-1 {\n\
    \            cnt--\n        }\n    }\n    return cnt\n}\n", "    counter := 0\n\
    \    var lastChar byte\n    for i := 0; i < len(s); i++ {\n        char := s[i]\n\
    \        switch char {\n        case 'a', 'e', 'i', 'o', 'u':\n            counter++\n\
    \        case 'y':\n            if i == len(s) - 1 {\n                counter++\n\
    \            }\n        }\n        lastChar = char\n    }\n    return counter\n\
    }\n", "    switch len(s) {\n    case 0:\n        return 0\n    case 1:\n     \
    \   if s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] == 'u'\
    \ {\n            return 1\n        } else {\n            return 0\n        }\n\
    \    }\n    return vowels_count(s[1:]) + vowels_count(s[:1])\n}\n", "    r :=\
    \ 0\n    for i, c := range s {\n        isEnd := i == len(s) - 1\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && isEnd))\
    \ {\n            r++\n        }\n    }\n    return r\n}\n", "    count := 0\n\
    \    vowels := map[rune]", "    return 0\n}\n", "    cnt := 0\n    str := []rune(s)\n\
    \    last := len(str) - 1\n    for i, v := range str {\n        switch v {\n \
    \       case 'a', 'e', 'i', 'o', 'u':\n            cnt++\n        case 'y':\n\
    \            if i == last {\n                cnt++\n            }\n        }\n\
    \    }\n    return cnt\n}\n", "    vcount := 0\n    s = strings.ToLower(s)\n \
    \   for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i' || v ==\
    \ 'o' || v == 'u' {\n            vcount += 1\n        }\n    }\n    if len(s)\
    \ > 1 && s[len(s)-1] == 'y' {\n        vcount += 1\n    }\n    return vcount\n\
    }\n", "    var count int = 0\n    var last_is_y bool = false\n    for _, c :=\
    \ range s {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n     \
    \       count += 1\n            last_is_y = false\n        case 'y':\n       \
    \     if !last_is_y {\n                count += 1\n                last_is_y =\
    \ true\n            }\n        }\n    }\n    return count\n}\n", "    total_vowels\
    \ := 0\n    for idx, ch := range s {\n        if idx == len(s) - 1 && ch == 'y'\
    \ {\n            total_vowels += 1\n        } else if ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u' {\n            total_vowels += 1\n     \
    \   }\n    }\n    return total_vowels\n}\n", "    s = strings.ToLower(s)\n   \
    \ c := 0\n    l := len(s)\n    for i, r := range s {\n        if (r == 'a' ||\
    \ r == 'e' || r == 'i' || r == 'o' || r == 'u') {\n            c += 1\n      \
    \  }\n        if (r == 'y' && i != l-1) {\n            c += 1\n        }\n   \
    \ }\n    return c\n}\n", "    vowels := \"aeiou\"\n    count := 0\n    for _,\
    \ c := range s {\n        if c == 'y' && len(s) == 1 {\n            count += 1\n\
    \        } else if c == 'y' && len(s) != 1 {\n            continue\n        }\n\
    \        for _, v := range vowels {\n            if c == v {\n               \
    \ count += 1\n            }\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n   \
    \ for _, c := range s {\n        _, ok := vowels[strings.ToLower(string(c))]\n\
    \        if ok {\n            count += 1\n        }\n    }\n    if strings.HasSuffix(s,\
    \ \"y\") {\n        count += 1\n    }\n    return count\n}\n", "    return 0\n\
    }\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n       \
    \     count += 1\n        }\n    }\n    return count\n}\n", "    vowelCount :=\
    \ 0\n    for _, letter := range s {\n        switch letter {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            vowelCount++\n        case 'y':\n         \
    \   if len(s) == 1 {\n                vowelCount++\n            } else if s[1]\
    \ == 'y' {\n                vowelCount++\n            }\n        }\n    }\n  \
    \  return vowelCount\n}\n", "    vowels := 0\n    if(len(s) > 0) {\n        l\
    \ := s[len(s)-1:]\n        if(l == \"a\" || l == \"e\" || l == \"i\" || l == \"\
    o\" || l == \"u\" || l == \"y\") {\n            vowels++\n        }\n        vowels\
    \ += vowels_count(s[:len(s)-1])\n    }\n    return vowels\n}\n", "    var count\
    \ int\n    l := len(s)\n    for i := 0; i < l; i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n        if s[i] == 'y' && i < l - 1 {\n            continue\n    \
    \    }\n        if s[i] == 'y' && i == l - 1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for _, c := range s {\n \
    \       switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n\
    \        case 'y':\n            if len(s) > 0 && s[len(s)-1] == 'y' {\n      \
    \          count++\n            }\n        }\n    }\n    return count\n}\n", " \
    \   // Your code here\n    return 0\n}\n", "    num := 0\n    for _, c := range\
    \ s {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n           \
    \ num++\n        case 'y':\n            if c == s[len(s)-1] {\n              \
    \  num++\n            }\n        }\n    }\n    return num\n}\n", "    sum := 0\n\
    \    for i, c := range s {\n        isLastChar := i == len(s) - 1\n        if\
    \ isLastChar && string(c) == \"y\" {\n            sum++\n        }\n        if\
    \ string(c) == \"a\" || string(c) == \"e\" || string(c) == \"i\" || string(c)\
    \ == \"o\" || string(c) == \"u\" {\n            sum++\n        }\n    }\n    return\
    \ sum\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, vowel := range vowels {\n        count += strings.Count(s,\
    \ vowel)\n    }\n    return count\n}\n", "    return len(regexp.MustCompile(\"\
    [aeiouy]\").FindAllString(s, -1))\n}\n", "    var count int = 0\n    for i, c\
    \ := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' {\n            count += 1\n        } else if c == 'y' && i == len(s) - 1\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n", "    vowel_count\
    \ := 0\n    for i, ch := range s {\n        if ch == 'a' || ch == 'e' || ch ==\
    \ 'i' || ch == 'o' || ch == 'u' {\n            vowel_count++\n        }\n    \
    \    if ch == 'y' && i == len(s)-1 {\n            vowel_count++\n        }\n \
    \   }\n    return vowel_count\n}\n", "    // your code here\n    return 0\n}\n",
  "    counter := 0\n    for _, r := range s {\n        switch r {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            counter += 1\n        case 'y':\n         \
    \   if r == s[len(s)-1] {\n                counter += 1\n            }\n     \
    \   }\n    }\n    return counter\n}\n", "    res := 0\n    for i, c := range s\
    \ {\n        if isVowel(c) {\n            res++\n        }\n        if i == len(s)\
    \ - 1 && c == 'y' {\n            res++\n        }\n    }\n    return res\n}\n",
  "    // your code here\n    return 0\n}\n", "    vowelCounter := 0\n    for _, char\
    \ := range s {\n        if char == 'a' || char == 'e' || char == 'i' || char ==\
    \ 'o' || char == 'u' {\n            vowelCounter++\n        }\n    }\n    return\
    \ vowelCounter\n}\n", "    count := 0\n    for _, c := range s {\n        if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n\
    \        }\n    }\n    last_char := s[len(s)-1]\n    if last_char == 'y' {\n \
    \       count++\n    }\n    return count\n}\n", "    var count int = 0\n    for\
    \ i := 0; i < len(s); i++ {\n        switch s[i] {\n        case 'a', 'e', 'i',\
    \ 'o', 'u':\n            count += 1\n        case 'y':\n            if i == len(s)\
    \ - 1 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    return 0\n}\n", "    // Your code here\n    var i, v_count\
    \ int = 0, 0\n    var vowels [5]byte = [5]byte{'a', 'e', 'i', 'o', 'u'}\n    for\
    \ i=0; i<len(s); i++ {\n        if s[i] == 'y' && i != len(s)-1 {\n          \
    \  continue\n        }\n        for _, val := range vowels {\n            if s[i]\
    \ == val {\n                v_count++\n                break\n            }\n\
    \        }\n    }\n    return v_count\n}\n", "    count := 0\n    for _, c :=\
    \ range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ {\n            count++\n        }\n    }\n    l := len(s)\n    if s[l-1] ==\
    \ 'y' {\n        count++\n    }\n    return count\n}\n", "    var count int\n\
    \    for i, ch := range s {\n        ch := string(ch)\n        if ch == \"a\"\
    \ || ch == \"e\" || ch == \"i\" || ch == \"o\" || ch == \"u\" {\n            count++\n\
    \        } else if i == len(s) - 1 && ch == \"y\" {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    var vowels []string = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    count := 0\n    for _, c := range\
    \ s {\n        for _, vowel := range vowels {\n            if string(c) == vowel\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n", "    // Your code here\n    // return 0\n    count := 0\n    char := 0\n\
    \    new_s := []rune(s)\n    for i, v := range s {\n        if i == len(s) - 1\
    \ {\n            char = v\n        }\n        if v == 'a' || v == 'e' || v ==\
    \ 'i' || v == 'o' || v == 'u' {\n            count++\n        }\n    }\n    if\
    \ char == 'y' {\n        count++\n    }\n    return count\n}\n", "    count :=\
    \ 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"\
    u\": 1, \"y\": 1}\n    for _, c := range s {\n        if _, ok := vowels[string(c)];\
    \ ok {\n            count += 1\n        }\n    }\n    return count\n}\n", "  \
    \  count := 0\n    last := len(s) - 1\n    for i, ch := range s {\n        if\
    \ ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n          \
    \  count++\n        }\n        if ch == 'y' && i == last {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    cnt := 0\n    vowels := map[rune]int\
    \ {\n        'a': 0,\n        'e': 0,\n        'i': 0,\n        'o': 0,\n    \
    \    'u': 0,\n        'y': 0,\n    }\n    for _, r := range s {\n        if _,\
    \ ok := vowels[r]; ok {\n            cnt += 1\n        }\n    }\n    return cnt\n\
    }\n", "    count := 0\n    for _, c := range s {\n        switch c {\n       \
    \ case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n    \
    \        if len(s) - 1 == int(c) {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n", "    vowelCount := 0\n    for _, c :=\
    \ range s {\n        lower := string(c)\n        if c >= 'A' && c <= 'Z' {\n \
    \           lower = string(c + 'a' - 'A')\n        }\n        if lower == \"a\"\
    \ || lower == \"e\" || lower == \"i\" || lower == \"o\" || lower == \"u\" {\n\
    \            vowelCount += 1\n        }\n    }\n    return vowelCount\n}\n", " \
    \   count := 0\n    for i, _ := range s {\n        if s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n      \
    \  }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n   \
    \ c := 0\n    for i, c := range s {\n        if (vowels[string(c)]) {\n      \
    \      c++\n        }\n        if (string(c) == \"y\" && i == len(s) - 1) {\n\
    \            c++\n        }\n    }\n    return c\n}\n", "    count := 0\n    y_flag\
    \ := false\n    vowels := map[string]bool{\"a\": true, \"e\": true, \"i\": true,\
    \ \"o\": true, \"u\": true}\n    for _, r := range s {\n        switch r {\n \
    \       case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            y_flag = true\n        }\n    }\n    if y_flag {\n        count++\n\
    \    }\n    return count\n}\n", "    fmt.Println(s)\n    v, y := 0, false\n  \
    \  for _, c := range s {\n        switch c {\n        case 'a', 'e', 'i', 'o',\
    \ 'u':\n            v++\n        case 'y':\n            y = true\n        }\n\
    \    }\n    if y {\n        v++\n    }\n    return v\n}\n", "    var n int\n \
    \   for _, ch := range s {\n        ch = ch | 32\n        if ch == 'a' || ch ==\
    \ 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n            n++\n        }\n \
    \   }\n    if s[len(s)-1] == 'y' {\n        n++\n    }\n    return n\n}\n", " \
    \   str := []rune(s)\n    n := len(str)\n    if n == 0 {\n        return 0\n \
    \   }\n    if str[n-1] == 'y' {\n        n--\n    }\n    v := []rune{'a', 'e',\
    \ 'i', 'o', 'u'}\n    count := 0\n    for i := 0; i < n; i++ {\n        for _,\
    \ v1 := range v {\n            if str[i] == v1 {\n                count++\n  \
    \              break\n            }\n        }\n    }\n    return count\n}\n",
  "    var count int = 0\n    for i, _ := range s {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n", "    v := 0\n    i := 0\n    for i < len(s) {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       v++\n        }\n        i++\n    }\n    if s[len(s)-1] == 'y' {\n    \
    \    v++\n    }\n    return v\n}\n", "    count := 0\n    for _, v := range s\
    \ {\n        switch v {\n        case 'a', 'e', 'i', 'o', 'u':\n            count\
    \ += 1\n        case 'y':\n            // y is a vowel at the end of the string\n\
    \            if v == s[len(s)-1] {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    v := 0\n\
    \    for i, r := range s {\n        // NOTE: check if the character is a vowel.\n\
    \        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n     \
    \       v++\n        }\n        // NOTE: check if the character is a 'y' and it\
    \ is the last letter.\n        if r == 'y' && i == len(s)-1 {\n            v++\n\
    \        }\n    }\n    return v\n}\n", "\tvar i int\n\tfor _, x := range s {\n\
    \t\tif x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y' {\n\
    \t\t\ti++\n\t\t}\n\t}\n\treturn i\n}\n", "    counter := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' {\n            counter++\n        }\n    }\n    if s[len(s)-1]\
    \ == 'y' {\n        counter++\n    }\n    return counter\n}\n", "    var count\
    \ int\n    for _, v := range s {\n        switch v {\n        case 'a', 'e', 'i',\
    \ 'o', 'u':\n            count++\n        case 'y':\n            if v == s[len(s)-1]\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    n := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            n++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        n++\n    }\n    return\
    \ n\n}\n", "    vowels := \"aeiou\"\n    c := 0\n    for _, c1 := range s {\n\
    \        c1 = unicode.ToLower(c1)\n        for _, c2 := range vowels {\n     \
    \       if c1 == c2 {\n                c++\n            }\n        }\n    }\n\
    \    return c\n}\n", "    vowels := \"aeiouy\"\n    counts := 0\n    for _, c\
    \ := range s {\n        if strings.Index(vowels, strings.ToLower(string(c))) !=\
    \ -1 {\n            counts += 1\n        }\n    }\n    return counts\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    numVowels := 0\n\
    \    for _, char := range s {\n        for _, vowel := range vowels {\n      \
    \      if string(char) == vowel {\n                numVowels += 1\n          \
    \  }\n        }\n    }\n    return numVowels\n}\n", "    count := 0\n    end :=\
    \ false\n    for _, char := range s {\n        switch char {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n           \
    \ if end {\n                count += 1\n            }\n        default:\n    \
    \        end = true\n        }\n    }\n    return count\n}\n", "    count := 0\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n        }\n   \
    \ }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n}\n",
  "    var count int\n    for _, v := range s {\n        if v == 'a' || v == 'e' ||\
    \ v == 'i' || v == 'o' || v == 'u' || v == 'y' {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    sum := 0\n    for i, c := range s {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c ==\
    \ 'y' && i == len(s)-1) {\n            sum++\n        }\n    }\n    return sum\n\
    }\n", "    // return the number of vowels in the string\n    return 0\n}\n", " \
    \   // http://en.wikipedia.org/wiki/Vowel\n    // http://en.wikipedia.org/wiki/Semivowel\n\
    \    var count int = 0\n    for _, char := range s {\n        switch char {\n\
    \        case 'a', 'e', 'i', 'o', 'u', 'y':\n            count += 1\n        }\n\
    \    }\n    return count\n}\n", "    var v int\n    last := len(s) - 1\n    for\
    \ i, c := range s {\n        if i == last && c == 'y' {\n            v++\n   \
    \     } else if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           v++\n        }\n    }\n    return v\n}\n", "    // your code here\n\
    \    return -1\n}\n", "    var count int\n    for _, letter := range s {\n   \
    \     switch letter {\n        case 'a', 'e', 'i', 'o', 'u':\n            count\
    \ += 1\n        case 'y':\n            if len(s) > 1 && s[len(s)-1] == 'y' {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n", "    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            cnt\
    \ += 1\n        }\n    }\n    return cnt\n}\n", "    var vowls = \"aeiouy\"\n\
    \    var cnt = 0\n    var pos = 0\n    for _, ch := range s {\n        if pos\
    \ = strings.Index(vowls, ch); pos == -1 {\n            continue\n        }\n \
    \       cnt++\n    }\n    return cnt\n}\n", "    is_vowel := func(c byte) bool\
    \ {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u', 'y':\n        \
    \    return true\n        }\n        return false\n    }\n\n    s_bytes := []byte(s)\n\
    \    total := 0\n    for i, c := range s_bytes {\n        if is_vowel(c) {\n \
    \           if i == len(s_bytes) - 1 {\n                total += 1\n         \
    \   } else if !is_vowel(s_bytes[i + 1]) {\n                total += 1\n      \
    \      }\n        }\n    }\n    return total\n}\n", "    // TODO\n    return -1\n\
    }\n", "    var vowels = \"aeiou\"\n    var count int\n    for _, c := range s\
    \ {\n        if string(c) == \"y\" && count > 0 {\n            count++\n     \
    \   } else if strings.Contains(vowels, string(c)) {\n            count++\n   \
    \     }\n    }\n    return count\n}\n", "    count := 0\n    vowels := map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for _, v := range s {\n\
    \        if _, ok := vowels[v]; ok {\n            count++\n        }\n    }\n\
    \    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n}\n",
  "    vowel_count := 0\n    for i, v := range s {\n        if v == 'a' || v == 'e'\
    \ || v == 'i' || v == 'o' || v == 'u' {\n            vowel_count++\n        }\
    \ else if v == 'y' && i == len(s)-1 {\n            vowel_count++\n        }\n\
    \    }\n    return vowel_count\n}\n", "    v := []rune(\"aeiouy\")\n    count\
    \ := 0\n    for _, r := range s {\n        for _, k := range v {\n           \
    \ if r == k {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var (\n        vowels = map[rune]int{\n            'a': 0,\n\
    \            'e': 0,\n            'i': 0,\n            'o': 0,\n            'u':\
    \ 0,\n            'y': 0,\n        }\n        count int\n    )\n    for _, v :=\
    \ range s {\n        if _, ok := vowels[v]; ok {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    var vowels = map[string]bool{\n    \
    \    \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\":\
    \ true,\n        \"u\": true,\n    }\n    r := []rune(s)\n    length := len(r)\n\
    \    var i int\n    count := 0\n    for i = 0; i < length; i++ {\n        if _,\
    \ ok := vowels[string(r[i])]; ok {\n            count++\n        }\n    }\n  \
    \  if string(r[length-1]) == \"y\" {\n        count++\n    }\n    return count\n\
    }\n", "    return 0\n}\n", "    // YOUR CODE HERE\n    n := 0\n    for i, c :=\
    \ range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n        (c == 'y' && i == len(s)-1) {\n            n += 1\n        }\n \
    \   }\n    return n\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    count := 0\n    for _, char := range s {\n        if (contains(vowels,\
    \ string(char))) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var r int\n    l := len(s)\n    if l < 1 {\n        return 0\n    }\n\
    \    b := []byte(s)\n    for i, v := range(b) {\n        if i == l - 1 && v ==\
    \ 'y' {\n            r++\n        } else if v == 'a' || v == 'e' || v == 'i' ||\
    \ v == 'o' || v == 'u' {\n            r++\n        }\n    }\n    return r\n}\n",
  "    count := 0\n    for i, char := range s {\n        if i == len(s) - 1 && char\
    \ == 'y' {\n            count++\n        } else if char == 'a' || char == 'e'\
    \ || char == 'i' || char == 'o' || char == 'u' {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    var sum int\n    for _, c := range s\
    \ {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            sum++\n\
    \        case 'y':\n            if len(s) == 1 || s[1] != 'y' {\n            \
    \    sum++\n            }\n        }\n    }\n    return sum\n}\n", "    c := 0\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            c += 1\n        }\n    }\n\
    \    return c\n}\n", "    vowel_count := 0\n    for _, char := range s {\n   \
    \     switch {\n        case char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u':\n            vowel_count++\n        case char == 'y'\
    \ && len(s) > 1 && string(s[len(s)-1]) == \"y\":\n            vowel_count++\n\
    \        }\n    }\n    return vowel_count\n}\n", "    var count int\n    len :=\
    \ len(s)\n    for i := 0; i < len; i++ {\n        ch := s[i]\n        if ch ==\
    \ 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n            count\
    \ += 1\n        } else if ch == 'y' && i == len - 1 {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for i, c :=\
    \ range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n           (c == 'y' && i == len(s)-1) {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    vowels := \"aeiouy\"\n    n := 0\n    for\
    \ _,v := range s {\n        if vowels[v] != 0 {\n            n++\n        }\n\
    \    }\n    return n\n}\n", "    vowels := \"aeiouy\"\n    count := 0\n    for\
    \ _, v := range s {\n        if (vowels[0] == v || vowels[1] == v || vowels[2]\
    \ == v || vowels[3] == v || vowels[4] == v || vowels[5] == v) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    var count int\n    n := len(s)\n    for i, c := range s {\n  \
    \      if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n       \
    \     count++\n        }\n        if c == 'y' && i == n-1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if i == len(s) - 1 && (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            count++\n        } else if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    ret := 0\n    for _, v := range s {\n        // fmt.Println(v)\n\
    \        for _, r := range vowels {\n            if string(v) == r {\n       \
    \         ret += 1\n            }\n        }\n    }\n    return ret\n}\n", " \
    \   // YOUR CODE HERE\n    return 0\n}\n", "    var count int\n    s = strings.ToLower(s)\n\
    \    for i, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            count++\n        } else if c == 'y' && i == len(s)-1\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    // TODO:\
    \ Implement vowels_count\n    return -1\n}\n", "    count := 0\n    for i, r :=\
    \ range s {\n        // ignore case\n        if r == 'a' || r == 'A' || r == 'e'\
    \ || r == 'E' || r == 'i' || r == 'I' || r == 'o' || r == 'O' || r == 'u' || r\
    \ == 'U' {\n            if r == 'y' || r == 'Y' {\n                if i == len(s)\
    \ - 1 {\n                    count += 1\n                }\n            } else\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n", "    n := 0\n    switch len(s) {\n    case 0:\n        break\n    case 1:\n\
    \        if s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] ==\
    \ 'u' {\n            n = 1\n        }\n    default:\n        for i, v := range\
    \ s {\n            switch v {\n            case 'a', 'e', 'i', 'o', 'u':\n   \
    \             n++\n            case 'y':\n                if i == len(s)-1 {\n\
    \                    n++\n                }\n            }\n        }\n    }\n\
    \    return n\n}\n", "    var (\n        vowels = []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n        count int\n    )\n    for _, x := range s {\n       \
    \ for _, y := range vowels {\n            if x == rune(y[0]) {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n", "   \
    \ // YOUR CODE HERE\n    return 0\n}\n", "    vowels := \"aeiouy\"\n    counter\
    \ := 0\n    for _, ch := range s {\n        for _, v := range vowels {\n     \
    \       if ch == v {\n                counter++\n            }\n        }\n  \
    \  }\n    return counter\n}\n", "    n := 0\n    for i := 0; i < len(s); i++ {\n\
    \        c := s[i]\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y' && i == len(s)-1 {\n            n += 1\n        }\n   \
    \ }\n    return n\n}\n", "    return -1\n}\n", "    // Count the vowels in s.\n\
    \    var counter int = 0\n    for _, c := range s {\n        if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            counter++\n      \
    \  }\n    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        counter++\n  \
    \  }\n    return counter\n}\n", "    n := 0\n    for i, _ := range s {\n     \
    \   switch s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            n++\n  \
    \      case 'y':\n            if i == len(s)-1 {\n                n++\n      \
    \      }\n        }\n    }\n    return n\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    return 0\n}\n", "    result := 0\n    for i, c := range\
    \ s {\n        if i != len(s) - 1 && (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            result++\n        } else if i == len(s) - 1\
    \ && (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n\
    \            result++\n        }\n    }\n    return result\n}\n", "    num :=\
    \ 0\n    for _, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            num += 1\n        }\n    }\n    return num\n\
    }\n", "    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, i := range s {\n        if _, ok := vowels[i]; ok {\n     \
    \       count += 1\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count\
    \ += 1\n    }\n    return count\n}\n", "    counter := 0\n    for _, char := range\
    \ s {\n        lower := char\n        if (char >= 'A' && char <= 'Z') {\n    \
    \        lower = char + 32\n        }\n        if (lower == 'a' || lower == 'e'\
    \ || lower == 'i' || lower == 'o' || lower == 'u') {\n            counter++\n\
    \        }\n    }\n    if (s[len(s) - 1] == 'y') {\n        counter++\n    }\n\
    \    return counter\n}\n", "    vowel_count := 0\n    for _, char := range s {\n\
    \        switch char {\n        case 'a', 'e', 'i', 'o', 'u':\n            vowel_count++\n\
    \        case 'y':\n            if len(s) == 1 {\n                vowel_count++\n\
    \            }\n        }\n    }\n    return vowel_count\n}\n", "    var vowels\
    \ = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    var count int = 0\n\
    \    for _,v := range s {\n        if v == 'y' && count > 0 {\n            continue\n\
    \        }\n        for _, vv := range vowels {\n            if string(v) == vv\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, v := range s {\n        if i == len(s) - 1 &&\
    \ v == 'y' {\n            count++\n        } else if v == 'a' || v == 'e' || v\
    \ == 'i' || v == 'o' || v == 'u' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    var v map[rune]bool = map[rune]bool{\n        'a':\
    \ true,\n        'e': true,\n        'i': true,\n        'o': true,\n        'u':\
    \ true,\n    }\n    var count int = 0\n    for i, w := range s {\n        if v[w]\
    \ {\n            count += 1\n        }\n        if w == 'y' && i == len(s)-1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n", "    ret :=\
    \ 0\n    for i, v := range s {\n        // \u8F93\u5165\u5B57\u7B26\u4E32\u5305\
    \u542B\u5927\u5199\u5B57\u6BCD\n        v = v | 32\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' {\n            ret++\n        }\n  \
    \      // \u5143\u97F3\u5B57\u6BCD\u53EA\u6709\u5728\u5355\u8BCD\u7684\u672B\u5C3E\
    \u624D\u7B97\n        if v == 'y' && i < len(s) - 1 {\n            return ret\n\
    \        }\n    }\n    return ret\n}\n", "    s = s + \" \"\n    vowels := \"\
    aeiouy\"\n    cnt := 0\n    prev := \"\"\n    for _, ch := range s {\n       \
    \ if prev == \"y\" && vowels_count(\"\" + string(ch)) == 0 {\n            cnt\
    \ += 1\n        }\n        for _, v := range vowels {\n            if ch == v\
    \ {\n                cnt += 1\n            }\n        }\n        prev = \"\" +\
    \ string(ch)\n    }\n    return cnt\n}\n", "    vowelSet := map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true, 'y': true}\n    count := 0\n\
    \    for _, v := range s {\n        _, ok := vowelSet[v]\n        if ok {\n  \
    \          count++\n        }\n    }\n    if len(s) >= 2 && s[len(s)-1] == 'y'\
    \ && s[len(s)-2] != 'a' && s[len(s)-2] != 'e' && s[len(s)-2] != 'i' && s[len(s)-2]\
    \ != 'o' && s[len(s)-2] != 'u' {\n        count--\n    }\n    return count\n}\n",
  "    return 0\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n   \
    \     \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\"\
    : true,\n    }\n    count := 0\n    for _, char := range s {\n        if _, ok\
    \ := vowels[string(char)]; ok {\n            count++\n        }\n    }\n    if\
    \ s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n}\n", "    c\
    \ := 0\n    l := len(s)\n    for i := 0; i < l; i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            c++\n\
    \        }\n        if s[i] == 'y' && i < l - 1 {\n            continue\n    \
    \    }\n        if s[i] == 'y' && i == l - 1 {\n            c++\n        }\n \
    \   }\n    return c\n}\n", "\tif len(s) < 1 {\n\t\treturn 0\n\t}\n\tif len(s)\
    \ < 2 {\n\t\tif s == \"a\" || s == \"e\" || s == \"i\" || s == \"o\" || s == \"\
    u\" {\n\t\t\treturn 1\n\t\t}\n\t\treturn 0\n\t}\n\tvar count int\n\tif s[len(s)-1]\
    \ == 'a' || s[len(s)-1] == 'e' || s[len(s)-1] == 'i' || s[len(s)-1] == 'o' ||\
    \ s[len(s)-1] == 'u' {\n\t\tcount++\n\t}\n\tif s[len(s)-2] == 'a' || s[len(s)-2]\
    \ == 'e' || s[len(s)-2] == 'i' || s[len(s)-2] == 'o' || s[len(s)-2] == 'u' {\n\
    \t\tcount++\n\t}\n\treturn count + vowels_count(s[:len(s)-1])\n}\n", "    var\
    \ count int = 0\n    var vowels map[rune]int = map[rune]int{\n        'a': 1,\n\
    \        'e': 1,\n        'i': 1,\n        'o': 1,\n        'u': 1,\n        'y':\
    \ 1,\n    }\n    for _, ch := range s {\n        count += vowels[ch]\n    }\n\
    \    // In case of y as the last char, it is a vowel only if it is\n    // part\
    \ of the word.\n    if count > 0 && s[len(s)-1] == 'y' {\n        count -= 1\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i, _ := range s {\n \
    \       switch s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n\
    \        case 'y':\n            if i == len(s)-1 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    var vc int = 0\n\
    \    var vcount int = 0\n    var letters = [5]string {\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    if string(s[len(s)-1]) == \"y\" {\n        vc = 1\n    }\n  \
    \  for i := 0; i < len(s); i++ {\n        for j := 0; j < len(letters); j++ {\n\
    \            if string(s[i]) == letters[j] {\n                vcount++\n     \
    \       }\n        }\n    }\n    return vcount + vc\n}\n", "    s = strings.ToLower(s)\n\
    \    count := 0\n    for i, c := range s {\n        if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n       \
    \ if i == len(s) - 1 && c == 'y' {\n            count++\n        }\n    }\n  \
    \  return count\n}\n", "    count := 0\n    for _, v := range s {\n        v :=\
    \ string(v)\n        if v == \"a\" || v == \"e\" || v == \"i\" || v == \"o\" ||\
    \ v == \"u\" {\n            count++\n        }\n    }\n    if s[len(s)-1:] ==\
    \ \"y\" {\n        count++\n    }\n    return count\n}\n", "    result := 0\n\
    \    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n   \
    \ var i int\n    for i = 0; i < len(s); i++ {\n        c := string(s[i])\n   \
    \     if vowels[c] {\n            result++\n        }\n    }\n    if i > 1 &&\
    \ string(s[i-1]) == \"y\" {\n        result++\n    }\n    return result\n}\n",
  "    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n        if\
    \ string(c) == \"y\" && len(s) > 1 && s[len(s)-1] == 'y' {\n            count++\n\
    \        } else if strings.Contains(vowels, string(c)) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u') ||\n           (s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++\n        }\n    }\n\
    \    if (s[len(s)-1] == 'y' || s[len(s)-1] == 'Y') && (s[len(s)-2] != 'a' && s[len(s)-2]\
    \ != 'e' && s[len(s)-2] != 'i' && s[len(s)-2] != 'o' && s[len(s)-2] != 'u') {\n\
    \        count++\n    }\n    return count\n}\n", "    var count int = 0\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n        }\n    }\n\
    \    if len(s) > 0 && s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n", "    c := 0\n    for i, r := range s {\n        switch r {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            c++\n        case 'y':\n   \
    \         if i < len(s)-1 {\n                c++\n            }\n        }\n \
    \   }\n    return c\n}\n", "    return 0\n}\n", "    var count int\n    var last\
    \ rune\n    for _, c := range s {\n        switch c {\n        case 'a', 'e',\
    \ 'i', 'o', 'u':\n            count++\n        case 'y':\n            if last\
    \ == 0 {\n                count++\n            }\n        }\n        last = c\n\
    \    }\n    return count\n}\n", "    // Your code here\n    return 0\n}\n", " \
    \   count := 0\n    for i, v := range s {\n        if v == 'a' || v == 'e' ||\
    \ v == 'i' || v == 'o' || v == 'u' ||\n            (v == 'y' && i == len(s)-1)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n", "    cnt\
    \ := 0\n    for _, c := range s {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            cnt += 1\n        }\n    }\n    return\
    \ cnt\n}\n", "    var vowels, count int = 0, 0\n    for _, r := range s {\n  \
    \      if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n       \
    \     vowels++\n        }\n        if r == 'y' && count == len(s)-1 {\n      \
    \      vowels++\n        }\n        count++\n    }\n    return vowels\n}\n", " \
    \   vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n        \"\
    i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n    }\n    for\
    \ _, char := range s {\n        //fmt.Println(string(char))\n        if _, ok\
    \ := vowels[string(char)]; ok {\n            vowels[string(char)] += 1\n     \
    \   }\n    }\n    //fmt.Println(vowels)\n    if vowels[\"y\"] > 0 && (vowels[\"\
    y\"] == 1 && s[len(s)-1:] == \"y\") {\n        vowels[\"y\"] = 0\n    }\n    return\
    \ vowels[\"a\"] + vowels[\"e\"] + vowels[\"i\"] + vowels[\"o\"] + vowels[\"u\"\
    ] + vowels[\"y\"]\n}\n", "    var vowels int\n    vowels_map := map[rune]", " \
    \   vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n        \"\
    i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n    }\n    for\
    \ _, char := range s {\n        if _, ok := vowels[string(char)]; ok {\n     \
    \       vowels[string(char)] += 1\n        }\n    }\n    if vowels[\"y\"] > 0\
    \ && string(s[len(s)-1]) != \"y\" {\n        vowels[\"y\"] = 0\n    }\n    count\
    \ := 0\n    for _, value := range vowels {\n        count += value\n    }\n  \
    \  return count\n}\n", "    var num int\n    for i := 0; i < len(s); i++ {\n \
    \       if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            num++\n        }\n        if s[i] == 'y' && i == len(s)-1\
    \ {\n            num++\n        }\n    }\n    return num\n}\n", "    count :=\
    \ 0\n    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u':\
    \ true}\n    last := rune(s[len(s)-1])\n    if vowels[last] {\n        count +=\
    \ 1\n    }\n    for _, c := range s {\n        if vowels[c] {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    return 0\n}\n", "    var\
    \ count int\n    count = 0\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n   \
    \     }\n    }\n    last := s[len(s)-1]\n    if (last == 'y') {\n        count\
    \ += 1\n    }\n    return count\n}\n", "    var count int = 0\n    var last bool\
    \ = false\n    var is_vowel = func(c byte) bool {\n        return c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u'\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        if is_vowel(s[i]) {\n            count++\n            last =\
    \ true\n        } else {\n            last = false\n        }\n    }\n    if !last\
    \ {\n        count--\n    }\n    return count\n}\n", "    // Your code here\n\
    \    return 0\n}\n", "    count := 0\n    for i, c := range s {\n        if c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n",
  "    res := 0\n    for _, value := range s {\n        if \"aeiouyAEIOUY\" == fmt.Sprintf(\"\
    %c\", value) {\n            res++\n        }\n    }\n    return res\n}\n", " \
    \   count := 0\n    vowels := map[string]bool{\n        \"a\": true,\n       \
    \ \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    for i, c := range s {\n        if v, ok := vowels[string(c)]; ok &&\
    \ v {\n            count += 1\n        } else if string(c) == \"y\" && i == len(s)-1\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n", "    n\
    \ := 0\n    for i := 0; i < len(s); i++ {\n        if isVowel(s[i]) {\n      \
    \      n++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        n++\n    }\n\
    \    return n\n}\n", "    var num int\n    for _, c := range s {\n        switch\
    \ c {\n        case 'a', 'e', 'i', 'o', 'u':\n            num++\n        case\
    \ 'y':\n            if s[len(s)-1] == 'y' {\n                num++\n         \
    \   }\n        }\n    }\n    return num\n}\n", "    // Write your code here\n\
    \    //return 0\n    var n int\n    f := func(r rune) bool {\n        if r ==\
    \ 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            n++\n   \
    \     }\n        return false\n    }\n    n = 0\n    for _, rune := range s {\n\
    \        f(rune)\n    }\n    return n\n}\n", "    // solution for vowels_count\n\
    \    return 0\n}\n", "    count := 0\n    for i, _ := range s {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n    \
    \    case 'y':\n            if i == len(s) - 1 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n", "    var ret int\n \
    \   for _, v := range s {\n        switch v {\n        case 'a', 'e', 'i', 'o',\
    \ 'u':\n            ret++\n        case 'y':\n            if len(s) == 1 || len(s)\
    \ == string(s[1:]).Index(s[0]) + 1 {\n                ret++\n            }\n \
    \       }\n    }\n    return ret\n}\n", "    letters := []rune(s)\n    count :=\
    \ 0\n    for i, c := range letters {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n            count += 1\n        } else if c ==\
    \ 'y' && i == len(letters) - 1 {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n \
    \       v := s[i]\n        switch v {\n        case 'a', 'e', 'i', 'o', 'u':\n\
    \            count++\n        case 'y':\n            if i != len(s) - 1 {\n  \
    \              break\n            }\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    count := 0\n    vowels := map[string]bool{\"a\":\
    \ true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i, v := range\
    \ s {\n        if i == len(s) - 1 && string(v) == \"y\" {\n            count++\n\
    \        } else if vowels[string(v)] {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count\
    \ := 0\n    for i, v := range s {\n        if v == 'y' && i != len(s)-1 {\n  \
    \          continue\n        }\n        for _, vv := range vowels {\n        \
    \    if v == vv {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for _, c := range s {\n        switch\
    \ c {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case\
    \ 'y':\n            if s[len(s)-1] == 'y' {\n                count++\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i,\
    \ r := range s {\n        // fmt.Println(i, string(r))\n        if r == 'a' ||\
    \ r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            count += 1\n   \
    \     }\n        if r == 'y' && i == len(s) - 1 {\n            count += 1\n  \
    \      }\n    }\n    return count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
