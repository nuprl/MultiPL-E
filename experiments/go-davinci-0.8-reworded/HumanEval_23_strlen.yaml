name: HumanEval_23_strlen
language: go_test.go
prompt: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n//\
  \ 3\nfunc strlen(myString string) int {\n"
tests: "func TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
  ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var length int\n    length = len(myString)\n    return length\n\
    }\n", "    return len(myString)\n}\n", "    return len(myString)\n}\n", "    len\
    \ := 0\n    for _, _ = range myString {\n        len += 1\n    }\n    return len\n\
    }\n", "    len := 0\n    for range myString {\n        len++\n    }\n    return\
    \ len\n}\n", "    return len(myString)\n}\n", "    if myString == \"\" {\n   \
    \     return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n", "    return\
    \ len(myString)\n}\n", "    retVal := 0\n    for _, r := range myString {\n  \
    \      retVal++\n    }\n    return retVal\n}\n", "    var counter int = 0\n  \
    \  for range myString {\n        counter += 1\n    }\n    return counter\n}\n",
  "    return len(myString)\n}\n", "    return len(myString)\n}\n", "    return len(myString)\n\
    }\n", "    return len(myString)\n}\n", "    counter := 0\n    for range myString\
    \ {\n        counter++\n    }\n    return counter\n}\n", "    // TODO\n    return\
    \ len(myString)\n}\n", "    i := 0\n    // Iterate over string, increment i.\n\
    \    for _, _ = range myString {\n        i++\n    }\n    return i\n}\n", "  \
    \  var l int\n    for i := range myString {\n        l = i\n    }\n    return\
    \ l + 1\n}\n", "    return len(myString)\n}\n", "    // testing.T.Logf(\"Length\
    \ of %q is %d\", myString, len(myString))\n    return len(myString)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
