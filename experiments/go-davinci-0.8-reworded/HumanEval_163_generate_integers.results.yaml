language: go_test.go
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ans := []int{}\n    for i := a; i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            ans = append(ans, i)\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpy550jc_u_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpy550jc_u_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpy550jc_u_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpy550jc_u_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var slice []int\n\
    \    for ; a <= b; a++ {\n        if a%2 == 0 {\n            slice = append(slice,\
    \ a)\n        }\n    }\n    return slice\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmphshod1vu_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmphshod1vu_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmphshod1vu_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmphshod1vu_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a % 2 != 0 {\n        a++\n  \
    \  }\n    for ; a <= b; a += 2 {\n        result = append(result, a)\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpg6384kv8_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpg6384kv8_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpg6384kv8_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpg6384kv8_test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // error check\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Please provide positive integers.\")\n        return nil\n    }\n\n    // if a\
    \ > b, switch them so a < b\n    if a > b {\n        temp := a\n        a = b\n\
    \        b = temp\n    }\n\n    // create and populate slice\n    var slice []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            slice = append(slice,\
    \ i)\n        }\n    }\n\n    return slice\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1ymc1biy_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1ymc1biy_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1ymc1biy_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1ymc1biy_test.go:58: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    min := a\n    max := b\n    if min > max {\n        min\
    \ = b\n        max = a\n    }\n    var result []int\n    for i := min; i <= max;\
    \ i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpjaq8aoho_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpjaq8aoho_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpjaq8aoho_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpjaq8aoho_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if b < a {\n        a, b = b, a\n    }\n    evens := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpou08v0_z_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpou08v0_z_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpou08v0_z_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpou08v0_z_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a > b {\n        min = b\n    \
    \    max = a\n    } else {\n        min = a\n        max = b\n    }\n    var result\
    \ []int\n    for min <= max {\n        if min % 2 == 0 {\n            result =\
    \ append(result, min)\n        }\n        min += 1\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpyuz4zaqu_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpyuz4zaqu_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpyuz4zaqu_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpyuz4zaqu_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    x := a\n    res := []int{}\n    for x <= b {\n        if\
    \ x % 2 == 0 {\n            res = append(res, x)\n        }\n        x++\n   \
    \ }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp6tnkq4t__test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp6tnkq4t__test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp6tnkq4t__test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp6tnkq4t__test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // Allocate the result array\n    x := make([]int, 0)\n\
    \    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++ {\n \
    \       if i % 2 == 0 {\n            x = append(x, i)\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwdle33ug_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwdle33ug_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpwdle33ug_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpwdle33ug_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    lower := 0\n    higher := 0\n    if\
    \ a < b {\n        lower = a\n        higher = b\n    } else {\n        lower\
    \ = b\n        higher = a\n    }\n    for i := lower; i <= higher; i++ {\n   \
    \     if i % 2 == 0 {\n            result = append(result, i)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp56yz8ni9_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp56yz8ni9_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp56yz8ni9_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp56yz8ni9_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n\n\
    \    var start int\n    var end int\n    if a > b {\n        start = b\n     \
    \   end = a\n    } else {\n        start = a\n        end = b\n    }\n\n    var\
    \ evens []int\n    for i := start; i <= end; i++ {\n        if i % 2 == 0 {\n\
    \            evens = append(evens, i)\n        }\n    }\n\n    return evens\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpb026sltu_test.go:62: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpb026sltu_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpb026sltu_test.go:62: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpb026sltu_test.go:62: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n\n    result := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1f5y1tdq_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1f5y1tdq_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1f5y1tdq_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1f5y1tdq_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    if a > b {\n        a, b = b, a\n    }\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            r = append(r,\
    \ i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2p1qjtqq_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2p1qjtqq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2p1qjtqq_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2p1qjtqq_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // 1. Create a slice\n    var even []int\n    // 2. Get\
    \ the bigger and smaller numbers\n    var lower, higher int\n    if a > b {\n\
    \        lower = b\n        higher = a\n    } else {\n        lower = a\n    \
    \    higher = b\n    }\n    // 3. Check if even or odd\n    for i := lower; i\
    \ <= higher; i++ {\n        if i % 2 == 0 {\n            even = append(even, i)\n\
    \        }\n    }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3agbiatk_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3agbiatk_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3agbiatk_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3agbiatk_test.go:54: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ints []int\n    for i := a; i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            ints = append(ints, i)\n        }\n    }\n    return\
    \ ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp77mxlg72_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp77mxlg72_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp77mxlg72_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp77mxlg72_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdt7qtoiu_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min int\n    var max int\n    if a < b {\n        min\
    \ = a\n        max = b\n    } else {\n        min = b\n        max = a\n    }\n\
    \    var arr []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n\
    \            arr = append(arr, i)\n        }\n    }\n    return arr\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppcuay7xy_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppcuay7xy_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmppcuay7xy_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmppcuay7xy_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n\n    res := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 ==\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpo0jrpvjg_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpo0jrpvjg_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpo0jrpvjg_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpo0jrpvjg_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n \
    \   min := a\n    max := b\n    if a > b {\n        min = b\n        max = a\n\
    \    }\n    nums := []int{}\n    for i := min; i <= max; i++ {\n        if i %\
    \ 2 == 0 {\n            nums = append(nums, i)\n        }\n    }\n    return nums\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpomx96iq0_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpomx96iq0_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpomx96iq0_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpomx96iq0_test.go:56: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    if a & 1 ==\
    \ 1 {\n        a += 1\n    }\n    if b & 1 == 1 {\n        b -= 1\n    }\n   \
    \ if a > b {\n        return []int{}\n    }\n    ret := make([]int, (b - a) /\
    \ 2 + 1)\n    for i := 0; i < len(ret); i++ {\n        ret[i] = a + i * 2\n  \
    \  }\n    return ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpc85n6iud_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpc85n6iud_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpc85n6iud_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpc85n6iud_test.go:53: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    min := a\n    max := b\n    if b < a {\n        min = b\n\
    \        max = a\n    }\n    result := []int{}\n    for i := min; i <= max; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1xl0qhbq_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1xl0qhbq_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1xl0qhbq_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1xl0qhbq_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    var result\
    \ []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n        \
    \    result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwyh2m2ts_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwyh2m2ts_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpwyh2m2ts_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpwyh2m2ts_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    var from, to int\n    if a < b {\n\
    \        from = a\n        to = b\n    } else {\n        from = b\n        to\
    \ = a\n    }\n    for i := from; i <= to; i++ {\n        if i % 2 == 0 {\n   \
    \         result = append(result, i)\n        }\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfog_tjj2_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfog_tjj2_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfog_tjj2_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfog_tjj2_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var even_integers []int\n    var from, to int\n    if a\
    \ <= b {\n        from = a\n        to = b\n    } else {\n        from = b\n \
    \       to = a\n    }\n    for i := from; i <= to; i++ {\n        if i % 2 ==\
    \ 0 {\n            even_integers = append(even_integers, i)\n        }\n    }\n\
    \    return even_integers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgdekvb0k_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgdekvb0k_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpgdekvb0k_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpgdekvb0k_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    integers :=\
    \ []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n          \
    \  integers = append(integers, i)\n        }\n    }\n    return integers\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqgxg35sj_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqgxg35sj_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpqgxg35sj_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpqgxg35sj_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var low int\n    var high int\n    var result []int\n\n\
    \    if a > b {\n        low = b\n        high = a\n    } else {\n        low\
    \ = a\n        high = b\n    }\n\n    for i := low; i <= high; i++ {\n       \
    \ if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp4g_eq52u_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp4g_eq52u_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp4g_eq52u_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp4g_eq52u_test.go:55: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    // for a % 2\
    \ != 0 {\n    //     a++\n    // }\n    out := []int{}\n    for i := a; i <= b;\
    \ i++ {\n        if i % 2 == 0 {\n            out = append(out, i)\n        }\n\
    \    }\n    return out\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgs_x5g3k_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgs_x5g3k_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpgs_x5g3k_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpgs_x5g3k_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var xs []int\n\
    \    for a <= b {\n        if a % 2 == 0 {\n            xs = append(xs, a)\n \
    \       }\n        a++\n    }\n    return xs\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpnsertglr_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpnsertglr_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpnsertglr_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpnsertglr_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var evens []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpa5vwdz14_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpa5vwdz14_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpa5vwdz14_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpa5vwdz14_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    res := []int{}\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            res =\
    \ append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpip3g0p9f_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpip3g0p9f_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpip3g0p9f_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpip3g0p9f_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var nums []int\n    if a <= b {\n        for i := a; i <=\
    \ b; i++ {\n            if i % 2 == 0 {\n                nums = append(nums, i)\n\
    \            }\n        }\n    } else {\n        for i := a; i >= b; i-- {\n \
    \           if i % 2 == 0 {\n                nums = append(nums, i)\n        \
    \    }\n        }\n    }\n    return nums\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqw_3ze8n_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqw_3ze8n_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpqw_3ze8n_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=130) %!s(int=128) %!s(int=126) %!s(int=124)\
    \ %!s(int=122) %!s(int=120) %!s(int=118) %!s(int=116) %!s(int=114) %!s(int=112)\
    \ %!s(int=110) %!s(int=108) %!s(int=106) %!s(int=104) %!s(int=102) %!s(int=100)\
    \ %!s(int=98) %!s(int=96) %!s(int=94) %!s(int=92) %!s(int=90) %!s(int=88) %!s(int=86)\
    \ %!s(int=84) %!s(int=82) %!s(int=80) %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72)\
    \ %!s(int=70) %!s(int=68) %!s(int=66) %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58)\
    \ %!s(int=56) %!s(int=54) %!s(int=52) %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44)\
    \ %!s(int=42) %!s(int=40) %!s(int=38) %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30)\
    \ %!s(int=28) %!s(int=26) %!s(int=24) %!s(int=22) %!s(int=20) %!s(int=18) %!s(int=16)\
    \ %!s(int=14) %!s(int=12) %!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpqw_3ze8n_test.go:51:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // If the integers are in descending order, the swap them.\n\
    \    if b < a {\n        a, b = b, a\n    }\n\n    // Create an empty integer\
    \ slice.\n    ints := []int{}\n\n    // Loop from the smaller number to the larger\
    \ number\n    for i := a; i <= b; i++ {\n        // Only append if the number\
    \ is even.\n        if i % 2 == 0 {\n            ints = append(ints, i)\n    \
    \    }\n    }\n\n    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp9m78urtp_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp9m78urtp_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp9m78urtp_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp9m78urtp_test.go:53: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // A simple algorithm that returns the even numbers between\
    \ two integers.\n    n, m := a, b\n    if n > m {\n        n, m = m, n\n    }\n\
    \    even := make([]int, 0)\n    for i := n; i <= m; i++ {\n        if i % 2 ==\
    \ 0 {\n            even = append(even, i)\n        }\n    }\n    return even\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3jm7xvzy_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3jm7xvzy_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3jm7xvzy_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3jm7xvzy_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var output []int\n    if a > b {\n        for i := b; i\
    \ <= a; i++ {\n            if i % 2 == 0 {\n                output = append(output,\
    \ i)\n            }\n        }\n    } else {\n        for i := a; i <= b; i++\
    \ {\n            if i % 2 == 0 {\n                output = append(output, i)\n\
    \            }\n        }\n    }\n    return output\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1ao5qi2q_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1ao5qi2q_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1ao5qi2q_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1ao5qi2q_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    result\
    \ := []int{}\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n   \
    \         result = append(result, i)\n        }\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp41c7t587_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp41c7t587_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp41c7t587_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp41c7t587_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var output []int\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            output = append(output, i)\n        }\n    }\n\
    \    return output\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpncj4wa2c_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpncj4wa2c_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpncj4wa2c_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpncj4wa2c_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    for i := a; i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            res = append(res, i)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8zaxqgeg_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8zaxqgeg_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp8zaxqgeg_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp8zaxqgeg_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var a_even, b_even bool = a % 2 == 0, b % 2 == 0\n    if\
    \ !a_even && !b_even {\n        return []int{}\n    }\n    if a_even && b_even\
    \ {\n        return []int{a, b}\n    }\n    if a_even {\n        return []int{a}\n\
    \    }\n    return []int{b}\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpnzw81_d1_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpnzw81_d1_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpnzw81_d1_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    res := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\ntype genIntTestCase \nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjydicppz_test.go:30:21: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    if a > b {\n        for x := b; x <= a;\
    \ x++ {\n            if x % 2 == 0 {\n                r = append(r, x)\n     \
    \       }\n        }\n    } else {\n        for x := a; x <= b; x++ {\n      \
    \      if x % 2 == 0 {\n                r = append(r, x)\n            }\n    \
    \    }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp911k_4zt_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp911k_4zt_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp911k_4zt_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp911k_4zt_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    fmt.Printf(\"Generating numbers between %d and %d\\n\",\
    \ a, b)\n    // Sort the numbers in ascending order\n    if b < a {\n        a,\
    \ b = b, a\n    }\n    // Get the even numbers\n    var evens []int\n    for i\
    \ := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Generating numbers between 2 and 10\nGenerating numbers between 10 and\
    \ 2\nGenerating numbers between 132 and 2\nGenerating numbers between 17 and 89\n\
    --- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzshrapsj_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzshrapsj_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpzshrapsj_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpzshrapsj_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    bigger, smaller := a, b\n    if b\
    \ > a {\n        bigger, smaller = b, a\n    }\n    for i := smaller; i <= bigger;\
    \ i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwv787wt8_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwv787wt8_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpwv787wt8_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpwv787wt8_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var solution []int\n    if a < b {\n        for i := a;\
    \ i <= b; i++ {\n            if i % 2 == 0 {\n                solution = append(solution,\
    \ i)\n            }\n        }\n    } else {\n        for i := b; i <= a; i++\
    \ {\n            if i % 2 == 0 {\n                solution = append(solution,\
    \ i)\n            }\n        }\n    }\n    return solution\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzh0u12u7_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzh0u12u7_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpzh0u12u7_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpzh0u12u7_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    var i, start, end int\n    if a >\
    \ b {\n        start = b\n        end = a\n    } else {\n        start = a\n \
    \       end = b\n    }\n    for i = start; i <= end; i++ {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpbo8u5sb3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpbo8u5sb3_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpbo8u5sb3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpbo8u5sb3_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    i := a\n    if a > b {\n        i\
    \ = b\n    }\n    if i % 2 != 0 {\n        i += 1\n    }\n    for ; i <= a ||\
    \ i <= b; i += 2 {\n        result = append(result, i)\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpack0amcr_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpack0amcr_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpack0amcr_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpack0amcr_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    a, b = sort(a, b)\n    r := []int{}\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            r = append(r, i)\n        }\n\
    \    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfs6kljbu_test.go:18:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var ret []int\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            ret = append(ret,\
    \ i)\n        }\n    }\n    return ret\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmphpg4wle7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmphpg4wle7_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmphpg4wle7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmphpg4wle7_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    // create\
    \ a slice of size max - min\n    result := make([]int, 0, max - min)\n    for\
    \ i := min; i <= max; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpv2ou6a4b_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpv2ou6a4b_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpv2ou6a4b_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpv2ou6a4b_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var r []int\n    var i int\n\n    if a > b {\n        i\
    \ = b\n        b = a\n        a = i\n    }\n\n    for i = a; i <= b; i++ {\n \
    \       if i % 2 == 0 {\n            r = append(r, i)\n        }\n    }\n\n  \
    \  return r\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptt0pl_q1_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptt0pl_q1_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptt0pl_q1_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptt0pl_q1_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var numbers []int\n    for i := a; i <= b; i++ {\n     \
    \   if i % 2 == 0 {\n            numbers = append(numbers, i)\n        }\n   \
    \ }\n    return numbers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpx2dmvqih_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpx2dmvqih_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpx2dmvqih_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpx2dmvqih_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := []int{}\n    low, high := a, b\n    if b < a {\n\
    \        low, high = b, a\n    }\n    for i := low; i <= high; i++ {\n       \
    \ if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp11amlgr8_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp11amlgr8_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp11amlgr8_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp11amlgr8_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for a <= b {\n        if a % 2 == 0 {\n            result = append(result,\
    \ a)\n        }\n        a++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfdw7vkjx_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfdw7vkjx_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfdw7vkjx_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfdw7vkjx_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var nums []int\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            nums =\
    \ append(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp48hw6c6b_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp48hw6c6b_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp48hw6c6b_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp48hw6c6b_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    start := min(a, b)\n    end := max(a,\
    \ b)\n    if start % 2 != 0 {\n        start++\n    }\n    for i := start; i <=\
    \ end; i += 2 {\n        result = append(result, i)\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngzcwy_r_test.go:19:14: undefined: min

    /tmp/tmpngzcwy_r_test.go:20:12: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    values := []int{}\n    start := a\n    if b < a {\n    \
    \    start = b\n    }\n    end := a\n    if b > a {\n        end = b\n    }\n\
    \    for start <= end {\n        if start % 2 == 0 {\n            values = append(values,\
    \ start)\n        }\n        start += 1\n    }\n    return values\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3lyh16sl_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3lyh16sl_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3lyh16sl_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3lyh16sl_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8qrasnwv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8qrasnwv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    var r\
    \ []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n        \
    \    r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptwzekng4_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptwzekng4_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptwzekng4_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptwzekng4_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    // Ensure a\
    \ is even\n    if a % 2 != 0 {\n        a++\n    }\n    // Ensure b is even\n\
    \    if b % 2 != 0 {\n        b--\n    }\n    if a > b {\n        return []int{}\n\
    \    }\n    // Make an array the size of the numbers between a and b\n    arr\
    \ := make([]int, (b - a)/2 + 1)\n    for i := 0; i < len(arr); i++ {\n       \
    \ arr[i] = a + 2*i\n    }\n    return arr\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpu2e07jul_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpu2e07jul_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpu2e07jul_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpu2e07jul_test.go:56: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var a1 = a\n    var b1 = b\n    if a > b {\n        a1 =\
    \ b\n        b1 = a\n    }\n    var result []int\n    for i := a1; i <= b1; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp9dmhyhu6_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp9dmhyhu6_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp9dmhyhu6_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp9dmhyhu6_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n \
    \   var min, max int\n    if a < b {\n        min = a\n        max = b\n    }\
    \ else {\n        min = b\n        max = a\n    }\n    r := []int{}\n    for i\
    \ := min; i <= max; i++ {\n        if i % 2 == 0 {\n            r = append(r,\
    \ i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpda7dm0y0_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpda7dm0y0_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpda7dm0y0_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpda7dm0y0_test.go:58: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    c := []int{}\n    if a < 0 || b < 0 {\n        return c\n\
    \    }\n    if a < b {\n        for i := a; i <= b; i++ {\n            if i %\
    \ 2 == 0 {\n                c = append(c, i)\n            }\n        }\n    }\
    \ else {\n        for i := b; i <= a; i++ {\n            if i % 2 == 0 {\n   \
    \             c = append(c, i)\n            }\n        }\n    }\n    return c\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpboz1bmyp_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpboz1bmyp_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpboz1bmyp_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpboz1bmyp_test.go:54: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzd9jf1vo_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var numbers []int\n    small := a\n    large := b\n    if\
    \ b < a {\n        small = b\n        large = a\n    }\n    for i := small; i\
    \ <= large; i++ {\n        if i % 2 == 0 {\n            numbers = append(numbers,\
    \ i)\n        }\n    }\n    return numbers\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpe0pj81k6_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpe0pj81k6_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpe0pj81k6_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpe0pj81k6_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    start := a\n    stop := b\n    if a > b {\n        start\
    \ = b\n        stop = a\n    }\n    var result []int\n    for i := start; i <=\
    \ stop; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpbi3bpmor_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpbi3bpmor_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpbi3bpmor_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpbi3bpmor_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    res := []int{}\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpier69m1i_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpier69m1i_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpier69m1i_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpier69m1i_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        t := a\n    \
    \    a = b\n        b = t\n    }\n    for i := a; i <= b; i++ {\n        if i\
    \ % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppbbam0it_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppbbam0it_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmppbbam0it_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmppbbam0it_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074125
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var m, n int\n    if a <= b {\n        m, n = a, b\n   \
    \ } else {\n        m, n = b, a\n    }\n    var rv []int\n    for i := m; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            rv = append(rv, i)\n        }\n\
    \    }\n    return rv\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp4e8ce24y_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp4e8ce24y_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp4e8ce24y_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp4e8ce24y_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    lower, upper := a, b\n    if lower > upper {\n        lower,\
    \ upper = upper, lower\n    }\n    integers := []int{}\n    for lower <= upper\
    \ {\n        if lower % 2 == 0 {\n            integers = append(integers, lower)\n\
    \        }\n        lower++\n    }\n    return integers\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpmjl39n5__test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpmjl39n5__test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpmjl39n5__test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpmjl39n5__test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    res := []int{}\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpier69m1i_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpier69m1i_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpier69m1i_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpier69m1i_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if b < a {\n        a, b = b, a\n    }\n    output := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            output =\
    \ append(output, i)\n        }\n    }\n    return output\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp939hf6mw_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp939hf6mw_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp939hf6mw_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp939hf6mw_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // Make a list to hold the result\n    var res []int\n \
    \   if a > b {\n        temp := a\n        a = b\n        b = temp\n    }\n  \
    \  for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpemizpcy5_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpemizpcy5_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpemizpcy5_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpemizpcy5_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var range_size = b - a\n    if range_size <= 0 {\n     \
    \   range_size = -range_size\n    }\n    var output = make([]int, 0, range_size/2)\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            output =\
    \ append(output, i)\n        }\n    }\n    return output\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpndpep3hj_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpndpep3hj_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpndpep3hj_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpndpep3hj_test.go:47:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n    var result []int\n    for ; a <= b; a++ {\n        if a % 2 == 0 {\n\
    \            result = append(result, a)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxsr8cwon_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxsr8cwon_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpxsr8cwon_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpxsr8cwon_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // if a > b, return nothing.\n    if a > b {\n        return\
    \ nil\n    }\n    if b < 2 {\n        return nil\n    }\n    // if a is even,\
    \ then return a.\n    if a % 2 == 0 {\n        return even_integers(a, b)\n  \
    \  }\n    // if a is odd, then return the next even integer after a.\n    return\
    \ even_integers(a + 1, b)\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87oe5278_test.go:27:16: undefined: even_integers

    /tmp/tmp87oe5278_test.go:30:12: undefined: even_integers

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var retval []int\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            retval = append(retval, i)\n        }\n    }\n\
    \    return retval\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgl5cq6us_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgl5cq6us_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpgl5cq6us_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpgl5cq6us_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    even := []int{}\n    if a > b {\n        return even\n \
    \   }\n    if a % 2 == 0 {\n        even = append(even, a)\n    }\n    for i :=\
    \ a+1; i <= b; i++ {\n        if i % 2 == 0 {\n            even = append(even,\
    \ i)\n        }\n    }\n    return even\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgg4javem_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgg4javem_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpgg4javem_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpgg4javem_test.go:49:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // If a is greater than b, return an empty slice\n    if\
    \ a > b {\n        return []int{}\n    }\n\n    // If a is equal to b and is even,\
    \ return it in a slice\n    if a == b && a % 2 == 0 {\n        return []int{a}\n\
    \    }\n\n    // If a is equal to b and is odd, return an empty slice\n    if\
    \ a == b && a % 2 != 0 {\n        return []int{}\n    }\n\n    // If a is an even\
    \ number\n    if a % 2 == 0 {\n        // If b is an even number\n        if b\
    \ % 2 == 0 {\n            // Return the even numbers between a and b, including\n\
    \            // a and b\n            var evens []int\n            for i := a;\
    \ i <= b; i += 2 {\n                evens = append(evens, i)\n            }\n\
    \            return evens\n        } else {\n            // Return the even numbers\
    \ between a and b, not including\n            // b\n            var evens []int\n\
    \            for i := a; i < b; i += 2 {\n                evens = append(evens,\
    \ i)\n            }\n            return evens\n        }\n    } else {\n     \
    \   // If b is an even number\n        if b % 2 == 0 {\n            // Return\
    \ the even numbers between a and b, not including\n            // a\n        \
    \    var evens []int\n            for i := a + 1; i <= b; i += 2 {\n         \
    \       evens = append(evens, i)\n            }\n            return evens\n  \
    \      } else {\n            // Return the even numbers between a and b, not including\n\
    \            // a or b\n            var evens []int\n            for i := a +\
    \ 1; i < b; i += 2 {\n                evens = append(evens, i)\n            }\n\
    \            return evens\n        }\n    }\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpmdfsdyt4_test.go:91: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpmdfsdyt4_test.go:91:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpmdfsdyt4_test.go:91:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpmdfsdyt4_test.go:91:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    ints := []int{}\n    min, max := a, b\n    if a > b {\n\
    \        min, max = b, a\n    }\n    for i := min; i <= max; i++ {\n        if\
    \ i % 2 == 0 {\n            ints = append(ints, i)\n        }\n    }\n    return\
    \ ints\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp98m43d___test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp98m43d___test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp98m43d___test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp98m43d___test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    answer := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            answer =\
    \ append(answer, i)\n        }\n    }\n    return answer\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpl35bma1v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpl35bma1v_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpl35bma1v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpl35bma1v_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var re []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            re = append(re,\
    \ i)\n        }\n    }\n    return re\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpvnqlqffi_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpvnqlqffi_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpvnqlqffi_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpvnqlqffi_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    res := []int{}\n\
    \    for a <= b {\n        if a % 2 == 0 {\n            res = append(res, a)\n\
    \        }\n        a += 1\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpjwz2dh6__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpjwz2dh6__test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpjwz2dh6__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpjwz2dh6__test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    evens\
    \ := []int{}\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n   \
    \         evens = append(evens, i)\n        }\n    }\n    return evens\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpz3mh6qw2_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpz3mh6qw2_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpz3mh6qw2_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpz3mh6qw2_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var arr []int\n    if a <= b {\n        for i := a; i <=\
    \ b; i++ {\n            if i % 2 == 0 {\n                arr = append(arr, i)\n\
    \            }\n        }\n    } else {\n        for i := a; i >= b; i-- {\n \
    \           if i % 2 == 0 {\n                arr = append(arr, i)\n          \
    \  }\n        }\n    }\n    return arr\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppsqxkyas_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppsqxkyas_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmppsqxkyas_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=130) %!s(int=128) %!s(int=126) %!s(int=124)\
    \ %!s(int=122) %!s(int=120) %!s(int=118) %!s(int=116) %!s(int=114) %!s(int=112)\
    \ %!s(int=110) %!s(int=108) %!s(int=106) %!s(int=104) %!s(int=102) %!s(int=100)\
    \ %!s(int=98) %!s(int=96) %!s(int=94) %!s(int=92) %!s(int=90) %!s(int=88) %!s(int=86)\
    \ %!s(int=84) %!s(int=82) %!s(int=80) %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72)\
    \ %!s(int=70) %!s(int=68) %!s(int=66) %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58)\
    \ %!s(int=56) %!s(int=54) %!s(int=52) %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44)\
    \ %!s(int=42) %!s(int=40) %!s(int=38) %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30)\
    \ %!s(int=28) %!s(int=26) %!s(int=24) %!s(int=22) %!s(int=20) %!s(int=18) %!s(int=16)\
    \ %!s(int=14) %!s(int=12) %!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppsqxkyas_test.go:51:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := []int{}\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n \
    \   return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp59tmkf0r_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var start int\n    var end int\n    if a <= b {\n      \
    \  start = a\n        end = b\n    } else {\n        start = b\n        end =\
    \ a\n    }\n    result := []int{}\n    for i := start; i <= end; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpodelrx1r_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpodelrx1r_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpodelrx1r_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpodelrx1r_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var res []int\n\
    \    for a <= b {\n        if a % 2 == 0 {\n            res = append(res, a)\n\
    \        }\n        a += 1\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprxzxed6p_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmprxzxed6p_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmprxzxed6p_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmprxzxed6p_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // check if a or b is odd, if so, return empty slice\n \
    \   if a % 2 != 0 || b % 2 != 0 {\n        return []int{}\n    }\n\n    // create\
    \ slice to hold even numbers between a and b\n    integers := []int{}\n\n    //\
    \ set the first number to be checked to the lesser of a and b\n    num := a\n\
    \    if b < a {\n        num = b\n    }\n\n    // loop through numbers between\
    \ a and b\n    for num >= a && num <= b {\n        // check if number is even\n\
    \        if num % 2 == 0 {\n            // if so, append it to the slice\n   \
    \         integers = append(integers, num)\n        }\n        // increment num\n\
    \        num++\n    }\n\n    return integers\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxpwflzbo_test.go:62: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxpwflzbo_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpxpwflzbo_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    c := a\n    res := []int{}\n    for c <= b {\n        if\
    \ c % 2 == 0 {\n            res = append(res, c)\n        }\n        c += 1\n\
    \    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzk10l6tk_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzk10l6tk_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzk10l6tk_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzk10l6tk_test.go:45:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmph46aasf7_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmph46aasf7_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for ; a <= b; a++ {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpixr13o22_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpixr13o22_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpixr13o22_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpixr13o22_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    slice := make([]int,\
    \ 0)\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            slice\
    \ = append(slice, i)\n        }\n    }\n    return slice\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmplzddvg1y_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmplzddvg1y_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmplzddvg1y_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmplzddvg1y_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ret []int\n    if a < 2 {\n        a = 2\n    }\n  \
    \  for i := a; i <= b; i += 2 {\n        ret = append(ret, i)\n    }\n    return\
    \ ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5m0933dv_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5m0933dv_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5m0933dv_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5m0933dv_test.go:44:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    evens := []int{}\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n \
    \   return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp59tmkf0r_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp59tmkf0r_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n \
    \   var array []int\n    if a < b {\n        for i := a; i <= b; i++ {\n     \
    \       if i % 2 == 0 {\n                array = append(array, i)\n          \
    \  }\n        }\n    } else {\n        for i := a; i >= b; i-- {\n           \
    \ if i % 2 == 0 {\n                array = append(array, i)\n            }\n \
    \       }\n    }\n    return array\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3q7spb3l_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3q7spb3l_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3q7spb3l_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=130) %!s(int=128) %!s(int=126) %!s(int=124)\
    \ %!s(int=122) %!s(int=120) %!s(int=118) %!s(int=116) %!s(int=114) %!s(int=112)\
    \ %!s(int=110) %!s(int=108) %!s(int=106) %!s(int=104) %!s(int=102) %!s(int=100)\
    \ %!s(int=98) %!s(int=96) %!s(int=94) %!s(int=92) %!s(int=90) %!s(int=88) %!s(int=86)\
    \ %!s(int=84) %!s(int=82) %!s(int=80) %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72)\
    \ %!s(int=70) %!s(int=68) %!s(int=66) %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58)\
    \ %!s(int=56) %!s(int=54) %!s(int=52) %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44)\
    \ %!s(int=42) %!s(int=40) %!s(int=38) %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30)\
    \ %!s(int=28) %!s(int=26) %!s(int=24) %!s(int=22) %!s(int=20) %!s(int=18) %!s(int=16)\
    \ %!s(int=14) %!s(int=12) %!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp3q7spb3l_test.go:58:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var greater, lower int\n    if a > b {\n        greater\
    \ = a\n        lower = b\n    } else {\n        greater = b\n        lower = a\n\
    \    }\n    var result []int\n    for i := lower; i <= greater; i++ {\n      \
    \  if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpptdrgrey_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpptdrgrey_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpptdrgrey_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpptdrgrey_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        temp := a\n  \
    \      a = b\n        b = temp\n    }\n    for i := a; i <= b; i++ {\n       \
    \ if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptmwu550a_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptmwu550a_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptmwu550a_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptmwu550a_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    min := a\n    max := b\n    if a > b {\n        min = b\n\
    \        max = a\n    }\n    result := []int{}\n    for i := min; i <= max; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuu5rmc37_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuu5rmc37_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpuu5rmc37_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpuu5rmc37_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074128
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        return []int{a}\n    }\n    even_digits\
    \ := []int{}\n    var min, max int\n    if a > b {\n        min = b\n        max\
    \ = a\n    } else {\n        min = a\n        max = b\n    }\n    for i := min;\
    \ i <= max; i++ {\n        if i % 2 == 0 {\n            even_digits = append(even_digits,\
    \ i)\n        }\n    }\n    return even_digits\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp04jto760_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp04jto760_test.go:54:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp04jto760_test.go:54: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp04jto760_test.go:54: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074128
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    fmt.Printf(\"%d, %d\\n\", a, b)\n    var result []int\n\
    \    var start, end int\n    if a < b {\n        start = a\n        end = b\n\
    \    } else {\n        start = b\n        end = a\n    }\n    for i := start;\
    \ i <= end; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "2, 10\n10, 2\n132, 2\n17, 89\n--- FAIL: TestGenerate_Integers (0.00s)\n\
    \    --- FAIL: TestGenerate_Integers/test_num__0 (0.00s)\n        tmpw_7mspzj_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpw_7mspzj_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpw_7mspzj_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32)\
    \ %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46)\
    \ %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60)\
    \ %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74)\
    \ %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)\
    \ %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102)\
    \ %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114)\
    \ %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126)\
    \ %!s(int=128) %!s(int=130) %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmpw_7mspzj_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20)\
    \ %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34)\
    \ %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48)\
    \ %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62)\
    \ %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76)\
    \ %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    start := a\n    end := b\n    if a > b {\n        start\
    \ = b\n        end = a\n    }\n    res := []int{}\n    for i := start; i <= end;\
    \ i++ {\n        if i % 2 == 0 {\n            res = append(res, i)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfjsgew7s_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfjsgew7s_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfjsgew7s_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfjsgew7s_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmph46aasf7_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmph46aasf7_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if (i % 2 == 0) {\n            result = append(result, i)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdhwi43l__test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpdhwi43l__test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpdhwi43l__test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpdhwi43l__test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var  result []int\n    var left, right int\n    if a < b\
    \ {\n        left = a\n        right = b\n    } else {\n        left = b\n   \
    \     right = a\n    }\n    for i := left; i <= right; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpw7a1qb_j_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpw7a1qb_j_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpw7a1qb_j_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpw7a1qb_j_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    for i := min(a, b); i <= max(a, b);\
    \ i++ {\n        if i % 2 == 0 {\n            evens = append(evens, i)\n     \
    \   }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaybihvdm_test.go:19:14: undefined: min

    /tmp/tmpaybihvdm_test.go:19:30: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    if a > b {\n        a, b = b, a\n   \
    \ }\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            res = append(res,\
    \ i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8c443xbf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8c443xbf_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8c443xbf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8c443xbf_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmph46aasf7_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmph46aasf7_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // Fill in your code here.\n    var result []int\n    for\
    \ i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwnhjbk1b_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwnhjbk1b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpwnhjbk1b_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpwnhjbk1b_test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var evens []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpa5vwdz14_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpa5vwdz14_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpa5vwdz14_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpa5vwdz14_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var list []int\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            list\
    \ = append(list, i)\n        }\n    }\n    return list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgvkhaiq__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgvkhaiq__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpgvkhaiq__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpgvkhaiq__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var r []int\n    if a > b {\n        a, b = b, a\n    }\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            r = append(r,\
    \ i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp9wg5ppf4_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp9wg5ppf4_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp9wg5ppf4_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp9wg5ppf4_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        return []int{a}\n    }\n\n    var result\
    \ []int\n    if a > b {\n        a, b = b, a\n    }\n\n    // Generate all even\
    \ numbers between a and b.\n    for i := a; i <= b; i++ {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, i)\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2lsx3dfv_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2lsx3dfv_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2lsx3dfv_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2lsx3dfv_test.go:53: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzd9jf1vo_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // slice of ints\n    ret := []int{}\n    // lower value\n\
    \    l := a\n    // higher value\n    h := b\n    // if first value is larger\
    \ than second\n    if a > b {\n        // lower value becomes higher\n       \
    \ l = b\n        // higher value becomes lower\n        h = a\n    }\n    // iterate\
    \ through values from lower to higher\n    for i := l; i <= h; i++ {\n       \
    \ // if value is even\n        if i % 2 == 0 {\n            // append value to\
    \ slice\n            ret = append(ret, i)\n        }\n    }\n    // return slice\n\
    \    return ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpakc7ckzy_test.go:59: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpakc7ckzy_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpakc7ckzy_test.go:59: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpakc7ckzy_test.go:59: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var i int\n    var c []int\n    for i = a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            c = append(c, i)\n        }\n    }\n   \
    \ return c\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpazr816hr_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpazr816hr_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpazr816hr_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpazr816hr_test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n\n    result := []int{}\n    for a <= b {\n        if a % 2 == 0 {\n    \
    \        result = append(result, a)\n        }\n        a++\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqr1_c2l6_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqr1_c2l6_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpqr1_c2l6_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpqr1_c2l6_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    lower, upper := a, b\n    if b < a {\n        lower, upper\
    \ = b, a\n    }\n    var evens []int\n    for i := lower; i <= upper; i++ {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n  \
    \  }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpnmjim_81_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpnmjim_81_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpnmjim_81_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpnmjim_81_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    start := a\n    if a > b {\n     \
    \   start = b\n    }\n    for i := start; i <= a || i <= b; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3u54s402_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3u54s402_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3u54s402_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3u54s402_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n \
    \   var slice []int\n    if a < b {\n        for i := a; i <= b; i++ {\n     \
    \       if i % 2 == 0 {\n                slice = append(slice, i)\n          \
    \  }\n        }\n    } else {\n        for i := b; i <= a; i++ {\n           \
    \ if i % 2 == 0 {\n                slice = append(slice, i)\n            }\n \
    \       }\n    }\n    return slice\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpyynuy0et_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpyynuy0et_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpyynuy0et_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpyynuy0et_test.go:58: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    var start, stop int\n    if a > b\
    \ {\n        start = b\n        stop = a\n    } else {\n        start = a\n  \
    \      stop = b\n    }\n    for i := start; i <= stop; i++ {\n        if i % 2\
    \ == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmplwbb6o_5_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmplwbb6o_5_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmplwbb6o_5_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmplwbb6o_5_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8qrasnwv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8qrasnwv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    list := []int{}\n    if b > a {\n        start := a\n  \
    \      end := b\n        for {\n            if start <= end {\n              \
    \  if start % 2 == 0 {\n                    list = append(list, start)\n     \
    \           }\n                start++\n            } else {\n               \
    \ break\n            }\n        }\n    } else {\n        start := b\n        end\
    \ := a\n        for {\n            if start <= end {\n                if start\
    \ % 2 == 0 {\n                    list = append(list, start)\n               \
    \ }\n                start++\n            } else {\n                break\n  \
    \          }\n        }\n    }\n    return list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp0cbri85i_test.go:65: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp0cbri85i_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp0cbri85i_test.go:65: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp0cbri85i_test.go:65: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    min := a\n    max := b\n    if a > b {\n        min = b\n\
    \        max = a\n    }\n    even_numbers := []int{}\n    for i := min; i <= max;\
    \ i++ {\n        if i % 2 == 0 {\n            even_numbers = append(even_numbers,\
    \ i)\n        }\n    }\n    return even_numbers\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpl9rqd41n_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpl9rqd41n_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpl9rqd41n_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpl9rqd41n_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a < 0 || b < 0 {\n        return []int{}\n    }\n\n \
    \   min := a\n    max := b\n    if a > b {\n        min = b\n        max = a\n\
    \    }\n\n    // create the array of even integers\n    var evens []int\n    for\
    \ x := min; x <= max; x++ {\n        if x % 2 == 0 {\n            evens = append(evens,\
    \ x)\n        }\n    }\n\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp6824awdg_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp6824awdg_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp6824awdg_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp6824awdg_test.go:56: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a < b {\n        for i := a; i\
    \ <= b; i++ {\n            if i % 2 == 0 {\n                result = append(result,\
    \ i)\n            }\n        }\n    } else {\n        for i := b; i <= a; i++\
    \ {\n            if i % 2 == 0 {\n                result = append(result, i)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp35kjazfo_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp35kjazfo_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var c []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            c = append(c,\
    \ i)\n        }\n    }\n    return c\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpb4fl2vgf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpb4fl2vgf_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpb4fl2vgf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpb4fl2vgf_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n \
    \   if a > b {\n        tmp := a\n        a = b\n        b = tmp\n    }\n    ret\
    \ := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n       \
    \     ret = append(ret, i)\n        }\n    }\n    return ret\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpi5nbh4hs_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpi5nbh4hs_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpi5nbh4hs_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpi5nbh4hs_test.go:55: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074129
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        for i := b; i <=\
    \ a; i++ {\n            if i % 2 == 0 {\n                evens = append(evens,\
    \ i)\n            }\n        }\n    } else {\n        for i := a; i <= b; i++\
    \ {\n            if i % 2 == 0 {\n                evens = append(evens, i)\n \
    \           }\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmps69ug6ff_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmps69ug6ff_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmps69ug6ff_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmps69ug6ff_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074130
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8qrasnwv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8qrasnwv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a < b {\n        for i := a; i\
    \ <= b; i++ {\n            if i % 2 == 0 {\n                result = append(result,\
    \ i)\n            }\n        }\n    } else {\n        for i := b; i <= a; i++\
    \ {\n            if i % 2 == 0 {\n                result = append(result, i)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp35kjazfo_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp35kjazfo_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    m := a\n    n := b\n    if a > b {\n        m = b\n    \
    \    n = a\n    }\n    var result []int\n    for i := m; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqxtbmket_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqxtbmket_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpqxtbmket_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpqxtbmket_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074130
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if b < a {\n        a, b = b, a\n    }\n    result := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_x6nlebg_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_x6nlebg_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_x6nlebg_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp_x6nlebg_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074131
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a == b {\n        if a % 2 == 0\
    \ {\n            result = append(result, a)\n        }\n        return result\n\
    \    }\n    a_is_even := a % 2 == 0\n    b_is_even := b % 2 == 0\n    if a_is_even\
    \ && b_is_even {\n        for i := a; i <= b; i++ {\n            if i % 2 == 0\
    \ {\n                result = append(result, i)\n            }\n        }\n  \
    \  } else if !a_is_even && !b_is_even {\n        for i := a + 1; i <= b; i++ {\n\
    \            if i % 2 == 0 {\n                result = append(result, i)\n   \
    \         }\n        }\n    } else {\n        for i := a; i <= b; i++ {\n    \
    \        if i % 2 == 0 {\n                result = append(result, i)\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpcmaklb68_test.go:65: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpcmaklb68_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpcmaklb68_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpcmaklb68_test.go:65:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074131
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    var out\
    \ []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n        \
    \    out = append(out, i)\n        }\n    }\n    return out\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpws35bvlx_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpws35bvlx_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpws35bvlx_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpws35bvlx_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074131
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    smaller := a\n    larger := b\n    if a > b {\n        smaller\
    \ = b\n        larger = a\n    }\n    var array []int\n    for i := smaller; i\
    \ <= larger; i++ {\n        if i % 2 == 0 {\n            array = append(array,\
    \ i)\n        }\n    }\n    return array\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpv0sy_21w_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpv0sy_21w_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpv0sy_21w_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpv0sy_21w_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074131
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    result := []int{}\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprxumyfnv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmprxumyfnv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmprxumyfnv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmprxumyfnv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // TODO: Implement me\n    return []int{}\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpth0t4z9v_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpth0t4z9v_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpth0t4z9v_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a < b {\n        for i := a; i\
    \ <= b; i++ {\n            if i % 2 == 0 {\n                result = append(result,\
    \ i)\n            }\n        }\n    } else {\n        for i := b; i <= a; i++\
    \ {\n            if i % 2 == 0 {\n                result = append(result, i)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp35kjazfo_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp35kjazfo_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp35kjazfo_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    lo, hi := a, b\n    if a > b {\n        lo, hi = b, a\n\
    \    }\n    xs := []int{}\n    for i := lo; i <= hi; i++ {\n        if i % 2 ==\
    \ 0 {\n            xs = append(xs, i)\n        }\n    }\n    return xs\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp_tfqk3i7_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp_tfqk3i7_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp_tfqk3i7_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp_tfqk3i7_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        tmp := a\n        a = b\n        b =\
    \ tmp\n    }\n    if a % 2 != 0 {\n        a++\n    }\n    if b % 2 != 0 {\n \
    \       b--\n    }\n    if a > b {\n        return []int{}\n    }\n    result\
    \ := make([]int, 0)\n    for i := a; i <= b; i += 2 {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpblpoo2ou_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpblpoo2ou_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpblpoo2ou_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpblpoo2ou_test.go:55: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var output []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            output\
    \ = append(output, i)\n        }\n    }\n    return output\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1xnzhpk8_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1xnzhpk8_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1xnzhpk8_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1xnzhpk8_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    lower := a\n    upper := b\n    if\
    \ a > b {\n        lower = b\n        upper = a\n    }\n    for i := lower; i\
    \ <= upper; i++ {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp614aioy4_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp614aioy4_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp614aioy4_test.go:49: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp614aioy4_test.go:49: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n\n    integers := []int{}\n    for i := a; i <= b; i++ {\n        if i %\
    \ 2 == 0 {\n            integers = append(integers, i)\n        }\n    }\n   \
    \ return integers\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1r08fxe1_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1r08fxe1_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1r08fxe1_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1r08fxe1_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    if a > b {\n        a, b = b, a\n   \
    \ }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8ziz8fjr_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8ziz8fjr_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8ziz8fjr_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8ziz8fjr_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ints []int\n    if a > b {\n        a, b = b, a\n  \
    \  }\n    for ; a <= b; a++ {\n        if a % 2 == 0 {\n            ints = append(ints,\
    \ a)\n        }\n    }\n    return ints\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp0la4k6qn_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp0la4k6qn_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp0la4k6qn_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp0la4k6qn_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    nums := []int{}\n    for i := a; i <= b; i++ {\n       \
    \ if i % 2 == 0 {\n            nums = append(nums, i)\n        }\n    }\n    return\
    \ nums\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpyf_stvzr_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpyf_stvzr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpyf_stvzr_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpyf_stvzr_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var even_slice []int\n    for i := a; i <= b; i++ {\n  \
    \      if i % 2 == 0 {\n            even_slice = append(even_slice, i)\n     \
    \   }\n    }\n    return even_slice\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpscz_rncb_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpscz_rncb_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpscz_rncb_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpscz_rncb_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp2ah0d9fe_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp2ah0d9fe_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp2ah0d9fe_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // TODO: Return even digits between a and b\n    var result\
    \ []int\n    if (a > b) {\n        a, b = b, a\n    }\n    for i := a; i <= b;\
    \ i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8oz9vwl6_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8oz9vwl6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8oz9vwl6_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8oz9vwl6_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // don't generate anything if there are no evens between\
    \ a and b\n    if a % 2 != 0 && b % 2 != 0 {\n        return []int{}\n    }\n\n\
    \    // if a is odd, increment it to the next even\n    if a % 2 != 0 {\n    \
    \    a++\n    }\n\n    // if b is odd, decrement it to the previous even\n   \
    \ if b % 2 != 0 {\n        b--\n    }\n\n    if a > b {\n        return []int{}\n\
    \    }\n\n    // length of the output slice\n    length := (b - a) / 2 + 1\n\n\
    \    evens := make([]int, length)\n\n    for i := range evens {\n        evens[i]\
    \ = a + 2 * i\n    }\n\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdj6mj9ea_test.go:65: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpdj6mj9ea_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpdj6mj9ea_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    n := b - a +\
    \ 1\n    if n % 2 == 0 {\n        n = n / 2\n    } else {\n        n = n / 2 +\
    \ 1\n    }\n    var result []int\n    for i := a; i <= b; i += 2 {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuy92ysde_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuy92ysde_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpuy92ysde_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpuy92ysde_test.go:50: expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21)\
    \ %!s(int=23) %!s(int=25) %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35)\
    \ %!s(int=37) %!s(int=39) %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49)\
    \ %!s(int=51) %!s(int=53) %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63)\
    \ %!s(int=65) %!s(int=67) %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77)\
    \ %!s(int=79) %!s(int=81) %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    nums := []int{}\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            nums\
    \ = append(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpymfcx_zf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpymfcx_zf_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpymfcx_zf_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpymfcx_zf_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    lower := 0\n    upper := 0\n    if\
    \ a > b {\n        lower = b\n        upper = a\n    } else {\n        lower =\
    \ a\n        upper = b\n    }\n    for i := lower; i <= upper; i++ {\n       \
    \ if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmptqrdixa3_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmptqrdixa3_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmptqrdixa3_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmptqrdixa3_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // insert your code here\n    return nil\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpeqt9w13d_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpeqt9w13d_test.go:38: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpeqt9w13d_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var res []int\n    var min int\n    var max int\n    if\
    \ a > b {\n        min = b\n        max = a\n    } else {\n        min = a\n \
    \       max = b\n    }\n    for i := min; i <= max; i++ {\n        if i % 2 ==\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp05hm9nhb_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp05hm9nhb_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp05hm9nhb_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp05hm9nhb_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdt7qtoiu_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var answer []int\n    var min int\n    var max int\n   \
    \ if a > b {\n        min = b\n        max = a\n    } else {\n        min = a\n\
    \        max = b\n    }\n    for i := min; i <= max; i++ {\n        if i % 2 ==\
    \ 0 {\n            answer = append(answer, i)\n        }\n    }\n    return answer\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp1bxe1xak_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp1bxe1xak_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp1bxe1xak_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp1bxe1xak_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ret = []int{}\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for a <= b {\n        if a % 2 == 0 {\n            ret = append(ret,\
    \ a)\n        }\n        a += 1\n    }\n    return ret\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp6vb3c56y_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp6vb3c56y_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp6vb3c56y_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp6vb3c56y_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    x := a\n    if a > b {\n        x\
    \ = b\n    }\n    for ; x <= a || x <= b; x++ {\n        if x % 2 == 0 {\n   \
    \         result = append(result, x)\n        }\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3vihxsb__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3vihxsb__test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3vihxsb__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3vihxsb__test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074132
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var r []int\n    // Return empty slice if numbers are not\
    \ positive integers\n    if a < 0 || b < 0 {\n        return r\n    }\n    //\
    \ Get the minimum positive integer\n    start := a\n    if b < a {\n        start\
    \ = b\n    }\n    // Get the maximum positive integer\n    end := a\n    if b\
    \ > a {\n        end = b\n    }\n    // Get the even integers between the minimum\
    \ and maximum\n    for i := start; i <= end; i++ {\n        if i % 2 == 0 {\n\
    \            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpqf2g11g6_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpqf2g11g6_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpqf2g11g6_test.go:58: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpqf2g11g6_test.go:58: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074133
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a < 0 || b < 0 {\n        return []int{}\n    }\n   \
    \ result := []int{}\n    start := a\n    end := b\n    if a > b {\n        start\
    \ = b\n        end = a\n    }\n    for start <= end {\n        if start % 2 ==\
    \ 0 {\n            result = append(result, start)\n        }\n        start =\
    \ start + 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfsct8xvq_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfsct8xvq_test.go:53:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfsct8xvq_test.go:53: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfsct8xvq_test.go:53: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074133
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        return generate_integers(b, a)\n   \
    \ }\n\n    var result []int\n    for i := a; i <= b; i++ {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpw6rytzza_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpw6rytzza_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpw6rytzza_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpw6rytzza_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074133
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    var start int\n    var stop int\n \
    \   if a < b {\n        start = a\n        stop = b\n    } else {\n        start\
    \ = b\n        stop = a\n    }\n    for i := start; i <= stop; i++ {\n       \
    \ if i % 2 == 0 {\n            evens = append(evens, i)\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmps0wwozbl_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmps0wwozbl_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmps0wwozbl_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmps0wwozbl_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074133
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    low := a\n    high := b\n    if a\
    \ > b {\n        low = b\n        high = a\n    }\n    if low % 2 != 0 {\n   \
    \     low++\n    }\n    for i := low; i <= high; i += 2 {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxf7bpu1u_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxf7bpu1u_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpxf7bpu1u_test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpxf7bpu1u_test.go:50: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var i, j int\n\n    if a < b {\n        i = a\n        j\
    \ = b\n    } else {\n        i = b\n        j = a\n    }\n\n    res := []int{}\n\
    \    for i <= j {\n        if i % 2 == 0 {\n            res = append(res, i)\n\
    \        }\n        i++\n    }\n\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpix9objza_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpix9objza_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpix9objza_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpix9objza_test.go:55: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // We need 2 pointers, one that always points to an even\
    \ number,\n    // and one that always points to an odd number.\n    var even,\
    \ odd int\n    // Assume that a <= b.\n    if a % 2 == 0 {\n        even = a\n\
    \        odd = a + 1\n    } else {\n        even = a + 1\n        odd = a\n  \
    \  }\n    var evens []int\n    for even <= b {\n        evens = append(evens,\
    \ even)\n        even += 2\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxkrx6slf_test.go:20:15: odd declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var result []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp3p1_kk0__test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp3p1_kk0__test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp3p1_kk0__test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp8qrasnwv_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp8qrasnwv_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp8qrasnwv_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    lower, upper := a, b\n    if a > b {\n        lower, upper\
    \ = b, a\n    }\n    var array []int\n    for i := lower; i <= upper; i++ {\n\
    \        if i % 2 == 0 {\n            array = append(array, i)\n        }\n  \
    \  }\n    return array\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpe48yprc7_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpe48yprc7_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpe48yprc7_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpe48yprc7_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a % 2 != 0 {\n        a++\n    }\n    for i := a; i <= b; i +=\
    \ 2 {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpeb26v609_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpeb26v609_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpeb26v609_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpeb26v609_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    res := []int{}\n\
    \    for a <= b {\n        if a % 2 == 0 {\n            res = append(res, a)\n\
    \        }\n        a += 1\n    }\n    return res\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpjwz2dh6__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpjwz2dh6__test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpjwz2dh6__test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpjwz2dh6__test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074127
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a > b {\n        a, b = b, a\n\
    \    }\n    for ; a <= b; a++ {\n        if a % 2 == 0 {\n            result =\
    \ append(result, a)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfm0x1t_9_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfm0x1t_9_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfm0x1t_9_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfm0x1t_9_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    // Your code here\n    if a > b {\n        a, b = b, a\n\
    \    }\n    ret := []int{}\n    for i := a; i <= b; i++ {\n        if i%2 == 0\
    \ {\n            ret = append(ret, i)\n        }\n    }\n    return ret\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpgq2k9asc_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpgq2k9asc_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpgq2k9asc_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpgq2k9asc_test.go:47: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    var out []int\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            out = append(out,\
    \ i)\n        }\n    }\n    return out\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmprq4rjsew_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmprq4rjsew_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmprq4rjsew_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmprq4rjsew_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    var list\
    \ []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n        \
    \    list = append(list, i)\n        }\n    }\n    return list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpu9vw4jnc_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpu9vw4jnc_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpu9vw4jnc_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpu9vw4jnc_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    c := make([]int, 0)\n    for i := a; i <= b; i++ {\n   \
    \     if i % 2 == 0 {\n            c = append(c, i)\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzzqln527_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzzqln527_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzzqln527_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzzqln527_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var min, max int\n    if a < b {\n        min = a\n    \
    \    max = b\n    } else {\n        min = b\n        max = a\n    }\n    var result\
    \ []int\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n        \
    \    result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpwyh2m2ts_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpwyh2m2ts_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpwyh2m2ts_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpwyh2m2ts_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        c := a\n        a = b\n        b = c\n\
    \    }\n    out := []int{}\n    for i := a; i <= b; i++ {\n        if i % 2 ==\
    \ 0 {\n            out = append(out, i)\n        }\n    }\n    return out\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpyks8avvp_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpyks8avvp_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpyks8avvp_test.go:48: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpyks8avvp_test.go:48: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var ret []int\n\n    if a > b {\n        tmp := a\n    \
    \    a = b\n        b = tmp\n    }\n\n    for i := a; i <= b; i++ {\n        if\
    \ i%2 == 0 {\n            ret = append(ret, i)\n        }\n    }\n\n    return\
    \ ret\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpe7djaybh_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpe7djaybh_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpe7djaybh_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpe7djaybh_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        // swap:\n    \
    \    a, b = b, a\n    }\n    if a % 2 == 0 {\n        evens = append(evens, a)\n\
    \    }\n    a += 1\n    for a < b {\n        evens = append(evens, a)\n      \
    \  a += 2\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpkz77jz1__test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpkz77jz1__test.go:50:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpkz77jz1__test.go:50: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87) %!s(int=89) %!s(int=91) %!s(int=93) %!s(int=95)\
    \ %!s(int=97) %!s(int=99) %!s(int=101) %!s(int=103) %!s(int=105) %!s(int=107)\
    \ %!s(int=109) %!s(int=111) %!s(int=113) %!s(int=115) %!s(int=117) %!s(int=119)\
    \ %!s(int=121) %!s(int=123) %!s(int=125) %!s(int=127) %!s(int=129) %!s(int=131)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpkz77jz1__test.go:50:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a == b {\n        if a % 2 == 0\
    \ {\n            result = append(result, a)\n        }\n        return result\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    for i := a; i <= b; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp626qbu4q_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp626qbu4q_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp626qbu4q_test.go:52: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp626qbu4q_test.go:52: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := []int{}\n    for i := a; i <= b; i++ {\n     \
    \   if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpzd9jf1vo_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpzd9jf1vo_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074124
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a == b {\n        if a % 2 == 0\
    \ {\n            result = append(result, a)\n        }\n        return result\n\
    \    }\n    smaller := a\n    bigger := b\n    if a > b {\n        smaller = b\n\
    \        bigger = a\n    }\n    for i := smaller; i <= bigger; i++ {\n       \
    \ if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp9k69phzp_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp9k69phzp_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp9k69phzp_test.go:55: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmp9k69phzp_test.go:55: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n      \
    \  if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpdt7qtoiu_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpdt7qtoiu_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074120
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a > b {\n        a, b = b, a\n    }\n    if b%2 == 0\
    \ {\n        b--\n    }\n    if a%2 == 0 {\n        a++\n    }\n    if a >= b\
    \ {\n        return []int{}\n    }\n    result := make([]int, 0)\n    for i :=\
    \ a; i <= b; i += 2 {\n        result = append(result, i)\n    }\n    return result\n\
    }\n\ntype TestCase \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate :=\
    \ generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa8nr489w_test.go:37:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074133
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var result []int\n    if a <= b {\n        for i := a; i\
    \ <= b; i++ {\n            if i % 2 == 0 {\n                result = append(result,\
    \ i)\n            }\n        }\n    } else {\n        for i := a; i >= b; i--\
    \ {\n            if i % 2 == 0 {\n                result = append(result, i)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpxcsnxqhq_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpxcsnxqhq_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=10)\
    \ %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpxcsnxqhq_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=130) %!s(int=128) %!s(int=126) %!s(int=124)\
    \ %!s(int=122) %!s(int=120) %!s(int=118) %!s(int=116) %!s(int=114) %!s(int=112)\
    \ %!s(int=110) %!s(int=108) %!s(int=106) %!s(int=104) %!s(int=102) %!s(int=100)\
    \ %!s(int=98) %!s(int=96) %!s(int=94) %!s(int=92) %!s(int=90) %!s(int=88) %!s(int=86)\
    \ %!s(int=84) %!s(int=82) %!s(int=80) %!s(int=78) %!s(int=76) %!s(int=74) %!s(int=72)\
    \ %!s(int=70) %!s(int=68) %!s(int=66) %!s(int=64) %!s(int=62) %!s(int=60) %!s(int=58)\
    \ %!s(int=56) %!s(int=54) %!s(int=52) %!s(int=50) %!s(int=48) %!s(int=46) %!s(int=44)\
    \ %!s(int=42) %!s(int=40) %!s(int=38) %!s(int=36) %!s(int=34) %!s(int=32) %!s(int=30)\
    \ %!s(int=28) %!s(int=26) %!s(int=24) %!s(int=22) %!s(int=20) %!s(int=18) %!s(int=16)\
    \ %!s(int=14) %!s(int=12) %!s(int=10) %!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpxcsnxqhq_test.go:51:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    if a == b {\n        if a % 2 == 0 {\n            return\
    \ []int{a}\n        } else {\n            return []int{}\n        }\n    }\n\n\
    \    if a > b {\n        a, b = b, a\n    }\n\n    result := []int{}\n    for\
    \ i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpilc6tbsv_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpilc6tbsv_test.go:56:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpilc6tbsv_test.go:56: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpilc6tbsv_test.go:56: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var evens []int\n    if a > b {\n        a, b = b, a\n \
    \   }\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        }\n    }\n    return evens\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmph46aasf7_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmph46aasf7_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmph46aasf7_test.go:46: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074030
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var (\n        num_int      int\n        num_int_even int\n\
    \        num_int_odd  int\n        num_list     []int\n    )\n\n    if a > b {\n\
    \        num_int = a - b\n    } else {\n        num_int = b - a\n    }\n\n   \
    \ num_int_even = num_int / 2\n    num_int_odd = num_int % 2\n\n    num_list =\
    \ make([]int, num_int_even + num_int_odd)\n\n    if a > b {\n        for i :=\
    \ a; i >= b; i-- {\n            if i % 2 == 0 {\n                num_list[i -\
    \ b] = i\n            }\n        }\n    } else {\n        for i := a; i <= b;\
    \ i++ {\n            if i % 2 == 0 {\n                num_list[i - a] = i\n  \
    \          }\n        }\n    }\n\n    return num_list\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5126a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5126a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(0x2, 0xa)\n\t/tmp/tmpwckqnlov_test.go:45\
    \ +0xbf\ncommand-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpwckqnlov_test.go:60\
    \ +0x4b\ntesting.tRunner(0xc0001a01a0, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    var results []int\n    if b > a {\n        for i := a; i\
    \ <= b; i++ {\n            if i % 2 == 0 {\n                results = append(results,\
    \ i)\n            }\n        }\n    } else {\n        for i := b; i <= a; i++\
    \ {\n            if i % 2 == 0 {\n                results = append(results, i)\n\
    \            }\n        }\n    }\n    return results\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpr16h_lx__test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpr16h_lx__test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpr16h_lx__test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpr16h_lx__test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074134
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    r := []int{}\n    var max, min int\n    if a > b {\n   \
    \     max = a\n        min = b\n    } else {\n        max = b\n        min = a\n\
    \    }\n    for i := min; i <= max; i++ {\n        if i % 2 == 0 {\n         \
    \   r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpfeezwzu3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpfeezwzu3_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[%!s(int=2) %!s(int=4)\
    \ %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmpfeezwzu3_test.go:51: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24)\
    \ %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38)\
    \ %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52)\
    \ %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66)\
    \ %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80)\
    \ %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94)\
    \ %!s(int=96) %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106)\
    \ %!s(int=108) %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118)\
    \ %!s(int=120) %!s(int=122) %!s(int=124) %!s(int=126) %!s(int=128) %!s(int=130)\
    \ %!s(int=132)]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n  \
    \      tmpfeezwzu3_test.go:51: expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22)\
    \ %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36)\
    \ %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50)\
    \ %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64)\
    \ %!s(int=66) %!s(int=68) %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78)\
    \ %!s(int=80) %!s(int=82) %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074134
