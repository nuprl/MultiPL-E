language: go_test.go
name: HumanEval_47_median
results:
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2]+l[len(l)/2-1]) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr6_n5ay8_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr6_n5ay8_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr6_n5ay8_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    //\
    \ Get the two middle numbers, if n is even, use avg of two middle numbers\n  \
    \  // If n is odd, use the middle number\n    if n % 2 == 0 {\n        return\
    \ float64(l[n/2-1] + l[n/2]) / 2\n    } else {\n        return float64(l[n/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplo3g62rp_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplo3g62rp_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplo3g62rp_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Median of an empty list is 0.\n    if len(l) == 0 {\n    \
    \    return 0\n    }\n\n    // To avoid problems with float point numbers, the\
    \ sum is calculated using\n    // an int64, and converted to float64 at the end.\n\
    \    sum := int64(0)\n    // Items to be added together.\n    m := (len(l) - 1)\
    \ / 2\n    // Items to be omitted.\n    n := len(l) / 2\n\n    // Index of first\
    \ added element.\n    start := 0\n    // Index of last added element.\n    end\
    \ := len(l) - 1\n\n    // If the list has an odd number of elements, the median\
    \ is the value of\n    // the middle element. If the list has an even number of\
    \ elements, the\n    // median is the average of the two elements in the middle.\n\
    \    if len(l) % 2 == 1 {\n        // Odd number of elements. Pick the middle\
    \ one.\n        sum = int64(l[m])\n    } else {\n        // Even number of elements.\n\
    \        // Pick the two middle ones, and add them together.\n        sum = int64(l[m])\
    \ + int64(l[m + 1])\n        start = m + 1\n        end = m + 1\n    }\n\n   \
    \ // Sort the list.\n    l = mergeSort(l)\n\n    // Sort the list, and add the\
    \ chosen items.\n    for i := start; i <= end; i++ {\n        sum += int64(l[i])\n\
    \    }\n\n    // Average the added items.\n    return float64(sum) / float64(end\
    \ - start + 1)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9zpokaa_test.go:25:5: n declared but not used

    /tmp/tmpt9zpokaa_test.go:47:9: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        // If length is even, median is the mean of the two elements\
    \ in the middle\n        median_index := len(l) / 2\n        a := l[median_index\
    \ - 1]\n        b := l[median_index]\n        return float64(a + b) / 2\n    }\
    \ else {\n        // If length is odd, median is the middle element\n        median_index\
    \ := len(l) / 2\n        return float64(l[median_index])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp14xcgb4j_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp14xcgb4j_test.go:47:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp14xcgb4j_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // sort l, then return l[len(l)/2]\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j]\
    \ {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\
    \    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid-1]\
    \ + l[mid]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return float64(0)\n    }\n\n    if\
    \ len(l) == 1 {\n        return float64(l[0])\n    }\n\n    sort.Ints(l)\n   \
    \ if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1])\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbg6aslc__test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var sum float64 = 0\n    for _, v := range l {\n        sum +=\
    \ float64(v)\n    }\n    return sum / float64(len(l))\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmpr4x8fo_f_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpr4x8fo_f_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var length = len(l)\n    var half = length / 2\n    if length\
    \ % 2 == 0 {\n        // \u5076\u6570\u4E2A\u5143\u7D20\n        return float64(l[half]\
    \ + l[half - 1]) / 2\n    } else {\n        // \u5947\u6570\u4E2A\u5143\u7D20\n\
    \        return float64(l[half])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpkjjdxexg_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpkjjdxexg_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpkjjdxexg_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    sorted := make([]int,\
    \ len(l))\n    copy(sorted, l)\n    sortInts(sorted)\n    if len(sorted) % 2 ==\
    \ 0 {\n        return (float64(sorted[len(sorted)/2-1]) + float64(sorted[len(sorted)/2]))\
    \ / 2\n    }\n    return float64(sorted[len(sorted)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ophkd5c_test.go:19:5: undefined: sortInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    size := len(l)\n    if size == 0 {\n        return 0\n    }\n\
    \    if size % 2 == 0 {\n        return float64(l[size/2-1]+l[size/2]) / 2\n \
    \   }\n    return float64(l[size/2])\n}\n\nfunc TestMedian(t *testing.T) {\n \
    \ candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp0sm653cc_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp0sm653cc_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp0sm653cc_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        // even length\n\
    \        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    // odd length\n\
    \    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpd82o3bu3_test.go:48: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpd82o3bu3_test.go:48:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpd82o3bu3_test.go:48: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // this is a placeholder to prevent compilation error\n    return\
    \ 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9ndfc7fa_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9ndfc7fa_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp9ndfc7fa_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp9ndfc7fa_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9ndfc7fa_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if l == nil || len(l) == 0 {\n        return 0\n    }\n    //\
    \ Print list to be sorted.\n    fmt.Printf(\"%d \", l)\n    // Sort list.\n  \
    \  quickSort(l, 0, len(l) - 1)\n    fmt.Printf(\"--> %d \", l)\n    // Return\
    \ median.\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l)\
    \ / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesxepba3_test.go:20:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    m := -1\n    // TODO: fix\n    if len(l) % 2 == 0 {\n       \
    \ m = len(l) / 2\n    } else {\n        m = (len(l) + 1) / 2\n    }\n    return\
    \ float64(l[m])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.median(...)\n\t/tmp/tmputo7donv_test.go:21\n\
    command-line-arguments_test.TestMedian(0x0?)\n\t/tmp/tmputo7donv_test.go:33 +0x1b\n\
    testing.tRunner(0xc00019b040, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpfkrzm8_v_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpfkrzm8_v_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpfkrzm8_v_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    switch len(l) {\n    case 0:\n        return 0\n    case 1:\n\
    \        return float64(l[0])\n    case 2:\n        return float64(l[0] + l[1])\
    \ / 2\n    }\n\n    var sorted []int\n    sorted = append(sorted, l...)\n    mergeSort(sorted)\n\
    \n    middle := len(sorted) / 2\n    if len(sorted) % 2 == 0 {\n        return\
    \ float64(sorted[middle-1] + sorted[middle]) / 2\n    }\n    return float64(sorted[middle])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0x6p3q17_test.go:25:5: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    // Bubble Sort\
    \ the list l\n    sorted := false\n    temp := 0\n    for !sorted {\n        sorted\
    \ = true\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                sorted = false\n                temp = l[i]\n      \
    \          l[i] = l[i + 1]\n                l[i + 1] = temp\n            }\n \
    \       }\n    }\n\n    // Calculate median\n    if len(l) % 2 == 0 {\n      \
    \  return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    } else {\n     \
    \   return float64(l[len(l) / 2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    middle := len(l)\
    \ / 2\n    // http://matt.aimonetti.net/posts/2012/11/27/golang-multidimensional-slice/\n\
    \    if len(l) % 2 == 0 {\n        return (float64(l[middle - 1]) + float64(l[middle]))\
    \ / 2\n    }\n    return float64(l[middle])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpu2jlix9w_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpu2jlix9w_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpu2jlix9w_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) == 0 {\n        return 0\n    }\
    \ else if len(l) % 2 == 0 {\n        m = float64(l[len(l)/2] + l[len(l)/2-1])\
    \ / 2\n    } else {\n        m = float64(l[len(l)/2])\n    }\n    return m\n}\n\
    \nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpwu5kus7q_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpwu5kus7q_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpwu5kus7q_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    s := len(l)\n    if (s == 0) {\n        return 0\n    }\n   \
    \ // sort the slice\n    for i := 0; i < s; i++ {\n        for j := i + 1; j <\
    \ s; j++ {\n            if l[i] > l[j] {\n                tmp := l[i]\n      \
    \          l[i] = l[j]\n                l[j] = tmp\n            }\n        }\n\
    \    }\n    if s % 2 == 0 {\n        return float64(l[s/2] + l[s/2-1]) / 2\n \
    \   } else {\n        return float64(l[s/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 1.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbjzy45sv_test.go:34: expected '%!s(int=3)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbjzy45sv_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=1)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpbjzy45sv_test.go:34: expected '%!s(int=5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpbjzy45sv_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=1)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbjzy45sv_test.go:34: expected '%!s(int=7)', got '%!s(float64=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    size := len(l)\n    // If empty, return 0.\n    if size == 0\
    \ {\n        return 0\n    }\n    // If size is odd, return the one in the middle.\n\
    \    if size % 2 == 1 {\n        return float64(l[size / 2])\n    }\n    // If\
    \ size is even, return the average of two in the middle.\n    return (float64(l[size\
    \ / 2 - 1]) + float64(l[size / 2])) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp45t7g5p2_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp45t7g5p2_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp45t7g5p2_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    return (l[len(l)/2]\
    \ + l[(len(l)-1)/2]) / 2.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pejg52m_test.go:17:12: cannot use (l[len(l) / 2] + l[(len(l) - 1) / 2])
    / 2.0 (value of type int) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort the list.\n    // ...\n    // ...\n\n    // Get the length\
    \ of the list.\n    // ...\n\n    // Get the index of the element that has index\n\
    \    // equal to half of the length of the list.\n    // ...\n\n    // If the\
    \ list has odd number of elements, return\n    // this element.\n    // ...\n\n\
    \    // If the list has even number of elements, return\n    // the average of\
    \ the two middle elements.\n    // ...\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp3pm3v1db_test.go:52: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp3pm3v1db_test.go:52:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp3pm3v1db_test.go:52: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp3pm3v1db_test.go:52:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp3pm3v1db_test.go:52: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    var m float64\n    if len(l) % 2 == 0 {\n      \
    \  m = float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    } else {\n        m = float64(l[len(l)/2])\n\
    \    }\n    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp56cpp3fc_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073322
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var s []int\n    if len(l) > 0 {\n        s = make([]int, len(l))\n\
    \        copy(s, l)\n    } else {\n        s = l\n    }\n    for i := 0; i < len(s);\
    \ i++ {\n        for j := i; j < len(s); j++ {\n            if s[i] > s[j] {\n\
    \                s[i], s[j] = s[j], s[i]\n            }\n        }\n    }\n  \
    \  mid := len(s) / 2\n    if len(s) % 2 == 0 {\n        return float64(s[mid-1]\
    \ + s[mid]) / 2\n    } else {\n        return float64(s[mid])\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    return 0\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp7d6ge4tp_test.go:37: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp7d6ge4tp_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp7d6ge4tp_test.go:37: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp7d6ge4tp_test.go:37:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp7d6ge4tp_test.go:37: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    mid\
    \ := n / 2\n    if n % 2 == 0 {\n        return (float64(l[mid - 1]) + float64(l[mid]))\
    \ / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpcnuly4bm_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpcnuly4bm_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpcnuly4bm_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpkozdqqnd_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpkozdqqnd_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpkozdqqnd_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpkozdqqnd_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpkozdqqnd_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    if len(l) == 0 {\n        return 0\n    }\n\
    \    sort(l)\n    m = float64(l[len(l)/2] + l[(len(l)-1)/2]) / 2\n    return m\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcmd1po7_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073323
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpvqhjwc0e_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpvqhjwc0e_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpvqhjwc0e_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpvqhjwc0e_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpvqhjwc0e_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073324
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort the list.\n    n := len(l)\n    if n == 0 {\n       \
    \ return 0\n    }\n    for i := 0; i < n - 1; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j],\
    \ l[i]\n            }\n        }\n    }\n    // Get the median.\n    if n % 2\
    \ == 0 {\n        // Even number of elements\n        return float64(l[n / 2]\
    \ + l[n / 2 - 1]) / 2\n    } else {\n        // Odd number of elements\n     \
    \   return float64(l[n / 2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073324
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    sort(l)\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dmt3d7h_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    for i := 1;\
    \ i < len(l); i++ {\n        for j := i; j > 0 && l[j-1] > l[j]; j-- {\n     \
    \       l[j-1], l[j] = l[j], l[j-1]\n        }\n    }\n\n    if len(l) % 2 ==\
    \ 0 {\n        m := len(l) / 2\n        return float64(l[m] + l[m-1]) / 2\n  \
    \  }\n\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    size := len(l)\n    if size == 0 {\n        return 0\n    }\n\
    \n    sort(l)\n    if size%2 == 0 {\n        return float64(l[size/2-1]+l[size/2])/2\n\
    \    } else {\n        return float64(l[size/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50cjb63m_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64 = 0.0\n    // TODO: Implement function here.\n\
    \    return m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp1xei14u4_test.go:36: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp1xei14u4_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp1xei14u4_test.go:36: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp1xei14u4_test.go:36:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp1xei14u4_test.go:36: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    m := n / 2\n    s := l[:m]\n    for i := m +\
    \ 1; i < n; i++ {\n        j := 0\n        for ; j < m; j++ {\n            if\
    \ l[i] < s[j] {\n                break\n            }\n        }\n        s =\
    \ append(s[:j], append([]int{l[i]}, s[j:]...)...)\n        s = s[:m]\n    }\n\
    \    if n % 2 == 0 {\n        return (float64(s[m-1]) + float64(s[m])) / 2\n \
    \   }\n    return float64(s[m])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.median({0xc00007e600, 0xd0?, 0x0?})\n\t\
    /tmp/tmp22ftjnqh_test.go:30 +0x265\ncommand-line-arguments_test.TestMedian(0x0?)\n\
    \t/tmp/tmp22ftjnqh_test.go:40 +0x9f\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // You can do it!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6zdh98qj_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6zdh98qj_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp6zdh98qj_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp6zdh98qj_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6zdh98qj_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    l2 := append([]int{}, l...)\n    n := len(l2)\n\
    \    if n == 0 {\n        return 0\n    }\n    for i := 0; i < n; i++ {\n    \
    \    for j := 0; j < n-1; j++ {\n            if l2[j] > l2[j+1] {\n          \
    \      l2[j], l2[j+1] = l2[j+1], l2[j]\n            }\n        }\n    }\n    if\
    \ n % 2 == 0 {\n        m = float64(l2[n/2] + l2[n/2 - 1]) / 2\n    } else {\n\
    \        m = float64(l2[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    length := len(l)\n    if length == 0 {\n        return float64(0)\n\
    \    }\n    if length % 2 == 0 {\n        l1 := l[length/2-1]\n        l2 := l[length/2]\n\
    \        return float64(l1+l2) / 2\n    }\n    return float64(l[length/2])\n}\n\
    \nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpy81nclaf_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpy81nclaf_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpy81nclaf_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    x := 0.0\n    switch {\n    case n == 0:\n \
    \       return x\n    case n == 1:\n        return float64(l[0])\n    case n ==\
    \ 2:\n        return float64(l[0] + l[1]) / 2.0\n    }\n    sort(l)\n    if n\
    \ % 2 == 0 {\n        x = float64(l[n/2-1] + l[n/2]) / 2.0\n    } else {\n   \
    \     x = float64(l[n/2])\n    }\n    return x\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv61ht3_b_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2]) +\
    \ float64(l[len(l)/2 - 1])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpfpz4vz1d_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpfpz4vz1d_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpfpz4vz1d_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    a := make([]int, len(l))\n    for i, v := range l {\n       \
    \ a[i] = v\n    }\n    return findMedian(a)\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknperyy9_test.go:18:12: undefined: findMedian

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Implement me!\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmprwbf1o12_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmprwbf1o12_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmprwbf1o12_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2])\
    \ + float64(l[len(l)/2 - 1])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\
    \nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeoziw767_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    count := len(l)\n    if count == 0 {\n        return 0\n    }\n\
    \    half := count / 2\n    if count % 2 == 0 {\n        return float64(l[half]\
    \ + l[half - 1]) / 2\n    }\n    return float64(l[half])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4edp72t8_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4edp72t8_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4edp72t8_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Basic solution.\n    // 1. Sort the list.\n    // 2. Find\
    \ the median.\n\n    // Improvement 1.\n    // 1. Check the length of list.\n\
    \    // 2. If length is even, average two middle numbers.\n    // 3. If length\
    \ is odd, return the middle number.\n\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr2u1us04_test.go:43: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr2u1us04_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpr2u1us04_test.go:43: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpr2u1us04_test.go:43:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr2u1us04_test.go:43: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    m := len(l) /\
    \ 2\n    if len(l) % 2 == 0 {\n        return (float64(l[m-1]) + float64(l[m]))\
    \ / 2\n    }\n    return float64(l[m])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpvvwmup0u_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpvvwmup0u_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpvvwmup0u_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073325
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // check if l is empty.\n    if len(l) == 0 {\n        panic(\"\
    The list is empty\")\n    }\n\n    // Sort the list and then obtain the median.\n\
    \    quickSort(l)\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2-1]\
    \ + l[len(l)/2]) / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4isilyz_test.go:20:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073324
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) %\
    \ 2 == 0 {\n        return float64(l[len(l)/2-1] + l[len(l)/2]) / 2\n    } else\
    \ {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4q_itnsg_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4q_itnsg_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4q_itnsg_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    length := len(l)\n    if length == 0 {\n        return 0\n  \
    \  }\n    l = qsort(l)\n    return float64(l[length/2] + l[(length-1)/2]) / 2\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptgytiewk_test.go:18:9: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Note: You may use sort.Ints or sort.Float64s here.\n    //\
    \ Note: You may also use len to get the length of l.\n    return 0.0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpsvul170e_test.go:36: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpsvul170e_test.go:36:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpsvul170e_test.go:36: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpsvul170e_test.go:36:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpsvul170e_test.go:36: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2-1]\
    \ + l[len(l)/2]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsmghwn91_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073326
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Implement this.\n    var newList []int\n    newList = append(newList,\
    \ l...)\n    var median float64\n    median = 0.0\n    sort(newList)\n    if len(newList)\
    \ % 2 == 0 {\n        return (float64(newList[(len(newList) / 2) - 1]) + float64(newList[len(newList)\
    \ / 2])) / 2\n    } else {\n        return float64(newList[len(newList) / 2])\n\
    \    }\n    return median\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqputpkms_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var f float64\n    switch len(l) {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return float64(l[0])\n    case 2:\n        return float64(l[0]+l[1])\
    \ / 2\n    default:\n        h := len(l) / 2\n        f = float64(l[h] + l[h-1])\
    \ / 2\n    }\n    return f\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpznr826oa_test.go:46: expected '%!s(int=3)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpznr826oa_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpznr826oa_test.go:46: expected '%!s(int=7)', got '%!s(float64=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        a := l[len(l)/2 - 1]\n        b := l[len(l)/2]\n        return\
    \ float64(a + b) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpbdwgy7fg_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbdwgy7fg_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpbdwgy7fg_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return float64(l[0])\n    }\n    for i := 0; i < n - 1; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            if l[i] > l[j] {\n    \
    \            l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    if\
    \ n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n \
    \   return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 3.14\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2tfikhkg_test.go:34: expected '%!s(int=3)', got '%!s(float64=3.14)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2tfikhkg_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=3.14)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp2tfikhkg_test.go:34: expected '%!s(int=5)', got '%!s(float64=3.14)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp2tfikhkg_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=3.14)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2tfikhkg_test.go:34: expected '%!s(int=7)', got '%!s(float64=3.14)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Complete this function.\n    size := len(l)\n    if size ==\
    \ 0 {\n        return 0\n    }\n    if size == 1 {\n        return float64(l[0])\n\
    \    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpf9akdyme_test.go:42: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpf9akdyme_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmpf9akdyme_test.go:42: expected '%!s(float64=5.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpf9akdyme_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Implement median here.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpos1y_m4__test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpos1y_m4__test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpos1y_m4__test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpos1y_m4__test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpos1y_m4__test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2 - 1])\
    \ + float64(l[len(l)/2])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp922u9icz_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp922u9icz_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp922u9icz_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid-1]\
    \ + l[mid]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpy3ppqzo3_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpy3ppqzo3_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpy3ppqzo3_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var l_sorted []int\n    l_sorted = make([]int, len(l))\n    copy(l_sorted,\
    \ l)\n    sort(l_sorted)\n    if len(l_sorted) % 2 == 0 {\n        return (float64(l_sorted[len(l_sorted)/2])\
    \ + float64(l_sorted[len(l_sorted)/2-1])) / 2\n    } else {\n        return float64(l_sorted[len(l_sorted)/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptwp6fxon_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 3.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp61jh1avn_test.go:34: expected '%!s(float64=8)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestMedian/test_num__2 (0.00s)\n        tmp61jh1avn_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(float64=3)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmp61jh1avn_test.go:34: expected '%!s(float64=5.5)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp61jh1avn_test.go:34:\
    \ expected '%!s(int=7)', got '%!s(float64=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Fill in this function.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpvj8vut0x_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpvj8vut0x_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpvj8vut0x_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpvj8vut0x_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpvj8vut0x_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpcbv6cewq_test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpcbv6cewq_test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpcbv6cewq_test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var median, numElements int\n    var total int\n    numElements\
    \ = len(l)\n    if (numElements % 2) == 0 {\n        median = numElements / 2\n\
    \        total = l[median] + l[median-1]\n        return float64(total) / 2\n\
    \    } else {\n        median = numElements / 2\n        return float64(l[median])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dhj5f3d_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dhj5f3d_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dhj5f3d_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    var m float64\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n % 2 == 0 {\n        m = float64(l[n/2] + l[n/2-1]) / 2\n\
    \    } else {\n        m = float64(l[n/2])\n    }\n    return m\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp4e6cbi58_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4e6cbi58_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp4e6cbi58_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    var\
    \ mid float64\n    if n % 2 == 0 {\n        mid = float64(l[n/2-1] + l[n/2]) /\
    \ 2\n    } else {\n        mid = float64(l[n/2])\n    }\n    return mid\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp1_8zngxy_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp1_8zngxy_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp1_8zngxy_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    l = mergeSort(l)\n    if len(l)\
    \ % 2 == 0 {\n        idx := len(l) / 2\n        return (float64(l[idx]) + float64(l[idx-1]))\
    \ / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89radh0r_test.go:20:9: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    // First check\
    \ if the list has an even or odd number of elements.\n    if len(l) % 2 == 0 {\n\
    \        // Even number of elements. Need to compute the average of the\n    \
    \    // two middle elements.\n        // For example, in the list [2, 3, 4, 5,\
    \ 6] the middle elements\n        // are 3 and 4, and the average is 3.5.\n  \
    \      // In the list [3, 1, 2, 4, 5] the middle elements are 2 and 3,\n     \
    \   // and the average is 2.5.\n        //\n        // Find the index of the first\
    \ middle element.\n        // In the first example, it is 2.\n        // In the\
    \ second example, it is 1.\n        index1 := (len(l) / 2) - 1\n        // Get\
    \ the first middle element.\n        // In the first example, it is 4.\n     \
    \   // In the second example, it is 2.\n        a := l[index1]\n        // In\
    \ the first example, the index of the second middle element\n        // is 2.\n\
    \        // In the second example, it is 2.\n        index2 := len(l) / 2\n  \
    \      // Get the second middle element.\n        // In the first example, it\
    \ is 5.\n        // In the second example, it is 3.\n        b := l[index2]\n\
    \        // Compute the average of the middle elements.\n        return float64(a\
    \ + b) / 2\n    } else {\n        // Odd number of elements. Find the index of\
    \ the middle element.\n        // In the list [1, 2, 3, 4] the middle element\
    \ is 2.\n        // In the list [2, 3, 4, 5, 6] the middle element is 3.\n   \
    \     index := len(l) / 2\n        // Get the element at that index.\n       \
    \ // In the first example, it is 2.\n        // In the second example, it is 3.\n\
    \        return float64(l[index])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpubgmwqah_test.go:74: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpubgmwqah_test.go:74:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpubgmwqah_test.go:74: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // In the case of an even number of elements, the median\n  \
    \  // is the mean of the two middle elements.\n    var half, i int\n    var v\
    \ float64\n\n    switch {\n    case len(l) == 0:\n        return 0\n    case len(l)\
    \ == 1:\n        return float64(l[0])\n    case len(l)%2 == 0:\n        half =\
    \ len(l) / 2\n        i = half - 1\n        v = float64(l[i] + l[i+1])\n     \
    \   return v / 2\n    }\n\n    half = len(l) / 2\n    return float64(l[half])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpgdgbro04_test.go:52: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpgdgbro04_test.go:52:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpgdgbro04_test.go:52: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64 = 0\n    count := len(l)\n    if count % 2 == 0\
    \ {\n        m = float64(l[count/2-1] + l[count/2]) / 2\n    } else {\n      \
    \  m = float64(l[count/2])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpxdmc6_c1_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxdmc6_c1_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpxdmc6_c1_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var sum float64\n    for _, v := range l {\n        sum += float64(v)\n\
    \    }\n    return sum / float64(len(l))\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp_zf26mok_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp_zf26mok_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n % 2 == 0 {\n        return float64(l[n/2]\
    \ + l[n/2-1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpgoyosxve_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpgoyosxve_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpgoyosxve_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    // Create sorted\
    \ copy of the slice l.\n    l_cpy := make([]int, len(l))\n    copy(l_cpy, l)\n\
    \    quicksort(l_cpy)\n\n    mid := len(l_cpy) / 2\n    if len(l_cpy) % 2 == 0\
    \ {\n        // Even number of elements.\n        return float64(l_cpy[mid-1]\
    \ + l_cpy[mid]) / 2\n    } else {\n        // Odd number of elements.\n      \
    \  return float64(l_cpy[mid])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n \
    \ candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt1trmtkp_test.go:21:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n\n   \
    \ if n == 1 {\n        return float64(l[0])\n    }\n\n    return 0\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp0gp4_bzl_test.go:43: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp0gp4_bzl_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmp0gp4_bzl_test.go:43: expected '%!s(float64=5.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp0gp4_bzl_test.go:43:\
    \ expected '%!s(int=7)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Insert code here.\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpfayzw19d_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpfayzw19d_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpfayzw19d_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpfayzw19d_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpfayzw19d_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    sorted\
    \ := make([]int, n)\n    copy(sorted, l)\n    for i := 1; i < n; i++ {\n     \
    \   for j := i; j > 0 && sorted[j-1] > sorted[j]; j-- {\n            sorted[j-1],\
    \ sorted[j] = sorted[j], sorted[j-1]\n        }\n    }\n    if n % 2 == 0 {\n\
    \        return float64(sorted[n/2] + sorted[n/2-1]) / 2\n    }\n    return float64(sorted[n/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073329
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sortList(l)\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n\
    \        return (float64(l[mid]) + float64(l[mid-1])) / 2\n    }\n    return float64(l[mid])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxe_q26lb_test.go:14:5: undefined: sortList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    l_len := len(l)\n    // fmt.Println(l_len)\n    if l_len % 2\
    \ == 0 {\n        return (float64(l[l_len/2]) + float64(l[l_len/2-1])) / 2\n \
    \   } else {\n        return float64(l[l_len/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpql5i_qap_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpql5i_qap_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpql5i_qap_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        // even\n        mid := len(l)\
    \ / 2\n        left := l[mid-1]\n        right := l[mid]\n        return float64(left\
    \ + right) / 2\n    } else {\n        // odd\n        mid := (len(l) - 1) / 2\n\
    \        return float64(l[mid])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp_51l301w_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp_51l301w_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp_51l301w_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64 = 0\n    l = insertionSort(l)\n    if len(l) %\
    \ 2 == 0 {\n        m = float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    } else\
    \ {\n        m = float64(l[len(l)/2])\n    }\n    return m\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedstdpyr_test.go:15:9: undefined: insertionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Check the length of l is 0, otherwise it's crash.\n    if\
    \ len(l) == 0 {\n        return 0\n    }\n\n    // return len(l) / 2\n    var\
    \ sorted_l = make([]int, len(l))\n    copy(sorted_l, l)\n    quick_sort(sorted_l)\n\
    \n    i := len(sorted_l) / 2\n    if len(sorted_l) % 2 == 0 {\n        return\
    \ float64(sorted_l[i] + sorted_l[i - 1]) / 2\n    }\n    return float64(sorted_l[i])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcbo3l5ek_test.go:22:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    sort_list(l)\n    mid := len(l) / 2\n \
    \   if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid-1]) / 2\n    }\n\
    \    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzcc2fdx_test.go:23:5: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    total := 0\n    n := len(l)\n    for _, i := range l {\n    \
    \    total += i\n    }\n    return float64(total) / float64(n)\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp1vh7qpz8_test.go:39: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp1vh7qpz8_test.go:39:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    // sorted array\n    m := make([]int, n)\n \
    \   copy(m, l)\n    for i := 1; i < n; i++ {\n        for j := i; j > 0 && m[j]\
    \ < m[j-1]; j-- {\n            m[j], m[j-1] = m[j-1], m[j]\n        }\n    }\n\
    \    if n % 2 == 0 {\n        return float64(m[n/2] + m[n/2-1]) / 2\n    }\n \
    \   return float64(m[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var f, mid float64\n    //sort.Ints(l)\n    count := len(l)\n\
    \    if count % 2 == 0 {\n        f = float64(l[count/2-1] + l[count/2])\n   \
    \     mid = f / 2\n    } else {\n        mid = float64(l[count/2])\n    }\n  \
    \  return mid\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpo949gddv_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpo949gddv_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpo949gddv_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64 = 0\n    len := len(l)\n    if len == 0 {\n   \
    \     return m\n    }\n    for _, v := range l {\n        m += float64(v)\n  \
    \  }\n    return m / float64(len)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp2e2o1vcy_test.go:42: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp2e2o1vcy_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // The median of an empty list is 0.\n    if len(l) == 0 {\n\
    \        return 0\n    }\n\n    // Calculate the median.\n    var m float64\n\
    \    l = sort(l)\n    n := len(l)\n    if n % 2 == 0 {\n        m = float64(l[n/2]\
    \ + l[n/2-1]) / 2\n    } else {\n        m = float64(l[n/2])\n    }\n    return\
    \ m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8un95tds_test.go:21:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    var n = len(l)\n    if n == 0 {\n        return\
    \ 0\n    }\n    var i, j int\n    for i = 0; i < n-1; i++ {\n        for j = i\
    \ + 1; j < n; j++ {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n    m = float64(l[n/2])\n   \
    \ if n%2 == 0 {\n        m = float64(l[n/2-1]+l[n/2]) / 2\n    }\n    return m\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    middle := len(l) / 2\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[middle-1] + l[middle]) / 2\n    }\n    return float64(l[middle])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpwvx51pdz_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpwvx51pdz_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpwvx51pdz_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Make sure the list is sorted.\n    sort(l)\n    // If the\
    \ list has even number of elements, we return the median.\n    if len(l) % 2 ==\
    \ 0 {\n        // Index of the middle element.\n        i := len(l) / 2\n    \
    \    return float64(l[i] + l[i - 1]) / 2\n    }\n    // The list has odd number\
    \ of elements, we return the element at the index.\n    return float64(l[len(l)\
    \ / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc5c3ekez_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return float64(0)\n   \
    \ }\n    sum := 0\n    for _, e := range l {\n        sum += e\n    }\n    return\
    \ float64(sum) / float64(n)\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmpdgcmeeih_test.go:42: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpdgcmeeih_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var result float64\n    size := len(l)\n    for _, i := range\
    \ l {\n        result += float64(i)\n    }\n    return result / float64(size)\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmprsfoq2b0_test.go:39: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmprsfoq2b0_test.go:39:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if n & 1 == 1 {\n        return float64(l[n/2])\n\
    \    }\n    if l[n/2-1] > l[n/2] {\n        swap(l, n/2-1, n/2)\n    }\n    return\
    \ float64(l[n/2-1] + l[n/2]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y_u5s9u_test.go:28:9: undefined: swap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if l == nil || len(l) == 0 {\n        return 0\n    }\n    l\
    \ = bubbleSort(l)\n    if len(l) % 2 == 0 {\n        sum := float64(l[len(l)/2\
    \ - 1] + l[len(l)/2])\n        return sum / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaeib3wuu_test.go:17:9: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // WRITE ME!\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp0t2dazuu_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp0t2dazuu_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmp0t2dazuu_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp0t2dazuu_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp0t2dazuu_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    l = quickSort(l)\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n\
    \    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprpxc17jw_test.go:20:9: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073330
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    for i := range\
    \ l {\n        for j := i+1; j < len(l); j++ {\n            if l[i] > l[j] {\n\
    \                tmp := l[i]\n                l[i] = l[j]\n                l[j]\
    \ = tmp\n            }\n        }\n    }\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: Implement the function.\n    fmt.Println(l)\n    return\
    \ 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[3 1 2 4 5]\n[-10 4 6 1000 10 20]\n[5]\n[6 5]\n[8 1 3 9 9 2 7]\n--- FAIL:\
    \ TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpn2oa__xv_test.go:36:\
    \ expected '%!s(int=3)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__1\
    \ (0.00s)\n        tmpn2oa__xv_test.go:36: expected '%!s(float64=8)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__2 (0.00s)\n        tmpn2oa__xv_test.go:36:\
    \ expected '%!s(int=5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmpn2oa__xv_test.go:36: expected '%!s(float64=5.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpn2oa__xv_test.go:36:\
    \ expected '%!s(int=7)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n % 2 == 0 {\n        m1 := n / 2\n     \
    \   m2 := m1 - 1\n        return float64(l[m1] + l[m2]) / 2\n    }\n    m := n\
    \ / 2\n    return float64(l[m])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp8idqviil_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp8idqviil_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp8idqviil_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    l = qsort(l)\n\
    \    m := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (float64(l[m])\
    \ + float64(l[m-1])) / 2\n    }\n    return float64(l[m])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhxim893_test.go:17:9: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    mid := n / 2\n    var m float64\n    if n %\
    \ 2 == 0 {\n        m = float64(l[mid-1] + l[mid]) / 2\n    } else {\n       \
    \ m = float64(l[mid])\n    }\n    return m\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpdspkipdk_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpdspkipdk_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpdspkipdk_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073331
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Check if the list is empty.\n    if len(l) == 0 {\n      \
    \  return 0\n    }\n\n    // Sort list.\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n   \
    \             tmp := l[i]\n                l[i] = l[j]\n                l[j] =\
    \ tmp\n            }\n        }\n    }\n\n    // Return median.\n    if len(l)\
    \ % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n\
    \    } else {\n        return float64(l[len(l) / 2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073331
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if l == nil || len(l) == 0 {\n        return 0\n    }\n    l\
    \ = heapSort(l)\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscbiu7n7_test.go:17:9: undefined: heapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073331
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Return error if list is empty.\n    if len(l) == 0 {\n   \
    \     return 0\n    }\n\n    // Sort the list.\n    for i := 0; i < len(l); i++\
    \ {\n        j := i\n        for j > 0 && l[j-1] > l[j] {\n            l[j-1],\
    \ l[j] = l[j], l[j-1]\n            j--\n        }\n    }\n\n    // Return median,\
    \ taking into account if list is even or odd\n    if len(l) % 2 == 0 {\n     \
    \   return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    } else {\n        return\
    \ float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var sum int\n    for _, v := range l {\n        sum += v\n  \
    \  }\n    return float64(sum) / float64(len(l))\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmptzncv3h1_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmptzncv3h1_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return float64(0)\n   \
    \ }\n    l = mergeSort(l)\n    if n % 2 == 0 {\n        a := l[n/2 - 1]\n    \
    \    b := l[n/2]\n        return float64(a + b) / 2\n    }\n    return float64(l[n/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0znl48nk_test.go:18:9: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        if l[0] > l[1]\
    \ {\n            return float64(l[1])\n        }\n        if l[1] > l[2] {\n \
    \           return float64(l[1])\n        }\n        return float64(l[2])\n  \
    \  }\n    if len(l) > 3 {\n        mid := len(l) / 2\n        return (median(l[:mid])\
    \ + median(l[mid:])) / 2\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzdb04hmc_test.go:56: expected '%!s(int=3)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpzdb04hmc_test.go:56:\
    \ expected '%!s(int=7)', got '%!s(float64=3.875)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    size := len(l)\n    if size == 0 {\n        return 0\n    }\n\
    \    if size == 1 {\n        return float64(l[0])\n    }\n    sort(l)\n    if\
    \ size % 2 == 0 {\n        mid := size / 2\n        return (float64(l[mid]) +\
    \ float64(l[mid-1])) / 2\n    }\n    return float64(l[size/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdy00i7qo_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n % 2 == 0 {\n        // even-length list\n\
    \        return float64(l[n/2] + l[n/2-1]) / 2\n    } else {\n        // odd-length\
    \ list\n        return float64(l[n/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpwi0x5xmc_test.go:41: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpwi0x5xmc_test.go:41:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpwi0x5xmc_test.go:41: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    var listCopy\
    \ []int = make([]int, len(l))\n    copy(listCopy, l)\n\n    for i := 1; i < len(listCopy);\
    \ i++ {\n        for j := i; j > 0 && listCopy[j-1] > listCopy[j]; j-- {\n   \
    \         listCopy[j-1], listCopy[j] = listCopy[j], listCopy[j-1]\n        }\n\
    \    }\n\n    var mid float64 = (float64(len(listCopy)) - 1) / 2\n    var even\
    \ = mid - float64(int(mid)) == 0\n    if even {\n        return float64(listCopy[int(mid)])\n\
    \    } else {\n        return float64(listCopy[int(mid)] + listCopy[int(mid) +\
    \ 1]) / 2\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var mid float64\n    s := len(l)\n    tmp := make([]int, s)\n\
    \    copy(tmp, l)\n    fmt.Println(tmp)\n    for i := 0; i < s; i++ {\n      \
    \  for j := i + 1; j < s; j++ {\n            if tmp[i] > tmp[j] {\n          \
    \      tmp[i], tmp[j] = tmp[j], tmp[i]\n            }\n        }\n    }\n    fmt.Println(tmp)\n\
    \    if s % 2 == 0 {\n        mid = float64(tmp[s/2] + tmp[s/2-1]) / 2\n    }\
    \ else {\n        mid = float64(tmp[s/2])\n    }\n    return mid\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmphlz616x0_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmphlz616x0_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmphlz616x0_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return float64(0)\n   \
    \ }\n\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2-1]) / 2\n  \
    \  }\n\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpswjqaqto_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpswjqaqto_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpswjqaqto_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // We use bubble sort to sort the list\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := 0; j < len(l) - 1; j++ {\n            if l[j] > l[j\
    \ + 1] {\n                temp := l[j]\n                l[j] = l[j + 1]\n    \
    \            l[j + 1] = temp\n            }\n        }\n    }\n\n    // Calculate\
    \ the median, depending on whether the length\n    // of the list is even or odd.\n\
    \    if len(l) % 2 == 0 {\n        a := len(l) / 2\n        b := a - 1\n     \
    \   return float64(l[a] + l[b]) / 2\n    } else {\n        return float64(l[len(l)\
    \ / 2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var n = len(l)\n    var i, j int\n    var sum float64\n\n   \
    \ for i = 0; i < n; i++ {\n        for j = i; j < n; j++ {\n            if l[i]\
    \ > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n\n    if n%2 == 0 {\n        sum = float64(l[n/2] + l[n/2-1])\n      \
    \  return sum / 2\n    }\n\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptbqo93tl_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmptbqo93tl_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmptbqo93tl_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    s := make([]int, len(l))\n    copy(s, l)\n    len := len(s)\n\
    \    if len == 0 {\n        return 0\n    }\n    for i := 1; i < len; i++ {\n\
    \        for j := i; j > 0 && s[j-1] > s[j]; j-- {\n            s[j-1], s[j] =\
    \ s[j], s[j-1]\n        }\n    }\n    if len % 2 == 0 {\n        return float64(s[len/2-1]+s[len/2])\
    \ / 2\n    } else {\n        return float64(s[len/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var (\n        res     float64\n        isOdd   bool\n      \
    \  mid     int\n        midSum  int\n    )\n\n    isOdd = len(l) % 2 == 1\n  \
    \  mid = len(l) / 2\n\n    if isOdd {\n        midSum = l[mid]\n    } else {\n\
    \        midSum = l[mid] + l[mid + 1]\n    }\n\n    res = float64(midSum) / float64(2)\n\
    \n    return res\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.median(...)\n\t/tmp/tmptjqrvovi_test.go:27\n\
    command-line-arguments_test.TestMedian(0x0?)\n\t/tmp/tmptjqrvovi_test.go:45 +0x1b\n\
    testing.tRunner(0xc0000cc4e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    n := len(l)\n\
    \    sorted_l := merge_sort(l)\n    fmt.Println(sorted_l)\n    if n % 2 == 0 {\n\
    \        even := float64(sorted_l[n/2] + sorted_l[n/2 - 1]) / 2\n        return\
    \ even\n    } else {\n        odd := float64(sorted_l[n/2])\n        return odd\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp72vlye1i_test.go:18:17: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    l = sort(l)\n    if n % 2 == 0 {\n        //\
    \ even\n        return float64(l[n/2-1] + l[n/2]) / 2\n    } else {\n        //\
    \ odd\n        return float64(l[n/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbz_osqoc_test.go:15:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        mid := len(l)\
    \ / 2\n        return float64(l[mid] + l[mid-1]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpeoax0jsz_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpeoax0jsz_test.go:47:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpeoax0jsz_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmptqaep6tq_test.go:34: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmptqaep6tq_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=1000)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmptqaep6tq_test.go:34: expected '%!s(float64=5.5)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmptqaep6tq_test.go:34:\
    \ expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sum := 0\n    for _, i := range l {\n        sum += i\n    }\n\
    \    return float64(sum) / float64(len(l))\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp2dax1iui_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp2dax1iui_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2\
    \ - 1]) / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp7ld93gsy_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp7ld93gsy_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp7ld93gsy_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    middle := len(l) / 2\n    if len(l) % 2 == 0 {\n        return\
    \ float64(l[middle] + l[middle-1]) / 2\n    }\n    return float64(l[middle])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpsi0wx2kr_test.go:38: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpsi0wx2kr_test.go:38:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpsi0wx2kr_test.go:38: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    sort(l)\n  \
    \  if len(l)%2 == 0 {\n        return (float64(l[len(l)/2-1]) + float64(l[len(l)/2]))\
    \ / 2\n    } else {\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvikvbxp_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // The 0.5 is a cut-off.\n    if len(l) == 0 {\n        return\
    \ 0.5\n    }\n    // Sorting the list is not part of the algorithm.\n    // However,\
    \ the algorithm only works with a sorted list.\n    // Thus, the list has to be\
    \ sorted.\n    sorted := sort(l)\n    // Print the list in a neatly formated way.\n\
    \    fmt.Printf(\"%v\\n\", sorted)\n    // The list is sorted.\n    // Thus, the\
    \ median is either in the middle,\n    // or the mean of the two elements in the\
    \ middle.\n    if len(sorted) % 2 == 0 {\n        // The list has an even length.\n\
    \        // Thus, the median is the mean of the two elements in the middle.\n\
    \        return float64(sorted[len(sorted)/2-1]+sorted[len(sorted)/2]) / 2\n \
    \   } else {\n        // The list has an odd length.\n        // Thus, the median\
    \ is the middle element.\n        return float64(sorted[len(sorted)/2])\n    }\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytka7mm6_test.go:21:15: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var result float64\n    for _, i := range l {\n        result\
    \ += float64(i)\n    }\n    return result / float64(len(l))\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp224lgb19_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp224lgb19_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        mid1 := l[len(l)/2]\n        mid2 := l[len(l)/2 - 1]\n     \
    \   return float64(mid1 + mid2) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpffwcq8pp_test.go:42: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpffwcq8pp_test.go:42:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpffwcq8pp_test.go:42: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n\
    \    return float64(sum) / float64(len(l))\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp3o5ez3m3_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp3o5ez3m3_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    l = selectionSort(l)\n    if len(l) % 2 == 0 {\n        // Even\
    \ number of elements\n        a := l[len(l)/2]\n        b := l[len(l)/2-1]\n \
    \       return float64(a+b) / 2\n    } else {\n        // Odd number of elements\n\
    \        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptn76s79m_test.go:14:9: undefined: selectionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073334
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 15.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpy29gl2my_test.go:34: expected '%!s(int=3)', got '%!s(float64=15)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpy29gl2my_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=15)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpy29gl2my_test.go:34: expected '%!s(int=5)', got '%!s(float64=15)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpy29gl2my_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=15)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpy29gl2my_test.go:34: expected '%!s(int=7)', got '%!s(float64=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    length := len(l)\n    if length == 0 {\n        return 0\n  \
    \  }\n    if length == 1 {\n        return float64(l[0])\n    }\n    if length\
    \ % 2 == 0 {\n        return float64(l[length/2] + l[length/2-1]) / 2\n    }\n\
    \    return float64(l[length/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmply0m0szu_test.go:44: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmply0m0szu_test.go:44:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmply0m0szu_test.go:44: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n\n    if len(l) % 2 == 0 {\n     \
    \   // even\n        i1 := len(l) / 2\n        i2 := i1 - 1\n        return (float64(l[i1])\
    \ + float64(l[i2])) / 2\n    }\n\n    // odd\n    i := len(l) / 2\n    return\
    \ float64(l[i])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp8wml5ltk_test.go:51: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp8wml5ltk_test.go:51:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp8wml5ltk_test.go:51: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2-1])\
    \ + float64(l[len(l)/2])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpmbnwlv6__test.go:37: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpmbnwlv6__test.go:37:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpmbnwlv6__test.go:37: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    l = mergeSort(l)\n\
    \    // \u4E8C\u5206\u6CD5\u7684\u601D\u60F3\n    l1 := l[:(len(l) / 2)]\n   \
    \ l2 := l[(len(l) / 2):]\n    if len(l) % 2 == 0 {\n        return float64(l1[len(l1)\
    \ - 1] + l2[0]) / 2\n    } else {\n        return float64(l2[0])\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3za46i7_test.go:17:9: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return (float64(l[len(l)/2-1]) + float64(l[len(l)/2])) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpi6s1h02z_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpi6s1h02z_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpi6s1h02z_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    for index := 1; index < len(l); index++ {\n        for j := index;\
    \ j > 0; j-- {\n            if l[j] < l[j-1] {\n                l[j], l[j-1] =\
    \ l[j-1], l[j]\n            }\n        }\n    }\n    if len(l) % 2 == 0 {\n  \
    \      return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    } else {\n       \
    \ return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n \
    \ candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073335
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sorted_l := append([]int{}, l...)\n    sort(sorted_l)\n    num\
    \ := len(sorted_l)\n    if num % 2 == 0 {\n        return float64(sorted_l[num/2]\
    \ + sorted_l[num/2 - 1]) / 2\n    } else {\n        return float64(sorted_l[num/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8d_3nb9_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    const NotFound = 0\n    const Odd = 1\n    const Even = 2\n \
    \   i, j := 0, len(l) - 1\n    for j > i {\n        t := l[i]\n        l[i] =\
    \ l[j]\n        l[j] = t\n        i++\n        j--\n    }\n    i, j = 0, len(l)\
    \ - 1\n    for j > i {\n        if l[i] < l[j] {\n            t := l[i]\n    \
    \        l[i] = l[j]\n            l[j] = t\n        }\n        i++\n        j--\n\
    \    }\n    m, r := NotFound, 0\n    if len(l) % 2 == 0 {\n        m = Even\n\
    \        r = len(l) / 2\n    } else {\n        m = Odd\n        r = len(l) / 2\n\
    \    }\n    if m == Even {\n        return float64(l[r] + l[r-1]) / 2\n    }\n\
    \    return float64(l[r])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate :=\
    \ median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp3asn75y7_test.go:66: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp3asn75y7_test.go:66:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp3asn75y7_test.go:66: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1\
    \ {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return\
    \ (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) == 3 {\n        var\
    \ s int\n        for _, v := range l {\n            s += v\n        }\n      \
    \  return float64(s) / 3\n    }\n    return 0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpzomfari2_test.go:50: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpzomfari2_test.go:50:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpzomfari2_test.go:50: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var m float64\n    n := len(l)\n    if n == 0 {\n        return\
    \ m\n    }\n    // Sort the list.\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            if l[i] > l[j] {\n                // Swap\
    \ l[i] and l[j].\n                l[i], l[j] = l[j], l[i]\n            }\n   \
    \     }\n    }\n    // Compute the median.\n    if n % 2 == 0 {\n        m = float64(l[n/2]\
    \ + l[n/2-1]) / 2\n    } else {\n        m = float64(l[n/2])\n    }\n    return\
    \ m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    if len(l) % 2 == 0 {\n        // n is even\n   \
    \     return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n    } else {\n\
    \        // n is odd\n        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdgpxuk52_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var sum float64 = 0.0\n    for _, v := range l {\n        sum\
    \ += float64(v)\n    }\n    return sum / float64(len(l))\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmpzvc2lr2h_test.go:38: expected '%!s(float64=8)', got '%!s(float64=171.66666666666666)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpzvc2lr2h_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(float64=5.571428571428571)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 5.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp2m9_p1r5_test.go:34: expected '%!s(int=3)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp2m9_p1r5_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=5)'\n    --- FAIL: TestMedian/test_num__3\
    \ (0.00s)\n        tmp2m9_p1r5_test.go:34: expected '%!s(float64=5.5)', got '%!s(float64=5)'\n\
    \    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp2m9_p1r5_test.go:34:\
    \ expected '%!s(int=7)', got '%!s(float64=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    switch len(l) {\n    case 0:\n        return 0\n    case 1:\n\
    \        return float64(l[0])\n    }\n    sort(l)\n    if len(l) % 2 == 0 {\n\
    \        return float64(l[len(l)/2-1]+l[len(l)/2]) / 2\n    }\n    return float64(l[len(l)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwuzd3syt_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    sort(l)\n    if\
    \ len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzro6wh2k_test.go:17:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var n int = len(l)\n    var sorted []int = make([]int, n)\n \
    \   copy(sorted, l)\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j <\
    \ n - i - 1; j++ {\n            if sorted[j] > sorted[j + 1] {\n             \
    \   sorted[j], sorted[j + 1] = sorted[j + 1], sorted[j]\n            }\n     \
    \   }\n    }\n    if n & 1 == 1 {\n        return float64(sorted[n / 2])\n   \
    \ } else {\n        return (float64(sorted[n / 2 - 1]) + float64(sorted[n / 2]))\
    \ / 2\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    size := len(l)\n    if size == 0 {\n        return 0\n    }\n\
    \    sort(l)\n    if size % 2 == 0 {\n        return float64(l[size/2]+l[size/2-1])\
    \ / 2\n    }\n    return float64(l[size/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxro2rwxc_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var t, s int\n    var m float64\n    m = float64(l[0])\n\n  \
    \  for k, _ := range l {\n        // first time through the loop, t and s have\
    \ a value of 0\n        t = t + l[k]\n        s = s + 1\n        // every time\
    \ through the loop, compare the new t and s\n        // to the previous t and\
    \ s (stored in m), and update m\n        // when appropriate\n        if t/s >\
    \ int(m) {\n            m = float64(t) / float64(s)\n        }\n    }\n    return\
    \ m\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n\
    \        tmp2g14os2p_test.go:49: expected '%!s(float64=8)', got '%!s(float64=250)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmp2g14os2p_test.go:49:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=6)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp2g14os2p_test.go:49: expected '%!s(int=7)', got '%!s(float64=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    n := len(l)\n\
    \    if len(l) % 2 == 0 {\n        return (float64(l[n/2]) + float64(l[n/2-1]))\
    \ / 2\n    } else {\n        return float64(l[n/2])\n    }\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp9b7ib7si_test.go:43: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp9b7ib7si_test.go:43:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp9b7ib7si_test.go:43: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Find the middle point of the list\n    m := len(l) / 2\n \
    \   if len(l) % 2 == 0 {\n        return (float64(l[m-1]) + float64(l[m])) / 2\n\
    \    }\n    return float64(l[m])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmprgc7hlqw_test.go:39: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprgc7hlqw_test.go:39:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmprgc7hlqw_test.go:39: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort the slice\n    sort.Ints(l)\n    length := len(l)\n \
    \   // Determine the type of slice\n    if length % 2 == 0 {\n        return float64(l[length/2]\
    \ + l[length/2 - 1]) / 2\n    } else {\n        return float64(l[length/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidod_t7f_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    median := 0.0\n    var even bool\n    len_l := len(l)\n    if\
    \ len_l == 0 {\n        return 0.0\n    } else if len_l % 2 == 0 {\n        even\
    \ = true\n    }\n    half_len := len_l / 2\n    half_len_part1 := half_len - 1\n\
    \    half_len_part2 := half_len\n    sorted_l := []int{}\n    sorted_l = append(sorted_l,\
    \ l...)\n    for i := 0; i < len_l; i++ {\n        for j := i + 1; j < len_l;\
    \ j++ {\n            if sorted_l[i] > sorted_l[j] {\n                sorted_l[i],\
    \ sorted_l[j] = sorted_l[j], sorted_l[i]\n            }\n        }\n    }\n  \
    \  if even {\n        median = float64(sorted_l[half_len_part1] + sorted_l[half_len_part2])\
    \ / 2\n    } else {\n        median = float64(sorted_l[half_len])\n    }\n   \
    \ return median\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n   \
    \ return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmp6dquwmj6_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6dquwmj6_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmp6dquwmj6_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2-1])\
    \ + float64(l[len(l)/2])) / 2\n    } else {\n        return float64(l[len(l)/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi09jvn5t_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var n int\n    n = len(l)\n    if n < 1 {\n        return 0\n\
    \    } else if n == 1 {\n        return float64(l[0])\n    } else if n % 2 ==\
    \ 0 {\n        // even\n        return (float64(l[n/2-1]) + float64(l[n/2])) /\
    \ 2\n    } else {\n        // odd\n        return float64(l[n/2])\n    }\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpgvlxb9ls_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpgvlxb9ls_test.go:46:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpgvlxb9ls_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Bubble sort.\n    for i := 0; i < len(l); i++ {\n        for\
    \ j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n              \
    \  // Swap.\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n\n    if len(l) % 2 == 0 {\n        // Median is average of middle two\
    \ values.\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    } else\
    \ {\n        // Median is the middle value.\n        return float64(l[len(l)/2])\n\
    \    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n\
    \     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // If l has an odd number of elements, median is middle element\
    \ of l.\n    if len(l) % 2 == 1 {\n        return float64(l[len(l)/2])\n    }\n\
    \    // If l has an even number of elements, median is the mean of the two middle\
    \ elements.\n    return float64(l[len(l)/2 - 1] + l[len(l)/2]) / 2\n}\n\nfunc\
    \ TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10,\
    \ 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
    \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n  \
    \   { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpn7_94fs1_test.go:39: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpn7_94fs1_test.go:39:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpn7_94fs1_test.go:39: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) ==\
    \ 1 {\n        return float64(l[0])\n    }\n\n    if len(l) % 2 == 0 {\n     \
    \   i := len(l) / 2\n        return float64(l[i-1] + l[i]) / 2\n    }\n\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpjroivdwn_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpjroivdwn_test.go:47:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpjroivdwn_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort l.\n    for i := 1; i < len(l); i++ {\n        k := l[i]\n\
    \        j := i - 1\n        for j >= 0 && l[j] > k {\n            l[j+1] = l[j]\n\
    \            j--\n        }\n        l[j+1] = k\n    }\n\n    if len(l) % 2 ==\
    \ 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    } else {\n\
    \        return float64(l[len(l)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    result := 0.0\n    return result\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpc5o3ekb2_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpc5o3ekb2_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpc5o3ekb2_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpc5o3ekb2_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpc5o3ekb2_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // [3, 1, 2, 4, 5] -> [1, 2, 3, 4, 5]\n    sort(l)\n    middleIndex\
    \ := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[middleIndex]\
    \ + l[middleIndex - 1]) / 2\n    }\n    return float64(l[middleIndex])\n}\n\n\
    func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeo7ziehp_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sorts the list l.\n    // Assume l is not nil.\n    sort(l)\n\
    \    lLen := len(l)\n    m := lLen / 2\n    if lLen % 2 == 0 {\n        // Even\
    \ number of elements in the list l.\n        return float64(l[m-1] + l[m]) / 2\n\
    \    } else {\n        // Odd number of elements in the list l.\n        return\
    \ float64(l[m])\n    }\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0qr62ys_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073337
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    sort(l)\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n  \
    \      return float64(l[mid] + l[mid-1]) / 2\n    }\n    return float64(l[mid])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthomjnj9_test.go:14:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    var len int = len(l)\n    if len == 0 {\n        return 0\n \
    \   }\n    // Quick sort.\n    var less func(i, j int) bool = func(i, j int) bool\
    \ {\n        return l[i] < l[j]\n    }\n    var swap func(i, j int) = func(i,\
    \ j int) {\n        l[i], l[j] = l[j], l[i]\n    }\n    var partition func(left,\
    \ right int) int = func(left, right int) int {\n        var pivot = left\n   \
    \     for i := left; i < right; i++ {\n            if less(i, pivot) {\n     \
    \           pivot++\n                swap(i, pivot)\n            }\n        }\n\
    \        swap(left, pivot)\n        return pivot\n    }\n    var sort func(left,\
    \ right int) = func(left, right int) {\n        if left < right {\n          \
    \  var pivot = partition(left, right)\n            sort(left, pivot - 1)\n   \
    \         sort(pivot + 1, right)\n        }\n    }\n    sort(0, len - 1)\n   \
    \ var median float64\n    if len % 2 == 0 {\n        var m = len / 2\n       \
    \ median = float64(l[m - 1] + l[m]) / 2\n    } else {\n        median = float64(l[len\
    \ / 2])\n    }\n    return median\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcqem5yqu_test.go:39:13: undefined: sort

    /tmp/tmpcqem5yqu_test.go:40:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    c := make([]int,\
    \ len(l))\n    copy(c, l)\n    sort(c)\n    if len(c) % 2 == 0 {\n        return\
    \ (float64(c[len(c)/2]) + float64(c[len(c)/2-1])) / 2\n    }\n    return float64(c[len(c)/2])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ovec6vi_test.go:19:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    s\
    \ := make([]int, n)\n    copy(s, l)\n    mid := n / 2\n    for i := 0; i < mid;\
    \ i++ {\n        for j := n - 1; j > i; j-- {\n            if s[j] < s[j - 1]\
    \ {\n                tmp := s[j]\n                s[j] = s[j - 1]\n          \
    \      s[j - 1] = tmp\n            }\n        }\n    }\n    if n % 2 == 0 {\n\
    \        return float64(s[mid] + s[mid - 1]) / 2\n    }\n    return float64(s[mid])\n\
    }\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual:\
    \ candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}),\
    \ expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected:\
    \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n\
    \        tmpzdjrmmvy_test.go:53: expected '%!s(int=7)', got '%!s(float64=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Implement me\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpaqvhr0ol_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpaqvhr0ol_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpaqvhr0ol_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpaqvhr0ol_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpaqvhr0ol_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) % 2 == 0 {\n        // If there are an even number\
    \ of elements, return the\n        // mean of the middle two.\n        return\
    \ float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    // Otherwise, return\
    \ the middle value.\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpksom0ipe_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpksom0ipe_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpksom0ipe_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    return 0.0\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate\
    \ := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpyqrp2ekc_test.go:34: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpyqrp2ekc_test.go:34:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpyqrp2ekc_test.go:34: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // Sort the list\n    sl := make([]int, len(l))\n    copy(sl,\
    \ l)\n    insertionSort(sl)\n\n    // Return median\n    if len(sl) % 2 == 0 {\n\
    \        return float64(sl[len(sl)/2] + sl[len(sl)/2-1]) / 2\n    } else {\n \
    \       return float64(sl[len(sl)/2])\n    }\n}\n\nfunc TestMedian(t *testing.T)\
    \ {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0jccvp__test.go:17:5: undefined: insertionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    // TODO: implement me\n    return 0.0\n}\n\nfunc TestMedian(t\
    \ *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000,\
    \ 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5\
    \ },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual:\
    \ candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmplij0p9kr_test.go:35: expected '%!s(int=3)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=8)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__2\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmplij0p9kr_test.go:35:\
    \ expected '%!s(float64=5.5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmplij0p9kr_test.go:35: expected '%!s(int=7)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return (float64(l[len(l)/2]) + float64(l[len(l)/2-1])) / 2\n\
    \    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n\
    \  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10,\
    \ 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n\
    \     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8,\
    \ 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmphlz616x0_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmphlz616x0_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmphlz616x0_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n\
    // 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int)\
    \ float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) % 2\
    \ == 0 {\n        return float64(l[len(l)/2]+l[len(l)/2-1]) / 2\n    }\n    return\
    \ float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0\
    \ },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6,\
    \ 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n\
    \        tmpr6_n5ay8_test.go:40: expected '%!s(int=3)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpr6_n5ay8_test.go:40:\
    \ expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4\
    \ (0.00s)\n        tmpr6_n5ay8_test.go:40: expected '%!s(int=7)', got '%!s(float64=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073322
