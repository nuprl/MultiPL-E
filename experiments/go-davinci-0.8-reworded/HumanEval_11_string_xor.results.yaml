language: go_test.go
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  len_a := len(a)\n    len_b := len(b)\n    if len_a != len_b {\n        panic(\"\
    length of a not equal to length of b\")\n    }\n    len_ab := len_a\n    s :=\
    \ make([]byte, len_ab)\n    for i := 0; i < len_ab; i++ {\n        a_i := a[i]\n\
    \        b_i := b[i]\n        if a_i == b_i {\n            s[i] = '0'\n      \
    \  } else {\n            s[i] = '1'\n        }\n    }\n    return string(s)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Length of a and b must be equal.\")\n\
    \    }\n    xored := \"\"\n    for i := 0; i < len(a); i++ {\n        bit1 :=\
    \ string(a[i])\n        bit2 := string(b[i])\n        if bit1 == bit2 {\n    \
    \        xored += \"0\"\n        } else {\n            xored += \"1\"\n      \
    \  }\n    }\n    return xored\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            res += \"0\"\n        } else {\n            res += \"1\"\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // code goes here\n    // Note: feel free to modify the return type of this\
    \ function\n    if len(a) != len(b) {\n        panic(\"Size of input not matched!\"\
    )\n    }\n    var result string\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"a and b need to be the same length\"\
    )\n    }\n    s := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            s += \"0\"\n        } else {\n            s += \"1\"\n \
    \       }\n    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // your code here\n    return \"\";\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpo4uq2wfb_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpo4uq2wfb_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpo4uq2wfb_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  n := len(a)\n    if n != len(b) {\n        panic(\"Two strings must have the\
    \ same length\")\n    }\n    r := make([]rune, n)\n    for i := 0; i < n; i++\
    \ {\n        if a[i] == b[i] {\n            r[i] = '0'\n        } else {\n   \
    \         r[i] = '1'\n        }\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  i, j := 0, 0\n    if len(a) > len(b) {\n        i = len(a) - len(b)\n    }\
    \ else {\n        j = len(b) - len(a)\n    }\n    var res []byte\n    var carry\
    \ byte\n    for i < len(a) || j < len(b) {\n        var aa, bb byte\n        if\
    \ i < len(a) {\n            aa = a[len(a) - i - 1] - '0'\n        }\n        if\
    \ j < len(b) {\n            bb = b[len(b) - j - 1] - '0'\n        }\n        i++\n\
    \        j++\n        var sum = aa + bb + carry\n        carry = sum / 2\n   \
    \     sum = sum % 2\n        res = append(res, sum + '0')\n    }\n    if carry\
    \ > 0 {\n        res = append(res, carry + '0')\n    }\n    r := make([]byte,\
    \ len(res))\n    for i, j := 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n \
    \       r[i], r[j] = res[j], res[i]\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp4xd0himx_test.go:61: expected '010010', got '110\0010'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp4xd0himx_test.go:61:\
    \ expected '0', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // your code goes here\n    fmt.Println(a,b)\n    var c string\n    for i:=0;\
    \ i<len(a); i++ {\n        if a[i] == b[i] {\n            c += \"0\"\n       \
    \ } else {\n            c += \"1\"\n        }\n    }\n    return c\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        r[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsd0u8m83_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsd0u8m83_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpsd0u8m83_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var length int\n    if len(a) > len(b) {\n        length = len(a)\n    } else\
    \ {\n        length = len(b)\n    }\n    result := make([]byte, length)\n    for\
    \ i := 0; i < length; i++ {\n        if a[i % len(a)] == b[i % len(b)] {\n   \
    \         result[i] = '0'\n        } else {\n            result[i] = '1'\n   \
    \     }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    if len(a) == len(b) {\n        for i := 0; i < len(a);\
    \ i++ {\n            if a[i] == b[i] {\n                result += \"0\"\n    \
    \        } else {\n                result += \"1\"\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073252
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  len := 0\n    if len(a) >= len(b) {\n        len = len(a)\n    } else {\n \
    \       len = len(b)\n    }\n    result := \"\"\n    for i := 0; i < len; i++\
    \ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv23wb1na_test.go:14:8: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpv23wb1na_test.go:15:15: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpv23wb1na_test.go:17:15: invalid operation: cannot call non-function len
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"Lengths of input strings are not equal.\"\
    \n    }\n    var a_runes = []rune(a)\n    var b_runes = []rune(b)\n    var result_runes\
    \ = make([]rune, len(a_runes))\n    for i := 0; i < len(a_runes); i++ {\n    \
    \    if a_runes[i] == b_runes[i] {\n            result_runes[i] = '0'\n      \
    \  } else {\n            result_runes[i] = '1'\n        }\n    }\n    return string(result_runes)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    result := \"\"\n   \
    \ for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  aByte := []byte(a)\n    bByte := []byte(b)\n    cByte := make([]byte, len(aByte))\n\
    \    for index, _ := range aByte {\n        cByte[index] = '0'\n        if aByte[index]\
    \ != bByte[index] {\n            cByte[index] = '1'\n        }\n    }\n    return\
    \ string(cByte)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"a and b must be of equal length\")\n\
    \    }\n    var a_bits []byte = []byte(a)\n    var b_bits []byte = []byte(b)\n\
    \    var n = len(a_bits)\n    var result_bits []byte = make([]byte, n)\n    for\
    \ i := 0; i < n; i++ {\n        var a_bit = a_bits[i]\n        var b_bit = b_bits[i]\n\
    \        result_bits[i] = byte(0)\n        if a_bit != b_bit {\n            result_bits[i]\
    \ = byte(1)\n        }\n    }\n    return string(result_bits)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpf3hc8w9h_test.go:46: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpf3hc8w9h_test.go:46:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpf3hc8w9h_test.go:46: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  out := \"\"\n    var c byte\n    c0 := []byte(a)\n    c1 := []byte(b)\n   \
    \ for i := 0; i < len(c0); i++ {\n        if c0[i] == c1[i] {\n            c =\
    \ '0'\n        } else {\n            c = '1'\n        }\n        out += string(c)\n\
    \    }\n    return out\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n\n    var a_int int\n    var b_int int\n\n    for i := 0;\
    \ i < len(a); i++ {\n        a_int = int(a[i] - '0')\n        b_int = int(b[i]\
    \ - '0')\n\n        result += string(a_int ^ b_int + '0')\n    }\n\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpvcaiptuo_test.go:22:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  c := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        c[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(c)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp3lsbd7ja_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp3lsbd7ja_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp3lsbd7ja_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if a == \"\" || b == \"\" {\n        return \"\"\n    }\n    var result string\n\
    \    for i, char := range a {\n        if b[i] == rune('1') {\n            if\
    \ char == rune('1') {\n                result += \"0\"\n            } else {\n\
    \                result += \"1\"\n            }\n        } else {\n          \
    \  result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm4l6rbxz_test.go:18:20: invalid operation: b[i] == rune(''1'') (mismatched
    types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    output := make([]byte,\
    \ len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        output[i] = '0'\n        } else {\n            output[i] = '1'\n    \
    \    }\n    }\n    return string(output)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    result := make([]byte,\
    \ len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        result[i] = '0'\n        } else {\n            result[i] = '1'\n    \
    \    }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var xor_result string\n    xor_result = \"\"\n    for i := 0; i < len(a); i++\
    \ {\n        xor_result += string(int(a[i]) ^ int(b[i]))\n    }\n    return xor_result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp8nx3unqj_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073252
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"Not equal length strings\"\n    }\n\
    \    c := make([]string, len(a))\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            c[i] = \"0\"\n        } else {\n            c[i]\
    \ = \"1\"\n        }\n    }\n    return strings.Join(c, \"\")\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fzxkent_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp7n5ekskv_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp7n5ekskv_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmp7n5ekskv_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  c := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           c += \"0\"\n        } else {\n            c += \"1\"\n        }\n\
    \    }\n    return c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xorStr := \"\"\n    aLen := len(a)\n    bLen := len(b)\n    if aLen < bLen\
    \ {\n        for i := aLen; i < bLen; i++ {\n            a += \"0\"\n        }\n\
    \    } else if aLen > bLen {\n        for i := bLen; i < aLen; i++ {\n       \
    \     b += \"0\"\n        }\n    }\n    for i := 0; i < len(a); i++ {\n      \
    \  if a[i] == b[i] {\n            xorStr += \"0\"\n        } else {\n        \
    \    xorStr += \"1\"\n        }\n    }\n    return xorStr\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var ret string\n\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            ret += \"0\"\n        } else {\n            ret += \"1\"\n  \
    \      }\n    }\n\n    return ret\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result []byte\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result = append(result, '0')\n        } else {\n            result\
    \ = append(result, '1')\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            result += \"0\"\n        } else {\n            result +=\
    \ \"1\"\n        }\n    }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Store the result of the XOR in a slice of runes.\n    rs := make([]rune,\
    \ len(a))\n    for i, r := range a {\n        rs[i] = rune(int(r) ^ int(b[i]))\n\
    \    }\n    return string(rs)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpgs_fcm5w_test.go:36: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpgs_fcm5w_test.go:36:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpgs_fcm5w_test.go:36: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        aint := 0\n \
    \       bint := 0\n        if a[i] == '1' {\n            aint = 1\n        }\n\
    \        if b[i] == '1' {\n            bint = 1\n        }\n        if aint ^\
    \ bint == 1 {\n            result += \"1\"\n        } else {\n            result\
    \ += \"0\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    res := \"\"\n\tfor i := 0; i < len(a); i++ {\n\t\tif a[i] == b[i] {\n\t\t\tres\
    \ += \"0\"\n\t\t} else {\n\t\t\tres += \"1\"\n\t\t}\n\t}\n\treturn res\n}\n\n\
    func TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  const (\n        A byte = '0'\n        B byte = '1'\n    )\n    charCount :=\
    \ len(a)\n    if len(b) < charCount {\n        charCount = len(b)\n    }\n   \
    \ var result string\n    for i := 0; i < charCount; i++ {\n        if a[i] ==\
    \ b[i] {\n            result += string(A)\n        } else {\n            result\
    \ += string(B)\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            r[i] = '0'\n        } else {\n            r[i] = '1'\n\
    \        }\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    if len(a) != len(b) {\n\t\tpanic(\"Input strings must be the same length\")\n\t\
    }\n\tvar result string\n\tfor i, _ := range a {\n\t\tif a[i] == b[i] {\n\t\t\t\
    result += \"0\"\n\t\t} else {\n\t\t\tresult += \"1\"\n\t\t}\n\t}\n\treturn result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    aInt, bInt := 0, 0\n    for i := 0; i < len(a); i++ {\n\
    \        aInt = aInt + int(a[i] - '0')\n        bInt = bInt + int(b[i] - '0')\n\
    \        if aInt%2 == bInt%2 {\n            result = \"0\" + result\n        }\
    \ else {\n            result = \"1\" + result\n        }\n        aInt = aInt\
    \ / 2\n        bInt = bInt / 2\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__2\
    \ (0.00s)\n        tmp8t2waqrz_test.go:44: expected '0101', got '1010'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var out string\n    for i := 0; i < len(a); i++ {\n        // if a[i] == b[i]\
    \ {\n        //     out += \"0\"\n        // } else {\n        //     out += \"\
    1\"\n        // }\n        out += fmt.Sprintf(\"%d\", int(a[i]) ^ int(b[i]))\n\
    \    }\n    return out\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Convert input strings to their binary values\n    va := []byte(a)\n    vb\
    \ := []byte(b)\n\n    // Store result in output string\n    var output []byte\n\
    \    // Iterate over input strings and compute XOR\n    for i, ch := range va\
    \ {\n        var v byte = '0'\n        if (ch == '1' && vb[i] == '0') || (ch ==\
    \ '0' && vb[i] == '1') {\n            v = '1'\n        }\n        output = append(output,\
    \ v)\n    }\n    return string(output)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    if len(a) != len(b) {\n        return result\n    }\n \
    \   for i := 0; i < len(a); i++ {\n        result += string(int(a[i]) ^ int(b[i]))\n\
    \    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpul1rrt9j_test.go:18:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073255
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Strings must be equal length\")\n  \
    \  }\n    if len(a) % 4 != 0 {\n        panic(\"Strings must be a multiple of\
    \ 4\")\n    }\n    var c string\n    for i := 0; i < len(a); i += 4 {\n      \
    \  n1 := bin_to_dec(a[i:i+4])\n        n2 := bin_to_dec(b[i:i+4])\n        c +=\
    \ dec_to_bin(n1 ^ n2)\n    }\n    return c\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy2hk90zt_test.go:21:15: undefined: bin_to_dec

    /tmp/tmpy2hk90zt_test.go:22:15: undefined: bin_to_dec

    /tmp/tmpy2hk90zt_test.go:23:14: undefined: dec_to_bin

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var r []rune\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            r = append(r, '0')\n        } else {\n            r = append(r, '1')\n\
    \        }\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    if len(a) != len(b) {\n\t\treturn \"\"\n\t}\n\trunesA := []rune(a)\n\trunesB :=\
    \ []rune(b)\n\trunesXor := make([]rune, len(runesA))\n\tfor i := 0; i < len(runesA);\
    \ i++ {\n\t\tif runesA[i] == runesB[i] {\n\t\t\trunesXor[i] = '0'\n\t\t} else\
    \ {\n\t\t\trunesXor[i] = '1'\n\t\t}\n\t}\n\treturn string(runesXor)\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    res := \"\"\n    for\
    \ i, _ := range a {\n        // char is one char from string, i is the index of\
    \ that char\n        if a[i] == b[i] {\n            res += \"0\"\n        } else\
    \ {\n            res += \"1\"\n        }\n    }\n    return res\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        r[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpsd0u8m83_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpsd0u8m83_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpsd0u8m83_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i, _ := range a {\n        result += string((a[i]-'0')^(b[i]-'0')+'0')\n\
    \    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var len int = len(a)\n    if len > len(b) {\n        len = len(b)\n    }\n\
    \    var rtn []rune = make([]rune, len)\n    for i:=0; i<len; i++ {\n        if\
    \ a[i] == b[i] {\n            rtn[i] = '0'\n        } else {\n            rtn[i]\
    \ = '1'\n        }\n    }\n    return string(rtn)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt_8spjj_test.go:14:14: invalid operation: cannot call non-function len
    (variable of type int)

    /tmp/tmpnt_8spjj_test.go:15:15: invalid operation: cannot call non-function len
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result = \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Strings not of same length\")\n    }\n\
    \    out := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            out[i] = '0'\n        } else {\n            out[i]\
    \ = '1'\n        }\n    }\n    return string(out)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    var c string\n\tfor i := 0; i < len(a); i++ {\n\t\tai := a[i] - '0'\n\t\tbi :=\
    \ b[i] - '0'\n\t\tc += string(ai ^ bi + '0')\n\t}\n\treturn c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    var result string\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    return \"100\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpq3ydqdnp_test.go:31: expected '010010', got '100'\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpq3ydqdnp_test.go:31: expected\
    \ '0', got '100'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpq3ydqdnp_test.go:31:\
    \ expected '0101', got '100'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073256
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var x []byte = []byte(a)\n    var y []byte = []byte(b)\n    var res []byte\n\
    \    for i := 0; i < len(x); i++ {\n        if x[i] == y[i] {\n            res\
    \ = append(res, byte('0'))\n        } else {\n            res = append(res, byte('1'))\n\
    \        }\n    }\n    return string(res)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073256
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    // your code here\n\ta_bytes := []byte(a)\n\tb_bytes := []byte(b)\n\tc_bytes :=\
    \ make([]byte, len(a_bytes))\n\tfor i, _ := range a_bytes {\n\t\tc_bytes[i] =\
    \ a_bytes[i] ^ b_bytes[i]\n\t}\n\treturn string(c_bytes)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp2iiz35gp_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp2iiz35gp_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp2iiz35gp_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073256
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Use Go's built-in string to byte array conversion\n    a_arr := []byte(a)\n\
    \    b_arr := []byte(b)\n\n    // XOR each byte at the same index\n    out :=\
    \ \"\"\n    for i := 0; i < len(a_arr); i++ {\n        out += string(a_arr[i]\
    \ ^ b_arr[i])\n    }\n\n    return out\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpv5cwgcdl_test.go:41: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpv5cwgcdl_test.go:41:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpv5cwgcdl_test.go:41: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073257
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        charA := a[i]\n\
    \        charB := b[i]\n        if charA == charB {\n            result += \"\
    0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073257
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  length := len(a)\n    if length != len(b) {\n        return \"Error: Unequal\
    \ Length Inputs\"\n    }\n    var result string\n    for index := 0; index < length;\
    \ index++ {\n        a_char := a[index]\n        b_char := b[index]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073257
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var a_slice []byte = []byte(a)\n    var b_slice []byte = []byte(b)\n    var\
    \ result []byte = make([]byte, len(a_slice))\n    for i := 0; i < len(a_slice);\
    \ i++ {\n        if a_slice[i] == b_slice[i] {\n            result[i] = byte('0')\n\
    \        } else {\n            result[i] = byte('1')\n        }\n    }\n    return\
    \ string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"Length of input strings are not equal.\"\
    \n    }\n    r := \"\"\n    for i := 0; i < len(a); i++ {\n        char1 := a[i]\n\
    \        char2 := b[i]\n        x := fmt.Sprintf(\"%v\", char1 ^ char2)\n    \
    \    r += x\n    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            res[i] = '0'\n        } else {\n            res[i]\
    \ = '1'\n        }\n    }\n    return string(res)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\n\
    \t// Validate input\n\tif len(a) != len(b) {\n\t\tpanic(\"Different length inputs\"\
    )\n\t}\n\t\n\t// Create string to return\n\ts := \"\"\n\t\n\t// Loop through string\
    \ and XOR\n\tfor i := 0; i < len(a); i++ {\n\t\t\t\n\t\t// If both digits are\
    \ 1\n\t\tif a[i] == '1' && b[i] == '1' {\n\t\t\ts += \"0\"\n\t\t}\n\t\t\n\t\t\
    // If both digits are 0\n\t\tif a[i] == '0' && b[i] == '0' {\n\t\t\ts += \"0\"\
    \n\t\t}\n\t\t\n\t\t// If both digits are not the same\n\t\tif a[i] != b[i] {\n\
    \t\t\ts += \"1\"\n\t\t}\n\t}\n\t\n\treturn s\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // TODO\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp9xwozmze_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp9xwozmze_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmp9xwozmze_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"not equal length\"\n    }\n    result\
    \ := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        result += \"0\"\n        } else {\n            result += \"1\"\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"different lengths\"\n    }\n    result\
    \ := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result[i] = '0'\n        } else {\n            result[i]\
    \ = '1'\n        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        x := a[i]\n    \
    \    y := b[i]\n        fmt.Printf(\"%c, %c\\n\", x, y)\n        if x == y {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Lengths of the two strings are different!\"\
    )\n    }\n    a_nums := []rune(a)\n    b_nums := []rune(b)\n    result := make([]rune,\
    \ len(a))\n    for idx, _ := range a_nums {\n        if a_nums[idx] == '0' &&\
    \ b_nums[idx] == '0' {\n            result[idx] = '0'\n        } else if a_nums[idx]\
    \ == '1' && b_nums[idx] == '1' {\n            result[idx] = '0'\n        } else\
    \ {\n            result[idx] = '1'\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        result += string(49\
    \ ^ (a[i] + b[i] - 96))\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmphtvqej5u_test.go:35: expected '010010', got '303101'\n \
    \   --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmphtvqej5u_test.go:35:\
    \ expected '0', got '3'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n  \
    \      tmphtvqej5u_test.go:35: expected '0101', got '1010'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    // Input strings are\
    \ of the same length.\n    xor := make([]byte, len(a))\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            xor[i] = '0'\n        } else {\n\
    \            xor[i] = '1'\n        }\n    }\n    return string(xor)\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  s := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           s += \"0\"\n        } else {\n            s += \"1\"\n        }\n\
    \    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            res[i] = '0'\n        } else {\n            res[i]\
    \ = '1'\n        }\n    }\n    return string(res)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Your code here\n    var ret string\n    if len(a) != len(b) {\n        return\
    \ \"Not equal length\"\n    }\n    for i:=0; i<len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            ret += \"0\"\n        } else {\n            ret += \"\
    1\"\n        }\n    }\n    return ret\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"invalid input\")\n    }\n    var res\
    \ string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n     \
    \       res += \"0\"\n        } else {\n            res += \"1\"\n        }\n\
    \    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    var result string\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var out string\n    for i, _ := range a {\n        if (a[i] == '1' && b[i]\
    \ == '0') || (a[i] == '0' && b[i] == '1') {\n            out += \"1\"\n      \
    \  } else {\n            out += \"0\"\n        }\n    }\n    return out\n}\n\n\
    func TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  a_runes := []rune(a)\n    b_runes := []rune(b)\n    if len(a_runes) != len(b_runes)\
    \ {\n        panic(\"string lengths are not equal\")\n    }\n    c_runes := make([]rune,\
    \ len(a_runes))\n    for i := 0; i < len(a_runes); i++ {\n        a_int := strRuneToInt(a_runes[i])\n\
    \        b_int := strRuneToInt(b_runes[i])\n        c_runes[i] = intToStrRune(a_int\
    \ ^ b_int)\n    }\n    return string(c_runes)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_f0fr2v__test.go:20:18: undefined: strRuneToInt

    /tmp/tmp_f0fr2v__test.go:21:18: undefined: strRuneToInt

    /tmp/tmp_f0fr2v__test.go:22:22: undefined: intToStrRune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073257
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Your code here\n    bytesA := []byte(a)\n    bytesB := []byte(b)\n    bytesC\
    \ := make([]byte, 0)\n    for i := 0; i < len(bytesA); i++ {\n        bytesC =\
    \ append(bytesC, bytesA[i] ^ bytesB[i])\n    }\n    return string(bytesC)\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp3t0hrb7e_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp3t0hrb7e_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp3t0hrb7e_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // TODO: should be done in some better way\n    var ret string\n    if a[0]\
    \ == b[0] {\n        ret += \"0\"\n    } else {\n        ret += \"1\"\n    }\n\
    \    if a[1] == b[1] {\n        ret += \"0\"\n    } else {\n        ret += \"\
    1\"\n    }\n    if a[2] == b[2] {\n        ret += \"0\"\n    } else {\n      \
    \  ret += \"1\"\n    }\n    return ret\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.string_xor(...)\n\t/tmp/tmp8tnuy_la_test.go:20\n\
    command-line-arguments_test.TestString_Xor(0x0?)\n\t/tmp/tmp8tnuy_la_test.go:41\
    \ +0x9d\ntesting.tRunner(0xc0001924e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"ERROR - strings are not equal length.\"\
    \n    }\n    ret := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            ret += \"0\"\n        } else {\n            ret += \"1\"\
    \n        }\n    }\n    return ret\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  s := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           s += \"0\"\n        } else {\n            s += \"1\"\n        }\n\
    \    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var str string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            str += \"0\"\n        } else {\n            str += \"1\"\n  \
    \      }\n    }\n    return str\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Length of string a and b must be equal\"\
    )\n    }\n    var res string\n    for i, _ := range a {\n        if a[i] == b[i]\
    \ {\n            res += \"0\"\n        } else {\n            res += \"1\"\n  \
    \      }\n    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xor := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        switch\
    \ a[i] {\n        case '0':\n            switch b[i] {\n            case '0':\n\
    \                xor[i] = '0'\n            case '1':\n                xor[i] =\
    \ '1'\n            }\n        case '1':\n            switch b[i] {\n         \
    \   case '0':\n                xor[i] = '1'\n            case '1':\n         \
    \       xor[i] = '0'\n            }\n        }\n    }\n    return string(xor)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"Error: strings have different length\"\
    \n    }\n    out := make([]byte, len(a))\n    for i, x := range a {\n        if\
    \ x == '1' {\n            if b[i] == '1' {\n                out[i] = '0'\n   \
    \         } else {\n                out[i] = '1'\n            }\n        } else\
    \ {\n            if b[i] == '1' {\n                out[i] = '1'\n            }\
    \ else {\n                out[i] = '0'\n            }\n        }\n    }\n    return\
    \ string(out)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if (a[i] == b[i])\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var c string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            c += \"0\"\n        } else {\n            c += \"1\"\n        }\n\
    \    }\n    return c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  output := \"\"\n    if len(a) != len(b) {\n        return output\n    }\n \
    \   for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            output\
    \ += \"0\"\n        } else {\n            output += \"1\"\n        }\n    }\n\
    \    return output\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    if len(a) != len(b) {\n        return result\n    }\n \
    \   for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    if len(a) != len(b) {\n\t\tpanic(\"Strings do not have the same length\")\n\t\
    }\n\t\n\tvar result string\n\t\n\tfor i := 0; i < len(a); i++ {\n\t\tif a[i] ==\
    \ b[i] {\n\t\t\tresult += \"0\"\n\t\t} else {\n\t\t\tresult += \"1\"\n\t\t}\n\t\
    }\n\t\n\treturn result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) == len(b) {\n        r := make([]byte, len(a))\n        for i :=\
    \ 0; i < len(a); i++ {\n            if a[i] == b[i] {\n                r[i] =\
    \ '0'\n            } else {\n                r[i] = '1'\n            }\n     \
    \   }\n        return string(r)\n    } else {\n        return \"ERROR\"\n    }\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xor_len := 0\n    // Find the shorter string and set the max length of xor\
    \ to that.\n    if len(a) <= len(b) {\n        xor_len = len(a)\n    } else {\n\
    \        xor_len = len(b)\n    }\n    var xor_string string\n    for i := 0; i\
    \ < xor_len; i++ {\n        if a[i] == b[i] {\n            xor_string += \"0\"\
    \n        } else {\n            xor_string += \"1\"\n        }\n    }\n    return\
    \ xor_string\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if (a[i] == b[i])\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        var a_bit = string(a[i])\n\
    \        var b_bit = string(b[i])\n        if a_bit == b_bit {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  alen := len(a)\n    blen := len(b)\n    if alen != blen {\n        return \"\
    String lengths differ\"\n    }\n    var res string\n    for i := 0; i < alen;\
    \ i++ {\n        if (a[i] == '0' && b[i] == '0') || (a[i] == '1' && b[i] == '1')\
    \ {\n            res += \"0\"\n        } else {\n            res += \"1\"\n  \
    \      }\n    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        // convert each\
    \ char to int\n        if int(a[i]) ^ int(b[i]) == 1 {\n            result +=\
    \ \"1\"\n        } else {\n            result += \"0\"\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"lengths of inputs do not match\")\n\
    \    }\n    var s string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            s += \"0\"\n        } else {\n            s += \"1\"\n \
    \       }\n    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"not implemented\")\n    }\n    result\
    \ := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        result[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpl3dwfoov_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpl3dwfoov_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpl3dwfoov_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    xored := make([]byte,\
    \ len(a))\n    for i, r := range a {\n        xored[i] = byte(r) ^ byte(b[i])\n\
    \    }\n    return string(xored)\n}\n\nfunc TestString_Xor(t *testing.T) {\n \
    \ candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\"\
    , \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpxf9z2uc9_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpxf9z2uc9_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpxf9z2uc9_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  s := \"\"\n    for i, j := 0, 0; i < len(a) && j < len(b); i, j = i+1, j+1\
    \ {\n        if a[i] == b[j] {\n            s += \"0\"\n        } else {\n   \
    \         s += \"1\"\n        }\n    }\n    return s\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"XOR of strings of unequal length not\
    \ supported\"\n    }\n    if len(a) < 1 {\n        return \"\"\n    }\n    if\
    \ len(a) == 1 {\n        return string(a[0] ^ b[0])\n    }\n\n    return string_xor(a[:len(a)/2],\
    \ b[:len(b)/2]) + string_xor(a[len(a)/2:], b[len(b)/2:])\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpld8_qxjq_test.go:41: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpld8_qxjq_test.go:41:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpld8_qxjq_test.go:41: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  length := len(a)\n    if len(b) < length {\n        length = len(b)\n    }\n\
    \    var out string\n    for i := 0; i < length; i++ {\n        aa := a[i]\n \
    \       bb := b[i]\n        var res byte\n        if aa == '0' && bb == '0' {\n\
    \            res = '0'\n        } else if aa == '1' && bb == '1' {\n         \
    \   res = '0'\n        } else {\n            res = '1'\n        }\n        out\
    \ += string(res)\n    }\n    return out\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var s string\n    for i, _ := range a {\n        if a[i] == b[i] {\n      \
    \      s += \"0\"\n        } else {\n            s += \"1\"\n        }\n    }\n\
    \    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Split the string into arrays of single character\n    a_split := []rune(a)\n\
    \    b_split := []rune(b)\n\n    // The xor function is exclusive or\n    // If\
    \ either is 1, but not both, then the result is 1\n    // If both are 0 or both\
    \ are 1, then the result is 0\n    var xor func(a rune, b rune) rune\n    xor\
    \ = func(a rune, b rune) rune {\n        if (a == '1' && b == '0') || (a == '0'\
    \ && b == '1') {\n            return '1'\n        }\n        return '0'\n    }\n\
    \n    // Loop through the string and xor each character\n    // TODO: There must\
    \ be a more \"Golang\" way to do this\n    result := \"\"\n    for i := 0; i <\
    \ len(a_split); i++ {\n        result += string(xor(a_split[i], b_split[i]))\n\
    \    }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073262
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"a and b not of same length\")\n    }\n\
    \    res := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        res[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(res)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpevbckq_j_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpevbckq_j_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpevbckq_j_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073262
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  c := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            c[i] = '0'\n        } else {\n            c[i] = '1'\n\
    \        }\n    }\n    return string(c)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073262
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"Lengths differ\"\n    }\n    if a ==\
    \ b {\n        return \"0\"\n    }\n    if a == \"0\" || b == \"0\" {\n      \
    \  return a + b\n    }\n    if a == \"1\" || b == \"1\" {\n        return \"0\"\
    \n    }\n    return \"I can't do that\"\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp2jkc87qe_test.go:43: expected '010010', got 'I can't do\
    \ that'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmp2jkc87qe_test.go:43:\
    \ expected '0101', got 'I can't do that'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073262
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var r string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            r += \"0\"\n        } else {\n            r += \"1\"\n        }\n\
    \    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073262
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  a_length := len(a)\n    b_length := len(b)\n    if a_length != b_length {\n\
    \        panic(\"string_xor: lengths not equal\")\n    }\n    c := make([]byte,\
    \ a_length)\n    for index := 0; index < a_length; index++ {\n        a_byte :=\
    \ a[index]\n        b_byte := b[index]\n        if a_byte == '0' && b_byte ==\
    \ '0' {\n            c[index] = '0'\n        } else if a_byte == '1' && b_byte\
    \ == '1' {\n            c[index] = '0'\n        } else {\n            c[index]\
    \ = '1'\n        }\n    }\n    return string(c)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  aLen := len(a)\n    bLen := len(b)\n    if aLen == 0 || bLen == 0 {\n     \
    \   return \"\"\n    }\n    if aLen != bLen {\n        return \"\"\n    }\n  \
    \  var (\n        strA = []byte(a)\n        strB = []byte(b)\n        res  = []byte(a)\n\
    \    )\n    for i := 0; i < aLen; i++ {\n        if strA[i] == strB[i] {\n   \
    \         res[i] = '0'\n        } else {\n            res[i] = '1'\n        }\n\
    \    }\n    return string(res)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  output := \"\"\n    max := len(a)\n    if len(b) > max {\n        max = len(b)\n\
    \    }\n    for i := 0; i < max; i++ {\n        a_byte := \"0\"\n        b_byte\
    \ := \"0\"\n        if i < len(a) {\n            a_byte = string(a[i])\n     \
    \   }\n        if i < len(b) {\n            b_byte = string(b[i])\n        }\n\
    \        output += string(int(a_byte[0]) ^ int(b_byte[0]))\n    }\n    return\
    \ output\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpxkyekyez_test.go:27:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    res := \"\"\n    for\
    \ i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            res += \"\
    0\"\n        } else {\n            res += \"1\"\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    var result string\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  num_a := binary_string_to_int(a)\n    num_b := binary_string_to_int(b)\n  \
    \  num_c := num_a ^ num_b\n    return int_to_binary_string(num_c)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1lwv2dn5_test.go:13:14: undefined: binary_string_to_int

    /tmp/tmp1lwv2dn5_test.go:14:14: undefined: binary_string_to_int

    /tmp/tmp1lwv2dn5_test.go:16:12: undefined: int_to_binary_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Invalid input, lengths are different\"\
    )\n    }\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        // Cast chars to\
    \ int\n        a_int := int(a[i]) - 48\n        b_int := int(b[i]) - 48\n    \
    \    if a_int ^ b_int == 1 {\n            result += \"1\"\n        } else {\n\
    \            result += \"0\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    result := \"\"\n   \
    \ for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // handle error\n    if len(a) != len(b) {\n        return \"Error: Lengths\
    \ of strings are not same.\"\n    }\n\n    var result string\n\n    for i := 0;\
    \ i < len(a); i++ {\n        var char_a = string(a[i])\n        var char_b = string(b[i])\n\
    \n        if char_a == char_b {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           r += \"0\"\n        } else {\n            r += \"1\"\n        }\n\
    \    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    if len(a) != len(b) {\n        fmt.Println(\"length of\
    \ a and b is not equal\")\n        return \"\"\n    }\n\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else\
    \ {\n            result += \"1\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var output string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            output += \"0\"\n        } else {\n            output += \"1\"\
    \n        }\n    }\n    return output\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Inputs of different lengths!\")\n  \
    \  }\n    result := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] == b[i] {\n            result[i] = '0'\n        } else {\n  \
    \          result[i] = '1'\n        }\n    }\n    return string(result)\n}\n\n\
    func TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\n\
    \tvar arrA, arrB, result []byte\n\tvar res string\n\tarrA = []byte(a)\n\tarrB\
    \ = []byte(b)\n\t\n\tif len(arrA) == len(arrB) {\n\t\t\n\t\tfor i := 0; i < len(arrA);\
    \ i++ {\n\t\t\t\n\t\t\tif arrA[i] != arrB[i] {\n\t\t\t\tresult = append(result,\
    \ '1')\n\t\t\t} else {\n\t\t\t\tresult = append(result, '0')\n\t\t\t}\n\t\t}\n\
    \t\t\n\t\tres = string(result)\n\t\t\n\t} else {\n\t\tres = \"Error: Strings have\
    \ different lengths.\"\n\t}\n\t\n\treturn res\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var ret []byte\n    for i := 0; i < len(a); i++ {\n        var b1 byte = a[i]\n\
    \        var b2 byte = b[i]\n        var b3 byte = b1 ^ b2\n        ret = append(ret,\
    \ b3)\n    }\n    return string(ret)\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp4lx48_9x_test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp4lx48_9x_test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp4lx48_9x_test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"ERROR\"\n    }\n    var c string\n\
    \    for i := 0; i < len(a); i++ {\n        c += string(48 ^ (a[i] ^ b[i]))\n\
    \    }\n    return c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  s := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           s += \"0\"\n        } else {\n            s += \"1\"\n        }\n\
    \    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            r[i] = '0'\n        } else {\n            r[i] = '1'\n\
    \        }\n    }\n    return string(r)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073255
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    var current_a, current_b int\n    var a_int, b_int int\n\
    \    var tmp_a, tmp_b string\n    a_int = len(a)\n    b_int = len(b)\n    for\
    \ current_a < a_int || current_b < b_int {\n        if current_a < a_int {\n \
    \           tmp_a = string(a[current_a])\n        } else {\n            tmp_a\
    \ = \"0\"\n        }\n        if current_b < b_int {\n            tmp_b = string(b[current_b])\n\
    \        } else {\n            tmp_b = \"0\"\n        }\n        switch {\n  \
    \      case tmp_a == \"0\" && tmp_b == \"0\":\n            result += \"0\"\n \
    \       case tmp_a == \"1\" && tmp_b == \"1\":\n            result += \"0\"\n\
    \        default:\n            result += \"1\"\n        }\n        current_a++\n\
    \        current_b++\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var min, max string\n    if len(a) > len(b) {\n        max = a\n        min\
    \ = b\n    } else {\n        max = b\n        min = a\n    }\n    result := \"\
    \"\n    pad := \"\"\n    for i := len(max)-len(min); i > 0; i-- {\n        pad\
    \ += \"0\"\n    }\n    min = pad + min\n    for i := 0; i < len(max); i++ {\n\
    \        aChar := a[i]\n        bChar := b[i]\n        aBool := false\n      \
    \  bBool := false\n        if aChar == '1' {\n            aBool = true\n     \
    \   }\n        if bChar == '1' {\n            bBool = true\n        }\n      \
    \  if aBool != bBool {\n            result += \"1\"\n        } else {\n      \
    \      result += \"0\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  m := len(a)\n    if m != len(b) {\n        panic(\"strings are not of equal\
    \ length\")\n    }\n    var s string\n    for i := 0; i < m; i++ {\n        x\
    \ := string(a[i])\n        y := string(b[i])\n        if x == y {\n          \
    \  s += \"0\"\n        } else {\n            s += \"1\"\n        }\n    }\n  \
    \  return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var length = len(a)\n    var result string\n    if len(b) < length {\n    \
    \    length = len(b)\n    }\n    for i := 0; i < length; i++ {\n        if (a[i]\
    \ == '1' && b[i] == '0') || (a[i] == '0' && b[i] == '1') {\n            result\
    \ += \"1\"\n        } else {\n            result += \"0\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073265
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xor := []rune{}\n    for i, _ := range a {\n        if a[i] == b[i] {\n   \
    \         xor = append(xor, '0')\n        } else {\n            xor = append(xor,\
    \ '1')\n        }\n    }\n    return string(xor)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073265
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Convert strings to integers\n    aInt, _ := strconv.ParseInt(a, 2, 0)\n\
    \    bInt, _ := strconv.ParseInt(b, 2, 0)\n    // Perform XOR\n    xor := aInt\
    \ ^ bInt\n    // Convert back to string\n    return strconv.FormatInt(xor, 2)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xwqp0vd_test.go:14:16: undefined: strconv

    /tmp/tmp6xwqp0vd_test.go:15:16: undefined: strconv

    /tmp/tmp6xwqp0vd_test.go:19:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"mismatched string lengths\")\n    }\n\
    \    result := make([]byte, len(a))\n    for i, v := range a {\n        switch\
    \ byte(v) {\n        case byte('0'):\n            switch byte(b[i]) {\n      \
    \      case byte('0'):\n                result[i] = byte('0')\n            case\
    \ byte('1'):\n                result[i] = byte('1')\n            }\n        case\
    \ byte('1'):\n            switch byte(b[i]) {\n            case byte('0'):\n \
    \               result[i] = byte('1')\n            case byte('1'):\n         \
    \       result[i] = byte('0')\n            }\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073265
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  length := len(a)\n    if length < len(b) {\n        length = len(b)\n    }\n\
    \    result := make([]byte, length)\n    for i := 0; i < length; i++ {\n     \
    \   var x, y byte\n        if i < len(a) {\n            x = a[i]\n        }\n\
    \        if i < len(b) {\n            y = b[i]\n        }\n        if x == y {\n\
    \            result[i] = '0'\n        } else {\n            result[i] = '1'\n\
    \        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  c := make([]byte, len(a))\n    for i, _ := range a {\n        c[i] = a[i] ^\
    \ b[i]\n    }\n    return string(c)\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpyza3z5dc_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpyza3z5dc_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpyza3z5dc_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  l := len(a)\n    if len(b) > l {\n        l = len(b)\n    }\n    var r string\n\
    \    for i := 0; i < l; i++ {\n        if i > len(a) - 1 {\n            r += string(b[i])\n\
    \        } else if i > len(b) - 1 {\n            r += string(a[i])\n        }\
    \ else if a[i] == b[i] {\n            r += \"0\"\n        } else {\n         \
    \   r += \"1\"\n        }\n    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    var carry bool\n\n    alen := len(a)\n    blen := len(b)\n\
    \n    // Iterate only over the shorter string\n    if alen > blen {\n        a,\
    \ b = b, a\n        alen, blen = blen, alen\n    }\n\n    // The two strings are\
    \ added together by position, starting\n    // with the right-most index.  If\
    \ there is a carry,\n    // carry = true and the carry value is added to the sum.\n\
    \    for i := 0; i < alen; i++ {\n        index := alen - 1 - i\n        var sum\
    \ byte\n        sum = a[index] + b[index] - 96\n        if carry {\n         \
    \   sum++\n            carry = false\n        }\n        if sum == 2 {\n     \
    \       sum = 0\n            carry = true\n        } else if sum == 3 {\n    \
    \        sum = 1\n            carry = true\n        }\n        result = fmt.Sprintf(\"\
    %d%s\", sum, result)\n    }\n\n    // Add the remaining characters from the longer\
    \ string\n    for i := alen; i < blen; i++ {\n        index := blen - 1 - i\n\
    \        var sum byte\n        sum = b[index] - 48\n        if carry {\n     \
    \       sum++\n            carry = false\n        }\n        if sum == 2 {\n \
    \           sum = 0\n            carry = true\n        }\n        result = fmt.Sprintf(\"\
    %d%s\", sum, result)\n    }\n\n    // Add a carry if present at the left-most\
    \ position\n    if carry {\n        result = fmt.Sprintf(\"1%s\", result)\n  \
    \  }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp21aqi37o_test.go:85: expected '010010', got '1100010'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp21aqi37o_test.go:85:\
    \ expected '0', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        if\
    \ a[i] == b[i] {\n            res[i] = '0'\n        } else {\n            res[i]\
    \ = '1'\n        }\n    }\n    return string(res)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n       \
    \ if a[i] == b[i] {\n            result[i] = '0'\n        } else {\n         \
    \   result[i] = '1'\n        }\n    }\n    return string(result)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  aInt, bInt := 0, 0\n    for _, ch := range a {\n        aInt = (aInt << 1)\
    \ + int(ch - '0')\n    }\n    for _, ch := range b {\n        bInt = (bInt <<\
    \ 1) + int(ch - '0')\n    }\n    xor := aInt ^ bInt\n    result := \"\"\n    for\
    \ i := 0; i < len(a); i++ {\n        result = fmt.Sprintf(\"%d%s\", xor & 1, result)\n\
    \        xor >>= 1\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    r := len(a)\n    if len(b) < r {\n        r = len(b)\n\
    \    }\n    for i := 0; i < r; i++ {\n        result += string((a[i] + b[i]) %\
    \ 2)\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpwoguaor8_test.go:39: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpwoguaor8_test.go:39:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpwoguaor8_test.go:39: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var len_a, len_b int = len(a), len(b)\n    if len_a != len_b {\n        panic(\"\
    Not same length.\")\n    }\n    var output string = \"\"\n    for i := 0; i <\
    \ len_a; i++ {\n        var str_i_a, str_i_b string = string(a[i]), string(b[i])\n\
    \        if str_i_a == str_i_b {\n            output += \"0\"\n        } else\
    \ {\n            output += \"1\"\n        }\n    }\n    return output\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var out []byte\n    for i := 0; i < len(a); i++ {\n        //XOR each character\
    \ and append to output\n        if a[i] == b[i] {\n            out = append(out,\
    \ '0')\n        } else {\n            out = append(out, '1')\n        }\n    }\n\
    \    return string(out)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // zip strings together\n    if len(a) < len(b) {\n        a, b = b, a\n  \
    \  }\n    // ensure len(a) >= len(b)\n    if len(a) == len(b) {\n        a = \"\
    0\" + a\n    }\n    // ensure len(a) - len(b) == 1\n    b = \"0\" + b\n    //\
    \ ensure len(a) == len(b)\n    result := make([]byte, len(a))\n    for i := 0;\
    \ i < len(a); i++ {\n        if a[i] == b[i] {\n            result[i] = '0'\n\
    \        } else {\n            result[i] = '1'\n        }\n    }\n    // remove\
    \ 0 from the start\n    return string(result[1:])\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var output []string\n    for i := 0; i < len(a); i++ {\n        if a[i] ==\
    \ b[i] {\n            output = append(output, \"0\")\n        } else {\n     \
    \       output = append(output, \"1\")\n        }\n    }\n    return fmt.Sprintf(\"\
    %s\", output)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp6s539u1o_test.go:39: expected '010010', got '[0 1 0 0 1\
    \ 0]'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp6s539u1o_test.go:39:\
    \ expected '0', got '[0]'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n\
    \        tmp6s539u1o_test.go:39: expected '0101', got '[0 1 0 1]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // convert to byte arrays\n    var a_bytes = []byte(a)\n    var b_bytes = []byte(b)\n\
    \n    // use a bit mask to switch between the two arrays (XOR)\n    var mask uint8\
    \ = 0\n\n    // create the result byte array\n    var result_bytes = make([]byte,\
    \ len(a_bytes))\n\n    // iterate over the byte arrays\n    for i := 0; i < len(a_bytes);\
    \ i++ {\n        // the byte mask will alternate between 01010101 and 10101010\n\
    \        // the result byte will be the XOR of the input byte arrays\n       \
    \ result_bytes[i] = a_bytes[i] ^ b_bytes[i] ^ mask\n        mask = mask ^ 255\n\
    \    }\n\n    // convert result byte array to string\n    var result_string =\
    \ string(result_bytes)\n\n    return result_string\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpph34bgy7_test.go:52: expected '010010', got '\0\0\x01'\n\
    \    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpph34bgy7_test.go:52:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpph34bgy7_test.go:52: expected '0101', got '\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  ret := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            ret += \"0\"\n        } else {\n            ret += \"1\"\n      \
    \  }\n    }\n    return ret\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  fmt.Println(\"\\n--- start ---\")\n    if len(a) != len(b) {\n        return\
    \ \"Not equal length\"\n    }\n    var count = len(a)\n    var result = \"\"\n\
    \    for i := 0; i < count; i++ {\n        if a[i] == b[i] {\n            result\
    \ += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := make([]byte, len(a))\n    for i, x := range a {\n        switch {\n\
    \        case x == '0' && b[i] == '0':\n            res[i] = '0'\n        case\
    \ x == '0' && b[i] == '1':\n            res[i] = '1'\n        case x == '1' &&\
    \ b[i] == '0':\n            res[i] = '1'\n        case x == '1' && b[i] == '1':\n\
    \            res[i] = '0'\n        }\n    }\n    return string(res)\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Calculate the length of the string\n    maxLength := len(a)\n    if len(b)\
    \ > maxLength {\n        maxLength = len(b)\n    }\n\n    // Make the strings\
    \ the same length by prepending with 0s\n    a = fmt.Sprintf(\"%0*s\", maxLength,\
    \ a)\n    b = fmt.Sprintf(\"%0*s\", maxLength, b)\n\n    // Perform XOR and convert\
    \ to string\n    var result string\n    for i := 0; i < maxLength; i++ {\n   \
    \     if a[i] == b[i] {\n            result += \"0\"\n        } else {\n     \
    \       result += \"1\"\n        }\n    }\n\n    return result\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var c string\n    for i := 0; i < len(a); i++ {\n        c += fmt.Sprintf(\"\
    %d\", int(a[i]) ^ int(b[i]))\n    }\n    return c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Arguments a and b are not of the same\
    \ length.\")\n    }\n    result := make([]byte, len(a))\n    for i := 0; i < len(a);\
    \ i++ {\n        result[i] = a[i] ^ b[i]\n    }\n    return string(result)\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpuqhnotp__test.go:38: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpuqhnotp__test.go:38:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpuqhnotp__test.go:38: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  x := make([]byte, len(a))\n    for i := 0; i < len(a); i++ {\n        x[i]\
    \ = a[i] ^ b[i]\n    }\n    return string(x)\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpb5d0w8xi_test.go:35: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpb5d0w8xi_test.go:35:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmpb5d0w8xi_test.go:35: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var out string\n    if len(a) != len(b) {\n        return out\n    }\n    for\
    \ i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            out += \"\
    0\"\n        } else {\n            out += \"1\"\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var r string\n    l := len(a)\n    if len(b) < l {\n        l = len(b)\n  \
    \  }\n    for i := 0; i < l; i++ {\n        r += string(int(a[i]) ^ int(b[i]))\n\
    \    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpa0d5icox_test.go:19:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  a_bytes := []byte(a)\n    b_bytes := []byte(b)\n    var result string\n   \
    \ for i := 0; i < len(a_bytes); i++ {\n        if a_bytes[i] == b_bytes[i] {\n\
    \            result += \"0\"\n        } else {\n            result += \"1\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  r := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           r += \"0\"\n        } else {\n            r += \"1\"\n        }\n\
    \    }\n    return r\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073263
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // your code here\n    return \"\"\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpzux9yr3b_test.go:32: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpzux9yr3b_test.go:32: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpzux9yr3b_test.go:32:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n\
    \            res += \"0\"\n        } else {\n            res += \"1\"\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  s := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n \
    \           s += \"0\"\n        } else {\n            s += \"1\"\n        }\n\
    \    }\n    return s\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  la := len(a)\n    lb := len(b)\n    if la != lb {\n        panic(\"Length of\
    \ inputs must be the same\")\n    }\n    var c string\n    for i := 0; i < la;\
    \ i++ {\n        ca := a[i:i+1]\n        cb := b[i:i+1]\n        cc := \"\"\n\
    \        if ca == cb {\n            cc = \"0\"\n        } else {\n           \
    \ cc = \"1\"\n        }\n        c += cc\n    }\n    return c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var res string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            res += \"0\"\n        } else {\n            res += \"1\"\n  \
    \      }\n    }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Invalid input.\")\n    }\n    res :=\
    \ \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n       \
    \     res += \"0\"\n        } else {\n            res += \"1\"\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate :=\
    \ string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    c := \"\"\n    for i\
    \ := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            c += \"0\"\n\
    \        } else {\n            c += \"1\"\n        }\n    }\n    return c\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"a and b have different length\"\n \
    \   }\n    n := len(a)\n    s := make([]byte, n)\n    for i:=0; i<n; i++ {\n \
    \       byte_a := a[i]\n        byte_b := b[i]\n        if byte_a == byte_b {\n\
    \            s[i] = '0'\n        } else {\n            s[i] = '1'\n        }\n\
    \    }\n    return string(s)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // Write your code here\n    var c string = \"\"\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] == b[i] {\n            c += \"0\"\n        } else {\n\
    \            c += \"1\"\n        }\n    }\n    return c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  ra := []rune(a)\n    rb := []rune(b)\n    c := \"\"\n    for i := 0; i < len(ra);\
    \ i++ {\n        x := ra[i] == '1'\n        y := rb[i] == '1'\n        c += fmt.Sprintf(\"\
    %d\", (x || y) && !(x && y))\n    }\n    return c\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp0e7jw42k_test.go:19:14: fmt.Sprintf format %d has arg (x || y) && !(x
    && y) of wrong type bool

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"String lengths not equal.\")\n    }\n\
    \    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // your code here\n    return a\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpap8q548r_test.go:32: expected '010010', got '111000'\n \
    \   --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpap8q548r_test.go:32:\
    \ expected '0', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    // Your code here\n\tvar output string\n\tvar i = 0\n\tfor i = 0; i < len(a);\
    \ i++ {\n\t\tif (a[i] == b[i]) {\n\t\t\toutput += \"0\"\n\t\t} else {\n\t\t\t\
    output += \"1\"\n\t\t}\n\t}\n\treturn output\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.016s\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"string_xor: string lengths do not match\"\
    )\n    }\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpcai4ed1b_test.go:35: expected '010010', got ''\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpcai4ed1b_test.go:35: expected\
    \ '0', got ''\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpcai4ed1b_test.go:35:\
    \ expected '0101', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075641
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xor := 0\n    for i := 0; i < len(a); i++ {\n        xor += int(a[i] - 48)\
    \ ^ int(b[i] - 48)\n    }\n    return fmt.Sprintf(\"%d\", xor)\n}\n\nfunc TestString_Xor(t\
    \ *testing.T) {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"\
    1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"),\
    \ expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpfmvir6ca_test.go:35: expected '010010', got '2'\n    ---\
    \ FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpfmvir6ca_test.go:35: expected\
    \ '0101', got '2'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    out := \"\"\n    for\
    \ i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            out += \"\
    0\"\n        } else {\n            out += \"1\"\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"Invalid input\")\n    }\n    aBytes\
    \ := []byte(a)\n    bBytes := []byte(b)\n    res := make([]byte, len(aBytes))\n\
    \    for i := 0; i < len(aBytes); i++ {\n        res[i] = aBytes[i] ^ bBytes[i]\n\
    \    }\n    return string(res)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmph07pgcnx_test.go:40: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmph07pgcnx_test.go:40:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmph07pgcnx_test.go:40: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n\t\
    result := \"\"\n\tfor i := 0; i < len(a); i++ {\n\t\tvar intA, intB int\n\t\t\
    fmt.Sscanf(string(a[i]), \"%d\", &intA)\n\t\tfmt.Sscanf(string(b[i]), \"%d\",\
    \ &intB)\n\t\tresult += fmt.Sprintf(\"%d\", intA ^ intB)\n\t}\n\treturn result\n\
    }\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"String lengths must be equal.\")\n \
    \   }\n    var output string\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ == b[i] {\n            output += \"0\"\n        } else {\n            output\
    \ += \"1\"\n        }\n    }\n    return output\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  res := \"\"\n    if len(a) != len(b) {\n        return res\n    }\n    for\
    \ i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            res += \"\
    0\"\n        } else {\n            res += \"1\"\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        panic(\"length of inputs must be equal\")\n\
    \    }\n    a_runes := []rune(a)\n    b_runes := []rune(b)\n    result := make([]rune,\
    \ len(a_runes))\n    for i := 0; i < len(a_runes); i++ {\n        a := a_runes[i]\n\
    \        b := b_runes[i]\n        result[i] = rune(int(a) ^ int(b))\n    }\n \
    \   return string(result)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmp_046e0zg_test.go:42: expected '010010', got '\0\x01\0\0\x01\
    \0'\n    --- FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmp_046e0zg_test.go:42:\
    \ expected '0', got '\0'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n \
    \       tmp_046e0zg_test.go:42: expected '0101', got '\0\x01\0\x01'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var r string\n    if len(a) != len(b) {\n        return r\n    }\n    for i\
    \ := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            r += \"0\"\n\
    \        } else {\n            r += \"1\"\n        }\n    }\n    return r\n}\n\
    \nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i]\
    \ {\n            result += \"0\"\n        } else {\n            result += \"1\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073259
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n    for i, _ := range a {\n        if a[i] == b[i] {\n \
    \           result += \"0\"\n        } else {\n            result += \"1\"\n \
    \       }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n\
    \  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075643
- exit_code: 2
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  // fmt.Println(a,b)\n    result := \"\"\n    for i,c := range a {\n       \
    \ if b[i] == c {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result\n}\n\nfunc TestString_Xor(t *testing.T)\
    \ {\n  candidate := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    111000\", \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\"\
    , \"1\"), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyaalda8k_test.go:16:20: invalid operation: b[i] == c (mismatched types
    byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"bad input\"\n    }\n    c := \"\"\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            c +=\
    \ \"0\"\n        } else {\n            c += \"1\"\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\"\
    \ },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual:\
    \ candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  var result string\n\n    if len(a) != len(b) {\n        return result\n   \
    \ }\n\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n        \
    \    result += \"0\"\n        } else {\n            result += \"1\"\n        }\n\
    \    }\n\n    return result\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  if len(a) != len(b) {\n        return \"\"\n    }\n    res := make([]byte,\
    \ len(a))\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n    \
    \        res[i] = '0'\n        } else {\n            res[i] = '1'\n        }\n\
    \    }\n    return string(res)\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate\
    \ := string_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"111000\",\
    \ \"101010\"), expected: \"010010\" },\n     { actual: candidate(\"1\", \"1\"\
    ), expected: \"0\" },\n     { actual: candidate(\"0101\", \"0000\"), expected:\
    \ \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075643
- exit_code: 0
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  xorStr := \"\"\n    var aInt, bInt int\n    var xorInt int\n    for i := 0;\
    \ i < len(a); i++ {\n        fmt.Sscanf(string(a[i]), \"%d\", &aInt)\n       \
    \ fmt.Sscanf(string(b[i]), \"%d\", &bInt)\n        xorInt = aInt ^ bInt\n    \
    \    xorStr += fmt.Sprintf(\"%d\", xorInt)\n    }\n    return xorStr\n}\n\nfunc\
    \ TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"111000\", \"101010\"), expected: \"010010\" },\n \
    \    { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n     { actual: candidate(\"\
    0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary\
    \ XOR on these inputs and return result also as a string.\n// >>> string_xor(\"\
    010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n  \
    \  return \"100\"\n}\n\nfunc TestString_Xor(t *testing.T) {\n  candidate := string_xor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"111000\", \"101010\"), expected:\
    \ \"010010\" },\n     { actual: candidate(\"1\", \"1\"), expected: \"0\" },\n\
    \     { actual: candidate(\"0101\", \"0000\"), expected: \"0101\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Xor (0.00s)\n    --- FAIL: TestString_Xor/test_num__0\
    \ (0.00s)\n        tmpr3ttt4q0_test.go:31: expected '010010', got '100'\n    ---\
    \ FAIL: TestString_Xor/test_num__1 (0.00s)\n        tmpr3ttt4q0_test.go:31: expected\
    \ '0', got '100'\n    --- FAIL: TestString_Xor/test_num__2 (0.00s)\n        tmpr3ttt4q0_test.go:31:\
    \ expected '0101', got '100'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075643
