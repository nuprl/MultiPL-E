language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var output []string\n    var numbers map[int]string\n\
    \    var err error\n    numbers = make(map[int]string)\n    numbers[1] = \"One\"\
    \n    numbers[2] = \"Two\"\n    numbers[3] = \"Three\"\n    numbers[4] = \"Four\"\
    \n    numbers[5] = \"Five\"\n    numbers[6] = \"Six\"\n    numbers[7] = \"Seven\"\
    \n    numbers[8] = \"Eight\"\n    numbers[9] = \"Nine\"\n    for _, el := range\
    \ arr {\n        if el >= 1 && el <= 9 {\n            if value, ok := numbers[el];\
    \ ok {\n                output = append(output, value)\n            } else {\n\
    \                err = fmt.Errorf(\"Strange number %d\", el)\n            }\n\
    \        }\n    }\n    for i, j := 0, len(output)-1; i < j; i, j = i+1, j-1 {\n\
    \        output[i], output[j] = output[j], output[i]\n    }\n    if err != nil\
    \ {\n        fmt.Println(err)\n    }\n    return output\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpps9__f_6_test.go:69: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpps9__f_6_test.go:69: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpps9__f_6_test.go:69: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    m := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n \
    \   str := []string{}\n    tmp := []int{}\n    for _, item := range arr {\n  \
    \      if item > 0 && item < 10 {\n            tmp = append(tmp, item)\n     \
    \   }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        str = append(str,\
    \ m[tmp[i]])\n    }\n    return str\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpbtu04_ni_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpbtu04_ni_test.go:65: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpbtu04_ni_test.go:65: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Find the max digit, and count the number of digits\n\
    \    digits := []int{}\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            digits = append(digits, v)\n        }\n    }\n    n := len(digits)\n\
    \    if n == 0 {\n        return []string{}\n    }\n    // Build string array\n\
    \    dict := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n     \
    \   3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\"\
    ,\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\
    \    result := make([]string, n)\n    for i, v := range digits {\n        result[i]\
    \ = dict[v]\n    }\n    // reverse\n    for i := 0; i < n/2; i++ {\n        result[i],\
    \ result[n-i-1] = result[n-i-1], result[i]\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmprwm451qg_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmprwm451qg_test.go:72: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmprwm451qg_test.go:72: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, val := range arr {\n\
    \        if val >= 1 && val <= 9 {\n            result = append(result, convert(val))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptkljw9nq_test.go:24:37: undefined: convert

    /tmp/tmptkljw9nq_test.go:27:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    if len(arr) == 0 {\n  \
    \      return result\n    }\n    for _, num := range arr {\n        if val, ok\
    \ := numbers[num]; ok {\n            result = append(result, val)\n        }\n\
    \    }\n    reverse_slice(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpty7121jf_test.go:41:5: undefined: reverse_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var onlyOneToNine []int\n  \
    \  var reverseOnlyOneToNine []int\n    var OneToNineName = map[int]string{\n \
    \       1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    for _, num := range arr\
    \ {\n        if num > 0 && num < 10 {\n            onlyOneToNine = append(onlyOneToNine,\
    \ num)\n        }\n    }\n\n    // Sort the integer list\n    for i := 0; i <\
    \ len(onlyOneToNine); i++ {\n        minIndex := i\n        for j := i + 1; j\
    \ < len(onlyOneToNine); j++ {\n            if onlyOneToNine[j] < onlyOneToNine[minIndex]\
    \ {\n                minIndex = j\n            }\n        }\n        // Swap\n\
    \        onlyOneToNine[i], onlyOneToNine[minIndex] = onlyOneToNine[minIndex],\
    \ onlyOneToNine[i]\n    }\n\n    // Reverse the sorted list\n    for i := len(onlyOneToNine)\
    \ - 1; i >= 0; i-- {\n        reverseOnlyOneToNine = append(reverseOnlyOneToNine,\
    \ onlyOneToNine[i])\n    }\n\n    // Replace each digit by its corresponding name\
    \ from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"\n    for _, num := range reverseOnlyOneToNine {\n        result\
    \ = append(result, OneToNineName[num])\n    }\n\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var num_map = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, num := range arr\
    \ {\n        if num >= 1 && num <= 9 {\n            name, _ := num_map[num]\n\
    \            res = append(res, name)\n        }\n    }\n    sort(res)\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dwn70zm_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    digitNameMap := make(map[int]string)\n    digitNameMap[1]\
    \ = \"One\"\n    digitNameMap[2] = \"Two\"\n    digitNameMap[3] = \"Three\"\n\
    \    digitNameMap[4] = \"Four\"\n    digitNameMap[5] = \"Five\"\n    digitNameMap[6]\
    \ = \"Six\"\n    digitNameMap[7] = \"Seven\"\n    digitNameMap[8] = \"Eight\"\n\
    \    digitNameMap[9] = \"Nine\"\n\n    var result []string\n    for _, v := range\
    \ arr {\n        if v < 10 && v > 0 {\n            result = append(result, digitNameMap[v])\n\
    \        }\n    }\n\n    if len(result) > 0 {\n        // reverse list\n     \
    \   for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n            result[i],\
    \ result[j] = result[j], result[i]\n        }\n    }\n\n    return result\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy4a1warb_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy4a1warb_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy4a1warb_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var res = make([]string, 0)\n    for _, v := range arr {\n        switch\
    \ v {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    for\
    \ i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j],\
    \ res[i]\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp721n4wbe_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp721n4wbe_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp721n4wbe_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var numbers [9]string\n    numbers[0] = \"One\"\n   \
    \ numbers[1] = \"Two\"\n    numbers[2] = \"Three\"\n    numbers[3] = \"Four\"\n\
    \    numbers[4] = \"Five\"\n    numbers[5] = \"Six\"\n    numbers[6] = \"Seven\"\
    \n    numbers[7] = \"Eight\"\n    numbers[8] = \"Nine\"\n\n    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, numbers[v-1])\n        }\n    }\n\n    n := len(result)\n \
    \   for i := 0; i < n/2; i++ {\n        result[i], result[n-i-1] = result[n-i-1],\
    \ result[i]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfjp4g_3k_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfjp4g_3k_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfjp4g_3k_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppw_wowp9_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmppw_wowp9_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmppw_wowp9_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppw_wowp9_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sorted := make([]int, 0)\n    for _, elem := range arr\
    \ {\n        if elem >= 1 && elem <= 9 {\n            sorted = append(sorted,\
    \ elem)\n        }\n    }\n    fmt.Println(sorted)\n    bubbleSort(sorted)\n \
    \   fmt.Println(sorted)\n    result := make([]string, 0)\n    for _, elem := range\
    \ sorted {\n        switch elem {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6p_r4qlk_test.go:28:5: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var new_arr []string\n    for _, num := range arr {\n\
    \        if num == 1 {\n            new_arr = append(new_arr, \"One\")\n     \
    \   } else if num == 2 {\n            new_arr = append(new_arr, \"Two\")\n   \
    \     } else if num == 3 {\n            new_arr = append(new_arr, \"Three\")\n\
    \        } else if num == 4 {\n            new_arr = append(new_arr, \"Four\"\
    )\n        } else if num == 5 {\n            new_arr = append(new_arr, \"Five\"\
    )\n        } else if num == 6 {\n            new_arr = append(new_arr, \"Six\"\
    )\n        } else if num == 7 {\n            new_arr = append(new_arr, \"Seven\"\
    )\n        } else if num == 8 {\n            new_arr = append(new_arr, \"Eight\"\
    )\n        } else if num == 9 {\n            new_arr = append(new_arr, \"Nine\"\
    )\n        }\n    }\n    j := len(new_arr) - 1\n    for i := 0; i < len(new_arr)\
    \ / 2; i++ {\n        new_arr[i], new_arr[j] = new_arr[j], new_arr[i]\n      \
    \  j--\n    }\n    return new_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdwkutm5l_test.go:68: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpdwkutm5l_test.go:68: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdwkutm5l_test.go:68: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result = make([]string, 0)\n    var length = len(arr)\n\
    \    var counter = 0\n    var tmp int\n    var i, j int\n\n    for i = 0; i <\
    \ length; i++ {\n        for j = i; j < length; j++ {\n            if arr[i] >\
    \ arr[j] {\n                tmp = arr[i]\n                arr[i] = arr[j]\n  \
    \              arr[j] = tmp\n            }\n        }\n    }\n\n    for i = length\
    \ - 1; i >= 0; i-- {\n        switch arr[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        default:\n            counter++\n        }\n    }\n\n    if counter ==\
    \ length {\n        result = []string{}\n    }\n\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    // TODO: implement\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpux5ierm8_test.go:43: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpux5ierm8_test.go:43: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpux5ierm8_test.go:43: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpux5ierm8_test.go:43:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var new_arr []string\n    for _, num := range arr {\n\
    \        switch num {\n        case 1:\n            new_arr = append(new_arr,\
    \ \"One\")\n        case 2:\n            new_arr = append(new_arr, \"Two\")\n\
    \        case 3:\n            new_arr = append(new_arr, \"Three\")\n        case\
    \ 4:\n            new_arr = append(new_arr, \"Four\")\n        case 5:\n     \
    \       new_arr = append(new_arr, \"Five\")\n        case 6:\n            new_arr\
    \ = append(new_arr, \"Six\")\n        case 7:\n            new_arr = append(new_arr,\
    \ \"Seven\")\n        case 8:\n            new_arr = append(new_arr, \"Eight\"\
    )\n        case 9:\n            new_arr = append(new_arr, \"Nine\")\n        }\n\
    \    }\n    return new_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpt0146_tk_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpt0146_tk_test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpt0146_tk_test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n\n    for _, v := range arr {\n   \
    \     switch v {\n        case 1:\n            res = append(res, \"One\")\n  \
    \      case 2:\n            res = append(res, \"Two\")\n        case 3:\n    \
    \        res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   }\n    }\n\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1a2m0_bn_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp1a2m0_bn_test.go:66: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp1a2m0_bn_test.go:66: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tresult := []string{}\n\tsorted := []int{}\n\tfor _, el\
    \ := range arr {\n\t\tif el > 0 && el < 10 {\n\t\t\tsorted = append(sorted, el)\n\
    \t\t}\n\t}\n\tsort.Ints(sorted)\n\t// reverse sorting\n\tfor i, j := 0, len(sorted)-1;\
    \ i < j; i, j = i+1, j-1 {\n\t\tsorted[i], sorted[j] = sorted[j], sorted[i]\n\t\
    }\n\tfor _, el := range sorted {\n\t\tswitch el {\n\t\tcase 1:\n\t\t\tresult =\
    \ append(result, \"One\")\n\t\tcase 2:\n\t\t\tresult = append(result, \"Two\"\
    )\n\t\tcase 3:\n\t\t\tresult = append(result, \"Three\")\n\t\tcase 4:\n\t\t\t\
    result = append(result, \"Four\")\n\t\tcase 5:\n\t\t\tresult = append(result,\
    \ \"Five\")\n\t\tcase 6:\n\t\t\tresult = append(result, \"Six\")\n\t\tcase 7:\n\
    \t\t\tresult = append(result, \"Seven\")\n\t\tcase 8:\n\t\t\tresult = append(result,\
    \ \"Eight\")\n\t\tcase 9:\n\t\t\tresult = append(result, \"Nine\")\n\t\t}\n\t\
    }\n\treturn result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynyufxso_test.go:28:2: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // START OMIT\n    size := len(arr)\n    if size == 0\
    \ {\n        return []string{}\n    }\n    res := make([]string, size)\n    for\
    \ i, n := range arr {\n        switch n {\n        case 1:\n            res[i]\
    \ = \"One\"\n        case 2:\n            res[i] = \"Two\"\n        case 3:\n\
    \            res[i] = \"Three\"\n        case 4:\n            res[i] = \"Four\"\
    \n        case 5:\n            res[i] = \"Five\"\n        case 6:\n          \
    \  res[i] = \"Six\"\n        case 7:\n            res[i] = \"Seven\"\n       \
    \ case 8:\n            res[i] = \"Eight\"\n        case 9:\n            res[i]\
    \ = \"Nine\"\n        }\n    }\n    return res\n    // END OMIT\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpl4jwyy4x_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpl4jwyy4x_test.go:70: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpl4jwyy4x_test.go:70: expected '[Three Two One]', got '[One  Three Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpl4jwyy4x_test.go:70:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var arr_nine_digits []int\n\
    \    var arr_single_digits []int\n    var arr_sort_digits []int\n    var arr_reverse_digits\
    \ []int\n    for _, value := range arr {\n        switch {\n        case value\
    \ < 0:\n            continue\n        case value == 0:\n            continue\n\
    \        case value > 9:\n            arr_nine_digits = append(arr_nine_digits,\
    \ value)\n        case value <= 9:\n            arr_single_digits = append(arr_single_digits,\
    \ value)\n        }\n    }\n    for i := 1; i <= 9; i++ {\n        for _, value\
    \ := range arr_single_digits {\n            if value == i {\n                arr_sort_digits\
    \ = append(arr_sort_digits, value)\n            }\n        }\n    }\n    arr_reverse_digits\
    \ = reverse(arr_sort_digits)\n    for _, value := range arr_reverse_digits {\n\
    \        switch value {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    for\
    \ _, value := range arr_nine_digits {\n        result = append(result, fmt.Sprintf(\"\
    %d\", value))\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpem42t7s2_test.go:45:26: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tvar res = []string{}\n\tfor _, val := range arr {\n\t\t\
    if val > 0 && val < 10 {\n\t\t\tres = append(res, int_to_string(val))\n\t\t}\n\
    \t}\n\treturn reverse(res)\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpquaz624i_test.go:24:22: undefined: int_to_string

    /tmp/tmpquaz624i_test.go:27:9: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tnewArr := []string{}\n\tfor _, v := range arr {\n\t\tswitch\
    \ v {\n\t\tcase 1:\n\t\t\tnewArr = append(newArr, \"One\")\n\t\tcase 2:\n\t\t\t\
    newArr = append(newArr, \"Two\")\n\t\tcase 3:\n\t\t\tnewArr = append(newArr, \"\
    Three\")\n\t\tcase 4:\n\t\t\tnewArr = append(newArr, \"Four\")\n\t\tcase 5:\n\t\
    \t\tnewArr = append(newArr, \"Five\")\n\t\tcase 6:\n\t\t\tnewArr = append(newArr,\
    \ \"Six\")\n\t\tcase 7:\n\t\t\tnewArr = append(newArr, \"Seven\")\n\t\tcase 8:\n\
    \t\t\tnewArr = append(newArr, \"Eight\")\n\t\tcase 9:\n\t\t\tnewArr = append(newArr,\
    \ \"Nine\")\n\t\t}\n\t}\n\treturn newArr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpny7okwal_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpny7okwal_test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpny7okwal_test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n\n    for _, i := range arr {\n   \
    \     if i > 0 && i < 10 {\n            res = append(res, number2string(i))\n\
    \        }\n    }\n\n    return reverse(res)\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzd0pc7dg_test.go:25:31: undefined: number2string

    /tmp/tmpzd0pc7dg_test.go:29:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // result := []string{}\n    // for index, value := range\
    \ arr {\n    //     if value == 1 {\n    //         result = append(result, \"\
    One\")\n    //     } else if value == 2 {\n    //         result = append(result,\
    \ \"Two\")\n    //     } else if value == 3 {\n    //         result = append(result,\
    \ \"Three\")\n    //     } else if value == 4 {\n    //         result = append(result,\
    \ \"Four\")\n    //     } else if value == 5 {\n    //         result = append(result,\
    \ \"Five\")\n    //     } else if value == 6 {\n    //         result = append(result,\
    \ \"Six\")\n    //     } else if value == 7 {\n    //         result = append(result,\
    \ \"Seven\")\n    //     } else if value == 8 {\n    //         result = append(result,\
    \ \"Eight\")\n    //     } else if value == 9 {\n    //         result = append(result,\
    \ \"Nine\")\n    //     }\n    // }\n    // return result\n    dict := map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    result := []string{}\n\
    \    for index, value := range arr {\n        if value >= 1 && value <= 9 {\n\
    \            result = append(result, dict[value])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl1wm8sz_test.go:56:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := map[int]string{\n        1: \"One\",\n        2:\
    \ \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n\
    \        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9:\
    \ \"Nine\",\n    }\n    res := []string{}\n    for _, i := range arr {\n     \
    \   if i > 0 && i < 10 {\n            res = append(res, m[i])\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_sargzr6_test.go:58: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_sargzr6_test.go:58: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_sargzr6_test.go:58: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Add your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp8z0hkgo6_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp8z0hkgo6_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp8z0hkgo6_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp8z0hkgo6_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, value := range arr {\n\
    \        if value < 1 || value > 9 {\n            continue\n        }\n      \
    \  switch value {\n        case 1:\n            result = append(result, \"One\"\
    )\n        case 2:\n            result = append(result, \"Two\")\n        case\
    \ 3:\n            result = append(result, \"Three\")\n        case 4:\n      \
    \      result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    for\
    \ i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpv856c1zo_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpv856c1zo_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpv856c1zo_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    tmp := make([]int, 0)\n    for _, v := range arr {\n        if v >= 1 &&\
    \ v <= 9 {\n            tmp = append(tmp, v)\n        }\n    }\n    for i, j :=\
    \ 0, len(tmp)-1; i < j; i, j = i+1, j-1 {\n        tmp[i], tmp[j] = tmp[j], tmp[i]\n\
    \    }\n    res := make([]string, 0)\n    for _, v := range tmp {\n        switch\
    \ v {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpqoscjmoq_test.go:76: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpqoscjmoq_test.go:76: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpqoscjmoq_test.go:76: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // sort the input array\n    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n    // reverse the array\n    for i := 0; i < len(arr) / 2;\
    \ i++ {\n        arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n\
    \    }\n    // convert the arr to string slice\n    str := make([]string, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n\
    \            str[i] = \"One\"\n        case 2:\n            str[i] = \"Two\"\n\
    \        case 3:\n            str[i] = \"Three\"\n        case 4:\n          \
    \  str[i] = \"Four\"\n        case 5:\n            str[i] = \"Five\"\n       \
    \ case 6:\n            str[i] = \"Six\"\n        case 7:\n            str[i] =\
    \ \"Seven\"\n        case 8:\n            str[i] = \"Eight\"\n        case 9:\n\
    \            str[i] = \"Nine\"\n        default:\n            str[i] = \"\"\n\
    \        }\n    }\n    return str\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgjb466uh_test.go:79: expected '[One]', got '[ One ]'\n \
    \   --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgjb466uh_test.go:79:\
    \ expected '[Three Two One]', got '[Three Two One ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    length := len(arr)\n    if length == 0 {\n        return\
    \ []string{}\n    }\n    res := make([]string, length)\n    for i, v := range\
    \ arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n      \
    \  switch v {\n        case 1:\n            res[i] = \"One\"\n        case 2:\n\
    \            res[i] = \"Two\"\n        case 3:\n            res[i] = \"Three\"\
    \n        case 4:\n            res[i] = \"Four\"\n        case 5:\n          \
    \  res[i] = \"Five\"\n        case 6:\n            res[i] = \"Six\"\n        case\
    \ 7:\n            res[i] = \"Seven\"\n        case 8:\n            res[i] = \"\
    Eight\"\n        case 9:\n            res[i] = \"Nine\"\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpslfbxtj4_test.go:71: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpslfbxtj4_test.go:71: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpslfbxtj4_test.go:71: expected '[Three Two One]', got '[One  Three Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpslfbxtj4_test.go:71:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075138
- exit_code: null
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tvar hash = map[int]string{\n\t\t1: \"One\",\n\t\t2: \"\
    Two\",\n\t\t3: \"Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\"\
    ,\n\t\t7: \"Seven\",\n\t\t8: \"Eight\",\n\t\t9: \"Nine\",\n\t}\n\t// var arr2\
    \ []string\n\tfor i := 0; i < len(arr); i++ {\n\t\tvar item = arr[i]\n\t\tfmt.Println(item)\n\
    \t\tvar j int\n\t\tfor j = 0; j < len(arr); j++ {\n\t\t\tif arr[j] > item {\n\t\
    \t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tarr = append(arr[:j], append([]int{item}, arr[j:]...)...)\n\
    \t}\n\tvar arr2 []string\n\tfor i := 0; i < len(arr); i++ {\n\t\tvar item = arr[i]\n\
    \t\tvar str = hash[item]\n\t\tarr2 = append(arr2, str)\n\t}\n\treturn arr2\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075150
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Sort integers that are between 1 and 9 inclusive.\n\
    \    sort.Ints(arr)\n    // Remove all strange numbers.\n    arr = filter_strange_numbers(arr)\n\
    \    // Reverse the resulting list.\n    reverse(arr)\n    // Replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    for i, v := range arr\
    \ {\n        arr[i] = digit_to_name(v)\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9s2d6tb_test.go:22:5: undefined: sort

    /tmp/tmpm9s2d6tb_test.go:24:11: undefined: filter_strange_numbers

    /tmp/tmpm9s2d6tb_test.go:26:5: undefined: reverse

    /tmp/tmpm9s2d6tb_test.go:30:18: undefined: digit_to_name

    /tmp/tmpm9s2d6tb_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return arr\n    }\n    //\
    \ sort list\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 && arr[i]\
    \ < 10 {\n            // check next only if current number is valid\n        \
    \    for j := i + 1; j < len(arr); j++ {\n                if arr[j] > 0 && arr[j]\
    \ < 10 {\n                    if arr[i] > arr[j] {\n                        temp\
    \ := arr[i]\n                        arr[i] = arr[j]\n                       \
    \ arr[j] = temp\n                    }\n                }\n            }\n   \
    \     }\n    }\n    // reverse\n    start := 0\n    end := len(arr) - 1\n    for\
    \ start < end {\n        if arr[start] > 0 && arr[start] < 10 {\n            if\
    \ arr[end] > 0 && arr[end] < 10 {\n                temp := arr[start]\n      \
    \          arr[start] = arr[end]\n                arr[end] = temp\n          \
    \      start++\n                end--\n            } else {\n                end--\n\
    \            }\n        } else {\n            start++\n        }\n    }\n    //\
    \ convert to string\n    for i := 0; i < len(arr); i++ {\n        switch arr[i]\
    \ {\n        case 1:\n            arr[i] = \"One\"\n        case 2:\n        \
    \    arr[i] = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n     \
    \   case 4:\n            arr[i] = \"Four\"\n        case 5:\n            arr[i]\
    \ = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n        case 7:\n\
    \            arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\
    \n        case 9:\n            arr[i] = \"Nine\"\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphzvfb1ka_test.go:22:16: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmphzvfb1ka_test.go:61:22: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:63:22: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:65:22: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:67:22: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:69:22: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:71:22: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:73:22: cannot use "Seven" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:75:22: cannot use "Eight" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:77:22: cannot use "Nine" (untyped string constant) as
    int value in assignment

    /tmp/tmphzvfb1ka_test.go:77:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort_arr := []int{}\n    for _, value := range arr {\n\
    \        if value > 0 && value < 10 {\n            sort_arr = append(sort_arr,\
    \ value)\n        }\n    }\n    for i := 0; i < len(sort_arr); i++ {\n       \
    \ for j := i + 1; j < len(sort_arr); j++ {\n            if sort_arr[i] > sort_arr[j]\
    \ {\n                sort_arr[i], sort_arr[j] = sort_arr[j], sort_arr[i]\n   \
    \         }\n        }\n    }\n    reverse_arr := []int{}\n    for i := len(sort_arr)\
    \ - 1; i >= 0; i-- {\n        reverse_arr = append(reverse_arr, sort_arr[i])\n\
    \    }\n    dict := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\
    ,\n    }\n    result := []string{}\n    for _, value := range reverse_arr {\n\
    \        result = append(result, dict[value])\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    // TODO\n    return res\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpvo7ns3fm_test.go:43: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpvo7ns3fm_test.go:43: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpvo7ns3fm_test.go:43: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpvo7ns3fm_test.go:43:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    //fmt.Println(arr)\n    str := make([]string, 0)\n  \
    \  arr2 := make([]int, 0)\n    for _, v := range arr {\n        if v > 0 && v\
    \ < 10 {\n            arr2 = append(arr2, v)\n        }\n    }\n    for i := len(arr2)-1;\
    \ i >= 0; i-- {\n        switch arr2[i] {\n        case 1:\n            str =\
    \ append(str, \"One\")\n        case 2:\n            str = append(str, \"Two\"\
    )\n        case 3:\n            str = append(str, \"Three\")\n        case 4:\n\
    \            str = append(str, \"Four\")\n        case 5:\n            str = append(str,\
    \ \"Five\")\n        case 6:\n            str = append(str, \"Six\")\n       \
    \ case 7:\n            str = append(str, \"Seven\")\n        case 8:\n       \
    \     str = append(str, \"Eight\")\n        case 9:\n            str = append(str,\
    \ \"Nine\")\n        }\n    }\n    return str\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpd4h_k0zg_test.go:71: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpd4h_k0zg_test.go:71: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpd4h_k0zg_test.go:71: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers_map = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    var nums_to_sort []int\n\
    \    var num_of_nums_to_sort int\n    for _, i := range arr {\n        if i >\
    \ 0 && i < 10 {\n            nums_to_sort = append(nums_to_sort, i)\n        \
    \    num_of_nums_to_sort++\n        }\n    }\n    sort.Ints(nums_to_sort)\n  \
    \  for i := num_of_nums_to_sort - 1; i >= 0; i-- {\n        result = append(result,\
    \ numbers_map[nums_to_sort[i]])\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzq8bacx6_test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    var result []string\n    for i :=\
    \ len(arr) - 1; i >= 0; i-- {\n        switch arr[i] {\n        case 1:\n    \
    \        result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0_evcng_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075137
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    res := []string{}\n    for _,\
    \ a := range arr {\n        if a == 1 {\n            res = append(res, \"One\"\
    )\n        } else if a == 2 {\n            res = append(res, \"Two\")\n      \
    \  } else if a == 3 {\n            res = append(res, \"Three\")\n        } else\
    \ if a == 4 {\n            res = append(res, \"Four\")\n        } else if a ==\
    \ 5 {\n            res = append(res, \"Five\")\n        } else if a == 6 {\n \
    \           res = append(res, \"Six\")\n        } else if a == 7 {\n         \
    \   res = append(res, \"Seven\")\n        } else if a == 8 {\n            res\
    \ = append(res, \"Eight\")\n        } else if a == 9 {\n            res = append(res,\
    \ \"Nine\")\n        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1,\
    \ j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmps2vazheu_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmps2vazheu_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmps2vazheu_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code goes here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpt6ygfysa_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpt6ygfysa_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpt6ygfysa_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpt6ygfysa_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    var lengthDict = map[int]string{\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\",\n    }\n    for _, number := range arr {\n        if number\
    \ >= 1 && number <= 9 {\n            result = append(result, lengthDict[number])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5mmfx_oc_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp5mmfx_oc_test.go:61: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp5mmfx_oc_test.go:61: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    panic(\"Write the code to solve this kata.\")\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: Write the code to solve this kata.\
    \ [recovered]\n\tpanic: Write the code to solve this kata.\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x4fcd60, 0x548950})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548950})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length(...)\n\t/tmp/tmpgfeejc4f_test.go:21\n\
    command-line-arguments_test.TestBy_Length(0x0?)\n\t/tmp/tmpgfeejc4f_test.go:31\
    \ +0x27\ntesting.tRunner(0xc0001a01a0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            switch v {\n            case 1:\n   \
    \             result = append(result, \"One\")\n            case 2:\n        \
    \        result = append(result, \"Two\")\n            case 3:\n             \
    \   result = append(result, \"Three\")\n            case 4:\n                result\
    \ = append(result, \"Four\")\n            case 5:\n                result = append(result,\
    \ \"Five\")\n            case 6:\n                result = append(result, \"Six\"\
    )\n            case 7:\n                result = append(result, \"Seven\")\n \
    \           case 8:\n                result = append(result, \"Eight\")\n    \
    \        case 9:\n                result = append(result, \"Nine\")\n        \
    \    }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_ivrx9xc_test.go:69: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_ivrx9xc_test.go:69: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_ivrx9xc_test.go:69: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    m := map[int]string{\n        1:\
    \ \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n\
    \        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8:\
    \ \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n     \
    \   if (v > 0 && v < 10) {\n            // \u0438\u043C\u0435\u043D\u043D\u043E\
    \ \u0437\u0434\u0435\u0441\u044C \u0441\u043E\u0445\u0440\u0430\u043D\u044F\u0435\
    \u043C \u0432 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E\u043C \u043F\
    \u043E\u0440\u044F\u0434\u043A\u0435\n            res = append([]string{m[v]},\
    \ res...)\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpbuuyz2dp_test.go:59: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpbuuyz2dp_test.go:59: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpbuuyz2dp_test.go:59: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // FIXME: Write solution here\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmph5xaqmrj_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmph5xaqmrj_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmph5xaqmrj_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmph5xaqmrj_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075138
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    // 1. sort the integers that are\
    \ between 1 and 9 inclusive\n    arr = sort(arr)\n    // 2. reverse the resulting\
    \ list\n    arr = reverse(arr)\n    // 3. replace each digit by its corresponding\
    \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\".\n    for _, v := range arr {\n        switch\
    \ v {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bk3nrfw_test.go:23:11: undefined: sort

    /tmp/tmp4bk3nrfw_test.go:25:11: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075138
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    m := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n \
    \   var r []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            r = append(r, m[v])\n        }\n    }\n    n := len(r) - 1\n    for\
    \ i := 0; i < n/2+1; i++ {\n        r[i], r[n-i] = r[n-i], r[i]\n    }\n    return\
    \ r\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpw2ma4dmg_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpw2ma4dmg_test.go:65: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpw2ma4dmg_test.go:65: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var new_arr []string\n\n    for _,v := range arr {\n\
    \        switch v {\n        case 1:\n            new_arr = append(new_arr, \"\
    One\")\n        case 2:\n            new_arr = append(new_arr, \"Two\")\n    \
    \    case 3:\n            new_arr = append(new_arr, \"Three\")\n        case 4:\n\
    \            new_arr = append(new_arr, \"Four\")\n        case 5:\n          \
    \  new_arr = append(new_arr, \"Five\")\n        case 6:\n            new_arr =\
    \ append(new_arr, \"Six\")\n        case 7:\n            new_arr = append(new_arr,\
    \ \"Seven\")\n        case 8:\n            new_arr = append(new_arr, \"Eight\"\
    )\n        case 9:\n            new_arr = append(new_arr, \"Nine\")\n        }\n\
    \    }\n\n    for i, j := 0, len(new_arr)-1; i < j; i, j = i+1, j-1 {\n      \
    \  new_arr[i], new_arr[j] = new_arr[j], new_arr[i]\n    }\n\n    return new_arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpf381lcv1_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpf381lcv1_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpf381lcv1_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := make(map[int]string)\n    m[1] = \"One\"\n    m[2]\
    \ = \"Two\"\n    m[3] = \"Three\"\n    m[4] = \"Four\"\n    m[5] = \"Five\"\n\
    \    m[6] = \"Six\"\n    m[7] = \"Seven\"\n    m[8] = \"Eight\"\n    m[9] = \"\
    Nine\"\n\n    res := make([]string, 0)\n    for _, v := range arr {\n        if\
    \ v < 1 || v > 9 {\n            continue\n        }\n        s, ok := m[v]\n \
    \       if ok {\n            res = append(res, s)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgigusiaq_test.go:62: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpgigusiaq_test.go:62: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpgigusiaq_test.go:62: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tm := map[int]string{\n\t\t1: \"One\",\n\t\t2: \"Two\",\n\
    \t\t3: \"Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\",\n\t\t7:\
    \ \"Seven\",\n\t\t8: \"Eight\",\n\t\t9: \"Nine\",\n\t}\n\tstrarr := []string{}\n\
    \tfor _, v := range arr {\n\t\tval, ok := m[v]\n\t\tif ok {\n\t\t\tstrarr = append(strarr,\
    \ val)\n\t\t}\n\t}\n\tl := len(strarr)\n\tfor i, j := 0, l-1; i < j; i, j = i+1,\
    \ j-1 {\n\t\tstrarr[i], strarr[j] = strarr[j], strarr[i]\n\t}\n\treturn strarr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpp0oc1ytb_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpp0oc1ytb_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpp0oc1ytb_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Write your code here\n    return []string{}\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmptdwpqx5c_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmptdwpqx5c_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmptdwpqx5c_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmptdwpqx5c_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    final := []string{}\n    var container map[int]string\n\
    \    container = make(map[int]string)\n    container[1] = \"One\"\n    container[2]\
    \ = \"Two\"\n    container[3] = \"Three\"\n    container[4] = \"Four\"\n    container[5]\
    \ = \"Five\"\n    container[6] = \"Six\"\n    container[7] = \"Seven\"\n    container[8]\
    \ = \"Eight\"\n    container[9] = \"Nine\"\n    for _, num := range arr {\n  \
    \      if num >= 1 && num <= 9 {\n            final = append(final, container[num])\n\
    \        }\n    }\n    return reverse(final)\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc2x1ojct_test.go:38:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Write your code here\n    return []string{}\n}\n\n\
    //TEST\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpzfueceta_test.go:43: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpzfueceta_test.go:43: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpzfueceta_test.go:43: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpzfueceta_test.go:43:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075139
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    const\
    \ max_len = 9\n    // 1. filter numbers: [1,9]\n    nums := []int{}\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= max_len {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    // 2. sort numbers\n    nums = sort(nums)\n    //\
    \ 3. reverse\n    reverse(nums)\n    // 4. replace\n    names := []string{}\n\
    \    for _, v := range nums {\n        names = append(names, find_name(v))\n \
    \   }\n    return names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8uslkt4_test.go:33:12: undefined: sort

    /tmp/tmpv8uslkt4_test.go:35:5: undefined: reverse

    /tmp/tmpv8uslkt4_test.go:39:31: undefined: find_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    mapped := map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\"\
    , 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered\
    \ := []int{}\n    for _, elem := range arr {\n        if elem > 0 && elem < 10\
    \ {\n            filtered = append(filtered, elem)\n        }\n    }\n    res\
    \ := []string{}\n    for _, elem := range filtered {\n        res = append(res,\
    \ mapped[elem])\n    }\n    reverse(res)\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsi7kmn07_test.go:35:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    strings_map := map[int]string{\n        1: \"One\",\n\
    \        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\",\n    }\n    var strings []string\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            strings = append(strings,\
    \ strings_map[v])\n        }\n    }\n    return reverse(strings)\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw322b1ys_test.go:38:12: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var count [9]int\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            count[v-1]++\n        }\n    }\n    var\
    \ result []string\n    for i, v := range count {\n        for v > 0 {\n      \
    \      result = append(result, digits[i])\n            v--\n        }\n    }\n\
    \    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n\nvar digits\
    \ = []string{\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n   \
    \ \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, n := range arr {\n     \
    \   switch n {\n        case 1:\n            res = append(res, \"One\")\n    \
    \    case 2:\n            res = append(res, \"Two\")\n        case 3:\n      \
    \      res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   }\n    }\n    if len(res) == 0 {\n        return res\n    }\n    for i, j\
    \ := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j],\
    \ res[i]\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp2p8v4mcs_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp2p8v4mcs_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp2p8v4mcs_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var sorted_arr []int\n    for _, value := range arr {\n\
    \        if value >= 1 && value <= 9 {\n            sorted_arr = append(sorted_arr,\
    \ value)\n        }\n    }\n    for i := 0; i < len(sorted_arr); i++ {\n     \
    \   for j := i + 1; j < len(sorted_arr); j++ {\n            if sorted_arr[i] >\
    \ sorted_arr[j] {\n                sorted_arr[i], sorted_arr[j] = sorted_arr[j],\
    \ sorted_arr[i]\n            }\n        }\n    }\n    words := []string{\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    var result []string\n    for i := len(sorted_arr) - 1; i >= 0; i-- {\n\
    \        result = append(result, words[sorted_arr[i] - 1])\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    nums := []string{\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    result := []string{}\n\
    \    length := len(arr)\n    if length <= 0 {\n        return result\n    }\n\
    \    for i := 0; i < length; i++ {\n        if arr[i] >= 1 && arr[i] <= 9 {\n\
    \            result = append(result, nums[arr[i] - 1])\n        }\n    }\n   \
    \ reverseString(result)\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkg7eu2jt_test.go:32:5: undefined: reverseString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Write your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpg1yd5dso_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpg1yd5dso_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpg1yd5dso_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpg1yd5dso_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074923
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sorted := sort(arr)\n    reversed := reverse(sorted)\n\
    \    named := replace_with_names(reversed)\n    return named\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m7zpii0_test.go:21:15: undefined: sort

    /tmp/tmp6m7zpii0_test.go:22:17: undefined: reverse

    /tmp/tmp6m7zpii0_test.go:23:14: undefined: replace_with_names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075139
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var err error\n    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    for _, v := range arr {\n  \
    \      switch v {\n        case 1:\n            res = append(res, \"One\")\n \
    \       case 2:\n            res = append(res, \"Two\")\n        case 3:\n   \
    \         res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   default:\n            err = fmt.Errorf(\"%v is not between 1 and 9\", v)\n\
    \        }\n    }\n\n    if err != nil {\n        return []string{}\n    }\n \
    \   return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmprpyf9uab_test.go:75: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmprpyf9uab_test.go:75: expected\
    \ '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n       \
    \ tmprpyf9uab_test.go:75: expected '[Three Two One]', got '[]'\n    --- FAIL:\
    \ TestBy_Length/test_num__4 (0.00s)\n        tmprpyf9uab_test.go:75: expected\
    \ '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\treturn []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp2vjo0hhc_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp2vjo0hhc_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp2vjo0hhc_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp2vjo0hhc_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var sorted []int\n    for _, i := range arr {\n     \
    \   if i >= 1 && i <= 9 {\n            sorted = append(sorted, i)\n        }\n\
    \    }\n    for i := 0; i < len(sorted); i++ {\n        for j := i; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    var res []string\n\
    \    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n   \
    \     case 1:\n            res = append(res, \"One\")\n        case 2:\n     \
    \       res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    // Build sorted list\n   \
    \ var sorted []int\n    for _, num := range arr {\n        if num < 1 || num >\
    \ 9 {\n            continue\n        }\n        sorted = append(sorted, num)\n\
    \    }\n    for i := 1; i < len(sorted); i++ {\n        for j := i; j > 0; j--\
    \ {\n            if sorted[j] < sorted[j-1] {\n                sorted[j], sorted[j-1]\
    \ = sorted[j-1], sorted[j]\n            }\n        }\n    }\n\n    // Convert\
    \ numbers to strings\n    for _, num := range sorted {\n        switch num {\n\
    \        case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n\n    // Reverse list\n    for i := 0; i < len(result)/2;\
    \ i++ {\n        j := len(result) - i - 1\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    var mapstr = map[int]string{\n        1:\"One\",\n\
    \        2:\"Two\",\n        3:\"Three\",\n        4:\"Four\",\n        5:\"Five\"\
    ,\n        6:\"Six\",\n        7:\"Seven\",\n        8:\"Eight\",\n        9:\"\
    Nine\",\n    }\n    var mapint = map[string]int{\n        \"One\":1,\n       \
    \ \"Two\":2,\n        \"Three\":3,\n        \"Four\":4,\n        \"Five\":5,\n\
    \        \"Six\":6,\n        \"Seven\":7,\n        \"Eight\":8,\n        \"Nine\"\
    :9,\n    }\n    for _,v := range arr {\n        if v > 0 && v < 10 {\n       \
    \     result = append(result, mapstr[v])\n        }\n    }\n    for i,_ := range\
    \ result {\n        for j := i+1; j < len(result); j++ {\n            if mapint[result[i]]\
    \ > mapint[result[j]] {\n                result[i],result[j] = result[j],result[i]\n\
    \            }\n        }\n    }\n    for i,j := 0,len(result)-1; i < j; i,j =\
    \ i+1,j-1 {\n        result[i],result[j] = result[j],result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075140
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var str_arr []string\n    for _, i := range arr {\n \
    \       if i > 0 && i < 10 {\n            switch i {\n            case 1:\n  \
    \              str_arr = append(str_arr, \"One\")\n            case 2:\n     \
    \           str_arr = append(str_arr, \"Two\")\n            case 3:\n        \
    \        str_arr = append(str_arr, \"Three\")\n            case 4:\n         \
    \       str_arr = append(str_arr, \"Four\")\n            case 5:\n           \
    \     str_arr = append(str_arr, \"Five\")\n            case 6:\n             \
    \   str_arr = append(str_arr, \"Six\")\n            case 7:\n                str_arr\
    \ = append(str_arr, \"Seven\")\n            case 8:\n                str_arr =\
    \ append(str_arr, \"Eight\")\n            case 9:\n                str_arr = append(str_arr,\
    \ \"Nine\")\n            }\n        }\n    }\n    return str_arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmq__1i1o_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpmq__1i1o_test.go:66: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpmq__1i1o_test.go:66: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075140
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    list := make([]string, 0)\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            list = append(list, numberToWord(v))\n\
    \        }\n    }\n    for i, j := 0, len(list)-1; i < j; i, j = i+1, j-1 {\n\
    \        list[i], list[j] = list[j], list[i]\n    }\n    return list\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_q91_9lt_test.go:24:33: undefined: numberToWord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075140
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := map[int]string{\n        1: \"One\",\n        2:\
    \ \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n\
    \        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9:\
    \ \"Nine\",\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i +\
    \ 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                temp\
    \ := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n\
    \            }\n        }\n    }\n    var r []string\n    for i := len(arr) -\
    \ 1; i >= 0; i-- {\n        val, ok := m[arr[i]]\n        if ok {\n          \
    \  r = append(r, val)\n        }\n    }\n    return r\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var digits = map[int]string{\n        1: \"One\",\n \
    \       2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"\
    Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n \
    \       9: \"Nine\",\n    }\n    var result []string\n    var a = make([]int,\
    \ 0)\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n            a\
    \ = append(a, v)\n        }\n    }\n    for i, _ := range a {\n        for j :=\
    \ i; j < len(a); j++ {\n            if a[i] > a[j] {\n                a[i], a[j]\
    \ = a[j], a[i]\n            }\n        }\n    }\n    for i := len(a) - 1; i >=\
    \ 0; i-- {\n        result = append(result, digits[a[i]])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    b, e := 0, len(arr) - 1\n    for b < e {\n        for\
    \ arr[b] < 1 || arr[b] > 9 {\n            b++\n        }\n        for arr[e] <\
    \ 1 || arr[e] > 9 {\n            e--\n        }\n        if b < e {\n        \
    \    arr[b], arr[e] = arr[e], arr[b]\n            b++\n            e--\n     \
    \   }\n    }\n    //fmt.Println(arr)\n    res := make([]string, len(arr))\n  \
    \  for i, v := range arr {\n        switch v {\n        case 1:\n            res[i]\
    \ = \"One\"\n        case 2:\n            res[i] = \"Two\"\n        case 3:\n\
    \            res[i] = \"Three\"\n        case 4:\n            res[i] = \"Four\"\
    \n        case 5:\n            res[i] = \"Five\"\n        case 6:\n          \
    \  res[i] = \"Six\"\n        case 7:\n            res[i] = \"Seven\"\n       \
    \ case 8:\n            res[i] = \"Eight\"\n        case 9:\n            res[i]\
    \ = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppdg_5tx1_test.go:79: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmppdg_5tx1_test.go:79: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmppdg_5tx1_test.go:79: expected '[Three Two One]', got '[Two  Three One]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmppdg_5tx1_test.go:79:\
    \ expected '[Nine Eight Four]', got '[Eight Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var oneToNine = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    var sorter func([]int)\
    \ []int\n    sorter = func(arr []int) []int {\n        var left  []int\n     \
    \   var right []int\n        var middle []int\n        if len(arr) <= 1 {\n  \
    \          return arr\n        }\n        for _, v := range arr {\n          \
    \  if v <= 1 {\n                left = append(left, v)\n            } else if\
    \ v >= 9 {\n                right = append(right, v)\n            } else {\n \
    \               middle = append(middle, v)\n            }\n        }\n       \
    \ return append(sorter(left), append(middle, sorter(right)...)...)\n    }\n  \
    \  var sortedArr = sorter(arr)\n    for i := len(sortedArr) - 1; i >= 0; i-- {\n\
    \        if _, ok := oneToNine[sortedArr[i]]; ok {\n            result = append(result,\
    \ oneToNine[sortedArr[i]])\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0348\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5206d9?, 0x5e4ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.growslice(0x4fd740?, {0x0?, 0x0?, 0x0?},\
    \ 0x1?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:166 +0x6b7\
    \ fp=0xc0201e0358 sp=0xc0201e0350 pc=0x44a2f7\ncommand-line-arguments_test.by_length.func1({0xc00178dc10?,\
    \ 0x2, 0x0?})\n\t/tmp/tmpasn079c__test.go:43 +0x10b fp=0xc0201e0438 sp=0xc0201e0358\
    \ pc=0x4efd8b\ncommand-line-arguments_test.by_length.func1({0xc00178dbf0?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e0518 sp=0xc0201e0438\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178dbe0?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e05f8 sp=0xc0201e0518\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178dbc0?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e06d8 sp=0xc0201e05f8\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178dbb0?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e07b8 sp=0xc0201e06d8\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178db90?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e0898 sp=0xc0201e07b8\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178db80?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e0978 sp=0xc0201e0898\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178db60?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e0a58 sp=0xc0201e0978\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.func1({0xc00178db50?, 0x2,\
    \ 0x0?})\n\t/tmp/tmpasn079c__test.go:50 +0x293 fp=0xc0201e0b38 sp=0xc0201e0a58\
    \ pc=0x4eff13\ncommand-line-arguments_test.by_length.f"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    for i, v := range arr {\n        switch v {\n        case 1:\n          \
    \  arr[i] = 10\n        case 2:\n            arr[i] = 20\n        case 3:\n  \
    \          arr[i] = 30\n        case 4:\n            arr[i] = 40\n        case\
    \ 5:\n            arr[i] = 50\n        case 6:\n            arr[i] = 60\n    \
    \    case 7:\n            arr[i] = 70\n        case 8:\n            arr[i] = 80\n\
    \        case 9:\n            arr[i] = 90\n        }\n    }\n    for i := 0; i\
    \ < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[i]\
    \ > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n\
    \        }\n    }\n    for i := 0; i < len(arr)/2; i++ {\n        arr[i], arr[len(arr)-i-1]\
    \ = arr[len(arr)-i-1], arr[i]\n    }\n    arrStr := []string{}\n    for _, v :=\
    \ range arr {\n        switch v {\n        case 10:\n            arrStr = append(arrStr,\
    \ \"One\")\n        case 20:\n            arrStr = append(arrStr, \"Two\")\n \
    \       case 30:\n            arrStr = append(arrStr, \"Three\")\n        case\
    \ 40:\n            arrStr = append(arrStr, \"Four\")\n        case 50:\n     \
    \       arrStr = append(arrStr, \"Five\")\n        case 60:\n            arrStr\
    \ = append(arrStr, \"Six\")\n        case 70:\n            arrStr = append(arrStr,\
    \ \"Seven\")\n        case 80:\n            arrStr = append(arrStr, \"Eight\"\
    )\n        case 90:\n            arrStr = append(arrStr, \"Nine\")\n        }\n\
    \    }\n    return arrStr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075141
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    bucket := map[int][]int{}\n    result := []string{}\n\
    \    for _, i := range arr {\n        if i < 1 || i > 9 {\n            continue\n\
    \        }\n        bucket[i] = append(bucket[i], i)\n    }\n    for i := 9; i\
    \ > 0; i-- {\n        if len(bucket[i]) > 0 {\n            for _, n := range bucket[i]\
    \ {\n                switch n {\n                case 1:\n                   \
    \ result = append(result, \"One\")\n                case 2:\n                \
    \    result = append(result, \"Two\")\n                case 3:\n             \
    \       result = append(result, \"Three\")\n                case 4:\n        \
    \            result = append(result, \"Four\")\n                case 5:\n    \
    \                result = append(result, \"Five\")\n                case 6:\n\
    \                    result = append(result, \"Six\")\n                case 7:\n\
    \                    result = append(result, \"Seven\")\n                case\
    \ 8:\n                    result = append(result, \"Eight\")\n               \
    \ case 9:\n                    result = append(result, \"Nine\")\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var hash = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, x := range arr {\n\
    \        if x < 10 && x > 0 {\n            result = append(result, hash[x])\n\
    \        }\n    }\n    // reverse\n    for i, j := 0, len(result)-1; i < j; i,\
    \ j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxd1xjwyx_test.go:62: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxd1xjwyx_test.go:62: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxd1xjwyx_test.go:62: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v < 1 || v > 9 {\n            continue\n        }\n        res = append(res,\
    \ []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"}[v-1])\n    }\n    l := len(res)\n    for i := 0; i < l/2;\
    \ i++ {\n        res[i], res[l-i-1] = res[l-i-1], res[i]\n    }\n    return res\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp3y864lmj_test.go:52: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp3y864lmj_test.go:52: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp3y864lmj_test.go:52: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // BEGIN\n    names := map[int]string{\n        1: \"\
    One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n   \
    \     5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"\
    Eight\",\n        9: \"Nine\",\n    }\n    var res []string\n    for _, num :=\
    \ range arr {\n        if 0 < num && num < 10 {\n            res = append(res,\
    \ names[num])\n        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j =\
    \ i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n\
    \    // END\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpi0ax61v8_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpi0ax61v8_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpi0ax61v8_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sorted := sort(arr)\n    reverse := reverse(sorted)\n    filtered := filter(reverse)\n\
    \    transformed := transform(filtered)\n    return transformed\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgellbayj_test.go:24:15: undefined: sort

    /tmp/tmpgellbayj_test.go:25:16: undefined: reverse

    /tmp/tmpgellbayj_test.go:26:17: undefined: filter

    /tmp/tmpgellbayj_test.go:27:20: undefined: transform

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    result = get_name_arr(arr)\n    result = reverse_arr(result)\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp37vtnjiz_test.go:25:14: undefined: get_name_arr

    /tmp/tmp37vtnjiz_test.go:26:14: undefined: reverse_arr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075141
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // write the body of your function here\n    return []string{}\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp61m0q_uj_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp61m0q_uj_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp61m0q_uj_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp61m0q_uj_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var arrTemp []int\n    for _, a := range arr {\n    \
    \    if a > 0 && a < 10 {\n            arrTemp = append(arrTemp, a)\n        }\n\
    \    }\n    if len(arrTemp) == 0 {\n        return []string{}\n    }\n    var\
    \ arrResult []string\n    for _, a := range sort_int(arrTemp) {\n        arrResult\
    \ = append(arrResult, int_to_string(a))\n    }\n    return arrResult\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpke8emqsr_test.go:31:23: undefined: sort_int

    /tmp/tmpke8emqsr_test.go:32:39: undefined: int_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    numToString := map[int]string{\n        1: \"One\",\n\
    \        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\",\n    }\n    var result []string\n    for _, num := range\
    \ arr {\n        if 1 <= num && num <= 9 {\n            if _, ok := numToString[num];\
    \ ok {\n                result = append(result, numToString[num])\n          \
    \  }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1\
    \ {\n        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6aldrq7t_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp6aldrq7t_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp6aldrq7t_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    numbers := []string{\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    slc := make([]string,\
    \ 0)\n    for _, n := range arr {\n        if n > 0 && n < 10 {\n            slc\
    \ = append(slc, numbers[n-1])\n        }\n    }\n    return slc\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpr86bkr1g_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpr86bkr1g_test.go:48: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpr86bkr1g_test.go:48: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // ...\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_z64qaki_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp_z64qaki_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp_z64qaki_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp_z64qaki_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    str := []string{}\n    for _, element := range arr {\n\
    \        // check to make sure element is between 1 and 9 inclusive\n        if\
    \ element >= 1 && element <= 9 {\n            str = append(str, fmt.Sprintf(\"\
    %d\", element))\n        }\n    }\n    return str\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjgma6ubu_test.go:48: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpjgma6ubu_test.go:48: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpjgma6ubu_test.go:48: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpjgma6ubu_test.go:48: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    m := map[int]string{\n        1: \"One\",\n        2:\
    \ \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n\
    \        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9:\
    \ \"Nine\",\n    }\n    var words []string\n    for _, n := range arr {\n    \
    \    if n >= 1 && n <= 9 {\n            words = append(words, m[n])\n        }\n\
    \    }\n    if len(words) == 0 {\n        return words\n    }\n    for i, j :=\
    \ 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j],\
    \ words[i]\n    }\n    return words\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpttq3m8pl_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpttq3m8pl_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpttq3m8pl_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    for _, num := range arr {\n        if num < 1 || num\
    \ > 9 {\n            panic(fmt.Sprintf(\"%v is not a digit\", num))\n        }\n\
    \    }\n    res := []string{}\n    one := []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for _, num\
    \ := range arr {\n        res = append(res, one[num-1])\n    }\n    return res\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: -1 is not a digit [recovered]\n\
    \tpanic: -1 is not a digit\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x4fde40,\
    \ 0xc00010a500})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fde40, 0xc00010a500})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc000107de0?, 0x0?, 0x0?})\n\
    \t/tmp/tmpljs_pf_k_test.go:23 +0x2bf\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmpljs_pf_k_test.go:43 +0x16a\ntesting.tRunner(0xc000119040, 0x529058)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := []string{}\n    numbers := map[int]string{\n \
    \       1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, n := range arr {\n\
    \        if 1 <= n && n <= 9 {\n            out = append(out, numbers[n])\n  \
    \      }\n    }\n    // reverse list\n    for i := len(out)/2-1; i >= 0; i-- {\n\
    \        opp := len(out)-1-i\n        out[i], out[opp] = out[opp], out[i]\n  \
    \  }\n    return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpqbvzvica_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpqbvzvica_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpqbvzvica_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var output []string\n    var int_list = []int{1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9}\n    var string_list = []string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var hash =\
    \ make(map[int]string)\n    for i, val := range int_list {\n        hash[val]\
    \ = string_list[i]\n    }\n    var new_arr []int\n    for _, val := range arr\
    \ {\n        if val >= 1 && val <= 9 {\n            new_arr = append(new_arr,\
    \ val)\n        }\n    }\n    for i := len(new_arr) - 1; i >= 0; i-- {\n     \
    \   output = append(output, hash[new_arr[i]])\n    }\n    return output\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpznnc9b0c_test.go:57: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpznnc9b0c_test.go:57: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpznnc9b0c_test.go:57: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    table := map[int]string{\n        1: \"One\",\n     \
    \   2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\"\
    ,\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n       \
    \ 9: \"Nine\",\n    }\n    strings := make([]string, 0)\n    for _, value := range\
    \ arr {\n        if value < 1 || value > 9 {\n            continue\n        }\n\
    \        strings = append(strings, table[value])\n    }\n    // Reverse:\n   \
    \ for i, j := 0, len(strings)-1; i < j; i, j = i+1, j-1 {\n        strings[i],\
    \ strings[j] = strings[j], strings[i]\n    }\n    return strings\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpin9x1lh4_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpin9x1lh4_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpin9x1lh4_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    // sort array\n    arr = quickSort(arr)\n    fmt.Println(arr)\n\
    \    // reverse array\n    var reversedArr []int\n    for i := len(arr) - 1; i\
    \ >= 0; i-- {\n        reversedArr = append(reversedArr, arr[i])\n    }\n    fmt.Println(reversedArr)\n\
    \    // replace each number to its name\n    for _, value := range reversedArr\
    \ {\n        var name string\n        switch value {\n        case 1:\n      \
    \      name = \"One\"\n        case 2:\n            name = \"Two\"\n        case\
    \ 3:\n            name = \"Three\"\n        case 4:\n            name = \"Four\"\
    \n        case 5:\n            name = \"Five\"\n        case 6:\n            name\
    \ = \"Six\"\n        case 7:\n            name = \"Seven\"\n        case 8:\n\
    \            name = \"Eight\"\n        case 9:\n            name = \"Nine\"\n\
    \        default:\n            name = \"\"\n        }\n        if name != \"\"\
    \ {\n            result = append(result, name)\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe93e444_test.go:26:11: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   // sorting list\n    for i := 0; i < len(arr) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   tmp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n\
    \            }\n        }\n    }\n    // reverse list\n    if len(arr) > 1 {\n\
    \        for i := 0; i < len(arr) / 2; i++ {\n            tmp := arr[i]\n    \
    \        arr[i] = arr[len(arr) - 1 - i]\n            arr[len(arr) - 1 - i] = tmp\n\
    \        }\n    }\n    // replace number by name\n    for i := 0; i < len(arr);\
    \ i++ {\n        switch {\n        case arr[i] == 1:\n            arr[i] = 'O'\n\
    \        case arr[i] == 2:\n            arr[i] = 'T'\n        case arr[i] == 3:\n\
    \            arr[i] = 'T'\n        case arr[i] == 4:\n            arr[i] = 'F'\n\
    \        case arr[i] == 5:\n            arr[i] = 'F'\n        case arr[i] == 6:\n\
    \            arr[i] = 'S'\n        case arr[i] == 7:\n            arr[i] = 'S'\n\
    \        case arr[i] == 8:\n            arr[i] = 'E'\n        case arr[i] == 9:\n\
    \            arr[i] = 'N'\n        }\n    }\n    return []string{}\n}\n\n//=============================\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpok8x1u25_test.go:86: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpok8x1u25_test.go:86: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpok8x1u25_test.go:86: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpok8x1u25_test.go:86:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var myMap = map[int]string{\n        1: \"One\",\n  \
    \      2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"\
    Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n \
    \       9: \"Nine\",\n    }\n    var ret []string\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            ret = append(ret, myMap[v])\n     \
    \   }\n    }\n    return ret\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp0t3932ew_test.go:58: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp0t3932ew_test.go:58: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp0t3932ew_test.go:58: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    newArr := []string{}\n    for _, s := range arr {\n \
    \       switch s {\n        case 1:\n            newArr = append(newArr, \"One\"\
    )\n        case 2:\n            newArr = append(newArr, \"Two\")\n        case\
    \ 3:\n            newArr = append(newArr, \"Three\")\n        case 4:\n      \
    \      newArr = append(newArr, \"Four\")\n        case 5:\n            newArr\
    \ = append(newArr, \"Five\")\n        case 6:\n            newArr = append(newArr,\
    \ \"Six\")\n        case 7:\n            newArr = append(newArr, \"Seven\")\n\
    \        case 8:\n            newArr = append(newArr, \"Eight\")\n        case\
    \ 9:\n            newArr = append(newArr, \"Nine\")\n        }\n    }\n    fmt.Println(newArr)\n\
    \    return newArr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[Two One One Four Five Eight Two Three]\n[]\n[One]\n[One Three Two]\n[Nine\
    \ Four Eight]\n--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp64yu87ry_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp64yu87ry_test.go:65: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp64yu87ry_test.go:65: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v > 0 && v < 10 {\n            res = append(res, numbers[v-1])\n      \
    \  }\n    }\n    return res\n}\n\nvar numbers = []string{\n    \"One\",\n    \"\
    Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\"\
    ,\n    \"Eight\",\n    \"Nine\",\n}\n\nvar by_length_tests = []\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp5qes46k_test.go:42:25: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    integers := make([]int, 0)\n    for _, i := range arr\
    \ {\n        if i > 0 && i < 10 {\n            integers = append(integers, i)\n\
    \        }\n    }\n    for i := 0; i < len(integers)-1; i++ {\n        for j :=\
    \ 0; j < len(integers)-1-i; j++ {\n            if integers[j] > integers[j+1]\
    \ {\n                integers[j], integers[j+1] = integers[j+1], integers[j]\n\
    \            }\n        }\n    }\n    reverse(integers)\n    names := make([]string,\
    \ 0)\n    for _, i := range integers {\n        names = append(names, name_for(i))\n\
    \    }\n    return names\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4u9u8yi_test.go:34:5: undefined: reverse

    /tmp/tmpd4u9u8yi_test.go:37:31: undefined: name_for

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var results []string\n    var digits = make(map[int]string)\n\
    \    digits[1] = \"One\"\n    digits[2] = \"Two\"\n    digits[3] = \"Three\"\n\
    \    digits[4] = \"Four\"\n    digits[5] = \"Five\"\n    digits[6] = \"Six\"\n\
    \    digits[7] = \"Seven\"\n    digits[8] = \"Eight\"\n    digits[9] = \"Nine\"\
    \n\n    for _, value := range arr {\n        if value >= 1 && value <= 9 {\n \
    \           results = append(results, digits[value])\n        }\n    }\n\n   \
    \ for i, j := 0, len(results)-1; i < j; i, j = i+1, j-1 {\n        results[i],\
    \ results[j] = results[j], results[i]\n    }\n\n    return results\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpaa3q4hwi_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpaa3q4hwi_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpaa3q4hwi_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    hash := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n     \
    \   3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\"\
    ,\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\
    \    ints := []int{}\n    for _, value := range arr {\n        if value >= 1 &&\
    \ value <= 9 {\n            ints = append(ints, value)\n        }\n    }\n   \
    \ for i := 0; i < len(ints); i++ {\n        for j := i + 1; j < len(ints); j++\
    \ {\n            if ints[i] > ints[j] {\n                ints[i], ints[j] = ints[j],\
    \ ints[i]\n            }\n        }\n    }\n    result := []string{}\n    for\
    \ i := len(ints) - 1; i >= 0; i-- {\n        if _, ok := hash[ints[i]]; ok {\n\
    \            result = append(result, hash[ints[i]])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return nil\n    }\n    dict\
    \ := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3: \"\
    Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n  \
    \      7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n   \
    \ var res []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            res = append(res, dict[v])\n        }\n    }\n    if len(res) ==\
    \ 0 {\n        return res\n    }\n    for i, j := 0, len(res)-1; i < j; i, j =\
    \ i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpp_op992m_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpp_op992m_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpp_op992m_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075143
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) < 1 {\n        return []string{}\n    }\n\
    \    var result []string\n    var tmp int\n    var index int\n    for i := 0;\
    \ i < len(arr); i++ {\n        tmp = arr[i]\n        index = 0\n        if tmp\
    \ > 0 && tmp < 10 {\n            result = append(result, strconv.Itoa(tmp))\n\
    \        }\n    }\n    sort.Strings(result)\n    for i := 0; i < len(result)/2;\
    \ i++ {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i]\
    \ = by_length_names[result[i]]\n    }\n    return result\n}\n\nvar by_length_tests\
    \ = []\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjzk5frvr_test.go:44:25: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075142
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\treturn arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c74ggru_test.go:21:9: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075143
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var keys []int\n    hash :=\
    \ map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for _, value := range\
    \ arr {\n        if _, exist := hash[value]; exist {\n            keys = append(keys,\
    \ value)\n        }\n    }\n    for i := 0; i < len(keys); i++ {\n        for\
    \ j := i; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n         \
    \       keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n\
    \    for i := len(keys) - 1; i >= 0; i-- {\n        result = append(result, hash[keys[i]])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075143
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, n := range arr {\n    \
    \    if n > 0 && n < 10 {\n            res = append(res, to_word(n))\n       \
    \ }\n    }\n    length := len(res)\n    for i := 0; i < length / 2; i++ {\n  \
    \      j := length - i - 1\n        res[i], res[j] = res[j], res[i]\n    }\n \
    \   return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hwc7qp2_test.go:24:31: undefined: to_word

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    if len(arr) == 0 {\n     \
    \   return result\n    }\n\n    intMap := map[int]string{\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\",\n    }\n\n    for _, value := range arr {\n        if\
    \ value >= 1 && value <= 9 {\n            result = append(result, intMap[value])\n\
    \        }\n    }\n\n    for left, right := 0, len(result) - 1; left < right;\
    \ left, right = left + 1, right - 1 {\n        result[left], result[right] = result[right],\
    \ result[left]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5q3u8wod_test.go:69: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp5q3u8wod_test.go:69: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp5q3u8wod_test.go:69: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if arr == nil {\n        return []string{}\n    }\n \
    \   numberNames := make(map[int]string)\n    numberNames[1] = \"One\"\n    numberNames[2]\
    \ = \"Two\"\n    numberNames[3] = \"Three\"\n    numberNames[4] = \"Four\"\n \
    \   numberNames[5] = \"Five\"\n    numberNames[6] = \"Six\"\n    numberNames[7]\
    \ = \"Seven\"\n    numberNames[8] = \"Eight\"\n    numberNames[9] = \"Nine\"\n\
    \    out := []string{}\n    for _, v := range arr {\n        if v < 1 || v > 9\
    \ {\n            continue\n        }\n        out = append(out, numberNames[v])\n\
    \    }\n    return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpl118mkya_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpl118mkya_test.go:61: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpl118mkya_test.go:61: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n\n    if len(arr) == 0 {\n        return\
    \ res\n    }\n\n    // find the longest word\n    max := 0\n    for _, v := range\
    \ arr {\n        if v > max {\n            max = v\n        }\n    }\n\n    fmt.Println(\"\
    Max: \", max)\n\n    // int to string\n    for _, v := range arr {\n        switch\
    \ v {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n\n  \
    \  // reverse the list\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1\
    \ {\n        res[i], res[j] = res[j], res[i]\n    }\n\n    return res\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Max:  8\nMax:  55\nMax:  3\nMax:  9\n--- FAIL: TestBy_Length (0.00s)\n\
    \    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpkcdb33i1_test.go:86:\
    \ expected '[Eight Five Four Three Two Two One One]', got '[Three Two Eight Five\
    \ Four One One Two]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n      \
    \  tmpkcdb33i1_test.go:86: expected '[Three Two One]', got '[Two Three One]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkcdb33i1_test.go:86:\
    \ expected '[Nine Eight Four]', got '[Eight Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    dict := map[int]string{\n        1:\"One\",\n       \
    \ 2:\"Two\",\n        3:\"Three\",\n        4:\"Four\",\n        5:\"Five\",\n\
    \        6:\"Six\",\n        7:\"Seven\",\n        8:\"Eight\",\n        9:\"\
    Nine\",\n    }\n    result := []string{}\n    numbers := []int{}\n    for _, n\
    \ := range arr {\n        if n >= 1 && n <= 9 {\n            numbers = append(numbers,\
    \ n)\n        }\n    }\n    for i:=len(numbers)-1; i>=0; i-- {\n        if dict[numbers[i]]\
    \ != \"\" {\n            result = append(result, dict[numbers[i]])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmptp1bygmm_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmptp1bygmm_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmptp1bygmm_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Write your code here\n    var unsorted, sorted []int\n\
    \    for _, i := range arr {\n        if i > 0 && i < 10 {\n            unsorted\
    \ = append(unsorted, i)\n        }\n    }\n    for {\n        if len(unsorted)\
    \ == 0 {\n            break\n        }\n        smallest := unsorted[0]\n    \
    \    for _, i := range unsorted {\n            if i < smallest {\n           \
    \     smallest = i\n            }\n        }\n        sorted = append(sorted,\
    \ smallest)\n        var new_unsorted []int\n        for _, i := range unsorted\
    \ {\n            if i != smallest {\n                new_unsorted = append(new_unsorted,\
    \ i)\n            }\n        }\n        unsorted = new_unsorted\n    }\n    var\
    \ reversed_int []int\n    for i := len(sorted) - 1; i >= 0; i-- {\n        reversed_int\
    \ = append(reversed_int, sorted[i])\n    }\n    var reversed_str []string\n  \
    \  for _, i := range reversed_int {\n        reversed_str = append(reversed_str,\
    \ convert_int_to_str(i))\n    }\n    return reversed_str\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphki2gozw_test.go:53:45: undefined: convert_int_to_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement\n    var result []string\n    length\
    \ := len(arr)\n    if length == 0 {\n        return result\n    }\n    mapnumber\
    \ := make(map[int]string)\n    mapnumber[1] = \"One\"\n    mapnumber[2] = \"Two\"\
    \n    mapnumber[3] = \"Three\"\n    mapnumber[4] = \"Four\"\n    mapnumber[5]\
    \ = \"Five\"\n    mapnumber[6] = \"Six\"\n    mapnumber[7] = \"Seven\"\n    mapnumber[8]\
    \ = \"Eight\"\n    mapnumber[9] = \"Nine\"\n    temp := make([]int, 0)\n    for\
    \ _, value := range arr {\n        if value > 0 && value < 10 {\n            temp\
    \ = append(temp, value)\n        }\n    }\n    quickSort(temp, 0, len(temp)-1)\n\
    \    for _, value := range temp {\n        result = append(result, mapnumber[value])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobfc242f_test.go:43:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    length := len(arr)\n    if length == 0 {\n        return\
    \ []string{}\n    }\n    result := make([]string, length)\n    for i, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result[i] = switchNum(v)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdagllxi5_test.go:28:25: undefined: switchNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    const (\n        One = \"One\"\
    \n        Two = \"Two\"\n        Three = \"Three\"\n        Four = \"Four\"\n\
    \        Five = \"Five\"\n        Six = \"Six\"\n        Seven = \"Seven\"\n \
    \       Eight = \"Eight\"\n        Nine = \"Nine\"\n    )\n    for _,v := range\
    \ arr {\n        if v > 9 || v < 1 {\n            continue\n        }\n      \
    \  switch v {\n        case 1:\n            result = append(result, One)\n   \
    \     case 2:\n            result = append(result, Two)\n        case 3:\n   \
    \         result = append(result, Three)\n        case 4:\n            result\
    \ = append(result, Four)\n        case 5:\n            result = append(result,\
    \ Five)\n        case 6:\n            result = append(result, Six)\n        case\
    \ 7:\n            result = append(result, Seven)\n        case 8:\n          \
    \  result = append(result, Eight)\n        case 9:\n            result = append(result,\
    \ Nine)\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpun1i8nns_test.go:81: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpun1i8nns_test.go:81: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpun1i8nns_test.go:81: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075144
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var nums []int\n    for _, num := range arr {\n     \
    \   if num >= 1 && num <= 9 {\n            nums = append(nums, num)\n        }\n\
    \    }\n    for i := 0; i < len(nums) - 1; i++ {\n        for j := i + 1; j <\
    \ len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i],\
    \ nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    var strs []string\n\
    \    for i := len(nums) - 1; i >= 0; i-- {\n        switch nums[i] {\n       \
    \ case 1:\n            strs = append(strs, \"One\")\n        case 2:\n       \
    \     strs = append(strs, \"Two\")\n        case 3:\n            strs = append(strs,\
    \ \"Three\")\n        case 4:\n            strs = append(strs, \"Four\")\n   \
    \     case 5:\n            strs = append(strs, \"Five\")\n        case 6:\n  \
    \          strs = append(strs, \"Six\")\n        case 7:\n            strs = append(strs,\
    \ \"Seven\")\n        case 8:\n            strs = append(strs, \"Eight\")\n  \
    \      case 9:\n            strs = append(strs, \"Nine\")\n        }\n    }\n\
    \    return strs\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075144
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, x := range arr {\n  \
    \      if x > 0 && x < 10 {\n            result = append(result, to_string(x))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgnqriruw_test.go:24:37: undefined: to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    out := []string{}\n    for _, i := range arr {\n    \
    \    if i >= 1 && i <= 9 {\n            out = append(out, numToStr(i))\n     \
    \   }\n    }\n    reverseSort(out)\n    return out\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp4az3k5_test.go:24:31: undefined: numToStr

    /tmp/tmprp4az3k5_test.go:27:5: undefined: reverseSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075144
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    //var res []string\n    m := map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    res := make([]string, 0)\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            res =\
    \ append(res, m[v])\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpyip8nj0s_test.go:60: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpyip8nj0s_test.go:60: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpyip8nj0s_test.go:60: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    new_arr := make([]int, 0)\n    for _, num := range arr\
    \ {\n        if num >= 1 && num <= 9 {\n            new_arr = append(new_arr,\
    \ num)\n        }\n    }\n    sort(new_arr)\n    new_arr = reverse(new_arr)\n\
    \    new_str_arr := make([]string, 0)\n    for _, num := range new_arr {\n   \
    \     str := convert_to_str(num)\n        new_str_arr = append(new_str_arr, str)\n\
    \    }\n    return new_str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9j84ngr1_test.go:27:5: undefined: sort

    /tmp/tmp9j84ngr1_test.go:28:15: undefined: reverse

    /tmp/tmp9j84ngr1_test.go:31:16: undefined: convert_to_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    str := []string{}\n    return str\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpws6t8qae_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpws6t8qae_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpws6t8qae_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpws6t8qae_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, val := range arr {\n\
    \        switch val {\n        case 1:\n            result = append(result, \"\
    One\")\n        case 2:\n            result = append(result, \"Two\")\n      \
    \  case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp24kpfztn_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp24kpfztn_test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp24kpfztn_test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var (\n        result []string\n        dict   = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }\n    )\n    // len(arr) == 0 \u4E86\uFF0C\u8FD8\u5199 if (len(arr)\
    \ == 0) \u610F\u4E49\u4F55\u5728\uFF1F\n    if len(arr) == 0 {\n        return\
    \ result\n    }\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n \
    \           result = append(result, dict[v])\n        }\n    }\n    reverse(result)\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp53zgxlfq_test.go:44:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    v1 := []int{}\n    result := []string{}\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            v1 = append(v1, v)\n\
    \        }\n    }\n    fmt.Println(v1)\n    for _, v := range v1 {\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2 1 1 4 5 8 2 3]\n[]\n[1]\n[1 3 2]\n[9 4 8]\n--- FAIL: TestBy_Length (0.00s)\n\
    \    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmpufgyzr96_test.go:52:\
    \ expected '[Eight Five Four Three Two Two One One]', got '[2 1 1 4 5 8 2 3]'\n\
    \    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n        tmpufgyzr96_test.go:52:\
    \ expected '[One]', got '[1]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n\
    \        tmpufgyzr96_test.go:52: expected '[Three Two One]', got '[1 3 2]'\n \
    \   --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpufgyzr96_test.go:52:\
    \ expected '[Nine Eight Four]', got '[9 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    for _, value := range arr\
    \ {\n        if (value > 0 && value < 10) {\n            result = append(result,\
    \ \n                map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"\
    Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}[value])\n\
    \        }\n    }\n\n    for i, j := 0, len(result) - 1; i < j; i, j = i + 1,\
    \ j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5p2ct9iw_test.go:54: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp5p2ct9iw_test.go:54: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp5p2ct9iw_test.go:54: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    dict := map[int]string{\n        1: \"One\",\n      \
    \  2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\"\
    ,\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n       \
    \ 9: \"Nine\",\n    }\n    result := []string{}\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            result = append(result, dict[v])\n\
    \        }\n    }\n    // Reverse slice\n    for i := len(result)/2-1; i >= 0;\
    \ i-- {\n        opp := len(result)-1-i\n        result[i], result[opp] = result[opp],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp39yxpi3i_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp39yxpi3i_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp39yxpi3i_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, elem := range arr {\n  \
    \      if elem < 1 || elem > 9 {\n            continue\n        }\n        res\
    \ = append(res, fmt.Sprintf(\"%d\", elem))\n    }\n    for i, j := 0, len(res)-1;\
    \ i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n \
    \   return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgg99uyv__test.go:51: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[3 2 8 5 4 1 1 2]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpgg99uyv__test.go:51: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpgg99uyv__test.go:51: expected\
    \ '[Three Two One]', got '[2 3 1]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpgg99uyv__test.go:51: expected '[Nine Eight Four]', got '[8 4 9]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tresult := []string{}\n\tif len(arr) == 0 {\n\t\treturn\
    \ result\n\t}\n\tnumbers := map[int]string{\n\t\t1: \"One\",\n\t\t2: \"Two\",\n\
    \t\t3: \"Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\",\n\t\t7:\
    \ \"Seven\",\n\t\t8: \"Eight\",\n\t\t9: \"Nine\",\n\t}\n\tfor _, v := range arr\
    \ {\n\t\tif v >= 1 && v <= 9 {\n\t\t\tresult = append(result, numbers[v])\n\t\t\
    }\n\t}\n\tsorted := []string{}\n\tfor i := len(result) - 1; i >= 0; i-- {\n\t\t\
    sorted = append(sorted, result[i])\n\t}\n\treturn sorted\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5qitx246_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp5qitx246_test.go:65: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp5qitx246_test.go:65: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    i_to_s := map[int]string{\n        1: \"One\",\n    \
    \    2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\"\
    ,\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n       \
    \ 9: \"Nine\",\n    }\n    var res []string\n    for _, i := range arr {\n   \
    \     if i < 1 || i > 9 {\n            continue\n        }\n        res = append(res,\
    \ i_to_s[i])\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n\
    \        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\ntype test\
    \ \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq1tjj7oh_test.go:45:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var digitToWord = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    var arr_l []int\n    for\
    \ _, x := range arr {\n        if x >= 1 && x <= 9 {\n            arr_l = append(arr_l,\
    \ x)\n        }\n    }\n    sort(arr_l)\n    for _, x := range arr_l {\n     \
    \   res = append(res, digitToWord[x])\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86s11fpc_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    r := make([]string, 0)\n    return r\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmph2tekvpf_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmph2tekvpf_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmph2tekvpf_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmph2tekvpf_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return arr\n    }\n    sorted\
    \ := make([]int, 0)\n    res := make([]string, 0)\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n      \
    \  }\n    }\n    quickSort(sorted, 0, len(sorted) - 1)\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  res = append(res, \"One\")\n        case 2:\n            res = append(res,\
    \ \"Two\")\n        case 3:\n            res = append(res, \"Three\")\n      \
    \  case 4:\n            res = append(res, \"Four\")\n        case 5:\n       \
    \     res = append(res, \"Five\")\n        case 6:\n            res = append(res,\
    \ \"Six\")\n        case 7:\n            res = append(res, \"Seven\")\n      \
    \  case 8:\n            res = append(res, \"Eight\")\n        case 9:\n      \
    \      res = append(res, \"Nine\")\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipgqz99n_test.go:22:16: cannot use arr (variable of type []int) as type
    []string in return statement

    /tmp/tmpipgqz99n_test.go:31:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075145
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp_arr [10]string\n  \
    \  temp_arr[1] = \"One\"\n    temp_arr[2] = \"Two\"\n    temp_arr[3] = \"Three\"\
    \n    temp_arr[4] = \"Four\"\n    temp_arr[5] = \"Five\"\n    temp_arr[6] = \"\
    Six\"\n    temp_arr[7] = \"Seven\"\n    temp_arr[8] = \"Eight\"\n    temp_arr[9]\
    \ = \"Nine\"\n    for _, num := range arr {\n        if num > 0 && num < 10 {\n\
    \            result = append(result, temp_arr[num])\n        }\n    }\n    for\
    \ i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy69knd2h_test.go:60: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy69knd2h_test.go:60: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy69knd2h_test.go:60: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    // create temporary slice\
    \ for sorting, for numbers between 1 and 9\n    var tmp_arr []int\n    for _,\
    \ value := range arr {\n        if value < 10 && value > 0 {\n            tmp_arr\
    \ = append(tmp_arr, value)\n        }\n    }\n\n    // sort tmp_arr\n    for i\
    \ := 0; i < len(tmp_arr); i++ {\n        for j := i + 1; j < len(tmp_arr); j++\
    \ {\n            if tmp_arr[i] > tmp_arr[j] {\n                tmp_arr[i], tmp_arr[j]\
    \ = tmp_arr[j], tmp_arr[i]\n            }\n        }\n    }\n\n    // reverse\
    \ result\n    for i := len(tmp_arr) - 1; i >= 0; i-- {\n        result = append(result,\
    \ number_to_string(tmp_arr[i]))\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeeqxs5fh_test.go:42:33: undefined: number_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var new_arr []string\n    // Sort arr\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := 0; j < len(arr) - 1; j++ {\n         \
    \   if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1],\
    \ arr[j]\n            }\n        }\n    }\n    // Reverse arr\n    for i := 0;\
    \ i < len(arr)/2; i++ {\n        arr[i], arr[len(arr) - 1 - i] = arr[len(arr)\
    \ - 1 - i], arr[i]\n    }\n    // Replace\n    for _, x := range arr {\n     \
    \   if x < 1 || x > 9 {\n            continue\n        }\n        switch x {\n\
    \        case 1:\n            new_arr = append(new_arr, \"One\")\n        case\
    \ 2:\n            new_arr = append(new_arr, \"Two\")\n        case 3:\n      \
    \      new_arr = append(new_arr, \"Three\")\n        case 4:\n            new_arr\
    \ = append(new_arr, \"Four\")\n        case 5:\n            new_arr = append(new_arr,\
    \ \"Five\")\n        case 6:\n            new_arr = append(new_arr, \"Six\")\n\
    \        case 7:\n            new_arr = append(new_arr, \"Seven\")\n        case\
    \ 8:\n            new_arr = append(new_arr, \"Eight\")\n        case 9:\n    \
    \        new_arr = append(new_arr, \"Nine\")\n        }\n    }\n    return new_arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Assume arr only contains ints\n    // Assume arr does\
    \ not contain strings\n    // Assume no values are negative\n    // Assume all\
    \ values are positive\n    // Assume no values are 0\n    // Assume all values\
    \ are greater than 0\n    // Assume all values are less than or equal to 9\n \
    \   // Assume no negative numbers\n    var results []string\n    //fmt.Println(arr)\n\
    \    if len(arr) == 0 {\n        return results\n    }\n    //fmt.Println(len(arr))\n\
    \    for i, n := range arr {\n        //fmt.Println(i, n)\n        if n > 0 &&\
    \ n <= 9 {\n            switch n {\n            case 1:\n                results\
    \ = append(results, \"One\")\n            case 2:\n                results = append(results,\
    \ \"Two\")\n            case 3:\n                results = append(results, \"\
    Three\")\n            case 4:\n                results = append(results, \"Four\"\
    )\n            case 5:\n                results = append(results, \"Five\")\n\
    \            case 6:\n                results = append(results, \"Six\")\n   \
    \         case 7:\n                results = append(results, \"Seven\")\n    \
    \        case 8:\n                results = append(results, \"Eight\")\n     \
    \       case 9:\n                results = append(results, \"Nine\")\n       \
    \     }\n        }\n    }\n    // Reverse the results\n    for i, j := 0, len(results)-1;\
    \ i < j; i, j = i+1, j-1 {\n        results[i], results[j] = results[j], results[i]\n\
    \    }\n    return results\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc40kbi__test.go:35:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var tmp []int\n    var ret []string\n    for _, i :=\
    \ range arr {\n        if i > 0 && i < 10 {\n            tmp = append(tmp, i)\n\
    \        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i]\
    \ {\n        case 1:\n            ret = append(ret, \"One\")\n        case 2:\n\
    \            ret = append(ret, \"Two\")\n        case 3:\n            ret = append(ret,\
    \ \"Three\")\n        case 4:\n            ret = append(ret, \"Four\")\n     \
    \   case 5:\n            ret = append(ret, \"Five\")\n        case 6:\n      \
    \      ret = append(ret, \"Six\")\n        case 7:\n            ret = append(ret,\
    \ \"Seven\")\n        case 8:\n            ret = append(ret, \"Eight\")\n    \
    \    case 9:\n            ret = append(ret, \"Nine\")\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfq2eavw9_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfq2eavw9_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfq2eavw9_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var lengths []int\n    for _, x := range arr {\n    \
    \    if x > 0 && x < 10 {\n            lengths = append(lengths, x)\n        }\n\
    \    }\n    sort(lengths)\n    reverse(lengths)\n    return names(lengths)\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zc3v7xf_test.go:27:5: undefined: sort

    /tmp/tmp5zc3v7xf_test.go:28:5: undefined: reverse

    /tmp/tmp5zc3v7xf_test.go:29:12: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    switch v {\n        case 1:\n            res = append(res, \"One\")\n   \
    \     case 2:\n            res = append(res, \"Two\")\n        case 3:\n     \
    \       res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n      \
    \  res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpz132lbmv_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpz132lbmv_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpz132lbmv_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Sorting by length of strings\n    res := []string{}\n\
    \    // Iterate over the array and check if each element is between 1 and 9\n\
    \    for _, i := range arr {\n        if i > 0 && i < 10 {\n            // Append\
    \ to res\n            res = append(res, i)\n        }\n    }\n    // Reverse the\
    \ order of the strings\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1\
    \ {\n        res[i], res[j] = res[j], res[i]\n    }\n    // Replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    for index, e := range\
    \ res {\n        // Get the value of the string and make a switch case\n     \
    \   switch e {\n        case 1:\n            res[index] = \"One\"\n        case\
    \ 2:\n            res[index] = \"Two\"\n        case 3:\n            res[index]\
    \ = \"Three\"\n        case 4:\n            res[index] = \"Four\"\n        case\
    \ 5:\n            res[index] = \"Five\"\n        case 6:\n            res[index]\
    \ = \"Six\"\n        case 7:\n            res[index] = \"Seven\"\n        case\
    \ 8:\n            res[index] = \"Eight\"\n        case 9:\n            res[index]\
    \ = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3e625ys_test.go:27:31: cannot use i (variable of type int) as type string
    in argument to append

    /tmp/tmpb3e625ys_test.go:39:14: cannot convert 1 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:41:14: cannot convert 2 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:43:14: cannot convert 3 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:45:14: cannot convert 4 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:47:14: cannot convert 5 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:49:14: cannot convert 6 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:51:14: cannot convert 7 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:53:14: cannot convert 8 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:55:14: cannot convert 9 (untyped int constant) to string

    /tmp/tmpb3e625ys_test.go:55:14: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO: implement me\n    return []string{}\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpe4asvk45_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpe4asvk45_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpe4asvk45_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpe4asvk45_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    if len(arr) == 0 {\n        return\
    \ res\n    }\n    for _, i := range arr {\n        if i > 0 && i < 10 {\n    \
    \        res = append(res, int_to_string(i))\n        }\n    }\n    sort_list(res)\n\
    \    // reverse the list\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1\
    \ {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zqi74mh_test.go:27:31: undefined: int_to_string

    /tmp/tmp3zqi74mh_test.go:30:5: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, i := range arr {\n    \
    \    switch i {\n        case 1:\n            res = append(res, \"One\")\n   \
    \     case 2:\n            res = append(res, \"Two\")\n        case 3:\n     \
    \       res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   }\n    }\n    // reverse\n    for i, j := 0, len(res)-1; i < j; i, j = i+1,\
    \ j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppikrdkpt_test.go:68: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmppikrdkpt_test.go:68: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmppikrdkpt_test.go:68: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      switch v {\n        case 1:\n            result = append(result, \"One\"\
    )\n        case 2:\n            result = append(result, \"Two\")\n        case\
    \ 3:\n            result = append(result, \"Three\")\n        case 4:\n      \
    \      result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsk5k2ske_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpsk5k2ske_test.go:64: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpsk5k2ske_test.go:64: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    str_arr := make([]string, len(arr))\n    for index, value\
    \ := range arr {\n        if value > 0 && value < 10 {\n            switch value\
    \ {\n            case 1:\n                str_arr[index] = \"One\"\n         \
    \   case 2:\n                str_arr[index] = \"Two\"\n            case 3:\n \
    \               str_arr[index] = \"Three\"\n            case 4:\n            \
    \    str_arr[index] = \"Four\"\n            case 5:\n                str_arr[index]\
    \ = \"Five\"\n            case 6:\n                str_arr[index] = \"Six\"\n\
    \            case 7:\n                str_arr[index] = \"Seven\"\n           \
    \ case 8:\n                str_arr[index] = \"Eight\"\n            case 9:\n \
    \               str_arr[index] = \"Nine\"\n            }\n        }\n    }\n \
    \   for i := 0; i < len(str_arr)/2; i++ {\n        j := len(str_arr) - i - 1\n\
    \        str_arr[i], str_arr[j] = str_arr[j], str_arr[i]\n    }\n    return str_arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpgaox753i_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpgaox753i_test.go:70: expected\
    \ '[One]', got '[  One]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpgaox753i_test.go:70: expected '[Three Two One]', got '[Two Three  One]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpgaox753i_test.go:70:\
    \ expected '[Nine Eight Four]', got '[Eight Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // TODO\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpkir1_0y2_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpkir1_0y2_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpkir1_0y2_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpkir1_0y2_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcy5wjmki_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpcy5wjmki_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpcy5wjmki_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpcy5wjmki_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var numbers []int\n    for _, value := range arr {\n\
    \        if value >= 1 && value <= 9 {\n            numbers = append(numbers,\
    \ value)\n        }\n    }\n    for i := 0; i < len(numbers) - 1; i++ {\n    \
    \    for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] > numbers[j]\
    \ {\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n       \
    \     }\n        }\n    }\n    result := make([]string, len(numbers))\n    for\
    \ i, value := range numbers {\n        result[i] = numberToString(value)\n   \
    \ }\n    for i := 0; i < len(result) / 2; i++ {\n        result[i], result[len(result)\
    \ - 1 - i] = result[len(result) - 1 - i], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lz751r5_test.go:36:21: undefined: numberToString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v > 0 && v < 10 {\n            res = append(res, to_str(v))\n        }\n\
    \    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rz_vb2t_test.go:24:31: undefined: to_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    if len(arr) == 0 {\n       \
    \ return result\n    }\n    for _, v := range arr {\n        switch v {\n    \
    \    case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j =\
    \ i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppph3jsry_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmppph3jsry_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmppph3jsry_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    digitNames := []string{\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    dict := make(map[int]int)\n\
    \    newArr := []int{}\n    for _, val := range arr {\n        if val < 0 || val\
    \ > 9 {\n            continue\n        }\n        dict[val]++\n        newArr\
    \ = append(newArr, val)\n    }\n    newArr = insertionSort(newArr)\n    reverse(newArr)\n\
    \    result := []string{}\n    for _, val := range newArr {\n        for i :=\
    \ 0; i < dict[val]; i++ {\n            result = append(result, digitNames[val])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12i9wzjs_test.go:34:14: undefined: insertionSort

    /tmp/tmp12i9wzjs_test.go:35:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var output []string\n    // var length int = len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++\
    \ {\n            if arr[i] > arr[j] {\n                temp := arr[i]\n      \
    \          arr[i] = arr[j]\n                arr[j] = temp\n            }\n   \
    \     }\n    }\n    for i := len(arr) - 1; i >= 0; i-- {\n        switch arr[i]\
    \ {\n        case 1:\n            output = append(output, \"One\")\n        case\
    \ 2:\n            output = append(output, \"Two\")\n        case 3:\n        \
    \    output = append(output, \"Three\")\n        case 4:\n            output =\
    \ append(output, \"Four\")\n        case 5:\n            output = append(output,\
    \ \"Five\")\n        case 6:\n            output = append(output, \"Six\")\n \
    \       case 7:\n            output = append(output, \"Seven\")\n        case\
    \ 8:\n            output = append(output, \"Eight\")\n        case 9:\n      \
    \      output = append(output, \"Nine\")\n        }\n    }\n    return output\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var nums = make(map[int]string)\n\
    \    nums[1] = \"One\"\n    nums[2] = \"Two\"\n    nums[3] = \"Three\"\n    nums[4]\
    \ = \"Four\"\n    nums[5] = \"Five\"\n    nums[6] = \"Six\"\n    nums[7] = \"\
    Seven\"\n    nums[8] = \"Eight\"\n    nums[9] = \"Nine\"\n    for _, num := range\
    \ arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n  \
    \      res = append(res, nums[num])\n    }\n    for left, right := 0, len(res)\
    \ - 1; left < right; left, right = left + 1, right - 1 {\n        res[left], res[right]\
    \ = res[right], res[left]\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp9p7kb3m9_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp9p7kb3m9_test.go:61: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp9p7kb3m9_test.go:61: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // 1. map array to strings\n    // 2. filter out all\
    \ values that are between 1 and 9 inclusive\n    // 3. sort the result\n    //\
    \ 4. reverse the result\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp3vbbej8h_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp3vbbej8h_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp3vbbej8h_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp3vbbej8h_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var str_arr []string\n    for _,v := range arr {\n  \
    \      if v == 1 {\n            str_arr = append(str_arr, \"One\")\n        }\
    \ else if v == 2 {\n            str_arr = append(str_arr, \"Two\")\n        }\
    \ else if v == 3 {\n            str_arr = append(str_arr, \"Three\")\n       \
    \ } else if v == 4 {\n            str_arr = append(str_arr, \"Four\")\n      \
    \  } else if v == 5 {\n            str_arr = append(str_arr, \"Five\")\n     \
    \   } else if v == 6 {\n            str_arr = append(str_arr, \"Six\")\n     \
    \   } else if v == 7 {\n            str_arr = append(str_arr, \"Seven\")\n   \
    \     } else if v == 8 {\n            str_arr = append(str_arr, \"Eight\")\n \
    \       } else if v == 9 {\n            str_arr = append(str_arr, \"Nine\")\n\
    \        }\n    }\n    return str_arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp536gr3i6_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp536gr3i6_test.go:63: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp536gr3i6_test.go:63: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    if len(arr) == 0 {\n        return\
    \ res\n    }\n    length := len(arr)\n    for i := 0; i < length; i++ {\n    \
    \    // if arr[i] >= 1 && arr[i] <= 9 {\n        //     res = append(res, arr[i])\n\
    \        // }\n        switch arr[i] {\n        case 1:\n            res = append(res,\
    \ \"One\")\n        case 2:\n            res = append(res, \"Two\")\n        case\
    \ 3:\n            res = append(res, \"Three\")\n        case 4:\n            res\
    \ = append(res, \"Four\")\n        case 5:\n            res = append(res, \"Five\"\
    )\n        case 6:\n            res = append(res, \"Six\")\n        case 7:\n\
    \            res = append(res, \"Seven\")\n        case 8:\n            res =\
    \ append(res, \"Eight\")\n        case 9:\n            res = append(res, \"Nine\"\
    )\n        }\n    }\n    reverse(res)\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n0tdzhx_test.go:51:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tconst one, two, three, four, five, six, seven, eight, nine\
    \ string = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n\tvar r []string\n\n\tm := make(map[int]string)\n\tm[1]\
    \ = one\n\tm[2] = two\n\tm[3] = three\n\tm[4] = four\n\tm[5] = five\n\tm[6] =\
    \ six\n\tm[7] = seven\n\tm[8] = eight\n\tm[9] = nine\n\n\tfor _, i := range arr\
    \ {\n\t\tif i >= 1 && i <= 9 {\n\t\t\tr = append(r, m[i])\n\t\t}\n\t}\n\n\treverse(r)\n\
    \n\treturn r\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tdwos9k_test.go:41:2: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var lessThan10 []int\n    for\
    \ _, num := range arr {\n        if (num >= 1 && num <= 9) {\n            lessThan10\
    \ = append(lessThan10, num)\n        }\n    }\n    for i := len(lessThan10) -\
    \ 1; i >= 0; i-- {\n        result = append(result, intToWord(lessThan10[i]))\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpun5t7qwm_test.go:29:33: undefined: intToWord

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n\n    if len(arr) == 0 {\n     \
    \   return result\n    }\n\n    for _, v := range arr {\n        if v >= 1 &&\
    \ v <= 9 {\n            result = append(result, word_of(v))\n        }\n    }\n\
    \n    if len(result) == 0 {\n        return result\n    }\n\n    sort_result(result)\n\
    \    reverse_result(result)\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzfoouf3_test.go:29:37: undefined: word_of

    /tmp/tmpdzfoouf3_test.go:37:5: undefined: sort_result

    /tmp/tmpdzfoouf3_test.go:38:5: undefined: reverse_result

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort_arr := []int{}\n    for _, x := range arr {\n  \
    \      if x > 0 && x < 10 {\n            sort_arr = append(sort_arr, x)\n    \
    \    }\n    }\n    sort_arr = bubbleSort(sort_arr)\n    fmt.Println(sort_arr)\n\
    \    res := []string{}\n    for _, x := range sort_arr {\n        res = append(res,\
    \ num2string(x))\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi190ru8g_test.go:27:16: undefined: bubbleSort

    /tmp/tmpi190ru8g_test.go:31:27: undefined: num2string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sorted := sort(arr)\n    reversed := reverse(sorted)\n\
    \    filtered := filter(reversed)\n    return convert_to_string(filtered)\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kmrk20j_test.go:21:15: undefined: sort

    /tmp/tmp1kmrk20j_test.go:22:17: undefined: reverse

    /tmp/tmp1kmrk20j_test.go:23:17: undefined: filter

    /tmp/tmp1kmrk20j_test.go:24:12: undefined: convert_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tvar res []string\n\tfor _, v := range arr {\n\t\tif v >\
    \ 0 && v < 10 {\n\t\t\tres = append(res, digit2str(v))\n\t\t}\n\t}\n\tres = reverse(res)\n\
    \treturn res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6csu2lk4_test.go:24:22: undefined: digit2str

    /tmp/tmp6csu2lk4_test.go:27:8: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\t// TODO: Your code here\n    ans := []string{}\n    ans1\
    \ := []int{}\n    ans2 := []int{}\n    dict := map[int]string{\n        1: \"\
    One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n   \
    \     5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"\
    Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            ans1 = append(ans1, v)\n        }\n    }\n  \
    \  for i := len(ans1) - 1; i >= 0; i-- {\n        ans2 = append(ans2, ans1[i])\n\
    \    }\n    for _, v := range ans2 {\n        ans = append(ans, dict[v])\n   \
    \ }\n    return ans\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdn9z2el4_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpdn9z2el4_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdn9z2el4_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, value := range arr {\n\
    \        if 1 <= value && value <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", value))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpvyhkevwt_test.go:47: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpvyhkevwt_test.go:47: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpvyhkevwt_test.go:47: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpvyhkevwt_test.go:47: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    str := []string{}\n    for _, v := range arr {\n    \
    \    switch v {\n        case 1:\n            str = append(str, \"One\")\n   \
    \     case 2:\n            str = append(str, \"Two\")\n        case 3:\n     \
    \       str = append(str, \"Three\")\n        case 4:\n            str = append(str,\
    \ \"Four\")\n        case 5:\n            str = append(str, \"Five\")\n      \
    \  case 6:\n            str = append(str, \"Six\")\n        case 7:\n        \
    \    str = append(str, \"Seven\")\n        case 8:\n            str = append(str,\
    \ \"Eight\")\n        case 9:\n            str = append(str, \"Nine\")\n     \
    \   }\n    }\n    fmt.Println(str)\n    return str\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[Two One One Four Five Eight Two Three]\n[]\n[One]\n[One Three Two]\n[Nine\
    \ Four Eight]\n--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpke38pu4m_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpke38pu4m_test.go:65: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpke38pu4m_test.go:65: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpad0kfzv2_test.go:21:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    var ok bool\n\
    \    var str string\n    for _, num := range arr {\n        if num > 0 && num\
    \ < 10 {\n            if temp, ok = numberToString[num]; ok {\n              \
    \  str = \"\"\n                for _, num := range temp {\n                  \
    \  str += string(num)\n                }\n                result = append(result,\
    \ str)\n            }\n        }\n    }\n    return result\n}\n\nvar numberToString\
    \ = map[int][]int{\n    1: []int{'O', 'n', 'e'},\n    2: []int{'T', 'w', 'o'},\n\
    \    3: []int{'T', 'h', 'r', 'e', 'e'},\n    4: []int{'F', 'o', 'u', 'r'},\n \
    \   5: []int{'F', 'i', 'v', 'e'},\n    6: []int{'S', 'i', 'x'},\n    7: []int{'S',\
    \ 'e', 'v', 'e', 'n'},\n    8: []int{'E', 'i', 'g', 'h', 't'},\n    9: []int{'N',\
    \ 'i', 'n', 'e'},\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpid5cwjeh_test.go:30:28: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    nArr := make([]int, 0)\n    for _, n := range arr {\n\
    \        if n > 0 && n < 10 {\n            nArr = append(nArr, n)\n        }\n\
    \    }\n    mapArr := map[int]string{\n        1: \"One\",\n        2: \"Two\"\
    ,\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n       \
    \ 6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\
    ,\n    }\n    nArr = sort_arr(nArr)\n    nArr = reverse_arr(nArr)\n    sArr :=\
    \ make([]string, 0)\n    for _, n := range nArr {\n        sArr = append(sArr,\
    \ mapArr[n])\n    }\n    return sArr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi72rh90z_test.go:38:12: undefined: sort_arr

    /tmp/tmpi72rh90z_test.go:39:12: undefined: reverse_arr

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tif len(arr) == 0 {\n\t\treturn []string{}\n\t}\n\tvar new_arr\
    \ []int\n\tfor _, elem := range arr {\n\t\tif elem > 0 && elem < 10 {\n\t\t\t\
    new_arr = append(new_arr, elem)\n\t\t}\n\t}\n\tif len(new_arr) == 0 {\n\t\treturn\
    \ []string{}\n\t}\n\tsort.Ints(new_arr)\n\tvar res []string\n\tfor _, v := range\
    \ new_arr {\n\t\tswitch v {\n\t\tcase 1:\n\t\t\tres = append(res, \"One\")\n\t\
    \tcase 2:\n\t\t\tres = append(res, \"Two\")\n\t\tcase 3:\n\t\t\tres = append(res,\
    \ \"Three\")\n\t\tcase 4:\n\t\t\tres = append(res, \"Four\")\n\t\tcase 5:\n\t\t\
    \tres = append(res, \"Five\")\n\t\tcase 6:\n\t\t\tres = append(res, \"Six\")\n\
    \t\tcase 7:\n\t\t\tres = append(res, \"Seven\")\n\t\tcase 8:\n\t\t\tres = append(res,\
    \ \"Eight\")\n\t\tcase 9:\n\t\t\tres = append(res, \"Nine\")\n\t\t}\n\t}\n\tfor\
    \ i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n\t\tres[i], res[j] = res[j],\
    \ res[i]\n\t}\n\treturn res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6vysn7l_test.go:33:2: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var filterArr []int\n    var filterArrString []string\n\
    \    for _, value := range arr {\n        if value > 0 && value < 10 {\n     \
    \       filterArr = append(filterArr, value)\n        }\n    }\n    for i := len(filterArr)-1;\
    \ i >= 0; i-- {\n        switch filterArr[i] {\n        case 1:\n            filterArrString\
    \ = append(filterArrString, \"One\")\n        case 2:\n            filterArrString\
    \ = append(filterArrString, \"Two\")\n        case 3:\n            filterArrString\
    \ = append(filterArrString, \"Three\")\n        case 4:\n            filterArrString\
    \ = append(filterArrString, \"Four\")\n        case 5:\n            filterArrString\
    \ = append(filterArrString, \"Five\")\n        case 6:\n            filterArrString\
    \ = append(filterArrString, \"Six\")\n        case 7:\n            filterArrString\
    \ = append(filterArrString, \"Seven\")\n        case 8:\n            filterArrString\
    \ = append(filterArrString, \"Eight\")\n        case 9:\n            filterArrString\
    \ = append(filterArrString, \"Nine\")\n        }\n    }\n    return filterArrString\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpn5vrj5yf_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpn5vrj5yf_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpn5vrj5yf_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsoa36rao_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsoa36rao_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsoa36rao_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    dic := map[int]string{\n        1: \"One\",\n       \
    \ 2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\"\
    ,\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n       \
    \ 9: \"Nine\",\n    }\n    out := []string{}\n    for _, i := range arr {\n  \
    \      if _, ok := dic[i]; ok {\n            out = append(out, dic[i])\n     \
    \   }\n    }\n    return out\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpqha9lb7l_test.go:58: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpqha9lb7l_test.go:58: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpqha9lb7l_test.go:58: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    for _, v := range arr {\n    \
    \    if v >= 1 && v <= 9 {\n            switch v {\n            case 1:\n    \
    \            res = append(res, \"One\")\n            case 2:\n               \
    \ res = append(res, \"Two\")\n            case 3:\n                res = append(res,\
    \ \"Three\")\n            case 4:\n                res = append(res, \"Four\"\
    )\n            case 5:\n                res = append(res, \"Five\")\n        \
    \    case 6:\n                res = append(res, \"Six\")\n            case 7:\n\
    \                res = append(res, \"Seven\")\n            case 8:\n         \
    \       res = append(res, \"Eight\")\n            case 9:\n                res\
    \ = append(res, \"Nine\")\n            }\n        }\n    }\n    for i, j := 0,\
    \ len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n\
    \    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpq5q0is0r_test.go:69: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpq5q0is0r_test.go:69: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpq5q0is0r_test.go:69: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmprbnz0ebe_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmprbnz0ebe_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmprbnz0ebe_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprbnz0ebe_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    var (\n        ret []string\n\
    \        m = map[int]string{\n            1: \"One\",\n            2: \"Two\"\
    ,\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\"\
    ,\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\"\
    ,\n            9: \"Nine\",\n        }\n    )\n    for _, v := range arr {\n \
    \       if (v > 0 && v < 10) {\n            ret = append(ret, m[v])\n        }\n\
    \    }\n    fmt.Println(ret)\n    for i, j := 0, len(ret) - 1; i < j; i, j = i\
    \ + 1, j - 1 {\n        ret[i], ret[j] = ret[j], ret[i]\n    }\n    return ret\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[Two One One Four Five Eight Two Three]\n[]\n[One]\n[One Three Two]\n[Nine\
    \ Four Eight]\n--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp0ca9k8tg_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp0ca9k8tg_test.go:65: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp0ca9k8tg_test.go:65: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n\tvar result []string\n\tif len(arr) == 0 {\n\t\treturn result\n\
    \t}\n\tvar strs = map[int]string{\n\t\t1: \"One\",\n\t\t2: \"Two\",\n\t\t3: \"\
    Three\",\n\t\t4: \"Four\",\n\t\t5: \"Five\",\n\t\t6: \"Six\",\n\t\t7: \"Seven\"\
    ,\n\t\t8: \"Eight\",\n\t\t9: \"Nine\",\n\t}\n\tfor _, val := range arr {\n\t\t\
    if val >= 1 && val <= 9 {\n\t\t\tresult = append(result, strs[val])\n\t\t}\n\t\
    }\n\treturn result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpttpv1cm6_test.go:61: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpttpv1cm6_test.go:61: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpttpv1cm6_test.go:61: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    for i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n\
    \        arr[i], arr[j] = arr[j], arr[i]\n    }\n    res := []string{}\n    for\
    \ _, x := range arr {\n        if x >= 1 && x <= 9 {\n            res = append(res,\
    \ getString(x))\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3mx7j8r2_test.go:24:5: undefined: sort

    /tmp/tmp3mx7j8r2_test.go:31:31: undefined: getString

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcy5wjmki_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpcy5wjmki_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpcy5wjmki_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpcy5wjmki_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpmiq6q1xx_test.go:41: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpmiq6q1xx_test.go:41: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpmiq6q1xx_test.go:41:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075135
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    nums := make([]int, 0)\n    //filter\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    if len(nums) == 0 {\n        return []string{}\n \
    \   }\n    //sort\n    for i:=0; i<len(nums)-1; i++ {\n        for j:=i+1; j<len(nums);\
    \ j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j]\
    \ = nums[j], nums[i]\n            }\n        }\n    }\n    //reverse\n    for\
    \ i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {\n        nums[i], nums[j] =\
    \ nums[j], nums[i]\n    }\n    //convert to string\n    rst := make([]string,\
    \ len(nums))\n    for i, v := range nums {\n        rst[i] = convert(v)\n    }\n\
    \    return rst\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5o33fyn_test.go:46:18: undefined: convert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmprjbfumb3_test.go:42: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmprjbfumb3_test.go:42: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmprjbfumb3_test.go:42: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprjbfumb3_test.go:42:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var slice []string\n    // loop through slice looking\
    \ for values and build new slice with appends\n    for _, v := range arr {\n \
    \       switch v {\n        case 1:\n            slice = append(slice, \"One\"\
    )\n        case 2:\n            slice = append(slice, \"Two\")\n        case 3:\n\
    \            slice = append(slice, \"Three\")\n        case 4:\n            slice\
    \ = append(slice, \"Four\")\n        case 5:\n            slice = append(slice,\
    \ \"Five\")\n        case 6:\n            slice = append(slice, \"Six\")\n   \
    \     case 7:\n            slice = append(slice, \"Seven\")\n        case 8:\n\
    \            slice = append(slice, \"Eight\")\n        case 9:\n            slice\
    \ = append(slice, \"Nine\")\n        }\n    }\n    return slice\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6_n4iqvt_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp6_n4iqvt_test.go:65: expected\
    \ '[Three Two One]', got '[One Three Two]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp6_n4iqvt_test.go:65: expected '[Nine Eight Four]', got '[Nine\
    \ Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    res := []string{}\n    tmp := []int{}\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n\
    \        }\n    }\n    fmt.Println(tmp)\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2 1 1 4 5 8 2 3]\n[]\n[1]\n[1 3 2]\n[9 4 8]\n--- FAIL: TestBy_Length (0.00s)\n\
    \    --- FAIL: TestBy_Length/test_num__0 (0.00s)\n        tmp2f8vp404_test.go:49:\
    \ expected '[Eight Five Four Three Two Two One One]', got '[]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmp2f8vp404_test.go:49: expected\
    \ '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n       \
    \ tmp2f8vp404_test.go:49: expected '[Three Two One]', got '[]'\n    --- FAIL:\
    \ TestBy_Length/test_num__4 (0.00s)\n        tmp2f8vp404_test.go:49: expected\
    \ '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var tmp []int\n    for _, v :=\
    \ range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp, v)\n\
    \        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i]\
    \ {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4ee5ka6t_test.go:70: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp4ee5ka6t_test.go:70: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp4ee5ka6t_test.go:70: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting list, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>>\
    \ by_length([]string{})\n// PATCH list\n// If the list has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    var temp = make([]int, len(arr))\n    var counter int\n\
    \    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n          \
    \  temp[counter] = num\n            counter++\n        }\n    }\n    temp = temp[:counter]\n\
    \    quicksort(temp, 0, len(temp) - 1)\n    reversed(temp)\n    return convert(temp)\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1jsgmjp_test.go:30:5: undefined: quicksort

    /tmp/tmpa1jsgmjp_test.go:31:5: undefined: reversed

    /tmp/tmpa1jsgmjp_test.go:32:12: undefined: convert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
