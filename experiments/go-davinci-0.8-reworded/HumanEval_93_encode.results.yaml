language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    alphabet := []string{\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    encoded := \"\"\n    for\
    \ _,r := range message {\n        ch := string(r)\n        if stringInSlice(ch,\
    \ vowels) {\n            encoded += swapCase(alphabet[(indexOf(alphabet, ch) +\
    \ 2) % len(alphabet)])\n        } else {\n            encoded += swapCase(ch)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4d4hisvk_test.go:24:12: undefined: stringInSlice

    /tmp/tmp4d4hisvk_test.go:25:24: undefined: swapCase

    /tmp/tmp4d4hisvk_test.go:25:43: undefined: indexOf

    /tmp/tmp4d4hisvk_test.go:27:24: undefined: swapCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073303
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\t\n\tvar newMessage string\n\t\n\tfor i := 0; i < len(message);\
    \ i++ {\n\t\t\n\t\tif message[i] >= 'a' && message[i] <= 'z' {\n\t\t\tnewMessage\
    \ += string(message[i] - 32)\n\t\t} else if message[i] >= 'A' && message[i] <=\
    \ 'Z' {\n\t\t\tnewMessage += string(message[i] + 32)\n\t\t} else {\n\t\t\tnewMessage\
    \ += string(message[i])\n\t\t}\n\t}\n\t\n\t\n\tnewMessage = newMessage[3:] + newMessage[:3]\n\
    \t\n\t\n\t\n\t\n\treturn newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbptoi2hw_test.go:59: expected 'tgst', got 'ttes'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbptoi2hw_test.go:59: expected 'mWDCSKR', got 'ASIRmUD'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbptoi2hw_test.go:59:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbptoi2hw_test.go:59: expected 'tHKS KS C MGSSCGG', got 'S IS A MESSAGEtHI'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbptoi2hw_test.go:59:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'OnT kNoW wHaT To wRiTei d'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073303
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // message = \"This is a message\"\n    var result string\n\
    \n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n       \
    \     result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n   \
    \         result += string(c + 32)\n        } else {\n            result += string(c)\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpiabf4g2l_test.go:52: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpiabf4g2l_test.go:52: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpiabf4g2l_test.go:52:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpiabf4g2l_test.go:52: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpiabf4g2l_test.go:52:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073303
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp28p1v03_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp28p1v03_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp28p1v03_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpp28p1v03_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpp28p1v03_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    var count, index int\n    var letter\
    \ rune\n    var vowels []rune = []rune(\"aeiou\")\n    var encode rune\n\n   \
    \ for _, letter = range message {\n        // toggle case\n        if letter >\
    \ 64 && letter < 91 {\n            letter += 32\n        } else if letter > 96\
    \ && letter < 123 {\n            letter -= 32\n        }\n\n        // replace\
    \ vowel with with the letter that appears 2 places ahead of that vowel in the\
    \ english alphabet\n        if letter == rune('a') || letter == rune('e') || letter\
    \ == rune('i') || letter == rune('o') || letter == rune('u') {\n            for\
    \ index, encode = range vowels {\n                if letter == encode {\n    \
    \                if index == 4 {\n                        letter = vowels[0]\n\
    \                    } else {\n                        letter = vowels[index +\
    \ 2]\n                    }\n                    break\n                }\n  \
    \          }\n        }\n\n        result += string(letter)\n    }\n\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsltub3ap_test.go:20:9: count declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073303
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    new_message := \"\"\n    map_of_vowels := map[string]string{\"\
    a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"o\": \"q\", \"u\": \"w\"}\n    for _,\
    \ char := range message {\n        upper := false\n        if char >= 'A' && char\
    \ <= 'Z' {\n            upper = true\n        }\n        if char >= 'a' && char\
    \ <= 'z' {\n            if v, ok := map_of_vowels[string(char)]; ok {\n      \
    \          char = rune(v[0])\n            } else {\n                char += 2\n\
    \            }\n        }\n        if upper {\n            char -= 32\n      \
    \  }\n        new_message += string(char)\n    }\n    return new_message\n}\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpf226m2yt_test.go:58: expected 'tgst', got '4%34'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpf226m2yt_test.go:58: expected 'mWDCSKR', got '-wfcukt'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpf226m2yt_test.go:58:\
    \ expected 'ygs', got '9%3'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpf226m2yt_test.go:58: expected 'tHKS KS C MGSSCGG', got '4jku ku c oguucig'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpf226m2yt_test.go:58:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got ') $q.v +p/y 7j!v v/ 7t)v%'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073303
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var (\n        encoded []byte\n        next, next2 byte\n\
    \    )\n    for i, s := range message {\n        next = 0\n        next2 = 0\n\
    \        // Move to next if blank\n        if s == ' ' {\n            encoded\
    \ = append(encoded, ' ')\n            continue\n        }\n        // first find\
    \ next and next2 letter\n        if i < len(message) - 1 {\n            next =\
    \ message[i+1]\n        }\n        if i < len(message) - 2 {\n            next2\
    \ = message[i+2]\n        }\n        // if vowel: replace it by next two letters\n\
    \        if s == 'a' || s == 'e' || s == 'i' || s == 'o' || s == 'u' {\n     \
    \       encoded = append(encoded, next, next2)\n            continue\n       \
    \ }\n        // if it's an uppercase letter, move it two step down\n        if\
    \ s >= 'A' && s <= 'Z' {\n            if s < 'Y' {\n                encoded =\
    \ append(encoded, s + 2)\n            } else {\n                encoded = append(encoded,\
    \ s - 24)\n            }\n            continue\n        }\n        // if it's\
    \ an lowercase letter, move it two step up\n        if s >= 'a' && s <= 'z' {\n\
    \            if s < 'y' {\n                encoded = append(encoded, s + 2)\n\
    \            } else {\n                encoded = append(encoded, s - 24)\n   \
    \         }\n            continue\n        }\n    }\n    return string(encoded)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqq4c6d3_test.go:46:43: cannot use s + 2 (value of type rune) as type
    byte in argument to append

    /tmp/tmpbqq4c6d3_test.go:48:43: cannot use s - 24 (value of type rune) as type
    byte in argument to append

    /tmp/tmpbqq4c6d3_test.go:55:43: cannot use s + 2 (value of type rune) as type
    byte in argument to append

    /tmp/tmpbqq4c6d3_test.go:57:43: cannot use s - 24 (value of type rune) as type
    byte in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073303
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result []byte\n    var shift byte = 2\n    var caseShift\
    \ byte = 32\n    var vowel byte = 'a'\n    var current byte\n\n    for i := 0;\
    \ i < len(message); i++ {\n        current = message[i]\n        switch current\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            result = append(result,\
    \ current + (shift - vowel))\n        case 'A', 'E', 'I', 'O', 'U':\n        \
    \    result = append(result, current + (shift - vowel - caseShift))\n        default:\n\
    \            result = append(result, current ^ caseShift)\n        }\n    }\n\n\
    \    return string(result)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp_istsnkd_test.go:57: expected 'tgst', got 'tst'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp_istsnkd_test.go:57: expected 'mWDCSKR', got 'm\x16D\x02\
    S\n            R'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp_istsnkd_test.go:57:\
    \ expected 'ygs', got 'ys'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n   \
    \     tmp_istsnkd_test.go:57: expected 'tHKS KS C MGSSCGG', got 'tH\n        \
    \    S\0\n            S\0\x02\0M\x06SS\x02G\x06'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp_istsnkd_test.go:57: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got '\0d\x10nT\0kNW\0wHT\0T\0wRT'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\treturn \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4d68qevd_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4d68qevd_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4d68qevd_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    newStr := \"\"\n    message = strings.ToLower(message)\n\
    \    for _, char := range message {\n        if (char >= 'a' && char <= 'z') {\n\
    \            if (char >= 'a' && char <= 'c') ||\n               (char >= 'x' &&\
    \ char <= 'z') {\n                   newStr += string(char + 23)\n           \
    \ } else {\n                newStr += string(char + 3)\n            }\n      \
    \  } else {\n            newStr += string(char)\n        }\n    }\n    return\
    \ newStr\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpm2f5eo_test.go:20:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    out := \"\"\n    vowels := map[rune]rune{'a':'c', 'e':'g',\
    \ 'i':'k', 'o':'q', 'u':'y'}\n    for _, v := range message {\n        if lower\
    \ := toLower(v); lower >= 'a' && lower <= 'z' {\n            if vowel, ok := vowels[lower];\
    \ ok {\n                out += string(vowel)\n            } else {\n         \
    \       out += string(toUpper(lower))\n            }\n        } else {\n     \
    \       out += string(v)\n        }\n    }\n    return out\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkn4cjzy9_test.go:22:21: undefined: toLower

    /tmp/tmpkn4cjzy9_test.go:26:31: undefined: toUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result []rune\n    var vowels = []rune{'a', 'e', 'i',\
    \ 'o', 'u'}\n    for _, letter := range message {\n        var toEncode = false\n\
    \        for _, vowel := range vowels {\n            if letter == vowel {\n  \
    \              toEncode = true\n                break\n            }\n       \
    \ }\n        if toEncode {\n            result = append(result, int(letter) +\
    \ 2)\n        } else {\n            result = append(result, int(letter))\n   \
    \     }\n    }\n    return string(result)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph26ol5do_test.go:30:37: cannot use int(letter) + 2 (value of type int)
    as type rune in argument to append

    /tmp/tmph26ol5do_test.go:32:37: cannot use int(letter) (value of type int) as
    type rune in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    l := len(message)\n    out := make([]byte, l)\n    for\
    \ i := 0; i < l; i++ {\n        c := message[i]\n        if c >= 'a' && c <= 'z'\
    \ {\n            c -= 32\n        } else if c >= 'A' && c <= 'Z' {\n         \
    \   c += 32\n        }\n        c += 2\n        if c == ('v' + 2) {\n        \
    \    c = 'A'\n        } else if c == ('V' + 2) {\n            c = 'a'\n      \
    \  }\n        out[i] = c\n    }\n    return string(out)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8ilqjh49_test.go:56: expected 'tgst', got 'vguv'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8ilqjh49_test.go:56: expected 'mWDCSKR', got 'oWFCUKT'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8ilqjh49_test.go:56:\
    \ expected 'ygs', got '{gu'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8ilqjh49_test.go:56: expected 'tHKS KS C MGSSCGG', got 'vJKU\"KU\"C\"\
    OGUUCIG'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8ilqjh49_test.go:56:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'k\"fQpV\"mPqY\"yJcV\"Vq\"yTkVg'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    const\
    \ encVowel = \"uwxyznopqrstghijklmacefdb\"\n\n    result := \"\"\n    for _, c\
    \ := range message {\n        if c >= 'a' && c <= 'z' {\n            result +=\
    \ string(alpha[25 - int(c - 'a')])\n        } else if c >= 'A' && c <= 'Z' {\n\
    \            result += string(alpha[25 - int(c - 'A')])\n        } else {\n  \
    \          result += string(c)\n        }\n    }\n\n    for i, c := range result\
    \ {\n        if c >= 'a' && c <= 'z' {\n            for _, v := range \"aeiou\"\
    \ {\n                if c == v {\n                    result = result[:i] + string(encVowel[v\
    \ - 'a']) + result[i+1:]\n                    break\n                }\n     \
    \       }\n        } else if c >= 'A' && c <= 'Z' {\n            for _, v := range\
    \ \"AEIOU\" {\n                if c == v {\n                    result = result[:i]\
    \ + string(encVowel[v - 'A']) + result[i+1:]\n                    break\n    \
    \            }\n            }\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3rvpfzna_test.go:71: expected 'tgst', got 'gvhg'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3rvpfzna_test.go:71: expected 'mWDCSKR', got 'nfwzhrq'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3rvpfzna_test.go:71:\
    \ expected 'ygs', got 'bvh'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3rvpfzna_test.go:71: expected 'tHKS KS C MGSSCGG', got 'gsrh rh z nvhhztv'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3rvpfzna_test.go:71:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'r wlmg pmld dszg gl dqrgv'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output string\n    for _, l := range message {\n \
    \       // l - 97 is the 0-25 index of that letter\n        // adding 13 gets\
    \ you to the new letter\n        // getting the remainder with modulus 26 wraps\
    \ the\n        // letter around back to the beginning of the alphabet\n      \
    \  // then adding 97 gets you the actual letter\n        // this is a great way\
    \ to avoid using an arbitrary number\n        // of if-else statements to increment\
    \ the count\n        // if we used a switch statement instead we could use\n \
    \       // it to check for capital letters and lowercase letters\n        // and\
    \ convert them to the other case, but that would\n        // also require a bunch\
    \ of if-else statements\n        nl := int(l)\n        if nl >= 65 && nl <= 90\
    \ {\n            nl += 32\n        } else if nl >= 97 && nl <= 122 {\n       \
    \     nl -= 32\n        }\n        output += string(nl)\n    }\n    return output\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpwxw2ats2_test.go:38:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            output += string(char-32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            output += string(char+32)\n\
    \        } else {\n            output += string(char)\n        }\n    }\n    fmt.Println(output)\n\
    \    return output\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "test\nmUDASIR\nyes\ntHIS IS A MESSAGE\ni dOnT kNoW wHaT To wRiTe\n--- FAIL:\
    \ TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpuusi1gak_test.go:50:\
    \ expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmpuusi1gak_test.go:50: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__2 (0.00s)\n        tmpuusi1gak_test.go:50: expected 'ygs',\
    \ got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpuusi1gak_test.go:50:\
    \ expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpuusi1gak_test.go:50: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    r := []rune(message)\n    map_vowels := map[rune]rune{\n\
    \        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n\
    \        'u': 'w',\n    }\n    for i, c := range r {\n        if c >= 'a' && c\
    \ <= 'z' {\n            r[i] = c - 'a' + 'A'\n        } else if c >= 'A' && c\
    \ <= 'Z' {\n            r[i] = c - 'A' + 'a'\n        } else if _, ok := map_vowels[c];\
    \ ok {\n            r[i] = map_vowels[c]\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8jkqjuqu_test.go:56: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8jkqjuqu_test.go:56: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8jkqjuqu_test.go:56:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8jkqjuqu_test.go:56: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8jkqjuqu_test.go:56:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    messageRunes := []rune(message)\n    result := make([]rune,\
    \ len(messageRunes))\n    for i, r := range messageRunes {\n        if r >= 'a'\
    \ && r <= 'z' {\n            result[i] = r - 'a' + 'A'\n        } else if r >=\
    \ 'A' && r <= 'Z' {\n            result[i] = r - 'A' + 'a'\n        } else {\n\
    \            result[i] = r\n        }\n    }\n    fmt.Println(string(result))\n\
    \    return string(result)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "test\nmUDASIR\nyes\ntHIS IS A MESSAGE\ni dOnT kNoW wHaT To wRiTe\n--- FAIL:\
    \ TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmp4ns7slt3_test.go:51:\
    \ expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmp4ns7slt3_test.go:51: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__2 (0.00s)\n        tmp4ns7slt3_test.go:51: expected 'ygs',\
    \ got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4ns7slt3_test.go:51:\
    \ expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp4ns7slt3_test.go:51: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    newMessage := \"\"\n    for _, char := range message {\n\
    \        if char > 64 && char < 91 {\n            newMessage += string(char +\
    \ 32)\n        } else if char > 96 && char < 123 {\n            newMessage +=\
    \ string(char - 32)\n        } else {\n            newMessage += string(char)\n\
    \        }\n    }\n    return newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpiq9mc5x9_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpiq9mc5x9_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpiq9mc5x9_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpiq9mc5x9_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpiq9mc5x9_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\tvar char, encoded string\n\tvar pos int\n\t// Loop through\
    \ each character in the message\n\tfor _, char = range message {\n\t\t// Get the\
    \ position of the character\n\t\tpos = int(char)\n\t\t// Check if the character\
    \ is an uppercase letter\n\t\tif pos >= 65 && pos <= 90 {\n\t\t\t// Convert to\
    \ lowercase\n\t\t\tpos += 32\n\t\t}\n\t\t// Check if the character is a lowercase\
    \ letter\n\t\tif pos >= 97 && pos <= 122 {\n\t\t\t// Replace vowels with the letter\
    \ that appears 2 places ahead of that vowel in the english alphabet\n\t\t\tswitch\
    \ pos {\n\t\t\tcase 97:\n\t\t\t\tpos = 100\n\t\t\tcase 101:\n\t\t\t\tpos = 104\n\
    \t\t\tcase 105:\n\t\t\t\tpos = 108\n\t\t\tcase 111:\n\t\t\t\tpos = 116\n\t\t\t\
    case 117:\n\t\t\t\tpos = 98\n\t\t\t}\n\t\t}\n\t\t// Append the encoded character\
    \ to the result\n\t\tencoded += string(pos)\n\t}\n\treturn encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg93gabyo_test.go:22:9: cannot use char (value of type rune) as type string
    in assignment

    /tmp/tmpg93gabyo_test.go:24:13: cannot convert char (variable of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n\n    for _, c := range message {\n\
    \        switch c {\n        case 'a':\n            encoded += \"c\"\n       \
    \ case 'e':\n            encoded += \"g\"\n        case 'i':\n            encoded\
    \ += \"k\"\n        case 'o':\n            encoded += \"q\"\n        case 'u':\n\
    \            encoded += \"y\"\n        case 'A':\n            encoded += \"C\"\
    \n        case 'E':\n            encoded += \"G\"\n        case 'I':\n       \
    \     encoded += \"K\"\n        case 'O':\n            encoded += \"Q\"\n    \
    \    case 'U':\n            encoded += \"Y\"\n        default:\n            encoded\
    \ += string(c)\n        }\n    }\n\n    return encoded\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp2zctsyw7_test.go:68: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp2zctsyw7_test.go:68: expected 'mWDCSKR', got 'Mydcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp2zctsyw7_test.go:68:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp2zctsyw7_test.go:68: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp2zctsyw7_test.go:68:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Build a new string\n    result := \"\"\n    for _,\
    \ c := range message {\n        // Ignore all non-letters\n        if c >= 'a'\
    \ && c <= 'z' {\n            // Convert to uppercase\n            result += string(c\
    \ - 'a' + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n            // Convert\
    \ to lowercase\n            result += string(c - 'A' + 'a')\n        } else {\n\
    \            // Leave as is\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpzzfd7vz2_test.go:54: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpzzfd7vz2_test.go:54: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzzfd7vz2_test.go:54:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpzzfd7vz2_test.go:54: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzzfd7vz2_test.go:54:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, c := range message {\n   \
    \     if c == ' ' {\n            encoded += \" \"\n            continue\n    \
    \    }\n        if c >= 'a' && c <= 'z' {\n            encoded += string(c - 'a'\
    \ + 'A')\n        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c\
    \ - 'A' + 'a')\n        } else {\n            encoded += string(c)\n        }\n\
    \    }\n    for _, c := range encoded {\n        if c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U' {\n            encoded = encoded[:c - 'A'] +\
    \ \"C\" + encoded[c - 'A' + 1:]\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [:20] with length 7 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:20] with length 7\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000156000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encode({0x51e968, 0x7})\n\t/tmp/tmpb2k8oeqg_test.go:35\
    \ +0x26d\ncommand-line-arguments_test.TestEncode(0x0?)\n\t/tmp/tmpb2k8oeqg_test.go:49\
    \ +0x76\ntesting.tRunner(0xc0001191e0, 0x528fb0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var newMessage []byte\n    for _, letter := range message\
    \ {\n        if (letter >= 'a' && letter <= 'z') || (letter >= 'A' && letter <=\
    \ 'Z') {\n            newMessage = append(newMessage, convert(letter))\n     \
    \   } else {\n            newMessage = append(newMessage, byte(letter))\n    \
    \    }\n    }\n    return string(newMessage)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5dweg3br_test.go:22:45: undefined: convert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    r := []rune(message)\n    for i, _ := range r {\n    \
    \    if r[i] >= 'a' && r[i] <= 'z' {\n            r[i] = r[i] - 32\n        }\
    \ else if r[i] >= 'A' && r[i] <= 'Z' {\n            r[i] = r[i] + 32\n       \
    \ } else if r[i] == 'a' || r[i] == 'e' || r[i] == 'i' || r[i] == 'o' || r[i] ==\
    \ 'u' {\n            r[i] = r[i] + 2\n        }\n    }\n    return string(r)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpc6q8zkwx_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpc6q8zkwx_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpc6q8zkwx_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpc6q8zkwx_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpc6q8zkwx_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var out string\n    for _, c := range message {\n    \
    \    switch c {\n        case 'a':\n            out += \"c\"\n        case 'e':\n\
    \            out += \"g\"\n        case 'i':\n            out += \"k\"\n     \
    \   case 'o':\n            out += \"q\"\n        case 'u':\n            out +=\
    \ \"y\"\n        case 'A':\n            out += \"C\"\n        case 'E':\n    \
    \        out += \"G\"\n        case 'I':\n            out += \"K\"\n        case\
    \ 'O':\n            out += \"Q\"\n        case 'U':\n            out += \"Y\"\n\
    \        default:\n            out += string(c)\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpq7hm6mcv_test.go:66: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpq7hm6mcv_test.go:66: expected 'mWDCSKR', got 'Mydcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpq7hm6mcv_test.go:66:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpq7hm6mcv_test.go:66: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpq7hm6mcv_test.go:66:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message = convertToUpper(message)\n    ret := \"\"\n \
    \   for _, c := range message {\n        if isVowel(c) {\n            ret += string(getNextVowel(c))\n\
    \        } else {\n            ret += string(c)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wqrt4n__test.go:19:15: undefined: convertToUpper

    /tmp/tmp7wqrt4n__test.go:22:12: undefined: isVowel

    /tmp/tmp7wqrt4n__test.go:23:27: undefined: getNextVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075643
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    newStr := \"\"\n    for _, c := range message {\n    \
    \    if c >= 65 && c <= 90 {\n            newStr += string(c + 32)\n        }\
    \ else if c >= 97 && c <= 122 {\n            newStr += string(c - 32)\n      \
    \  } else {\n            newStr += string(c)\n        }\n    }\n    return newStr\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmply58cnc4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmply58cnc4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmply58cnc4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmply58cnc4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmply58cnc4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n\n    for _, char := range message\
    \ {\n        if char >= 'a' && char <= 'z' {\n            result += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result +=\
    \ string(char + 32)\n        } else {\n            result += string(char)\n  \
    \      }\n    }\n\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8kyz5909_test.go:51: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8kyz5909_test.go:51: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8kyz5909_test.go:51:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8kyz5909_test.go:51: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8kyz5909_test.go:51:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var res string\n    for _, c := range message {\n    \
    \    // since the message is ASCII, so we can just add or subtract 32\n      \
    \  // to convert it.\n\n        // in golang, it is also possible to convert char\
    \ to ASCII number\n        // and then back to char.\n        // if we use Add,\
    \ we need to make sure that the result is not out of bound.\n        // so, we\
    \ can use Add with the last case.\n        //\n        // a := 'a'\n        //\
    \ res := rune(a + 1)\n        // fmt.Println(res) // b\n        //\n        //\
    \ c := 'z'\n        // res := rune(c + 1)\n        // fmt.Println(res) // {\n\
    \        if c > 'Z' {\n            res += string(c - 32)\n        } else {\n \
    \           res += string(c + 32)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp_68fxq5_test.go:62: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp_68fxq5_test.go:62: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp_68fxq5_test.go:62:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpp_68fxq5_test.go:62: expected 'tHKS KS C MGSSCGG', got 'tHIS@IS@A@MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpp_68fxq5_test.go:62:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i@dOnT@kNoW@wHaT@To@wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"Not Implemented\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmplkdmstvy_test.go:39: expected 'tgst', got 'Not Implemented'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmplkdmstvy_test.go:39: expected\
    \ 'mWDCSKR', got 'Not Implemented'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n\
    \        tmplkdmstvy_test.go:39: expected 'ygs', got 'Not Implemented'\n    ---\
    \ FAIL: TestEncode/test_num__3 (0.00s)\n        tmplkdmstvy_test.go:39: expected\
    \ 'tHKS KS C MGSSCGG', got 'Not Implemented'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmplkdmstvy_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'Not Implemented'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    enc := \"\"\n    for _, c := range message {\n       \
    \ switch c {\n        case 'A', 'a':\n            enc += \"C\"\n        case 'E',\
    \ 'e':\n            enc += \"G\"\n        case 'I', 'i':\n            enc += \"\
    K\"\n        case 'O', 'o':\n            enc += \"M\"\n        case 'U', 'u':\n\
    \            enc += \"Q\"\n        case 'B', 'b':\n            enc += \"D\"\n\
    \        case 'C', 'c':\n            enc += \"E\"\n        case 'D', 'd':\n  \
    \          enc += \"F\"\n        case 'F', 'f':\n            enc += \"H\"\n  \
    \      case 'G', 'g':\n            enc += \"I\"\n        case 'H', 'h':\n    \
    \        enc += \"J\"\n        case 'J', 'j':\n            enc += \"L\"\n    \
    \    case 'K', 'k':\n            enc += \"M\"\n        case 'L', 'l':\n      \
    \      enc += \"N\"\n        case 'M', 'm':\n            enc += \"O\"\n      \
    \  case 'N', 'n':\n            enc += \"P\"\n        case 'P', 'p':\n        \
    \    enc += \"R\"\n        case 'Q', 'q':\n            enc += \"S\"\n        case\
    \ 'R', 'r':\n            enc += \"T\"\n        case 'S', 's':\n            enc\
    \ += \"U\"\n        case 'T', 't':\n            enc += \"V\"\n        case 'V',\
    \ 'v':\n            enc += \"X\"\n        case 'W', 'w':\n            enc += \"\
    Y\"\n        case 'X', 'x':\n            enc += \"Z\"\n        case 'Y', 'y':\n\
    \            enc += \"A\"\n        case 'Z', 'z':\n            enc += \"B\"\n\
    \        default:\n            enc += string(c)\n        }\n    }\n    return\
    \ enc\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpejs65m2b_test.go:98: expected 'tgst', got 'VGUV'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpejs65m2b_test.go:98: expected 'mWDCSKR', got 'OQFCUKT'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpejs65m2b_test.go:98:\
    \ expected 'ygs', got 'AGU'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpejs65m2b_test.go:98: expected 'tHKS KS C MGSSCGG', got 'VJKU KU C OGUUCIG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpejs65m2b_test.go:98:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K FMPV MPMY YJCV VM YTKVG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    var offset int\n    vowels :=\
    \ map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for\
    \ _, r := range message {\n        lowerCase := (r >= 'a' && r <= 'z')\n     \
    \   upperCase := (r >= 'A' && r <= 'Z')\n        if lowerCase || upperCase {\n\
    \            offset = 2\n            if vowels[rune(r|32)] {\n               \
    \ offset = 4\n            }\n            if lowerCase {\n                r +=\
    \ rune(offset)\n                if r > 'z' {\n                    r -= 26\n  \
    \              }\n            } else {\n                r += rune(offset)\n  \
    \              if r > 'Z' {\n                    r -= 26\n                }\n\
    \            }\n        }\n        encoded += string(r)\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpcjibh346_test.go:64: expected 'tgst', got 'VIUV'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpcjibh346_test.go:64: expected 'mWDCSKR', got 'Oyfeumt'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpcjibh346_test.go:64:\
    \ expected 'ygs', got 'AIU'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpcjibh346_test.go:64: expected 'tHKS KS C MGSSCGG', got 'Vjmu mu e oiuueii'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpcjibh346_test.go:64:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'M FsPv MpSy YjEv vS YtMvI'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // !!! add your code here\n    return \"\"\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp41q8ndgh_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp41q8ndgh_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp41q8ndgh_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp41q8ndgh_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp41q8ndgh_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075647
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    const letter_count = 26\n    var encoded_message string\n\
    \    var index int\n    for _, letter := range message {\n        index = int(letter)\n\
    \        if letter >= 'a' && letter <= 'z' {\n            index = (int(letter)\
    \ - 'a' + 2) % letter_count + 'a'\n        } else if letter >= 'A' && letter <=\
    \ 'Z' {\n            index = (int(letter) - 'A' + 2) % letter_count + 'A'\n  \
    \      }\n        encoded_message += string(index)\n    }\n    return encoded_message\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpgad3wpbd_test.go:29:28: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output []byte\n    for _, char := range []byte(message)\
    \ {\n        if char >= 65 && char <= 90 {\n            output = append(output,\
    \ (char + 32))\n        } else if char >= 97 && char <= 122 {\n            output\
    \ = append(output, (char - 32))\n        } else {\n            output = append(output,\
    \ char)\n        }\n    }\n    return string(output)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp8kp9ltxc_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp8kp9ltxc_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp8kp9ltxc_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp8kp9ltxc_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp8kp9ltxc_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    //your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpeu6_kf2x_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpeu6_kf2x_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpeu6_kf2x_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpeu6_kf2x_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpeu6_kf2x_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    vowels := \"aeiou\"\n    for _, c\
    \ := range message {\n        if c >= 65 && c <= 90 {\n            encoded +=\
    \ string(90 - c + 65)\n        } else if c >= 97 && c <= 122 {\n            if\
    \ strings.Contains(vowels, string(c)) {\n                if c == 119 {\n     \
    \               encoded += \"a\"\n                } else if c == 121 {\n     \
    \               encoded += \"e\"\n                } else if c == 122 {\n     \
    \               encoded += \"i\"\n                } else {\n                 \
    \   encoded += string(c + 2)\n                }\n            } else {\n      \
    \          encoded += string(c)\n            }\n        } else {\n           \
    \ encoded += string(c)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8d28gi23_test.go:25:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    res := \"\"\n    runeStr := []rune(message)\n    for _,\
    \ r := range runeStr {\n        if r >= 'a' && r <= 'z' {\n            r = r -\
    \ 'a' + 'A'\n        } else if r >= 'A' && r <= 'Z' {\n            r = r - 'A'\
    \ + 'a'\n        } else if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r ==\
    \ 'u' {\n            r = r + 2\n        } else if r == 'A' || r == 'E' || r ==\
    \ 'I' || r == 'O' || r == 'U' {\n            r = r + 2\n        }\n        res\
    \ += string(r)\n    }\n    return res\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpzrbf7h3s_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpzrbf7h3s_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzrbf7h3s_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpzrbf7h3s_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzrbf7h3s_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded_chars := []byte(message)\n    for i, c := range\
    \ encoded_chars {\n        if 'a' <= c && c <= 'z' {\n            encoded_chars[i]\
    \ = c - 32\n        } else if 'A' <= c && c <= 'Z' {\n            encoded_chars[i]\
    \ = c + 32\n        } else if 'A' <= c && c <= 'Z' {\n            switch c {\n\
    \            case 'A':\n                encoded_chars[i] = 'C'\n            case\
    \ 'E':\n                encoded_chars[i] = 'G'\n            case 'I':\n      \
    \          encoded_chars[i] = 'K'\n            case 'O':\n                encoded_chars[i]\
    \ = 'M'\n            case 'U':\n                encoded_chars[i] = 'Q'\n     \
    \       }\n        } else if 'a' <= c && c <= 'z' {\n            switch c {\n\
    \            case 'a':\n                encoded_chars[i] = 'c'\n            case\
    \ 'e':\n                encoded_chars[i] = 'g'\n            case 'i':\n      \
    \          encoded_chars[i] = 'k'\n            case 'o':\n                encoded_chars[i]\
    \ = 'm'\n            case 'u':\n                encoded_chars[i] = 'q'\n     \
    \       }\n        }\n    }\n    return string(encoded_chars)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpn0f2cw9f_test.go:73: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpn0f2cw9f_test.go:73: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpn0f2cw9f_test.go:73:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpn0f2cw9f_test.go:73: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpn0f2cw9f_test.go:73:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    num := len(message)\n    if num == 0 {\n        return\
    \ \"\"\n    }\n    var runes = make([]rune, num)\n    for i := 0; i < num; i++\
    \ {\n        runes[i] = message[i]\n    }\n    for i := 0; i < num; i++ {\n  \
    \      if runes[i] >= 'a' && runes[i] <= 'z' {\n            runes[i] = runes[i]\
    \ - 32\n        } else if runes[i] >= 'A' && runes[i] <= 'Z' {\n            runes[i]\
    \ = runes[i] + 32\n        } else if runes[i] == 'a' || runes[i] == 'e' || runes[i]\
    \ == 'i' || runes[i] == 'o' || runes[i] == 'u' {\n            runes[i] = runes[i]\
    \ + 2\n        }\n    }\n    return string(runes)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkvu3zb9_test.go:25:20: cannot use message[i] (value of type byte) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 0
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encodedMessage string\n    for _, c := range message\
    \ {\n        r := rune(c)\n        if c >= 'a' && c <= 'z' {\n            r =\
    \ r - 'a' + 'A'\n        } else if c >= 'A' && c <= 'Z' {\n            r = r -\
    \ 'A' + 'a'\n        }\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            r += 2\n        } else if c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U' {\n            r += 2\n        }\n        encodedMessage\
    \ += string(r)\n    }\n    return encodedMessage\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encode_chars := map[string]string{\n        \"a\": \"\
    c\",\n        \"e\": \"g\",\n        \"i\": \"k\",\n        \"o\": \"q\",\n  \
    \      \"u\": \"w\",\n        \"y\": \"a\",\n        \"b\": \"d\",\n        \"\
    c\": \"e\",\n        \"d\": \"f\",\n        \"f\": \"h\",\n        \"g\": \"j\"\
    ,\n        \"h\": \"k\",\n        \"j\": \"l\",\n        \"k\": \"m\",\n     \
    \   \"l\": \"n\",\n        \"m\": \"p\",\n        \"n\": \"r\",\n        \"p\"\
    : \"t\",\n        \"q\": \"v\",\n        \"r\": \"x\",\n        \"s\": \"z\",\n\
    \        \"t\": \"b\",\n        \"v\": \"d\",\n        \"w\": \"f\",\n       \
    \ \"x\": \"h\",\n        \"z\": \"j\",\n    }\n    encoded_message := \"\"\n \
    \   for _, v := range message {\n        if v >= 'A' && v <= 'Z' {\n         \
    \   v = v + 32\n        }\n        encoded_ch := string(v)\n        if value,\
    \ ok := encode_chars[encoded_ch]; ok {\n            encoded_ch = value\n     \
    \   }\n        encoded_message += encoded_ch\n    }\n    return encoded_message\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0ve897c4_test.go:78: expected 'tgst', got 'bgzb'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0ve897c4_test.go:78: expected 'mWDCSKR', got 'pwfczkx'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0ve897c4_test.go:78:\
    \ expected 'ygs', got 'agz'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0ve897c4_test.go:78: expected 'tHKS KS C MGSSCGG', got 'bkkz kz c pgzzcjg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0ve897c4_test.go:78:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'k fqrb mrqf fkcb bq fxkbg'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        charLower := char >= 'a' && char <= 'z'\n        charUpper := char >=\
    \ 'A' && char <= 'Z'\n        isVowel := (char == 'a' || char == 'e' || char ==\
    \ 'i' || char == 'o' || char == 'u')\n        if charLower || charUpper {\n  \
    \          if isVowel {\n                char += 2\n                if char >\
    \ 'z' {\n                    char -= 26\n                }\n            }\n  \
    \          encoded += string(char ^ 0x20)\n        } else {\n            encoded\
    \ += string(char)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnjvw9x40_test.go:56: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__2\
    \ (0.00s)\n        tmpnjvw9x40_test.go:56: expected 'ygs', got 'yes'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpnjvw9x40_test.go:56: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'i dQnT kNoW wHaT To wRiTe'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        switch char {\n        case 'a': \n            encoded += \"c\"\n   \
    \     case 'e': \n            encoded += \"g\"\n        case 'i': \n         \
    \   encoded += \"k\"\n        case 'o': \n            encoded += \"q\"\n     \
    \   case 'u': \n            encoded += \"w\"\n        case 'A': \n           \
    \ encoded += \"C\"\n        case 'E': \n            encoded += \"G\"\n       \
    \ case 'I': \n            encoded += \"K\"\n        case 'O': \n            encoded\
    \ += \"Q\"\n        case 'U': \n            encoded += \"W\"\n        default:\n\
    \            encoded += string(char)\n        }\n    }\n    return encoded\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp7n30cuh1_test.go:66: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp7n30cuh1_test.go:66: expected 'mWDCSKR', got 'Mwdcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp7n30cuh1_test.go:66:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp7n30cuh1_test.go:66: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp7n30cuh1_test.go:66:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    vowels := \"aeiou\"\n    newMessage := \"\"\n    for _,\
    \ letter := range message {\n        if letter >= 65 && letter <= 90 {\n     \
    \       newMessage += string(letter + 32)\n        } else if letter >= 97 && letter\
    \ <= 122 {\n            newMessage += string(letter - 32)\n        } else {\n\
    \            newMessage += string(letter)\n        }\n    }\n    for _, vowel\
    \ := range vowels {\n        newMessage = strings.Replace(newMessage, string(vowel),\
    \ string(vowel + 2), -1)\n    }\n    return newMessage\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44tayf5u_test.go:31:22: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075647
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"TGST\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo5xe9y2f_test.go:39: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'mWDCSKR', got 'TGST'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo5xe9y2f_test.go:39: expected\
    \ 'ygs', got 'TGST'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpo5xe9y2f_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'TGST'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'TGST'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    if len(message) == 0 {\n        return \"\"\n    }\n\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpytymiwz5_test.go:43: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpytymiwz5_test.go:43: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpytymiwz5_test.go:43:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpytymiwz5_test.go:43: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpytymiwz5_test.go:43:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    fmt.Println(message)\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "TEST\nMudasir\nYES\nThis is a message\nI DoNt KnOw WhAt tO WrItE\n--- FAIL:\
    \ TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpa3g7spnq_test.go:40:\
    \ expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n    \
    \    tmpa3g7spnq_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2\
    \ (0.00s)\n        tmpa3g7spnq_test.go:40: expected 'ygs', got ''\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmpa3g7spnq_test.go:40: expected 'tHKS\
    \ KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n      \
    \  tmpa3g7spnq_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var newMessage string\n\n    for _, c := range message\
    \ {\n        if c >= 'a' && c <= 'z' {\n            newMessage += string(c - 32)\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            newMessage += string(c\
    \ + 32)\n        } else {\n            newMessage += string(c)\n        }\n  \
    \  }\n\n    return newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmptrx1eeuo_test.go:51: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmptrx1eeuo_test.go:51: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmptrx1eeuo_test.go:51:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmptrx1eeuo_test.go:51: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmptrx1eeuo_test.go:51:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    vowels := \"aeiou\"\n    for _, c\
    \ := range message {\n        lowCase := true\n        if c >= 'A' && c <= 'Z'\
    \ {\n            lowCase = false\n        }\n        newChar := int(c)\n     \
    \   if lowCase {\n            newChar = newChar - 32\n        }\n        newChar\
    \ = newChar + 2\n        if newChar > 90 {\n            newChar = newChar - 26\n\
    \        }\n        if c == ' ' {\n            newChar = int(' ')\n        }\n\
    \        for _, v := range vowels {\n            if v == c {\n               \
    \ newChar = newChar + 32\n            }\n        }\n        encoded = encoded\
    \ + string(newChar)\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp1b6nq24o_test.go:42:29: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    vowels := \"aeiou\"\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    cipher := make(map[rune]rune)\n    for i, r := range alphabet {\n      \
    \  cipher[r] = rune(alphabet[(i+2)%len(alphabet)])\n    }\n    for i, r := range\
    \ alphabet {\n        cipher[r-32] = rune(alphabet[(i+2)%len(alphabet)])-32\n\
    \    }\n    for i, r := range vowels {\n        cipher[r] = rune(vowels[(i+2)%len(vowels)])\n\
    \    }\n    for i, r := range vowels {\n        cipher[r-32] = rune(vowels[(i+2)%len(vowels)])-32\n\
    \    }\n    result := \"\"\n    for _, r := range message {\n        result +=\
    \ string(cipher[r])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbl8v2ghh_test.go:58: expected 'tgst', got 'VOUV'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbl8v2ghh_test.go:58: expected 'mWDCSKR', got 'Oefiuut'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbl8v2ghh_test.go:58:\
    \ expected 'ygs', got 'AOU'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbl8v2ghh_test.go:58: expected 'tHKS KS C MGSSCGG', got 'Vjuu\0uu\0i\0\
    oouuiio'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbl8v2ghh_test.go:58:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'U\0FaPv\0MpAy\0YjIv\0vA\0YtUvO'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmphva5matr_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmphva5matr_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmphva5matr_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmphva5matr_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmphva5matr_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var letters string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    var vowels string = \"AEIOUaeiou\"\n    var result string = \"\"\n    for\
    \ _, char := range message {\n        if char == ' ' {\n            result +=\
    \ \" \"\n        } else {\n            var idx = strings.Index(letters, string(char))\n\
    \            if idx == -1 {\n                panic(\"Wrong input: \" + string(char))\n\
    \            }\n            if strings.Index(vowels, string(char)) != -1 {\n \
    \               if idx < 25 {\n                    idx += 2\n                }\
    \ else {\n                    idx -= 24\n                }\n            } else\
    \ {\n                if idx >= 25 {\n                    idx -= 25\n         \
    \       } else {\n                    idx += 25\n                }\n         \
    \   }\n            result += string(letters[idx])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ngqv02m_test.go:26:23: undefined: strings

    /tmp/tmp6ngqv02m_test.go:30:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Write code here\n    return message\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpfpykf08l_test.go:40: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpfpykf08l_test.go:40: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpfpykf08l_test.go:40:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpfpykf08l_test.go:40: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpfpykf08l_test.go:40:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    vowels\
    \ := \"aeiou\"\n    translationMap := make(map[string]string)\n    encodedMessage\
    \ := \"\"\n\n    for _, letter := range alphabet {\n        char := string(letter)\n\
    \        if string(letter) == \"z\" {\n            translationMap[char] = \"a\"\
    \n        } else {\n            translationMap[char] = string(letter + 1)\n  \
    \      }\n    }\n\n    for _, letter := range message {\n        char := string(letter)\n\
    \        encodedChar := \"\"\n        if string(letter) == \" \" {\n         \
    \   encodedChar = \" \"\n        } else if string(letter) == strings.ToUpper(string(letter))\
    \ {\n            encodedChar = strings.ToUpper(translationMap[strings.ToLower(char)])\n\
    \        } else {\n            encodedChar = translationMap[char]\n        }\n\
    \        if vowels[strings.ToLower(char)] {\n            encodedChar = string(letter\
    \ + 2)\n        }\n        encodedMessage += encodedChar\n    }\n    return encodedMessage\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpadgons0s_test.go:38:37: undefined: strings

    /tmp/tmpadgons0s_test.go:39:27: undefined: strings

    /tmp/tmpadgons0s_test.go:43:12: non-boolean condition in if statement

    /tmp/tmpadgons0s_test.go:43:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075650
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr1u3e36n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr1u3e36n_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpr1u3e36n_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpr1u3e36n_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpr1u3e36n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    var letter string\n    var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var vowels = \"aeiou\"\n    var length\
    \ = len(message)\n    var offset = len(alphabet) - len(vowels)\n\n    for i :=\
    \ 0; i < length; i++ {\n        letter = string(message[i])\n        if vowels[0]\
    \ <= letter[0] && letter[0] <= vowels[4] {\n            encoded += string(alphabet[(alphabet[0]\
    \ + offset + alphabet[letter[0]]) % offset])\n        } else {\n            encoded\
    \ += letter\n        }\n    }\n\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fydlxx8_test.go:29:41: invalid operation: alphabet[0] + offset (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Write your code here\n    return message\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpob2rfipx_test.go:40: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpob2rfipx_test.go:40: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpob2rfipx_test.go:40:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpob2rfipx_test.go:40: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpob2rfipx_test.go:40:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    ret := \"\"\n    for _, c := range message {\n       \
    \ // check whether it is a capital\n        if c > 64 && c < 91 {\n          \
    \  // lowercase\n            c += 32\n        } else if c > 96 && c < 123 {\n\
    \            // uppercase\n            c -= 32\n        }\n        // it is a\
    \ vowel\n        if c == 97 || c == 101 || c == 105 || c == 111 || c == 117 {\n\
    \            c += 2\n        }\n        ret += string(c)\n    }\n    return ret\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmpdo66ddvi_test.go:55: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmpdo66ddvi_test.go:55: expected 'tHKS\
    \ KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpdo66ddvi_test.go:55: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'k dOnT kNqW wHcT Tq wRkTg'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n\n    for _, char := range message\
    \ {\n        if char == ' ' {\n            result += \" \"\n            continue\n\
    \        }\n\n        if char >= 'a' && char <= 'z' {\n            result += string(char\
    \ - 32)\n            continue\n        }\n\n        if char >= 'A' && char <=\
    \ 'Z' {\n            result += string(char + 32)\n            continue\n     \
    \   }\n\n        var offset int\n        if (char >= 'A' && char <= 'C') || (char\
    \ >= 'a' && char <= 'c') {\n            offset = 2\n        } else if (char >=\
    \ 'D' && char <= 'F') || (char >= 'd' && char <= 'f') {\n            offset =\
    \ 3\n        } else if (char >= 'G' && char <= 'I') || (char >= 'g' && char <=\
    \ 'i') {\n            offset = 4\n        } else if (char >= 'J' && char <= 'L')\
    \ || (char >= 'j' && char <= 'l') {\n            offset = 5\n        } else if\
    \ (char >= 'M' && char <= 'O') || (char >= 'm' && char <= 'o') {\n           \
    \ offset = 6\n        } else if (char >= 'P' && char <= 'R') || (char >= 'p' &&\
    \ char <= 'r') {\n            offset = 7\n        } else if (char >= 'S' && char\
    \ <= 'U') || (char >= 's' && char <= 'u') {\n            offset = 8\n        }\
    \ else if (char >= 'V' && char <= 'Z') || (char >= 'v' && char <= 'z') {\n   \
    \         offset = 9\n        }\n\n        result += string(char + offset)\n \
    \   }\n\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzifjxnd9_test.go:56:26: invalid operation: char + offset (mismatched types
    rune and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 0
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\tvar encoded string\n\tfor _, letter := range message {\n\
    \t\t//\n\t\tswitch letter {\n\t\tcase 'a', 'e', 'i', 'o', 'u':\n\t\t\tletter =\
    \ letter + 2\n\t\tcase 'A', 'E', 'I', 'O', 'U':\n\t\t\tletter = letter + 2\n\t\
    \t}\n\t\t//\n\t\tswitch letter {\n\t\tcase 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z':\n\t\t\t\
    letter = letter - 32\n\t\tcase 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z':\n\t\t\tletter = letter\
    \ + 32\n\t\t}\n\t\t//\n\t\tencoded = encoded + string(letter)\n\t}\n\treturn encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            char -= 32\n        } else\
    \ if char >= 'A' && char <= 'Z' {\n            char += 32\n        }\n       \
    \ encoded += string(char)\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpv_db22sa_test.go:48: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpv_db22sa_test.go:48: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpv_db22sa_test.go:48:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpv_db22sa_test.go:48: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpv_db22sa_test.go:48:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Convert message to upper case\n    message = toUpper(message)\n\
    \    // Iterate over the message using a range loop\n    encoded := \"\"\n   \
    \ for i, v := range message {\n        // If the rune is a letter\n        if\
    \ isLetter(v) {\n            // If the letter is a vowel\n            if isVowel(v)\
    \ {\n                // Replace with the letter that appears 2 places ahead in\
    \ the alphabet\n                encoded += string(next(next(v)))\n           \
    \ } else {\n                // Otherwise, simply swap the case\n             \
    \   encoded += swapCase(v)\n            }\n        } else {\n            // Otherwise,\
    \ simply add the non-letter character to the encoded message\n            encoded\
    \ += string(v)\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hcehnp8_test.go:20:15: undefined: toUpper

    /tmp/tmp2hcehnp8_test.go:23:9: i declared but not used

    /tmp/tmp2hcehnp8_test.go:25:12: undefined: isLetter

    /tmp/tmp2hcehnp8_test.go:27:16: undefined: isVowel

    /tmp/tmp2hcehnp8_test.go:29:35: undefined: next

    /tmp/tmp2hcehnp8_test.go:32:28: undefined: swapCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"ab\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpvrol3tdq_test.go:39: expected 'tgst', got 'ab'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpvrol3tdq_test.go:39: expected 'mWDCSKR', got 'ab'\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpvrol3tdq_test.go:39: expected\
    \ 'ygs', got 'ab'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpvrol3tdq_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'ab'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpvrol3tdq_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'ab'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result []byte\n    var found bool\n    var code byte\n\
    \    for i := 0; i < len(message); i++ {\n        code = message[i]\n        if\
    \ code >= 'a' && code <= 'z' {\n            code -= 'a'\n            code += 'A'\n\
    \        } else if code >= 'A' && code <= 'Z' {\n            code -= 'A'\n   \
    \         code += 'a'\n        }\n        found = false\n        for j := 0; j\
    \ < len(vowels); j++ {\n            if code == vowels[j] {\n                code\
    \ = encode_vowels[j]\n                found = true\n                break\n  \
    \          }\n        }\n        if !found {\n            result = append(result,\
    \ code)\n        } else {\n            result = append(result, code)\n       \
    \ }\n    }\n    return string(result)\n}\n\nvar (\n    vowels = []byte{'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    encode_vowels = []byte{'c', 'f',\
    \ 'k', 'p', 's', 'C', 'F', 'K', 'P', 'S'}\n)\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmptcr7dh5c_test.go:70: expected 'tgst', got 'tfst'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmptcr7dh5c_test.go:70: expected 'mWDCSKR', got 'mSDCSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmptcr7dh5c_test.go:70:\
    \ expected 'ygs', got 'yfs'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmptcr7dh5c_test.go:70: expected 'tHKS KS C MGSSCGG', got 'tHKS KS C MFSSCGF'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmptcr7dh5c_test.go:70:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'k dPnT kNpW wHcT Tp wRkTf'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var newMessage string\n    var vowels = []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for _, char := range message {\n        var\
    \ letter = string(char)\n        var lower = isLowerCase(letter)\n        if isVowel(letter,\
    \ vowels) {\n            newMessage += shiftVowel(letter, lower, vowels)\n   \
    \     } else {\n            newMessage += changeCase(letter, lower)\n        }\n\
    \    }\n    return newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0wkt1_7j_test.go:23:21: undefined: isLowerCase

    /tmp/tmp0wkt1_7j_test.go:24:12: undefined: isVowel

    /tmp/tmp0wkt1_7j_test.go:25:27: undefined: shiftVowel

    /tmp/tmp0wkt1_7j_test.go:27:27: undefined: changeCase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Implement this method.\n    // Use the tests below\
    \ to test your implementation.\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpf8xq_3ep_test.go:41: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpf8xq_3ep_test.go:41: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpf8xq_3ep_test.go:41: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpf8xq_3ep_test.go:41:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpf8xq_3ep_test.go:41: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var messageBytes = []byte(message)\n    for i, char :=\
    \ range messageBytes {\n        if char >= 'a' && char <= 'z' {\n            messageBytes[i]\
    \ = char - 32\n        } else if char >= 'A' && char <= 'Z' {\n            messageBytes[i]\
    \ = char + 32\n        } else if char == 'A' {\n            messageBytes[i] =\
    \ 'C'\n        } else if char == 'E' {\n            messageBytes[i] = 'G'\n  \
    \      } else if char == 'I' {\n            messageBytes[i] = 'K'\n        } else\
    \ if char == 'O' {\n            messageBytes[i] = 'Q'\n        } else if char\
    \ == 'U' {\n            messageBytes[i] = 'S'\n        } else if char == 'a' {\n\
    \            messageBytes[i] = 'c'\n        } else if char == 'e' {\n        \
    \    messageBytes[i] = 'g'\n        } else if char == 'i' {\n            messageBytes[i]\
    \ = 'k'\n        } else if char == 'o' {\n            messageBytes[i] = 'q'\n\
    \        } else if char == 'u' {\n            messageBytes[i] = 's'\n        }\n\
    \    }\n    return string(messageBytes)\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpoi987c7a_test.go:67: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpoi987c7a_test.go:67: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpoi987c7a_test.go:67:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpoi987c7a_test.go:67: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpoi987c7a_test.go:67:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, letter := range message\
    \ {\n        if 'a' <= letter && letter <= 'z' {\n            encoded += string((letter\
    \ - 'a' + 2) % 26 + 'a')\n        } else if 'A' <= letter && letter <= 'Z' {\n\
    \            encoded += string((letter - 'A' + 2) % 26 + 'A')\n        } else\
    \ {\n            encoded += string(letter)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3pdwi42u_test.go:49: expected 'tgst', got 'VGUV'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3pdwi42u_test.go:49: expected 'mWDCSKR', got 'Owfcukt'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3pdwi42u_test.go:49:\
    \ expected 'ygs', got 'AGU'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3pdwi42u_test.go:49: expected 'tHKS KS C MGSSCGG', got 'Vjku ku c oguucig'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3pdwi42u_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K FqPv MpQy YjCv vQ YtKvG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char\
    \ + 32)\n        } else {\n            result += string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmphva5matr_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmphva5matr_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmphva5matr_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmphva5matr_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmphva5matr_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    length := len(message)\n    encoded := \"\"\n    for i\
    \ := 0; i < length; i++ {\n        c := message[i]\n        encoded += string(c\
    \ ^ 32)\n    }\n    fmt.Println(encoded)\n    return encoded\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "test\nmUDASIR\nyes\ntHIS\0IS\0A\0MESSAGE\ni\0dOnT\0kNoW\0wHaT\0To\0wRiTe\n\
    --- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n \
    \       tmprvuojyi4_test.go:46: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmprvuojyi4_test.go:46: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmprvuojyi4_test.go:46:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmprvuojyi4_test.go:46: expected 'tHKS KS C MGSSCGG', got 'tHIS\0IS\0A\0\
    MESSAGE'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmprvuojyi4_test.go:46:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i\0dOnT\0kNoW\0wHaT\0To\0wRiTe'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    m := []rune(message)\n    for i, r := range m {\n    \
    \    fmt.Println(i,r)\n        if r >= 65 && r <= 90 {\n            m[i] = r +\
    \ 32\n        } else if r >= 97 && r <= 122 {\n            m[i] = r - 32\n   \
    \     }\n    }\n    return string(m)\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "0 84\n1 69\n2 83\n3 84\n0 77\n1 117\n2 100\n3 97\n4 115\n5 105\n6 114\n\
    0 89\n1 69\n2 83\n0 84\n1 104\n2 105\n3 115\n4 32\n5 105\n6 115\n7 32\n8 97\n\
    9 32\n10 109\n11 101\n12 115\n13 115\n14 97\n15 103\n16 101\n0 73\n1 32\n2 68\n\
    3 111\n4 78\n5 116\n6 32\n7 75\n8 110\n9 79\n10 119\n11 32\n12 87\n13 104\n14\
    \ 65\n15 116\n16 32\n17 116\n18 79\n19 32\n20 87\n21 114\n22 73\n23 116\n24 69\n\
    --- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n \
    \       tmprg4jbbx5_test.go:48: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmprg4jbbx5_test.go:48: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmprg4jbbx5_test.go:48:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmprg4jbbx5_test.go:48: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmprg4jbbx5_test.go:48:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // write your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpka6qgw3z_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpka6qgw3z_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpka6qgw3z_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpka6qgw3z_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpka6qgw3z_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // TODO: Write this function\n    var r = []rune(message)\n\
    \    var res string\n    //fmt.Println(r[0])\n    for _, i := range r {\n    \
    \    if 'a' <= i && i <= 'z' {\n            if i + 2 > 'z' {\n               \
    \ res += string(i - 24)\n            } else {\n                res += string(i\
    \ + 2)\n            }\n        } else if 'A' <= i && i <= 'Z' {\n            if\
    \ i + 2 > 'Z' {\n                res += string(i - 24)\n            } else {\n\
    \                res += string(i + 2)\n            }\n        } else {\n     \
    \       res += string(i)\n        }\n    }\n    fmt.Println(res)\n    return res\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "VGUV\nOwfcukt\nAGU\nVjku ku c oguucig\nK FqPv MpQy YjCv vQ YtKvG\n--- FAIL:\
    \ TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmp4do182s0_test.go:61:\
    \ expected 'tgst', got 'VGUV'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmp4do182s0_test.go:61: expected 'mWDCSKR', got 'Owfcukt'\n    --- FAIL:\
    \ TestEncode/test_num__2 (0.00s)\n        tmp4do182s0_test.go:61: expected 'ygs',\
    \ got 'AGU'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4do182s0_test.go:61:\
    \ expected 'tHKS KS C MGSSCGG', got 'Vjku ku c oguucig'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp4do182s0_test.go:61: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'K FqPv MpQy YjCv vQ YtKvG'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075652
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, ch := range message {\n\
    \        encoded += string(EncodeCharacter(ch))\n    }\n    return encoded\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7twwl1dj_test.go:21:27: undefined: EncodeCharacter

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075653
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := \"AEIOUaeiou\"\n    //\
    \ Make a map of all letters and their offset by two\n    // This is going to be\
    \ a letter -> letter map\n    // We'll use this to find out what letter a vowel\
    \ should be replaced with\n    // Lets use a regular map for this\n    letter_map\
    \ := make(map[string]string)\n    for i := 65; i < 91; i++ {\n        // 65 is\
    \ ASCII for A\n        // So just add 65 to the index of the letter in our alphabet\n\
    \        // This will give us the index for the next letter after our letter\n\
    \        letter_map[string(i)] = string(i + 2)\n    }\n    // Now we can do the\
    \ same for our lowercase letters\n    for i := 97; i < 123; i++ {\n        letter_map[string(i)]\
    \ = string(i + 2)\n    }\n    // Now loop through the string and look at each\
    \ character\n    for i := 0; i < len(message); i++ {\n        // Let's see if\
    \ the character is uppercase or lowercase\n        if message[i] > 64 && message[i]\
    \ < 91 {\n            // Then it's uppercase\n            // Lets see if it's\
    \ a vowel\n            if string(message[i]) == \"A\" || string(message[i]) ==\
    \ \"E\" || string(message[i]) == \"I\" || string(message[i]) == \"O\" || string(message[i])\
    \ == \"U\" {\n                // Then it's a vowel\n                // So lets\
    \ replace it with it's offset value\n                result += letter_map[string(message[i])]\n\
    \            } else {\n                // Then it's not a vowel\n            \
    \    // So just add it to the result string\n                result += string(message[i])\n\
    \            }\n        } else if message[i] > 96 && message[i] < 123 {\n    \
    \        // Then it's lowercase\n            // So lets see if it's a vowel\n\
    \            if string(message[i]) == \"a\" || string(message[i]) == \"e\" ||\
    \ string(message[i]) == \"i\" || string(message[i]) == \"o\" || string(message[i])\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxx9fmk2_test.go:55:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075652
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    //TODO: implement\n\n    return message\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpc7zbxux7_test.go:41: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpc7zbxux7_test.go:41: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpc7zbxux7_test.go:41:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpc7zbxux7_test.go:41: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpc7zbxux7_test.go:41:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    secret := \"\"\n    for _, c := range message {\n    \
    \    switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            secret +=\
    \ string(c + 2)\n        case 'A', 'E', 'I', 'O', 'U':\n            secret +=\
    \ string(c + 2)\n        default:\n            secret += string(c)\n        }\n\
    \    }\n    return secret\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpt28jd48e_test.go:50: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpt28jd48e_test.go:50: expected 'mWDCSKR', got 'Mwdcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpt28jd48e_test.go:50:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpt28jd48e_test.go:50: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpt28jd48e_test.go:50:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output string\n\n    for _, char := range message\
    \ {\n        if isVowel(char) {\n            output += getNextVowel(char)\n  \
    \      } else {\n            output += string(char)\n        }\n    }\n\n    return\
    \ output\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg_nvrui_test.go:22:12: undefined: isVowel

    /tmp/tmpeg_nvrui_test.go:23:23: undefined: getNextVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075654
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return message\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpmd74qlwn_test.go:40: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpmd74qlwn_test.go:40: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpmd74qlwn_test.go:40:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpmd74qlwn_test.go:40: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpmd74qlwn_test.go:40:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // shift each letter two characters forward, but keep\
    \ in bounds.\n    // In the case of a lowercase letter falling to a uppercase\
    \ letter\n    // when increasing, just subtract 26.\n    // For uppercase letters,\
    \ we need to account for wrapping around to lowercase.\n    // For wrapping around\
    \ letters, we add 26.\n    var offset, x int\n    var letter string\n    var r\
    \ string\n\n    for _, x = range message {\n        offset = 0\n        if x >=\
    \ 65 && x <= 90 {\n            // Upper case letter\n            offset = 65\n\
    \        } else if x >= 97 && x <= 122 {\n            // Lower case letter\n \
    \           offset = 97\n        } else {\n            // Leave non-letters alone\n\
    \            r += string(x)\n            continue\n        }\n\n        x = ((x\
    \ + 2) - offset) % 26\n        x += offset\n\n        letter = string(x)\n   \
    \     if x >= 65 && x <= 90 {\n            // If the letter was upper case and\
    \ we shifted it, \n            // add 26 to bring it back to a lowercase letter\n\
    \            x += 26\n            letter = string(x)\n        }\n\n        //\
    \ Filter out vowels to replace them with uppercase versions\n        if (letter\
    \ == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter\
    \ == \"u\") {\n            x = x - 32\n            letter = string(x)\n      \
    \  }\n\n        r += letter\n    }\n\n    return r\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7jhejtuj_test.go:28:12: cannot use x (value of type rune) as type int
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075654
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // your code here\n    var a, b, c string\n    var t int\n\
    \    var result string\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    b = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    c = \"etaoinshrdlcumwfgypbvkjxqz\"\n    for i := 0; i < len(message); i++\
    \ {\n        for j := 0; j < len(a); j++ {\n            if message[i] == a[j]\
    \ {\n                t = j + 2\n                if t >= len(a) {\n           \
    \         t = t - len(a)\n                }\n                result = result +\
    \ a[t]\n                break\n            } else if message[i] == b[j] {\n  \
    \              t = j + 2\n                if t >= len(b) {\n                 \
    \   t = t - len(b)\n                }\n                result = result + b[t]\n\
    \                break\n            } else if message[i] == c[j] {\n         \
    \       t = j + 2\n                if t >= len(c) {\n                    t = t\
    \ - len(c)\n                }\n                result = result + c[t]\n      \
    \          break\n            } else {\n                result = result + string(message[i])\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenz5xqgk_test.go:33:26: invalid operation: result + a[t] (mismatched types
    string and byte)

    /tmp/tmpenz5xqgk_test.go:40:26: invalid operation: result + b[t] (mismatched types
    string and byte)

    /tmp/tmpenz5xqgk_test.go:47:26: invalid operation: result + c[t] (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    b := []byte(message)\n    for i, c := range b {\n    \
    \    if c >= 'a' && c <= 'z' {\n            b[i] = c - 'a' + 'A'\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            b[i] = c - 'A' + 'a'\n        }\n   \
    \ }\n    return string(b)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpabd3u6sw_test.go:47: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpabd3u6sw_test.go:47: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpabd3u6sw_test.go:47:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpabd3u6sw_test.go:47: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpabd3u6sw_test.go:47:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message = SwapCase(message)\n    for i, char := range\
    \ message {\n        message = ReplaceVowel(message, i, char)\n    }\n    return\
    \ message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwtyvf5_a_test.go:19:15: undefined: SwapCase

    /tmp/tmpwtyvf5_a_test.go:21:19: undefined: ReplaceVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var (\n        vowels = map[rune]rune{'a': 'c', 'e': 'g',\
    \ 'i': 'k', 'o': 'q', 'u': 'w'}\n        encoded = make([]rune, len(message))\n\
    \    )\n    for i, char := range message {\n        if char >= 'a' && char <=\
    \ 'z' {\n            char -= 32\n        } else if char >= 'A' && char <= 'Z'\
    \ {\n            char += 32\n        }\n        if char, ok := vowels[char]; ok\
    \ {\n            encoded[i] = char\n        } else {\n            encoded[i] =\
    \ rune(message[i])\n        }\n    }\n    return string(encoded)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxo2te9h8_test.go:55: expected 'tgst', got 'TgST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxo2te9h8_test.go:55: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxo2te9h8_test.go:55:\
    \ expected 'ygs', got 'YgS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxo2te9h8_test.go:55: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxo2te9h8_test.go:55:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'k DoNt Knqw Whct tq Wrktg'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    b := []byte(message)\n    for i := 0; i < len(b); i++\
    \ {\n        c := b[i]\n        // a-z ASCII codes are from 97 to 122.\n     \
    \   // A-Z ASCII codes are from 65 to 90.\n        if c >= 97 && c <= 122 {\n\
    \            b[i] = c - 32\n        } else if c >= 65 && c <= 90 {\n         \
    \   b[i] = c + 32\n        } else if c == 'a' {\n            b[i] = 'c'\n    \
    \    } else if c == 'e' {\n            b[i] = 'g'\n        } else if c == 'i'\
    \ {\n            b[i] = 'k'\n        } else if c == 'o' {\n            b[i] =\
    \ 'q'\n        } else if c == 'u' {\n            b[i] = 'w'\n        } else if\
    \ c == 'A' {\n            b[i] = 'C'\n        } else if c == 'E' {\n         \
    \   b[i] = 'G'\n        } else if c == 'I' {\n            b[i] = 'K'\n       \
    \ } else if c == 'O' {\n            b[i] = 'Q'\n        } else if c == 'U' {\n\
    \            b[i] = 'W'\n        }\n    }\n    return string(b)\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmph_0qnc7n_test.go:70: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmph_0qnc7n_test.go:70: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmph_0qnc7n_test.go:70:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmph_0qnc7n_test.go:70: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmph_0qnc7n_test.go:70:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075655
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    messageRunes := []rune(message)\n    encodedMessage :=\
    \ make([]rune, len(messageRunes))\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    for i, value := range messageRunes {\n        if value >= 'a' && value <=\
    \ 'z' {\n            value = value - 32\n        }\n        if value >= 'A' &&\
    \ value <= 'Z' {\n            shouldEncode := false\n            for _, vowel\
    \ := range vowels {\n                if value == vowel {\n                   \
    \ shouldEncode = true\n                    break\n                }\n        \
    \    }\n            if shouldEncode {\n                value = value + 2\n   \
    \             if value > 'Z' {\n                    value = value - 26\n     \
    \           }\n            }\n        }\n        encodedMessage[i] = value\n \
    \   }\n    return string(encodedMessage)\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpopigsvto_test.go:63: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpopigsvto_test.go:63: expected 'mWDCSKR', got 'MUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpopigsvto_test.go:63:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpopigsvto_test.go:63: expected 'tHKS KS C MGSSCGG', got 'THIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpopigsvto_test.go:63:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DONT KNOW WHAT TO WRITE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    if len(message) == 0 {\n        return \"\"\n    }\n\n\
    \    vowels := map[rune]rune{\n        'a': 'c',\n        'e': 'g',\n        'i':\
    \ 'k',\n        'o': 'q',\n        'u': 'y',\n    }\n\n    var result string\n\
    \    for _, s := range message {\n        if s >= 'a' && s <= 'z' {\n        \
    \    result += string(s - 32)\n        } else if s >= 'A' && s <= 'Z' {\n    \
    \        result += string(s + 32)\n        } else {\n            result += string(s)\n\
    \        }\n\n        if newS, ok := vowels[s]; ok {\n            result = result[:len(result)\
    \ - 1]\n            result += string(newS)\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnw0s61hl_test.go:67: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnw0s61hl_test.go:67: expected 'mWDCSKR', got 'myDcSkR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnw0s61hl_test.go:67:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpnw0s61hl_test.go:67: expected 'tHKS KS C MGSSCGG', got 'tHkS kS c MgSScGg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpnw0s61hl_test.go:67:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dqnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\treturn \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4d68qevd_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4d68qevd_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4d68qevd_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if 'a' <= char && char <= 'z' {\n            encoded += string(char -\
    \ 'a' + 'A')\n        } else if 'A' <= char && char <= 'Z' {\n            encoded\
    \ += string(char - 'A' + 'a')\n        } else if 'A' <= char && char <= 'Z' {\n\
    \            encoded += string(char - 'A' + 'a')\n        } else if 'a' <= char\
    \ && char <= 'c' {\n            encoded += string(char + 'c' - 'a')\n        }\
    \ else if 'e' <= char && char <= 'g' {\n            encoded += string(char + 'g'\
    \ - 'e')\n        } else if 'i' <= char && char <= 'k' {\n            encoded\
    \ += string(char + 'k' - 'i')\n        } else if 'o' <= char && char <= 'q' {\n\
    \            encoded += string(char + 'q' - 'o')\n        } else if 'u' <= char\
    \ && char <= 'w' {\n            encoded += string(char + 'w' - 'u')\n        }\
    \ else {\n            encoded += string(char)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpg8ttviea_test.go:61: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpg8ttviea_test.go:61: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpg8ttviea_test.go:61:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpg8ttviea_test.go:61: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpg8ttviea_test.go:61:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n\n    for _, v := range message {\n\
    \        if isVowel(v) {\n            result += string(v+2)\n        } else if\
    \ isLowercase(v) {\n            result += string(v-32)\n        } else if isUppercase(v)\
    \ {\n            result += string(v+32)\n        } else {\n            result\
    \ += string(v)\n        }\n    }\n\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth7g3oba_test.go:22:12: undefined: isVowel

    /tmp/tmpth7g3oba_test.go:24:19: undefined: isLowercase

    /tmp/tmpth7g3oba_test.go:26:19: undefined: isUppercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Map of vowels to their encodings\n    vowels := map[rune]rune{\n\
    \        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n\
    \        'u': 'y',\n    }\n\n    // Initialize the encoded string\n    var encoded\
    \ string\n    for _, c := range message {\n        // Determine if the character\
    \ is uppercase\n        if c >= 'A' && c <= 'Z' {\n            // Is a uppercase\
    \ letter\n            if c == 'Z' {\n                encoded += \"a\"\n      \
    \      } else {\n                encoded += string(c + 1)\n            }\n   \
    \     } else if c >= 'a' && c <= 'z' {\n            // Is a lowercase letter\n\
    \            if c == 'z' {\n                encoded += \"A\"\n            } else\
    \ {\n                encoded += string(c - 1)\n            }\n        } else {\n\
    \            // Is not a letter, so just add the character\n            encoded\
    \ += string(c)\n        }\n    }\n\n    // Encode the vowels\n    for _, v :=\
    \ range vowels {\n        encoded = strings.Replace(encoded, string(v), string(v+2),\
    \ -1)\n    }\n\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe_26wbw_test.go:54:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // your code goes here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpymql1e91_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpymql1e91_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpymql1e91_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpymql1e91_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpymql1e91_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpp28p1v03_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpp28p1v03_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpp28p1v03_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpp28p1v03_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpp28p1v03_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073154
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := make([]byte, len(message))\n    vowels := map[rune]rune{'a':'c',\
    \ 'e':'g', 'i':'k', 'o':'q', 'u':'y'}\n    for i, c := range message {\n     \
    \   if c >= 'a' && c <= 'z' {\n            encoded[i] = c - 32\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            encoded[i] = c + 32\n        } else {\n\
    \            encoded[i] = byte(c)\n        }\n        // Is it a vowel\n     \
    \   for key, val := range vowels {\n            if c == key || c == key - 32 {\n\
    \                encoded[i] = byte(val)\n            }\n        }\n    }\n   \
    \ return string(encoded)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgse6p5l2_test.go:23:26: cannot use c - 32 (value of type rune) as type
    byte in assignment

    /tmp/tmpgse6p5l2_test.go:25:26: cannot use c + 32 (value of type rune) as type
    byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp7d3hy2kp_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp7d3hy2kp_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp7d3hy2kp_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp7d3hy2kp_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp7d3hy2kp_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var new_message string = \"\"\n    for _, v := range message\
    \ {\n        if v > 96 && v < 123 {\n            new_message += string(v - 32)\n\
    \        } else if v > 64 && v < 91 {\n            new_message += string(v + 32)\n\
    \        } else {\n            new_message += string(v)\n        }\n    }\n  \
    \  return new_message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj1nzvg5u_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj1nzvg5u_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj1nzvg5u_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpj1nzvg5u_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpj1nzvg5u_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    const VOWELS = \"aeiou\"\n    encoded := \"\"\n    for\
    \ _, value := range message {\n        upper := false\n        if (value >= 'A'\
    \ && value <= 'Z') {\n            upper = true\n            value += 'a' - 'A'\n\
    \        }\n\n        if (value >= 'a' && value <= 'z') {\n            index :=\
    \ -1\n            for i, char := range VOWELS {\n                if (char == value)\
    \ {\n                    index = i\n                    break\n              \
    \  }\n            }\n            if (index != -1) {\n                value = rune(VOWELS[(index\
    \ + 2) % len(VOWELS)])\n            }\n            if (upper) {\n            \
    \    value -= 'a' - 'A'\n            }\n        }\n        encoded += string(value)\n\
    \    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpjdc1js0x_test.go:65: expected 'tgst', got 'TOST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpjdc1js0x_test.go:65: expected 'mWDCSKR', got 'Medisur'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpjdc1js0x_test.go:65:\
    \ expected 'ygs', got 'YOS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpjdc1js0x_test.go:65: expected 'tHKS KS C MGSSCGG', got 'Thus us i mossigo'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpjdc1js0x_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'U DaNt KnAw WhIt tA WrUtO'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    b := []byte(message)\n    fmt.Println(b)\n    fmt.Println(message)\n\
    \    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[84 69 83 84]\nTEST\n[77 117 100 97 115 105 114]\nMudasir\n[89 69 83]\n\
    YES\n[84 104 105 115 32 105 115 32 97 32 109 101 115 115 97 103 101]\nThis is\
    \ a message\n[73 32 68 111 78 116 32 75 110 79 119 32 87 104 65 116 32 116 79\
    \ 32 87 114 73 116 69]\nI DoNt KnOw WhAt tO WrItE\n--- FAIL: TestEncode (0.00s)\n\
    \    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmp8lhh2tt__test.go:42:\
    \ expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n    \
    \    tmp8lhh2tt__test.go:42: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2\
    \ (0.00s)\n        tmp8lhh2tt__test.go:42: expected 'ygs', got ''\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmp8lhh2tt__test.go:42: expected 'tHKS\
    \ KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n      \
    \  tmp8lhh2tt__test.go:42: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var msg = []byte(message)\n    for i := 0; i < len(msg);\
    \ i++ {\n        if msg[i] >= 65 && msg[i] <= 90 {\n            msg[i] += 32\n\
    \        } else if msg[i] >= 97 && msg[i] <= 122 {\n            msg[i] -= 32\n\
    \        }\n        if (msg[i] == 97 || msg[i] == 101 || msg[i] == 105 || msg[i]\
    \ == 111 || msg[i] == 117) {\n            msg[i] += 2\n        }\n    }\n    return\
    \ string(msg)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmpd58nfpp9_test.go:50: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmpd58nfpp9_test.go:50: expected 'tHKS\
    \ KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpd58nfpp9_test.go:50: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'k dOnT kNqW wHcT Tq wRkTg'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075656
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    bs := []byte(message)\n    for i := 0; i < len(bs); i++\
    \ {\n        if bs[i] >= 'a' && bs[i] <= 'z' {\n            bs[i] -= 32\n    \
    \    } else if bs[i] >= 'A' && bs[i] <= 'Z' {\n            bs[i] += 32\n     \
    \   }\n    }\n    return string(bs)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4zbhn2nu_test.go:47: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4zbhn2nu_test.go:47: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4zbhn2nu_test.go:47:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp4zbhn2nu_test.go:47: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp4zbhn2nu_test.go:47:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075657
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var newMessage string\n    messageLength := len(message)\n\
    \    vowels := map[string]string{\"a\": \"c\", \"e\": \"g\", \"i\": \"k\", \"\
    o\": \"q\", \"u\": \"w\"}\n    for i := 0; i < messageLength; i++ {\n        letter\
    \ := string(message[i])\n        if letter == strings.ToUpper(letter) {\n    \
    \        newMessage += strings.ToLower(letter)\n        } else {\n           \
    \ newMessage += strings.ToUpper(letter)\n        }\n        for key, value :=\
    \ range vowels {\n            if key == letter {\n                newMessage =\
    \ strings.Replace(newMessage, key, value, 1)\n            }\n        }\n    }\n\
    \    return newMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfo3y3o2_test.go:24:22: undefined: strings

    /tmp/tmpyfo3y3o2_test.go:25:27: undefined: strings

    /tmp/tmpyfo3y3o2_test.go:27:27: undefined: strings

    /tmp/tmpyfo3y3o2_test.go:31:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075657
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    //return message\n    var encodedMessage string\n    for\
    \ _, s := range message {\n        if int(s) >= 65 && int(s) <= 90 {\n       \
    \     s = s + 32\n        } else if int(s) >= 97 && int(s) <= 122 {\n        \
    \    s = s - 32\n        }\n        encodedMessage = encodedMessage + string(s)\n\
    \    }\n    return encodedMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp276slabl_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp276slabl_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp276slabl_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp276slabl_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp276slabl_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075658
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Take a look at the unicode library for more information\
    \ about the ranges for the \n    // alphabet, both upper and lower case. \n  \
    \  return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpkw2nl5pj_test.go:41: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpkw2nl5pj_test.go:41: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpkw2nl5pj_test.go:41: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpkw2nl5pj_test.go:41:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpkw2nl5pj_test.go:41: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _,c := range message {\n  \
    \      // swap case\n        if c >= 'a' && c <= 'z' {\n            result +=\
    \ string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result\
    \ += string(c + 32)\n        }\n        // replace vowels\n        if c == 'A'\
    \ || c == 'a' {\n            result += \"C\"\n        } else if c == 'E' || c\
    \ == 'e' {\n            result += \"G\"\n        } else if c == 'I' || c == 'i'\
    \ {\n            result += \"K\"\n        } else if c == 'O' || c == 'o' {\n \
    \           result += \"M\"\n        } else if c == 'U' || c == 'u' {\n      \
    \      result += \"Q\"\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmppgpnwv6b_test.go:60: expected 'tgst', got 'teGst'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmppgpnwv6b_test.go:60: expected 'mWDCSKR', got 'mUQDACSIKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmppgpnwv6b_test.go:60:\
    \ expected 'ygs', got 'yeGs'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n \
    \       tmppgpnwv6b_test.go:60: expected 'tHKS KS C MGSSCGG', got 'tHIKSIKSACMEGSSACGEG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmppgpnwv6b_test.go:60:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'iKdOMnTkNoMWwHaCTToMwRiKTeG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var r string\n    for _,c := range message {\n       \
    \ if c >= 'a' && c <= 'z' {\n            c -= ('a' - 'A')\n        }\n       \
    \ switch c {\n        case 'A':\n            r += \"C\"\n        case 'E':\n \
    \           r += \"G\"\n        case 'I':\n            r += \"K\"\n        case\
    \ 'O':\n            r += \"Q\"\n        case 'U':\n            r += \"S\"\n  \
    \      default:\n            r += string(c)\n        }\n    }\n    return r\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpcab5we4d_test.go:59: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpcab5we4d_test.go:59: expected 'mWDCSKR', got 'MSDCSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpcab5we4d_test.go:59:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpcab5we4d_test.go:59: expected 'tHKS KS C MGSSCGG', got 'THKS KS C MGSSCGG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpcab5we4d_test.go:59:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DQNT KNQW WHCT TQ WRKTG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    input := \"aeiou\"\n    output := \"cgjkr\"\n    var encoded\
    \ string\n    for _, l := range message {\n        switch l {\n        case 'a':\n\
    \            encoded += string(output[0])\n        case 'e':\n            encoded\
    \ += string(output[1])\n        case 'i':\n            encoded += string(output[2])\n\
    \        case 'o':\n            encoded += string(output[3])\n        case 'u':\n\
    \            encoded += string(output[4])\n        case 'A':\n            encoded\
    \ += string(output[0] - 32)\n        case 'E':\n            encoded += string(output[1]\
    \ - 32)\n        case 'I':\n            encoded += string(output[2] - 32)\n  \
    \      case 'O':\n            encoded += string(output[3] - 32)\n        case\
    \ 'U':\n            encoded += string(output[4] - 32)\n        default:\n    \
    \        encoded += string(l)\n        }\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngv7mpx9_test.go:19:5: input declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075658
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, m := range message {\n\
    \        //fmt.Printf(\"%c\\n\", m)\n        var n string\n        if 'a' <= m\
    \ && m <= 'z' {\n            n = string(m - 'a' + 'A')\n        } else if 'A'\
    \ <= m && m <= 'Z' {\n            n = string(m - 'A' + 'a')\n        } else {\n\
    \            n = string(m)\n        }\n        encoded += n\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp04xyx8zw_test.go:52: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp04xyx8zw_test.go:52: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp04xyx8zw_test.go:52:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp04xyx8zw_test.go:52: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp04xyx8zw_test.go:52:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    message_runes := []rune(message)\n\
    \    for _, char := range message_runes {\n        if char >= 'a' && char <= 'z'\
    \ {\n            char = char - 32\n        }\n        if char == 'A' {\n     \
    \       char = 'C'\n        } else if char == 'E' {\n            char = 'G'\n\
    \        } else if char == 'I' {\n            char = 'K'\n        } else if char\
    \ == 'O' {\n            char = 'Q'\n        } else if char == 'U' {\n        \
    \    char = 'S'\n        } else if char == 'Y' {\n            char = 'A'\n   \
    \     }\n        encoded += string(char)\n    }\n    return encoded\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp40jqb2e1_test.go:60: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp40jqb2e1_test.go:60: expected 'mWDCSKR', got 'MSDCSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp40jqb2e1_test.go:60:\
    \ expected 'ygs', got 'AGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp40jqb2e1_test.go:60: expected 'tHKS KS C MGSSCGG', got 'THKS KS C MGSSCGG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp40jqb2e1_test.go:60:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DQNT KNQW WHCT TQ WRKTG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp7d3hy2kp_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp7d3hy2kp_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp7d3hy2kp_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp7d3hy2kp_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp7d3hy2kp_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075656
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    msgRunes := []rune(message)\n    for i,r := range msgRunes\
    \ {\n        if isUpper(r) {\n            msgRunes[i] = toLower(r)\n        }\
    \ else {\n            msgRunes[i] = toUpper(r)\n        }\n        if isVowel(r)\
    \ {\n            msgRunes[i] = nextVowel(r)\n        }\n    }\n    return string(msgRunes)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ohd60sa_test.go:21:12: undefined: isUpper

    /tmp/tmp4ohd60sa_test.go:22:27: undefined: toLower

    /tmp/tmp4ohd60sa_test.go:24:27: undefined: toUpper

    /tmp/tmp4ohd60sa_test.go:26:12: undefined: isVowel

    /tmp/tmp4ohd60sa_test.go:27:27: undefined: nextVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"TGST\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo5xe9y2f_test.go:39: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'mWDCSKR', got 'TGST'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo5xe9y2f_test.go:39: expected\
    \ 'ygs', got 'TGST'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpo5xe9y2f_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'TGST'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'TGST'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        encoded += string(swap(char))\n    }\n    return encoded\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnvnrd6me_test.go:21:27: undefined: swap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    letters := []byte(message)\n    for i, l := range letters\
    \ {\n        if isUpper(l) {\n            letters[i] = toLower(l)\n        } else\
    \ {\n            letters[i] = toUpper(l)\n        }\n        if isVowel(l) {\n\
    \            letters[i] = encodeVowel(l)\n        }\n    }\n    return string(letters)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16b6_74q_test.go:21:12: undefined: isUpper

    /tmp/tmp16b6_74q_test.go:22:26: undefined: toLower

    /tmp/tmp16b6_74q_test.go:24:26: undefined: toUpper

    /tmp/tmp16b6_74q_test.go:26:12: undefined: isVowel

    /tmp/tmp16b6_74q_test.go:27:26: undefined: encodeVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\treturn \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4d68qevd_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4d68qevd_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4d68qevd_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    alphabet := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    for _, char := range message {\n        if char >= 'a' && char <= 'z' {\n\
    \            char = char - 32\n        }\n        if char >= 'A' && char <= 'Z'\
    \ {\n            switch char {\n            case 'A', 'E', 'I', 'O', 'U':\n  \
    \              idx := getIdx(alphabet, char)\n                char = alphabet[(idx\
    \ + 2) % len(alphabet)]\n            }\n        }\n        result += string(char)\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfsxmv5gv_test.go:28:24: undefined: getIdx

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    messageAsRunes := []rune(message)\n    vowelMap := make(map[rune]rune)\n\
    \    vowelMap['a'] = 'c'\n    vowelMap['e'] = 'g'\n    vowelMap['i'] = 'k'\n \
    \   vowelMap['o'] = 'q'\n    vowelMap['u'] = 'y'\n    for i, r := range messageAsRunes\
    \ {\n        if r >= 'a' && r <= 'z' {\n            messageAsRunes[i] = rune(r\
    \ - 'a' + 'A')\n        } else if r >= 'A' && r <= 'Z' {\n            messageAsRunes[i]\
    \ = rune(r - 'A' + 'a')\n        }\n        if v, ok := vowelMap[r]; ok {\n  \
    \          messageAsRunes[i] = v\n        }\n    }\n    return string(messageAsRunes)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpq7cgcki4_test.go:56: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpq7cgcki4_test.go:56: expected 'mWDCSKR', got 'myDcSkR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpq7cgcki4_test.go:56:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpq7cgcki4_test.go:56: expected 'tHKS KS C MGSSCGG', got 'tHkS kS c MgSScGg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpq7cgcki4_test.go:56:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dqnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return message\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo3b5gnvr_test.go:39: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo3b5gnvr_test.go:39: expected 'mWDCSKR', got 'Mudasir'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpo3b5gnvr_test.go:39: expected 'tHKS KS C MGSSCGG', got 'This is a message'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpo3b5gnvr_test.go:39:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr1u3e36n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr1u3e36n_test.go:40: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpr1u3e36n_test.go:40: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpr1u3e36n_test.go:40:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpr1u3e36n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075651
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, c := range message {\n \
    \       var nc byte\n        if c >= 'a' && c <= 'z' {\n            nc = (c -\
    \ 'a' + 2) % 26 + 'a'\n        } else if c >= 'A' && c <= 'Z' {\n            nc\
    \ = (c - 'A' + 2) % 26 + 'A'\n        } else {\n            nc = byte(c)\n   \
    \     }\n        result += string(nc)\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qp3yzou_test.go:23:18: cannot use (c - ''a'' + 2) % 26 + ''a'' (value
    of type rune) as type byte in assignment

    /tmp/tmp4qp3yzou_test.go:25:18: cannot use (c - ''A'' + 2) % 26 + ''A'' (value
    of type rune) as type byte in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, l := range message {\n   \
    \     c := string(l)\n        c = changeCase(c)\n        c = translateVowel(c)\n\
    \        encoded += c\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2gqdp73f_test.go:22:13: undefined: changeCase

    /tmp/tmp2gqdp73f_test.go:23:13: undefined: translateVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output string\n    prevChar := ' '\n    for _, char\
    \ := range message {\n        if isUpper := (prevChar >= 'A' && prevChar <= 'Z');\
    \ !isUpper {\n            prevChar = char\n            output += string(char)\n\
    \            continue\n        }\n        if char == ' ' {\n            output\
    \ += string(char)\n            continue\n        }\n        output += string(encodeChar(char))\n\
    \    }\n    return output\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkl9n9ou_test.go:31:26: undefined: encodeChar

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var output []byte\n    for _, c := range message {\n \
    \       if c >= 'a' && c <= 'z' {\n            output = append(output, c + 'A'\
    \ - 'a')\n        } else if c >= 'A' && c <= 'Z' {\n            output = append(output,\
    \ c + 'a' - 'A')\n        } else {\n            output = append(output, byte(c))\n\
    \        }\n    }\n    fmt.Println(string(output))\n    return string(output)\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrppltnf_test.go:22:37: cannot use c + ''A'' - ''a'' (value of type rune)
    as type byte in argument to append

    /tmp/tmpvrppltnf_test.go:24:37: cannot use c + ''a'' - ''A'' (value of type rune)
    as type byte in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    fmt.Println(message)\n    encoded := \"\"\n    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i, c := range message\
    \ {\n        // Check for vowels\n        for _, v := range vowels {\n       \
    \     if string(c) == v {\n                c = rune(message[i+2])\n          \
    \      break\n            }\n        }\n        // Swap case\n        if string(c)\
    \ >= \"a\" && string(c) <= \"z\" {\n            c = rune(string(c)[0] - 32)\n\
    \        } else if string(c) >= \"A\" && string(c) <= \"Z\" {\n            c =\
    \ rune(string(c)[0] + 32)\n        }\n        encoded += string(c)\n    }\n  \
    \  return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "TEST\nMudasir\n--- FAIL: TestEncode (0.00s)\npanic: runtime error: index\
    \ out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out\
    \ of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encode({0x51e96d, 0x7})\n\t/tmp/tmpazmtouna_test.go:26\
    \ +0x40a\ncommand-line-arguments_test.TestEncode(0x0?)\n\t/tmp/tmpazmtouna_test.go:49\
    \ +0x76\ntesting.tRunner(0xc0000cc1a0, 0x528fb0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // Define a map for all vowels\n    var vowel_map = map[string]string\
    \ {\n        \"a\": \"c\",\n        \"e\": \"g\",\n        \"i\": \"k\",\n   \
    \     \"o\": \"q\",\n        \"u\": \"w\",\n    }\n\n    // Define a map for all\
    \ alphabet letter\n    var alphabet_map = map[string]string {\n        \"a\":\
    \ \"A\",\n        \"b\": \"B\",\n        \"c\": \"C\",\n        \"d\": \"D\",\n\
    \        \"e\": \"E\",\n        \"f\": \"F\",\n        \"g\": \"G\",\n       \
    \ \"h\": \"H\",\n        \"i\": \"I\",\n        \"j\": \"J\",\n        \"k\":\
    \ \"K\",\n        \"l\": \"L\",\n        \"m\": \"M\",\n        \"n\": \"N\",\n\
    \        \"o\": \"O\",\n        \"p\": \"P\",\n        \"q\": \"Q\",\n       \
    \ \"r\": \"R\",\n        \"s\": \"S\",\n        \"t\": \"T\",\n        \"u\":\
    \ \"U\",\n        \"v\": \"V\",\n        \"w\": \"W\",\n        \"x\": \"X\",\n\
    \        \"y\": \"Y\",\n        \"z\": \"Z\",\n    }\n\n    // Define a map for\
    \ all alphabet letter as lower case\n    var alphabet_map_lower = map[string]string\
    \ {\n        \"a\": \"a\",\n        \"b\": \"b\",\n        \"c\": \"c\",\n   \
    \     \"d\": \"d\",\n        \"e\": \"e\",\n        \"f\": \"f\",\n        \"\
    g\": \"g\",\n        \"h\": \"h\",\n        \"i\": \"i\",\n        \"j\": \"j\"\
    ,\n        \"k\": \"k\",\n        \"l\": \"l\",\n        \"m\": \"m\",\n     \
    \   \"n\": \"n\",\n        \"o\": \"o\",\n        \"p\": \"p\",\n        \"q\"\
    : \"q\",\n        \"r\": \"r\",\n        \"s\": \"s\",\n        \"t\": \"t\",\n\
    \        \"u\": \"u\",\n        \"v\": \"v\",\n        \"w\":\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpww5chh52_test.go:83:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075659
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var out []byte\n    for _, char := range message {\n \
    \       switch char {\n        case 'a':\n            out = append(out, 'c')\n\
    \        case 'A':\n            out = append(out, 'C')\n        case 'e':\n  \
    \          out = append(out, 'g')\n        case 'E':\n            out = append(out,\
    \ 'G')\n        case 'i':\n            out = append(out, 'k')\n        case 'I':\n\
    \            out = append(out, 'K')\n        case 'o':\n            out = append(out,\
    \ 'q')\n        case 'O':\n            out = append(out, 'Q')\n        case 'u':\n\
    \            out = append(out, 'y')\n        case 'U':\n            out = append(out,\
    \ 'Y')\n        default:\n            out = append(out, byte(char))\n        }\n\
    \    }\n    return string(out)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpukqka1xt_test.go:66: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpukqka1xt_test.go:66: expected 'mWDCSKR', got 'Mydcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpukqka1xt_test.go:66:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpukqka1xt_test.go:66: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpukqka1xt_test.go:66:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encode_map := map[string]string{\n        \"t\": \"T\"\
    ,\n        \"T\": \"t\",\n        \"e\": \"C\",\n        \"E\": \"c\",\n     \
    \   \"a\": \"D\",\n        \"A\": \"d\",\n        \"i\": \"F\",\n        \"I\"\
    : \"f\",\n        \"o\": \"H\",\n        \"O\": \"h\",\n        \"u\": \"J\",\n\
    \        \"U\": \"j\",\n    }\n    encoded_message := \"\"\n    for _, char :=\
    \ range message {\n        if encoded_char, ok := encode_map[string(char)]; ok\
    \ {\n            encoded_message += encoded_char\n        } else {\n         \
    \   encoded_message += string(char)\n        }\n    }\n    return encoded_message\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp3jmjor8e_test.go:61: expected 'tgst', got 'tcSt'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp3jmjor8e_test.go:61: expected 'mWDCSKR', got 'MJdDsFr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp3jmjor8e_test.go:61:\
    \ expected 'ygs', got 'YcS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp3jmjor8e_test.go:61: expected 'tHKS KS C MGSSCGG', got 'thFs Fs D mCssDgC'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp3jmjor8e_test.go:61:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'f DHNT Knhw WhdT Th WrfTc'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075660
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encodedMessage := []rune{}\n    var nextCharacter rune\n\
    \    for _, letter := range message {\n        isLower := letter >= 'a' && letter\
    \ <= 'z'\n        isUpper := letter >= 'A' && letter <= 'Z'\n        isVowel :=\
    \ isLower && (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u')\n        isConsonant := isLower && !isVowel\n        isLetter\
    \ := isLower || isUpper\n        if isVowel {\n            nextCharacter = nextCharacterInEnglishAlphabet(letter,\
    \ 2)\n        } else if isConsonant {\n            nextCharacter = nextCharacterInEnglishAlphabet(letter,\
    \ 0)\n        } else if isLetter {\n            nextCharacter = letter\n     \
    \   }\n        encodedMessage = append(encodedMessage, nextCharacter)\n    }\n\
    \    return string(encodedMessage)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoksp6ln4_test.go:28:29: undefined: nextCharacterInEnglishAlphabet

    /tmp/tmpoksp6ln4_test.go:30:29: undefined: nextCharacterInEnglishAlphabet

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075660
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"TODO\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpc_szqgjr_test.go:39: expected 'tgst', got 'TODO'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpc_szqgjr_test.go:39: expected 'mWDCSKR', got 'TODO'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpc_szqgjr_test.go:39: expected\
    \ 'ygs', got 'TODO'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpc_szqgjr_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'TODO'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpc_szqgjr_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'TODO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075661
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    alphabets := \"abcdefghijklmnopqrstuvwxyz\"\n    encoded\
    \ := \"\"\n    for _, char := range message {\n        lowerChar := string(char)\n\
    \        upperChar := string(char)\n        if lowerChar >= \"a\" && lowerChar\
    \ <= \"z\" {\n            lowerChar = alphabets[(alphabets.Index(lowerChar) +\
    \ 2) % 26]\n        }\n        if upperChar >= \"A\" && upperChar <= \"Z\" {\n\
    \            upperChar = alphabets[(alphabets.Index(upperChar) + 2) % 26]\n  \
    \      }\n        encoded += upperChar + lowerChar\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwo_qpk6r_test.go:25:25: cannot use alphabets[(alphabets.Index(lowerChar)
    + 2) % 26] (value of type byte) as type string in assignment

    /tmp/tmpwo_qpk6r_test.go:25:46: alphabets.Index undefined (type string has no
    field or method Index)

    /tmp/tmpwo_qpk6r_test.go:28:25: cannot use alphabets[(alphabets.Index(upperChar)
    + 2) % 26] (value of type byte) as type string in assignment

    /tmp/tmpwo_qpk6r_test.go:28:46: alphabets.Index undefined (type string has no
    field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encodedMessage string\n    var letter string\n   \
    \ var asciiCode int\n    var newAsciiCode int\n    var replacementLetter string\n\
    \    for i := 0; i < len(message); i++ {\n        letter = string(message[i])\n\
    \        if letter == \"A\" || letter == \"a\" {\n            replacementLetter\
    \ = \"C\"\n        } else if letter == \"E\" || letter == \"e\" {\n          \
    \  replacementLetter = \"G\"\n        } else if letter == \"I\" || letter == \"\
    i\" {\n            replacementLetter = \"K\"\n        } else if letter == \"O\"\
    \ || letter == \"o\" {\n            replacementLetter = \"Q\"\n        } else\
    \ if letter == \"U\" || letter == \"u\" {\n            replacementLetter = \"\
    S\"\n        } else {\n            asciiCode = int(letter[0])\n            if\
    \ asciiCode > 64 && asciiCode < 91 {\n                newAsciiCode = asciiCode\
    \ + 32\n            } else if asciiCode > 96 && asciiCode < 123 {\n          \
    \      newAsciiCode = asciiCode - 32\n            } else {\n                newAsciiCode\
    \ = asciiCode\n            }\n            replacementLetter = string(newAsciiCode)\n\
    \        }\n        encodedMessage += replacementLetter\n    }\n    return encodedMessage\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpzxkmrfut_test.go:45:33: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, v := range message {\n    \
    \    r := rune(v)\n        if (r >= 65 && r <= 90) || (r >= 97 && r <= 122) {\n\
    \            result += string(encodeRune(r))\n        } else {\n            result\
    \ += string(r)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp998gj0t9_test.go:23:30: undefined: encodeRune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var m rune\n    var enc string\n\n    for _,c := range\
    \ message {\n        // Convert to uppercase.\n        m = c\n        if m > 97\
    \ {\n            m -= 32\n        }\n\n        switch m {\n            case 'A':\n\
    \                enc += \"C\"\n            case 'E':\n                enc += \"\
    G\"\n            case 'I':\n                enc += \"K\"\n            case 'O':\n\
    \                enc += \"Q\"\n            case 'U':\n                enc += \"\
    S\"\n            default:\n                enc += string(m)\n        }\n    }\n\
    \n    return enc\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp0_1_0bks_test.go:65: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp0_1_0bks_test.go:65: expected 'mWDCSKR', got 'MSDaSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp0_1_0bks_test.go:65:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp0_1_0bks_test.go:65: expected 'tHKS KS C MGSSCGG', got 'THKS KS a MGSSaGG'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp0_1_0bks_test.go:65:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DQNT KNQW WHCT TQ WRKTG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encoded := \"\"\n    for _, char := range message {\n\
    \        c := string(char)\n        if string(char) == strings.ToUpper(string(char))\
    \ {\n            c = strings.ToLower(string(char))\n        } else {\n       \
    \     c = strings.ToUpper(string(char))\n        }\n        if c == \"a\" {\n\
    \            c = \"c\"\n        } else if c == \"e\" {\n            c = \"g\"\n\
    \        } else if c == \"i\" {\n            c = \"k\"\n        } else if c ==\
    \ \"o\" {\n            c = \"q\"\n        } else if c == \"u\" {\n           \
    \ c = \"y\"\n        }\n        encoded += c\n    }\n    return encoded\n}\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqaa9_gs_test.go:22:28: undefined: strings

    /tmp/tmplqaa9_gs_test.go:23:17: undefined: strings

    /tmp/tmplqaa9_gs_test.go:25:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    vowels := \"aeiou\"\n    encoded := \"\"\n    for _, char\
    \ := range message {\n        encoded += string(char)\n        if char >= 'a'\
    \ && char <= 'z' {\n            encoded += string(char - 'a' + 'A')\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            encoded += string(char - 'A'\
    \ + 'a')\n        } else if char >= 'a' && char <= 'z' {\n            if vowels[char\
    \ - 'a'] == char {\n                encoded += string(char - 'a' + 'A')\n    \
    \        }\n        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsmj6o3v_test.go:28:38: invalid operation: vowels[char - ''a''] == char
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 0
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    m := make([]byte, len(message))\n    for i := 0; i < len(message);\
    \ i++ {\n        m[i] = message[i]\n        if m[i] >= 'a' && m[i] <= 'z' {\n\
    \            m[i] -= 'a'\n            m[i] += 'A'\n        } else if m[i] >= 'A'\
    \ && m[i] <= 'Z' {\n            m[i] -= 'A'\n            m[i] += 'a'\n       \
    \ }\n        switch m[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n          \
    \  m[i] += 2\n            if m[i] > 'z' {\n                m[i] -= 26\n      \
    \      }\n        case 'A', 'E', 'I', 'O', 'U':\n            m[i] += 2\n     \
    \       if m[i] > 'Z' {\n                m[i] -= 26\n            }\n        }\n\
    \    }\n    return string(m)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"TGST\"\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpo5xe9y2f_test.go:39: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'mWDCSKR', got 'TGST'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpo5xe9y2f_test.go:39: expected\
    \ 'ygs', got 'TGST'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpo5xe9y2f_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got 'TGST'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpo5xe9y2f_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'TGST'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075648
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // If a string is passed in, convert it to bytes\n   \
    \ if len(message) == 0 {\n        return message\n    }\n    msg := []byte(message)\n\
    \    vowels := []byte{'a', 'e', 'i', 'o', 'u'}\n    // iterate over the message\n\
    \    for i := 0; i < len(msg); i++ {\n        // skip non letter characters\n\
    \        if !isAlpha(msg[i]) {\n            continue\n        }\n        // replace\
    \ upper case letters with lower case\n        if isUpper(msg[i]) {\n         \
    \   msg[i] = byte(int(msg[i]) + 32)\n        }\n        // check if the letter\
    \ is a vowel and replace it\n        for j := 0; j < len(vowels); j++ {\n    \
    \        if msg[i] == vowels[j] {\n                // replace the vowel with the\
    \ letter that follows it in the alphabet\n                if msg[i] == 'u' {\n\
    \                    msg[i] = 'a'\n                } else {\n                \
    \    msg[i] = msg[i] + 1\n                }\n                // move ahead one\
    \ more time\n                if msg[i] == 'u' {\n                    msg[i] =\
    \ 'a'\n                } else {\n                    msg[i] = msg[i] + 1\n   \
    \             }\n                break\n            }\n        }\n    }\n    return\
    \ string(msg)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq6ajq00e_test.go:28:13: undefined: isAlpha

    /tmp/tmpq6ajq00e_test.go:32:12: undefined: isUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    dict := make(map[string]string)\n    dict[\"a\"] = \"\
    c\"\n    dict[\"b\"] = \"d\"\n    dict[\"c\"] = \"e\"\n    dict[\"d\"] = \"f\"\
    \n    dict[\"e\"] = \"g\"\n    dict[\"f\"] = \"h\"\n    dict[\"g\"] = \"i\"\n\
    \    dict[\"h\"] = \"j\"\n    dict[\"i\"] = \"k\"\n    dict[\"j\"] = \"l\"\n \
    \   dict[\"k\"] = \"m\"\n    dict[\"l\"] = \"n\"\n    dict[\"m\"] = \"o\"\n  \
    \  dict[\"n\"] = \"p\"\n    dict[\"o\"] = \"q\"\n    dict[\"p\"] = \"r\"\n   \
    \ dict[\"q\"] = \"s\"\n    dict[\"r\"] = \"t\"\n    dict[\"s\"] = \"u\"\n    dict[\"\
    t\"] = \"v\"\n    dict[\"u\"] = \"w\"\n    dict[\"v\"] = \"x\"\n    dict[\"w\"\
    ] = \"y\"\n    dict[\"x\"] = \"z\"\n    dict[\"y\"] = \"a\"\n    dict[\"z\"] =\
    \ \"b\"\n    dict[\"A\"] = \"C\"\n    dict[\"B\"] = \"D\"\n    dict[\"C\"] = \"\
    E\"\n    dict[\"D\"] = \"F\"\n    dict[\"E\"] = \"G\"\n    dict[\"F\"] = \"H\"\
    \n    dict[\"G\"] = \"I\"\n    dict[\"H\"] = \"J\"\n    dict[\"I\"] = \"K\"\n\
    \    dict[\"J\"] = \"L\"\n    dict[\"K\"] = \"M\"\n    dict[\"L\"] = \"N\"\n \
    \   dict[\"M\"] = \"O\"\n    dict[\"N\"] = \"P\"\n    dict[\"O\"] = \"Q\"\n  \
    \  dict[\"P\"] = \"R\"\n    dict[\"Q\"] = \"S\"\n    dict[\"R\"] = \"T\"\n   \
    \ dict[\"S\"] = \"U\"\n    dict[\"T\"] = \"V\"\n    dict[\"U\"] = \"W\"\n    dict[\"\
    V\"] = \"X\"\n    dict[\"W\"] = \"Y\"\n    dict[\"X\"] = \"Z\"\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgsad1kf9_test.go:70:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075661
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    msgMap := map[rune]rune{\n        'a': 'c',\n        'e':\
    \ 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w',\n        'A':\
    \ 'C',\n        'E': 'G',\n        'I': 'K',\n        'O': 'Q',\n        'U':\
    \ 'W',\n    }\n    encoded := []rune{}\n    for _, c := range message {\n    \
    \    if newC, ok := msgMap[c]; ok {\n            encoded = append(encoded, newC)\n\
    \        } else {\n            encoded = append(encoded, c)\n        }\n    }\n\
    \    return string(encoded)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpxbiultyk_test.go:59: expected 'tgst', got 'TGST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpxbiultyk_test.go:59: expected 'mWDCSKR', got 'Mwdcskr'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpxbiultyk_test.go:59:\
    \ expected 'ygs', got 'YGS'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpxbiultyk_test.go:59: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpxbiultyk_test.go:59:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K DqNt KnQw WhCt tQ WrKtG'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, r := range message {\n \
    \       switch {\n        case r == 'A' || r == 'a':\n            result += \"\
    C\"\n        case r == 'E' || r == 'e':\n            result += \"G\"\n       \
    \ case r == 'I' || r == 'i':\n            result += \"K\"\n        case r == 'O'\
    \ || r == 'o':\n            result += \"M\"\n        case r == 'U' || r == 'u':\n\
    \            result += \"O\"\n        case r == 'Y' || r == 'y':\n           \
    \ result += \"Q\"\n        case r >= 'a' && r <= 'z':\n            result += string(r\
    \ - 32)\n        case r >= 'A' && r <= 'Z':\n            result += string(r +\
    \ 32)\n        default:\n            result += string(r)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpkb5w68vp_test.go:62: expected 'tgst', got 'tGst'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpkb5w68vp_test.go:62: expected 'mWDCSKR', got 'mODCSKR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpkb5w68vp_test.go:62:\
    \ expected 'ygs', got 'QGs'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n  \
    \      tmpkb5w68vp_test.go:62: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'K dMnT\
    \ kNMW wHCT TM wRKTG'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    runes := []rune(message)\n    return \"\"\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp764tw78y_test.go:19:5: runes declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075662
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    vowels := map[rune]rune{'a': 'c', 'e': 'g', 'i': 'k',\
    \ 'o': 'q', 'u': 'y'}\n    encoded := \"\"\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            char = char - 32\n     \
    \   }\n        if newChar, ok := vowels[char]; ok {\n            encoded += string(newChar)\n\
    \        } else {\n            encoded += string(char)\n        }\n    }\n   \
    \ return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmps79lqht6_test.go:51: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmps79lqht6_test.go:51: expected 'mWDCSKR', got 'MUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmps79lqht6_test.go:51:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmps79lqht6_test.go:51: expected 'tHKS KS C MGSSCGG', got 'THIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmps79lqht6_test.go:51:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DONT KNOW WHAT TO WRITE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var buffer []byte = make([]byte, len(message))\n    fmt.Println(buffer)\n\
    \    for i, v := range message {\n        if v >= 'a' && v <= 'z' {\n        \
    \    buffer[i] = byte(v - 32)\n        } else if v >= 'A' && v <= 'Z' {\n    \
    \        buffer[i] = byte(v + 32)\n        } else {\n            buffer[i] = byte(v)\n\
    \        }\n    }\n    return string(buffer)\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[0 0 0 0]\n[0 0 0 0 0 0 0]\n[0 0 0]\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n\
    [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n--- FAIL: TestEncode (0.00s)\n\
    \    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmp97gv0yuu_test.go:50:\
    \ expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmp97gv0yuu_test.go:50: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__2 (0.00s)\n        tmp97gv0yuu_test.go:50: expected 'ygs',\
    \ got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp97gv0yuu_test.go:50:\
    \ expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmp97gv0yuu_test.go:50: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    if message == \"\" {\n        return \"\"\n    }\n   \
    \ var res []rune\n    vowels := \"AEIOUaeiou\"\n    for _, letter := range message\
    \ {\n        if isLetter(letter) {\n            letter = swapCase(letter)\n  \
    \          if isVowel(letter, vowels) {\n                // Letter is a vowel,\
    \ so encode\n                letter = encodeVowel(letter)\n            }\n   \
    \     }\n        res = append(res, letter)\n    }\n    return string(res)\n}\n\
    \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqymgan1o_test.go:25:12: undefined: isLetter

    /tmp/tmpqymgan1o_test.go:26:22: undefined: swapCase

    /tmp/tmpqymgan1o_test.go:27:16: undefined: isVowel

    /tmp/tmpqymgan1o_test.go:29:26: undefined: encodeVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 32)\n        } else if char >= 'A' && char <= 'Z' {\n            encoded +=\
    \ string(char + 32)\n        } else if char == 'a' {\n            encoded += \"\
    c\"\n        } else if char == 'e' {\n            encoded += \"g\"\n        }\
    \ else if char == 'i' {\n            encoded += \"k\"\n        } else if char\
    \ == 'o' {\n            encoded += \"q\"\n        } else if char == 'u' {\n  \
    \          encoded += \"y\"\n        } else if char == 'A' {\n            encoded\
    \ += \"C\"\n        } else if char == 'E' {\n            encoded += \"G\"\n  \
    \      } else if char == 'I' {\n            encoded += \"K\"\n        } else if\
    \ char == 'O' {\n            encoded += \"Q\"\n        } else if char == 'U' {\n\
    \            encoded += \"Y\"\n        } else {\n            encoded += string(char)\n\
    \        }\n    }\n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n\
    \  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpc1e83ghg_test.go:69: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpc1e83ghg_test.go:69: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpc1e83ghg_test.go:69:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpc1e83ghg_test.go:69: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpc1e83ghg_test.go:69:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n\treturn \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp4d68qevd_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmp4d68qevd_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp4d68qevd_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmp4d68qevd_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, character := range message\
    \ {\n        var newCharacter string\n        switch {\n        case character\
    \ >= 'a' && character <= 'z':\n            newCharacter = string(byte(character)\
    \ - 32)\n        case character >= 'A' && character <= 'Z':\n            newCharacter\
    \ = string(byte(character) + 32)\n        case character == 'a':\n           \
    \ newCharacter = \"c\"\n        case character == 'e':\n            newCharacter\
    \ = \"g\"\n        case character == 'i':\n            newCharacter = \"k\"\n\
    \        case character == 'o':\n            newCharacter = \"q\"\n        case\
    \ character == 'u':\n            newCharacter = \"y\"\n        case character\
    \ == 'A':\n            newCharacter = \"C\"\n        case character == 'E':\n\
    \            newCharacter = \"G\"\n        case character == 'I':\n          \
    \  newCharacter = \"K\"\n        case character == 'O':\n            newCharacter\
    \ = \"Q\"\n        case character == 'U':\n            newCharacter = \"Y\"\n\
    \        default:\n            newCharacter = string(character)\n        }\n \
    \       result += newCharacter\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpzh5dk3u9_test.go:72: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpzh5dk3u9_test.go:72: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzh5dk3u9_test.go:72:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpzh5dk3u9_test.go:72: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzh5dk3u9_test.go:72:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    encodedMessage := \"\"\n    for i := 0; i < len(message);\
    \ i++ {\n        char := message[i]\n        encodedChar := char\n        if char\
    \ >= 'a' && char <= 'z' {\n            encodedChar = char - 32\n        } else\
    \ if char >= 'A' && char <= 'Z' {\n            encodedChar = char + 32\n     \
    \   } else if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u' {\n            encodedChar = char + 2\n        } else if char == 'A'\
    \ || char == 'E' || char == 'I' || char == 'O' || char == 'U' {\n            encodedChar\
    \ = char - 2\n        }\n        encodedMessage += string(encodedChar)\n    }\n\
    \    return encodedMessage\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp7wisyiie_test.go:54: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp7wisyiie_test.go:54: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp7wisyiie_test.go:54:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp7wisyiie_test.go:54: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp7wisyiie_test.go:54:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // compute the length of the message\n    messageLength\
    \ := len(message)\n    // create byte slice with the same size as the message\n\
    \    encoded := make([]byte, messageLength)\n    for i := 0; i < messageLength;\
    \ i++ {\n        // get the char in the message\n        char := message[i]\n\
    \        // test if char is a vowel\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            // if it is, replace\
    \ it with the 2nd letter ahead in the alphabet\n            char += 2\n      \
    \  } else if char == 'z' {\n            // special case for 'z'\n            char\
    \ = 'b'\n        } else if char == 'Z' {\n            // special case for 'Z'\n\
    \            char = 'B'\n        } else if char >= 'A' && char <= 'Z' {\n    \
    \        // if char is uppercase, make it lowercase\n            char += 32\n\
    \        } else if char >= 'a' && char <= 'z' {\n            // if char is lowercase,\
    \ make it uppercase\n            char -= 32\n        }\n        // assign char\
    \ to encoded message\n        encoded[i] = char\n    }\n    // return encoded\
    \ string\n    return string(encoded)\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp27x90u21_test.go:67: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp27x90u21_test.go:67: expected 'mWDCSKR', got 'mwDcSkR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp27x90u21_test.go:67:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp27x90u21_test.go:67: expected 'tHKS KS C MGSSCGG', got 'tHkS kS c MgSScGg'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp27x90u21_test.go:67:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dqnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, ch := range message {\n\
    \        if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') {\n         \
    \   if ch >= 'a' && ch <= 'z' {\n                ch -= 32\n            }\n   \
    \         if ch == 'Z' {\n                ch = 'A'\n            } else if ch ==\
    \ 'Y' {\n                ch = 'A'\n            } else {\n                ch++\n\
    \            }\n            if ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O'\
    \ || ch == 'U' {\n                if ch == 'Z' {\n                    ch = 'A'\n\
    \                } else if ch == 'Y' {\n                    ch = 'A'\n       \
    \         } else {\n                    ch++\n                }\n            \
    \    if ch == 'Z' {\n                    ch = 'A'\n                } else if ch\
    \ == 'Y' {\n                    ch = 'A'\n                } else {\n         \
    \           ch++\n                }\n            }\n            encoded += string(ch)\n\
    \        } else {\n            encoded += string(ch)\n        }\n    }\n    return\
    \ encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp7si8shcq_test.go:73: expected 'tgst', got 'WFTW'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp7si8shcq_test.go:73: expected 'mWDCSKR', got 'NVGBTJS'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp7si8shcq_test.go:73:\
    \ expected 'ygs', got 'CFT'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp7si8shcq_test.go:73: expected 'tHKS KS C MGSSCGG', got 'WKJT JT B NFTTBHF'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp7si8shcq_test.go:73:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'J GPQW LQPX XKBW WP XSJWF'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    result := \"\"\n    for _, c := range message {\n        if c >= 'a' && c\
    \ <= 'z' {\n            c = c - 32\n        } else if c >= 'A' && c <= 'Z' {\n\
    \            c = c + 32\n        }\n        c = rune(c)\n        // find vowels\n\
    \        for _, v := range vowels {\n            r := []rune(v)[0]\n         \
    \   if c == r {\n                c = rune(v[0] + 2)\n                break\n \
    \           }\n        }\n        result += string(c)\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n\
    \        tmpp45q59ub_test.go:58: expected 'mWDCSKR', got 'mUDASIR'\n    --- FAIL:\
    \ TestEncode/test_num__3 (0.00s)\n        tmpp45q59ub_test.go:58: expected 'tHKS\
    \ KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n    --- FAIL: TestEncode/test_num__4\
    \ (0.00s)\n        tmpp45q59ub_test.go:58: expected 'k dQnT kNqW wHcT Tq wRkTg',\
    \ got 'k dOnT kNqW wHcT Tq wRkTg'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // TODO: Check for empty string, otherwise it will panic.\n\
    \    // TODO: Check for length of message, otherwise it will panic.\n    var vowels\
    \ []rune = []rune{'a', 'e', 'i', 'o', 'u'}\n    var retVal string\n    var char\
    \ rune\n    var notVowel bool\n\n    for _, char = range message {\n        char\
    \ = unicode.ToLower(char)\n        notVowel = true\n        for _, vowel := range\
    \ vowels {\n            if char == vowel {\n                notVowel = false\n\
    \                break\n            }\n        }\n        if notVowel {\n    \
    \        retVal += string(char)\n        } else {\n            retVal += string(char\
    \ + 2)\n        }\n    }\n    return retVal\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5qz1yui_test.go:27:16: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var alphabet = []string{\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n \
    \   var encodedMessage string\n    for i := 0; i < len(message); i++ {\n     \
    \   var letter = string(message[i])\n        var letterIndex = -1\n        for\
    \ j := 0; j < len(alphabet); j++ {\n            if alphabet[j] == letter {\n \
    \               letterIndex = j\n                break\n            }\n      \
    \  }\n        if letterIndex > -1 {\n            encodedMessage += alphabet[(letterIndex\
    \ + 2) % len(alphabet)]\n        } else {\n            encodedMessage += letter\n\
    \        }\n    }\n    return encodedMessage\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpj7fh4s81_test.go:56: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpj7fh4s81_test.go:56: expected 'mWDCSKR', got 'Mwfcukt'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpj7fh4s81_test.go:56:\
    \ expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpj7fh4s81_test.go:56: expected 'tHKS KS C MGSSCGG', got 'Tjku ku c oguucig'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpj7fh4s81_test.go:56:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DqNv KpOy WjAv vO WtIvE'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    // encode: lowercase to uppercase; uppercase to lowercase\n\
    \    // vowels: [\"a\",\"e\",\"i\",\"o\",\"u\"] <-> [\"c\",\"g\",\"k\",\"o\",\"\
    s\"]\n    vowelList := []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    encodedVowelList\
    \ := []string{\"c\",\"g\",\"k\",\"o\",\"s\"}\n    var result []rune\n    // iterate\
    \ through the message string by rune,\n    // if the rune is in 'a','e','i','o','u'\
    \ then the corresponding\n    // rune in 'c','g','k','o','s' will be encoded\n\
    \    // if not, then capitalized if it is lower case\n    // if not, then decapitalized\
    \ if it is upper case\n    for _, letter := range message {\n        if isVowel,\
    \ index := isVowel(letter, vowelList); isVowel {\n            encodedLetter :=\
    \ []rune(encodedVowelList[index])[0]\n            result = append(result, encodedLetter)\n\
    \        } else if isUpper(letter) {\n            capitalLetter := []rune(string(letter))[0]\n\
    \            result = append(result, capitalLetter + 32)\n        } else {\n \
    \           capitalLetter := []rune(string(letter))[0]\n            result = append(result,\
    \ capitalLetter - 32)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo9u983ds_test.go:30:30: undefined: isVowel

    /tmp/tmpo9u983ds_test.go:33:19: undefined: isUpper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    cipher := \"\"\n    for _, c := range message {\n    \
    \    if c >= 'a' && c <= 'z' {\n            cipher += string(c - ('a' - 'A'))\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            cipher += string(c + ('a'\
    \ - 'A'))\n        } else {\n            cipher += string(c)\n        }\n    }\n\
    \    return cipher\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpbbjfmat4_test.go:49: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpbbjfmat4_test.go:49: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpbbjfmat4_test.go:49:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmpbbjfmat4_test.go:49: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpbbjfmat4_test.go:49:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var res string\n    for _,r := range message {\n     \
    \   res += getEncoded(r)\n    }\n    return res\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp812j11jd_test.go:21:16: undefined: getEncoded

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message = encodeCase(message)\n    message = encodeVowels(message)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdyuoofg_test.go:19:15: undefined: encodeCase

    /tmp/tmpvdyuoofg_test.go:20:15: undefined: encodeVowels

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075663
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var encoded string\n    for _, char := range message {\n\
    \        if char >= 'a' && char <= 'z' {\n            encoded += string(char -\
    \ 'a' + 'A')\n        } else if char >= 'A' && char <= 'Z' {\n            encoded\
    \ += string(char - 'A' + 'a')\n        } else if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            encoded += string(char\
    \ + 2)\n        } else if char == 'A' || char == 'E' || char == 'I' || char ==\
    \ 'O' || char == 'U' {\n            encoded += string(char + 2)\n        } else\
    \ {\n            encoded += string(char)\n        }\n    }\n    return encoded\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp6pis1j_3_test.go:53: expected 'tgst', got 'test'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp6pis1j_3_test.go:53: expected 'mWDCSKR', got 'mUDASIR'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp6pis1j_3_test.go:53:\
    \ expected 'ygs', got 'yes'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n  \
    \      tmp6pis1j_3_test.go:53: expected 'tHKS KS C MGSSCGG', got 'tHIS IS A MESSAGE'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp6pis1j_3_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'i dOnT kNoW wHaT To wRiTe'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075664
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpnwd4e2er_test.go:39: expected 'mWDCSKR', got ''\n    ---\
    \ FAIL: TestEncode/test_num__2 (0.00s)\n        tmpnwd4e2er_test.go:39: expected\
    \ 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpnwd4e2er_test.go:39:\
    \ expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n\
    \        tmpnwd4e2er_test.go:39: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075644
