language: go_test.go
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, bracket := range brackets\
    \ {\n        b := string(bracket)\n        if b == \"<\" {\n            stack\
    \ = append(stack, b)\n        } else if b == \">\" {\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if brackets == \"\" {\n        return true\n    }\n    open\
    \ := 0\n    close := 0\n    for _, b := range brackets {\n        if b == '<'\
    \ {\n            open++\n        } else {\n            close++\n        }\n  \
    \      if close > open {\n            return false\n        }\n    }\n    return\
    \ open == close\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    left := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            left += 1\n        } else {\n            if left ==\
    \ 0 {\n                return false\n            }\n            left -= 1\n  \
    \      }\n    }\n    return left == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, r := range brackets {\n        if\
    \ r == '<' {\n            count += 1\n        } else if r == '>' {\n         \
    \   count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, bracket := range brackets {\n\
    \        b := byte(bracket)\n        if b == '<' {\n            stack = append(stack,\
    \ b)\n        } else {\n            // b == '>'\n            if len(stack) ==\
    \ 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []string\n    for _, b := range brackets {\n \
    \       fmt.Println(string(b))\n        if b == '<' {\n            stack = append(stack,\
    \ string(b))\n        } else if b == '>' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, bracket := range brackets {\n\
    \        if bracket == '<' {\n            count++\n        } else {\n        \
    \    count--\n        }\n        if count < 0 {\n            return false\n  \
    \      }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Fill me in\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpf2tmwj_d_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpf2tmwj_d_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpf2tmwj_d_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpf2tmwj_d_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    t := 0\n    for _, char := range brackets {\n        if\
    \ char == '<' {\n            t += 1\n        } else {\n            t -= 1\n  \
    \      }\n        if t < 0 {\n            return false\n        }\n    }\n   \
    \ return t == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if brackets == \"\" {\n        return true\n    }\n    opening\
    \ := 0\n    for _, b := range brackets {\n        if b == '<' {\n            opening\
    \ += 1\n        } else {\n            opening -= 1\n        }\n        if opening\
    \ < 0 {\n            return false\n        }\n    }\n    return opening == 0\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    n := 0\n    for _, x := range brackets {\n        if x ==\
    \ '<' {\n            n += 1\n        } else {\n            n -= 1\n        }\n\
    \        if n < 0 {\n            return false\n        }\n    }\n    return n\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // insert your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpj_hmb224_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpj_hmb224_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpj_hmb224_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpj_hmb224_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    sum := 0\n    for _, c := range brackets {\n        switch\
    \ c {\n        case '<':\n            sum++\n        case '>':\n            sum--\n\
    \        }\n        if sum < 0 {\n            return false\n        }\n    }\n\
    \    return sum == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if len(brackets) == 1 {\n        return false\n    }\n    count := 0\n    for\
    \ _, bracket := range brackets {\n        if bracket == '<' {\n            count++\n\
    \        } else {\n            count--\n        }\n        if count < 0 {\n  \
    \          return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  counter := 0\n    for _, bracket := range brackets {\n        if string(bracket)\
    \ == \"<\" {\n            counter++\n        } else {\n            counter--\n\
    \        }\n        if counter < 0 {\n            return false\n        }\n  \
    \  }\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    balance := 0\n    for _, bracket := range brackets {\n \
    \       if bracket == '<' {\n            balance += 1\n        } else if bracket\
    \ == '>' {\n            balance -= 1\n        }\n        if balance < 0 {\n  \
    \          return false\n        }\n    }\n    return balance == 0\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // implementation here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp4ju33073_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp4ju33073_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp4ju33073_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp4ju33073_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Write your code here\n    if brackets == \"\" {\n   \
    \     return true\n    }\n\n    var count int\n    for _, b := range brackets\
    \ {\n        if b == '<' {\n            count += 1\n        } else {\n       \
    \     count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            last := stack[len(stack)-1]\n            if last == '<' {\n\
    \                stack = stack[:len(stack)-1]\n            } else {\n        \
    \        return false\n            }\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if string(brackets[0]) == \">\" {\n        return false\n    }\n    if string(brackets[len(brackets)-1])\
    \ == \"<\" {\n        return false\n    }\n    open_brackets := 0\n    close_brackets\
    \ := 0\n    for _, b := range brackets {\n        if string(b) == \"<\" {\n  \
    \          open_brackets++\n        } else {\n            close_brackets++\n \
    \       }\n        if close_brackets > open_brackets {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__9\
    \ (0.00s)\n        tmp95ea68wy_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    depth := 0\n    for _, bracket := range brackets {\n   \
    \     if bracket == '<' {\n            depth += 1\n        } else if bracket ==\
    \ '>' {\n            depth -= 1\n        } else {\n            return false\n\
    \        }\n        if depth < 0 {\n            return false\n        }\n    }\n\
    \    return depth == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // WRITE YOUR CODE HERE\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpvtrt89vi_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpvtrt89vi_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpvtrt89vi_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpvtrt89vi_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count = 0\n    for _, char := range brackets {\n   \
    \     if char == '<' {\n            count += 1\n        } else if char == '>'\
    \ {\n            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) % 2 != 0 {\n        return false\n    }\n\
    \    // Iterate through brackets,\n    // push \"<\" onto stack,\n    // pop stack\
    \ if meet \">\".\n    stack := make([]string, 0)\n    for _, char := range brackets\
    \ {\n        if string(char) == \"<\" {\n            stack = append(stack, \"\
    <\")\n        } else {\n            if len(stack) == 0 {\n                return\
    \ false\n            }\n            stack = stack[0:len(stack)-1]\n        }\n\
    \    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // your code here\n    count := 0\n    for _, c := range\
    \ brackets {\n        if c == '<' {\n            count++\n        } else {\n \
    \           count--\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // hint: use a stack\n    var temp []rune\n    for _,v :=\
    \ range brackets {\n        if v == '<' {\n            temp = append(temp,v)\n\
    \        } else {\n            if len(temp) == 0 {\n                return false\n\
    \            }\n            temp = temp[:len(temp)-1]\n        }\n    }\n    if\
    \ len(temp) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var open, close, count int\n    for _, b := range brackets\
    \ {\n        if b == '<' {\n            open++\n        } else {\n           \
    \ close++\n        }\n        if close > open {\n            count++\n       \
    \ }\n    }\n    return open == close && count <= 1\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__5\
    \ (0.00s)\n        tmpiyww5hck_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmpiyww5hck_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, c := range brackets {\n  \
    \      switch c {\n        case '<':\n            stack = append(stack, c)\n \
    \       case '>':\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var left, right int\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            left++\n        } else {\n            right++\n\
    \        }\n        if right > left {\n            return false\n        }\n \
    \   }\n    return left == right\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count += 1\n        } else if c == '>' {\n         \
    \   count -= 1\n        } else {\n            panic(\"\")\n        }\n       \
    \ if count < 0 {\n            return false\n        }\n    }\n    return count\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n\t// YOUR CODE HERE\n\treturn false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpg6fg2e3e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpg6fg2e3e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpg6fg2e3e_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpg6fg2e3e_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var brackets_stack []string\n    for _, b := range brackets\
    \ {\n        br := string(b)\n        if br == \"<\" {\n            brackets_stack\
    \ = append(brackets_stack, br)\n        } else if br == \">\" {\n            if\
    \ len(brackets_stack) == 0 {\n                return false\n            }\n  \
    \          brackets_stack = brackets_stack[:len(brackets_stack)-1]\n        }\n\
    \    }\n    return len(brackets_stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        switch\
    \ b {\n        case '<':\n            count++\n        case '>':\n           \
    \ count--\n        }\n        if count < 0 {\n            return false\n     \
    \   }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // YOUR CODE HERE\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp74y5kmzj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp74y5kmzj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp74y5kmzj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp74y5kmzj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    size := len(brackets)\n    if size % 2 != 0 {\n        return\
    \ false\n    }\n    counter := 0\n    for _, v := range brackets {\n        if\
    \ string(v) == \"<\" {\n            counter++\n        } else {\n            counter--\n\
    \        }\n        if counter < 0 {\n            return false\n        }\n  \
    \  }\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            stack += 1\n        } else {\n            stack -= 1\n\
    \        }\n        if stack < 0 {\n            return false\n        }\n    }\n\
    \    return stack == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    s := make([]rune, 0)\n    for _, v := range brackets {\n\
    \        if v == '<' {\n            s = append(s, v)\n        } else {\n     \
    \       if len(s) == 0 {\n                return false\n            }\n      \
    \      s = s[:len(s)-1]\n        }\n    }\n    return len(s) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    open := 0\n    close := 0\n    for _, b := range brackets\
    \ {\n        if b == '<' {\n            open++\n        } else if b == '>' {\n\
    \            close++\n        }\n        if close > open {\n            return\
    \ false\n        }\n    }\n    return open == close\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var opencount int\n    for _, b := range brackets {\n  \
    \      if b == '<' {\n            opencount++\n        } else if b == '>' {\n\
    \            opencount--\n        }\n        if opencount < 0 {\n            return\
    \ false\n        }\n    }\n    return opencount == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    balance := 0\n    for _, c := range brackets {\n       \
    \ if c == '<' {\n            balance += 1\n        } else if c == '>' {\n    \
    \        balance -= 1\n        } else {\n            panic(\"unexpected character:\
    \ \" + string(c))\n        }\n        if balance < 0 {\n            return false\n\
    \        }\n    }\n    return balance == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, ch := range brackets {\n        if\
    \ ch == '<' {\n            count += 1\n        } else if ch == '>' {\n       \
    \     count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, x := range []byte(brackets)\
    \ {\n        if x == '<' {\n            stack = append(stack, x)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    /*\n    bracket_count := 0\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            bracket_count += 1\n        } else if\
    \ c == '>' {\n            bracket_count -= 1\n        }\n        if bracket_count\
    \ < 0 {\n            return false\n        }\n    }\n    return bracket_count\
    \ == 0\n    */\n    stack := make([]int, 0)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            stack = append(stack, 1)\n        } else if\
    \ c == '>' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []string{}\n    for _, bracket := range brackets\
    \ {\n        stack = append(stack, string(bracket))\n        if len(stack) > 1\
    \ && stack[len(stack)-1] == \">\" && stack[len(stack)-2] == \"<\" {\n        \
    \    stack = stack[:len(stack)-2]\n        }\n    }\n    return len(stack) ==\
    \ 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var opened = 0\n\n    for _, b := range brackets {\n   \
    \     switch b {\n        case '<':\n            opened++\n        case '>':\n\
    \            opened--\n        }\n\n        if opened < 0 {\n            return\
    \ false\n        }\n    }\n\n    return opened == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count += 1\n        } else if c == '>' {\n         \
    \   count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    depth := 0\n    for _, char := range brackets {\n      \
    \  if char == '<' {\n            depth += 1\n        } else if char == '>' {\n\
    \            depth -= 1\n        }\n        if depth < 0 {\n            return\
    \ false\n        }\n    }\n    return depth == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var counter int\n    for _, bracket := range brackets {\n\
    \        switch bracket {\n        case '<':\n            counter++\n        case\
    \ '>':\n            counter--\n        }\n        if counter < 0 {\n         \
    \   return false\n        }\n    }\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) % 2 != 0 {\n        return false\n    }\n\
    \    x := 0\n    for _, v := range brackets {\n        x += int(v)\n    }\n  \
    \  if x == len(brackets) * 60 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp0szmr2i8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp0szmr2i8_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp0szmr2i8_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp0szmr2i8_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__7\
    \ (0.00s)\n        tmp0szmr2i8_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // return your result\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpttl5i1wy_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpttl5i1wy_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpttl5i1wy_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpttl5i1wy_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // <<<<<\n    return brackets == \"<>\"\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpndfxscsv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpndfxscsv_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpndfxscsv_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // Use a stack to keep track of the brackets.\n    stack\
    \ := make([]rune, 0)\n    // Loop through the string.\n    for _, c := range brackets\
    \ {\n        // If the character is an opening bracket, push it onto the stack.\n\
    \        if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            // If the character is a closing bracket, pop the stack.\n      \
    \      // If the stack is empty, we're encountering a closing bracket\n      \
    \      // with no opening bracket (false).\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    // If the stack is not empty at the end, there are unmatched\
    \ opening\n    // brackets (false).\n    if len(stack) != 0 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openCount int\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            openCount++\n        } else if c == '>' {\n\
    \            openCount--\n        }\n        if openCount < 0 {\n            return\
    \ false\n        }\n    }\n    return openCount == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, bracket := range brackets {\n   \
    \     switch bracket {\n        case '<':\n            count++\n        case '>':\n\
    \            count--\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) % 2 != 0 {\n        return false\n    }\n\
    \    for _, c := range brackets {\n        if c == '>' {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp7mxgjm79_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp7mxgjm79_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp7mxgjm79_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp7mxgjm79_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__7\
    \ (0.00s)\n        tmp7mxgjm79_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count = 0\n    for _, v := range brackets {\n      \
    \  if v == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    level := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            level += 1\n        } else if c == '>' {\n         \
    \   level -= 1\n        }\n        if level < 0 {\n            return false\n\
    \        }\n    }\n    return level == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]byte, 0)\n    for i := 0; i < len(brackets);\
    \ i++ {\n        c := brackets[i]\n        if c == '<' {\n            stack =\
    \ append(stack, c)\n        } else {\n            if len(stack) == 0 {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var left, right int\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            left++\n        } else {\n            right++\n\
    \        }\n        if right > left {\n            return false\n        }\n \
    \   }\n    return left == right\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // put your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpb2xiq6f9_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpb2xiq6f9_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpb2xiq6f9_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpb2xiq6f9_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i]\
    \ == '<' {\n            j := i + 1\n            for ; j < len(brackets); j++ {\n\
    \                if brackets[j] == '>' {\n                    break\n        \
    \        }\n            }\n            if j == len(brackets) {\n             \
    \   return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpega4fmrs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpega4fmrs_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpega4fmrs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpega4fmrs_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpega4fmrs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpega4fmrs_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var depth int\n    for _, b := range brackets {\n      \
    \  if b == '<' {\n            depth++\n        } else {\n            depth--\n\
    \        }\n        if depth < 0 {\n            return false\n        }\n    }\n\
    \    return depth == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var newLine []byte\n    for i:=0; i<len(brackets); i++ {\n\
    \        if brackets[i] == 60 || brackets[i] == 62 {\n            newLine = append(newLine,\
    \ brackets[i])\n        }\n    }\n    // there is no greater or less than\n  \
    \  if len(newLine) == 0 {\n        return true\n    }\n    // there are only less\
    \ than\n    if newLine[0] == 60 && newLine[len(newLine)-1] == 60 {\n        return\
    \ false\n    }\n    // there are only greater than\n    if newLine[0] == 62 &&\
    \ newLine[len(newLine)-1] == 62 {\n        return false\n    }\n    for i:=0;\
    \ i<len(newLine); i++ {\n        // two adjacent greater than\n        if newLine[i]\
    \ == 62 && newLine[i+1] == 62 {\n            return false\n        }\n       \
    \ // two adjacent less than\n        if newLine[i] == 60 && newLine[i+1] == 60\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing({0x51e1ec, 0x2})\n\t\
    /tmp/tmpc7qhtx_d_test.go:39 +0x185\ncommand-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\
    \t/tmp/tmpc7qhtx_d_test.go:57 +0x4a\ntesting.tRunner(0xc0000da340, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var length = len(brackets)\n    var count = 0\n    for i\
    \ := 0; i < length; i++ {\n        if brackets[i] == '<' {\n            count++\n\
    \        } else {\n            count--\n        }\n        if count < 0 {\n  \
    \          return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, c := range brackets {\n  \
    \      switch c {\n        case '<':\n            stack = append(stack, c)\n \
    \       case '>':\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n\tvar stack = make([]string, 0)\n\tfor _, bracket := range brackets\
    \ {\n\t\tif string(bracket) == \"<\" {\n\t\t\tstack = append(stack, string(bracket))\n\
    \t\t} else {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\t\
    stack = stack[0:len(stack)-1]\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    /*\n    * If the string contains only \"<\" (or \">\"),\
    \ there are no closing brackets.\n    * If the string contains both \"<\" and\
    \ \">\", they are balanced.\n    * If the string contains only \">\", they are\
    \ balanced.\n    */\n    return !(strings.Count(brackets, \"<\") > strings.Count(brackets,\
    \ \">\"))\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_8rabk9_test.go:24:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    n_open := 0\n    for _, bracket := range brackets {\n  \
    \      if bracket == '<' {\n            n_open += 1\n        } else if bracket\
    \ == '>' {\n            n_open -= 1\n        } else {\n            panic(\"Unexpected\
    \ character.\")\n        }\n        if n_open < 0 {\n            return false\n\
    \        }\n    }\n    return n_open == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  count := 0\n    for _, v := range brackets {\n        if v == '<' {\n     \
    \       count++\n        } else {\n            count--\n        }\n        if\
    \ count < 0 {\n            return false\n        }\n    }\n    return count ==\
    \ 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074906
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, byte(b))\n        } else\
    \ {\n            // b == '>'\n            if len(stack) == 0 {\n             \
    \   return false\n            }\n            stack = stack[:len(stack)-1]\n  \
    \      }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []byte{}\n    for _, c := range []byte(brackets)\
    \ {\n        if c == '<' {\n            stack = append(stack, c)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            last := stack[len(stack)-1]\n            if last == '<' {\n\
    \                stack = stack[:len(stack)-1]\n            } else {\n        \
    \        return false\n            }\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n\treturn true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpu19mpks1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpu19mpks1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpu19mpks1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpu19mpks1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpu19mpks1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpu19mpks1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpu19mpks1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpu19mpks1_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            stack = append(stack, bracket)\n\
    \        } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := make([]rune, 0)\n    for _, r := range brackets\
    \ {\n        if r == '<' {\n            stack = append(stack, r)\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets_count := 0\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            brackets_count++\n        } else if char\
    \ == '>' {\n            brackets_count--\n        }\n        if brackets_count\
    \ < 0 {\n            return false\n        }\n    }\n    return brackets_count\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opened := 0\n    for _, bracket := range brackets {\n  \
    \      switch bracket {\n        case '<':\n            opened++\n        case\
    \ '>':\n            opened--\n        }\n        if opened < 0 {\n           \
    \ return false\n        }\n    }\n    return opened == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var brackets_stack []rune\n\n    for _, bracket := range\
    \ brackets {\n        if bracket == '<' {\n            brackets_stack = append(brackets_stack,\
    \ bracket)\n        } else {\n            if len(brackets_stack) == 0 {\n    \
    \            return false\n            } else {\n                brackets_stack\
    \ = brackets_stack[:len(brackets_stack)-1]\n            }\n        }\n    }\n\n\
    \    return len(brackets_stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // *** write your code here ***\n    return false\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfhpnsnbs_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfhpnsnbs_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfhpnsnbs_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfhpnsnbs_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var brackets_map = make(map[string]string)\n    brackets_map[\"\
    <\"] = \">\"\n    brackets_map[\">\"] = \"<\"\n    var brackets_array []string\n\
    \    for _, character := range brackets {\n        brackets_array = append(brackets_array,\
    \ string(character))\n    }\n    for i := len(brackets_array)-1; i > 0; i-- {\n\
    \        if brackets_array[i] == brackets_map[brackets_array[i-1]] {\n       \
    \     brackets_array = append(brackets_array[:i-1], brackets_array[i+1:]...)\n\
    \        }\n    }\n    return len(brackets_array) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x516640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x516640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpt7z6t28__test.go:27\n\
    command-line-arguments_test.TestCorrect_Bracketing(0xc0000da1a0?)\n\t/tmp/tmpt7z6t28__test.go:43\
    \ +0x3667\ntesting.tRunner(0xc0000da1a0, 0x52bfc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n\n\
    \    open := 0\n    for _, bracket := range brackets {\n        if bracket ==\
    \ '<' {\n            open++\n        } else {\n            open--\n        }\n\
    \        if open < 0 {\n            return false\n        }\n    }\n    return\
    \ open == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate :=\
    \ correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"), expected:\
    \ true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<><>><>\"), expected: true },\n     { actual: candidate(\"\
    <><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual: candidate(\"\
    <<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<\"), expected: false },\n     { actual:\
    \ candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\">\"), expected:\
    \ false },\n     { actual: candidate(\"<<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual: candidate(\"\
    <><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            stack = append(stack, char)\n        }\
    \ else {\n            if len(stack) == 0 {\n                return false\n   \
    \         }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count += 1\n        } else if c == '>' {\n         \
    \   count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // type your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp9zgucltj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp9zgucltj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp9zgucltj_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp9zgucltj_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    s := make([]rune, len(brackets))\n    sp := 0\n    for _,\
    \ r := range brackets {\n        if r == '<' {\n            s[sp] = r\n      \
    \      sp += 1\n        } else if r == '>' {\n            if sp <= 0 {\n     \
    \           return false\n            }\n            if s[sp-1] != '<' {\n   \
    \             return false\n            }\n            sp -= 1\n        }\n  \
    \  }\n    return sp == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n \
    \ candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, c := range brackets {\n      \
    \  if c == '<' {\n            count += 1\n        } else {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        switch\
    \ b {\n        case '<':\n            count++\n        case '>':\n           \
    \ count--\n        }\n        if count < 0 {\n            return false\n     \
    \   }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, ch := range brackets {\n  \
    \      if ch == '<' {\n            stack = append(stack, '<')\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO: implement me!\n    open, close := 0, 0\n    for\
    \ _, bracket := range brackets {\n        if string(bracket) == \"<\" {\n    \
    \        open++\n        } else {\n            close++\n        }\n        if\
    \ close > open {\n            return false\n        }\n    }\n    return open\
    \ == close\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if brackets[0] == '>' {\n        return false\n    }\n    var stack []byte\n\
    \    for _, b := range brackets {\n        if b == '<' {\n            stack =\
    \ append(stack, '<')\n        } else {\n            if len(stack) == 0 {\n   \
    \             return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    check := 0\n    for _, char := range brackets {\n      \
    \  if check < 0 {\n            return false\n        }\n        if char == '<'\
    \ {\n            check += 1\n        } else {\n            check -= 1\n      \
    \  }\n    }\n    return check == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    i := 0\n    for _, b := range brackets {\n        if b ==\
    \ '<' {\n            i++\n        } else {\n            i--\n        }\n     \
    \   if i < 0 {\n            return false\n        }\n    }\n    return i == 0\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    c := 0\n    for _, v := range brackets {\n        if v ==\
    \ '<' {\n            c += 1\n        } else {\n            c -= 1\n        }\n\
    \        if c < 0 {\n            return false\n        }\n    }\n    return c\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpr_srs34k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpr_srs34k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    left := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            left++\n        } else {\n            left--\n     \
    \   }\n        if left < 0 {\n            return false\n        }\n    }\n   \
    \ return left == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) % 2 != 0 {\n        return false\n    }\n\
    \    i := 0\n    for _,v := range brackets {\n        if v == '<' {\n        \
    \    i++\n        } else {\n            i--\n        }\n        if i < 0 {\n \
    \           return false\n        }\n    }\n    return i == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074908
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var counter int\n    for _, c := range brackets {\n    \
    \    if c == '<' {\n            counter += 1\n        } else {\n            counter\
    \ -= 1\n        }\n        if counter < 0 {\n            return false\n      \
    \  }\n    }\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074908
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        switch\
    \ b {\n        case '<':\n            count++\n        case '>':\n           \
    \ count--\n        }\n        if count < 0 {\n            return false\n     \
    \   }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074903
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    bracket_numbers := 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            bracket_numbers++\n        } else\
    \ {\n            bracket_numbers--\n        }\n        if bracket_numbers < 0\
    \ {\n            return false\n        }\n    }\n    return bracket_numbers ==\
    \ 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074909
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    balance := 0\n    for _, c := range brackets {\n       \
    \ if c == '<' {\n            balance += 1\n        } else if c == '>' {\n    \
    \        balance -= 1\n        } else {\n            panic(\"invalid character\"\
    )\n        }\n        if balance < 0 {\n            return false\n        }\n\
    \    }\n    return balance == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count += 1\n        } else {\n            count -= 1\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074910
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var s stack\n    s.init()\n    for _, b := range brackets\
    \ {\n        switch b {\n        case '<':\n            s.push(int(b))\n     \
    \   case '>':\n            if s.empty() {\n                return false\n    \
    \        }\n            s.pop()\n        }\n    }\n    return s.empty()\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcqwxi44_test.go:19:11: undefined: stack

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i]\
    \ == '<' {\n            for j := i + 1; j < len(brackets); j++ {\n           \
    \     if brackets[j] == '>' {\n                    // remove the first '<' and\
    \ the first '>'\n                    brackets = brackets[:i] + brackets[i+1:]\n\
    \                    brackets = brackets[:j-1] + brackets[j:]\n              \
    \      return correct_bracketing(brackets)\n                }\n            }\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpr5fdd_k1_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__8 (0.00s)\n        tmpr5fdd_k1_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__11\
    \ (0.00s)\n        tmpr5fdd_k1_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            if stack[len(stack)-1] != '<' {\n                return false\n \
    \           }\n            stack = stack[:len(stack)-1]\n        }\n    }\n  \
    \  return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074910
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var counter int = 0\n\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            counter++\n        } else if c == '>' {\n\
    \            counter--\n        }\n\n        if counter < 0 {\n            return\
    \ false\n        }\n    }\n\n    return counter == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074910
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    depth := 0\n    for _, b := range brackets {\n        switch\
    \ b {\n        case '<':\n            depth++\n        case '>':\n           \
    \ depth--\n        }\n        if depth < 0 {\n            return false\n     \
    \   }\n    }\n    return depth == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, bracket := range brackets {\n   \
    \     if string(bracket) == \"<\" {\n            count += 1\n        } else {\n\
    \            count -= 1\n        }\n        if count < 0 {\n            return\
    \ false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmplfvsgry8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmplfvsgry8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmplfvsgry8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmplfvsgry8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    open := 0\n    for _, bracket := range brackets {\n    \
    \    if bracket == '<' {\n            open += 1\n        } else {\n          \
    \  open -= 1\n        }\n        if open < 0 {\n            return false\n   \
    \     }\n    }\n    return open == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // the stack for brackets\n    stack := make([]byte, 0)\n\
    \    for i := 0; i < len(brackets); i++ {\n        current := brackets[i]\n  \
    \      if current == '<' {\n            stack = append(stack, current)\n     \
    \   } else {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            last := stack[len(stack) - 1]\n            if last\
    \ == '<' {\n                stack = stack[:len(stack) - 1]\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var sum int\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            sum += 1\n        } else {\n            sum -= 1\n \
    \       }\n        if sum < 0 {\n            return false\n        }\n    }\n\
    \    return sum == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count += 1\n        } else if b == '>' {\n         \
    \   count -= 1\n        } else {\n            panic(\"Unexpected character.\"\
    )\n        }\n        if count < 0 {\n            return false\n        }\n  \
    \  }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // ...\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpswmwtqic_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpswmwtqic_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpswmwtqic_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpswmwtqic_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var n_left int\n    for _, x := range brackets {\n     \
    \   if x == '<' {\n            n_left++\n        } else {\n            n_left--\n\
    \        }\n        if n_left < 0 {\n            return false\n        }\n   \
    \ }\n    return n_left == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var bracket_count int = 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            bracket_count++\n        } else\
    \ if bracket == '>' {\n            bracket_count--\n        } else {\n       \
    \     panic(\"Unknown bracket!\")\n        }\n        if bracket_count < 0 {\n\
    \            return false\n        }\n    }\n    return bracket_count == 0\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var leftCount, rightCount int = 0, 0\n    for _, c := range\
    \ brackets {\n        if c == '<' {\n            leftCount++\n        } else {\n\
    \            rightCount++\n        }\n        if rightCount > leftCount {\n  \
    \          return false\n        }\n    }\n    return leftCount == rightCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // insert your code here\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpj_hmb224_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpj_hmb224_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpj_hmb224_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpj_hmb224_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []rune{}\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    stack := []byte{}\n    for _, c := range brackets {\n  \
    \      if c == '<' {\n            stack = append(stack, byte(c))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int\n    for _, char := range brackets {\n   \
    \     if char == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    var ch byte\n    for i:=0; i<len(brackets);\
    \ i++ {\n        ch = brackets[i]\n        if ch == '<' {\n            count++\n\
    \        } else if ch == '>' {\n            count--\n        }\n        if count\
    \ < 0 {\n            return false\n        }\n    }\n    return count == 0\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    bracket_level := 0\n    for _, v := range brackets {\n \
    \       switch v {\n        case '<':\n            bracket_level++\n        case\
    \ '>':\n            bracket_level--\n        }\n        if bracket_level < 0 {\n\
    \            return false\n        }\n    }\n    return bracket_level == 0\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var amount int\n    for _, bracket := range brackets {\n\
    \        if bracket == '<' {\n            amount++\n        } else {\n       \
    \     amount--\n        }\n        if amount < 0 {\n            return false\n\
    \        }\n    }\n    return amount == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            stack = append(stack, char)\n        }\
    \ else {\n            if len(stack) == 0 {\n                return false\n   \
    \         }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    open, closed := 0, 0\n    for _, b := range brackets {\n\
    \        if b == '<' {\n            open++\n        } else {\n            closed++\n\
    \        }\n        if closed > open {\n            return false\n        }\n\
    \    }\n    return closed == open\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    s := make([]int, len(brackets))\n    for i, c := range brackets\
    \ {\n        s[i] = int(c)\n    }\n    for len(s) > 0 {\n        for i := 0; i\
    \ < len(s) - 1; i++ {\n            if s[i] + s[i + 1] == 162 {\n             \
    \   s = append(s[:i], s[i + 2:]...)\n                break\n            }\n  \
    \      }\n        if len(s) == len(brackets) {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp96cmmkwz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp96cmmkwz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp96cmmkwz_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp96cmmkwz_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if (brackets == \"<\") {\n        return false\n    }\n\
    \    if (brackets == \"\") {\n        return true\n    }\n    fmt.Println(brackets)\n\
    \    // recursively remove \"<>\" pairs\n    if (brackets[0] == '<' && brackets[1]\
    \ == '>') {\n        return correct_bracketing(brackets[2:])\n    }\n    // recursively\
    \ remove the first \"<\"\n    if (brackets[0] == '<') {\n        return correct_bracketing(brackets[1:])\n\
    \    }\n    // recursively remove the last \">\"\n    if (brackets[len(brackets)-1]\
    \ == '>') {\n        return correct_bracketing(brackets[:len(brackets)-1])\n \
    \   }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "<>\n<<><>>\n<><>>\n<>>\n>\n<><><<><>><>\n<><<><>><>\n<<><>><>\n<><>><>\n\
    <>><>\n><>\n><\n<><><<<><><>><>><<><><<>>>\n<><<<><><>><>><<><><<>>>\n<<<><><>><>><<><><<>>>\n\
    <<><><>><>><<><><<>>>\n<><><>><>><<><><<>>>\n<><>><>><<><><<>>>\n<>><>><<><><<>>>\n\
    ><>><<><><<>>>\n><>><<><><<>>\n><>><<><><<>\n><>><<><><<\n<<<><>>>>\n<<><>>>>\n\
    <><>>>>\n<>>>>\n>>>\n>>\n>\n><<>\n><<\n<<<<\n<<<\n<<\n>\n<<>\n<>\n<><><<><>><>><<>\n\
    <><<><>><>><<>\n<<><>><>><<>\n<><>><>><<>\n<>><>><<>\n><>><<>\n><>><<\n<><><<><>><>>><>\n\
    <><<><>><>>><>\n<<><>><>>><>\n<><>><>>><>\n<>><>>><>\n><>>><>\n><>>><\n--- FAIL:\
    \ TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpl5siwe1x_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpl5siwe1x_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpl5siwe1x_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__8 (0.00s)\n        tmpl5siwe1x_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__9\
    \ (0.00s)\n        tmpl5siwe1x_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    if len(brackets) == 0 {\n        return true\n    }\n  \
    \  if len(brackets) == 1 {\n        return false\n    }\n    var pairs int\n \
    \   for _, b := range brackets {\n        if b == '<' {\n            pairs++\n\
    \        } else {\n            pairs--\n        }\n        if pairs < 0 {\n  \
    \          return false\n        }\n    }\n    return pairs == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    bracketStack := make([]rune, 0)\n    for _, bracket := range\
    \ brackets {\n        if bracket == '<' {\n            bracketStack = append(bracketStack,\
    \ bracket)\n        } else if bracket == '>' {\n            if len(bracketStack)\
    \ == 0 {\n                return false\n            }\n            bracketStack\
    \ = bracketStack[:len(bracketStack)-1]\n        }\n    }\n    return len(bracketStack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpo7s79l3h_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpo7s79l3h_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, v := range brackets {\n        if\
    \ v == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    bracket_count := 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            bracket_count += 1\n        } else\
    \ if bracket == '>' {\n            bracket_count -= 1\n        } else {\n    \
    \        return false\n        }\n        if bracket_count < 0 {\n           \
    \ return false\n        }\n    }\n    return bracket_count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    num := 0\n    for _, b := range brackets {\n        if b\
    \ == '<' {\n            num++\n        } else {\n            num--\n        }\n\
    \        if num < 0 {\n            return false\n        }\n    }\n    return\
    \ num == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var cnt int\n    for _, c := range brackets {\n        if\
    \ c == '<' {\n            cnt++\n        } else {\n            cnt--\n       \
    \ }\n        if cnt < 0 {\n            return false\n        }\n    }\n    return\
    \ cnt == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []byte\n    for _, ch := range brackets {\n  \
    \      if ch == '<' {\n            stack = append(stack, byte(ch))\n        }\
    \ else {\n            if len(stack) == 0 {\n                return false\n   \
    \         }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return\
    \ len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, v := range brackets {\n   \
    \     if v == '<' {\n            stack = append(stack, v)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, c := range brackets {\n   \
    \     if c == '<' {\n            stack = append(stack, c)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, c := range brackets {\n  \
    \      switch c {\n        case '<':\n            count++\n        case '>':\n\
    \            count--\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count++\n        } else {\n            count--\n   \
    \     }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    //\n    // YOUR CODE HERE\n    //\n    count := 0\n    for\
    \ _, bracket := range brackets {\n        if bracket == '<' {\n            count++\n\
    \        } else {\n            count--\n        }\n        if count < 0 {\n  \
    \          return false\n        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    min := 0\n    for _, char := range brackets {\n        if\
    \ string(char) == \"<\" {\n            min += 1\n        } else {\n          \
    \  min -= 1\n        }\n        if min < 0 {\n            return false\n     \
    \   }\n    }\n    return min == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    count := 0\n    for _, b := range brackets {\n        if\
    \ b == '<' {\n            count += 1\n        } else if b == '>' {\n         \
    \   count -= 1\n        } else {\n            panic(\"Invalid bracket character\
    \ \" + string(b))\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmplfvsgry8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmplfvsgry8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmplfvsgry8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmplfvsgry8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // TODO\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpfg169jib_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpfg169jib_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openCount int = 0\n\n    for _, br := range brackets\
    \ {\n        if br == '<' {\n            openCount++\n        } else if br ==\
    \ '>' {\n            openCount--\n        }\n\n        if openCount < 0 {\n  \
    \          return false\n        }\n    }\n\n    return openCount == 0\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmphqqmjqhl_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmphqqmjqhl_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, char := range brackets {\n\
    \        if char == '<' {\n            count += 1\n        } else if char == '>'\
    \ {\n            count -= 1\n        } else {\n            return false\n    \
    \    }\n        if count < 0 {\n            return false\n        }\n    }\n \
    \   return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, b := range brackets {\n  \
    \      if b == '<' {\n            count++\n        } else {\n            count--\n\
    \        }\n        if count < 0 {\n            return false\n        }\n    }\n\
    \    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    // use a counter. Increment with each \"<\" encountered.\n\
    \    // Decrement with each \">\" encountered.\n    // The counter should never\
    \ go negative. If it does, return false.\n    var stack []string\n    for _, char\
    \ := range brackets {\n        switch string(char) {\n        case \"<\":\n  \
    \          stack = append(stack, \"<\")\n        case \">\":\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            if len(stack)\
    \ > 0 && stack[len(stack)-1] == \"<\" {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    if len(stack) > 0 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var stack []rune\n    for _, b := range brackets {\n   \
    \     if b == '<' {\n            stack = append(stack, b)\n        } else {\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            last := stack[len(stack)-1]\n            if last != '<' {\n     \
    \           return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    bracket_stack := \"\"\n    for _, s := range brackets {\n\
    \        if s == '<' {\n            bracket_stack += string(s)\n        } else\
    \ if s == '>' {\n            if len(bracket_stack) == 0 {\n                return\
    \ false\n            }\n            bracket_stack = bracket_stack[0:len(bracket_stack)-1]\n\
    \        }\n    }\n    return len(bracket_stack) == 0\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074913
- exit_code: 0
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var count int = 0\n    for _, bracket := range brackets\
    \ {\n        if bracket == '<' {\n            count += 1\n        } else if bracket\
    \ == '>' {\n            count -= 1\n        } else {\n            panic(\"wrong\
    \ bracket string\")\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074913
