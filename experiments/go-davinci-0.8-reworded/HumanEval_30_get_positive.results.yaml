language: go_test.go
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Implement me!\n    return []int{}\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp8wbx8t0d_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp8wbx8t0d_test.go:34:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, e := range l {\n     \
    \   if e > 0 {\n            res = append(res, e)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, n := range l {\n        if n >\
    \ 0 {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, number := range l {\n     \
    \   if number > 0 {\n            result = append(result, number)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n > 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := []int{}\n    for _, n := range l {\n      \
    \  if n > 0 {\n            positives = append(positives, n)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, n := range l {\n        if n >\
    \ 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, i := range l {\n        if i >\
    \ 0 {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Implementation here.\n    return nil\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpxgslu4je_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpxgslu4je_test.go:34:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // First, find the number of positive numbers.\n    // This\
    \ way, we will know the size of the list for the result.\n    n := 0\n    for\
    \ _, v := range l {\n        if v > 0 {\n            n += 1\n        }\n    }\n\
    \n    res := make([]int, n)\n    n = 0\n    for _, v := range l {\n        if\
    \ v > 0 {\n            res[n] = v\n            n += 1\n        }\n    }\n\n  \
    \  return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, x := range l {\n        if x >\
    \ 0 {\n            res = append(res, x)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073200
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, e := range l {\n        if\
    \ e > 0 {\n            result = append(result, e)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive_list []int\n    for _, v := range l {\n   \
    \     if v > 0 {\n            positive_list = append(positive_list, v)\n     \
    \   }\n    }\n    return positive_list\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, i := range l {\n        if i > 0\
    \ {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, el := range l {\n        if el\
    \ > 0 {\n            res = append(res, el)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l = l[0:0]\n    for _, item := range l {\n        if item\
    \ > 0 {\n            l = append(l, item)\n        }\n    }\n    return l\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpl1t9w1i6_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpl1t9w1i6_test.go:39:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            ret = append(ret, i)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, val := range l {\n   \
    \     if val > 0 {\n            res = append(res, val)\n        }\n    }\n   \
    \ return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n > 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for i, n := range l {\n        if n <= 0 {\n           \
    \ l = append(l[:i], l[i+1:]...)\n        }\n    }\n    return l\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [10:8] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [10:8]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmpxsjw67s9_test.go:16\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmpxsjw67s9_test.go:30\
    \ +0x79b\ntesting.tRunner(0xc000103380, 0x529160)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, i := range l {\n        if i\
    \ > 0 {\n            ret = append(ret, i)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            out = append(out, i)\n        }\n    }\n    return out\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, n := range l {\n       \
    \ if n > 0 {\n            positives = append(positives, n)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n\n    for _, v := range l {\n        if v\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, i := range l {\n       \
    \ if i > 0 {\n            positives = append(positives, i)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // fmt.Println(l)\n    var pos []int\n    for _, v := range\
    \ l {\n        if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n\
    \    return pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, i := range l {\n     \
    \   if i > 0 {\n            res = append(res, i)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, e := range l {\n     \
    \   if e > 0 {\n            res = append(res, e)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            pos = append(pos, v)\n        }\n    }\n    return pos\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos_l []int\n    for _, num := range l {\n        if\
    \ num > 0 {\n            pos_l = append(pos_l, num)\n        }\n    }\n    return\
    \ pos_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073200
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ans := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            ans = append(ans, v)\n        }\n    }\n    return ans\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var sl []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            sl = append(sl, i)\n        }\n    }\n    return sl\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, x := range l {\n        if x\
    \ > 0 {\n            res = append(res, x)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive_l []int\n    for _, i := range l {\n      \
    \  if i > 0 {\n            positive_l = append(positive_l, i)\n        }\n   \
    \ }\n    return positive_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ll []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ll = append(ll, v)\n        }\n    }\n    return ll\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    new_l := []int{}\n    for _, item := range l {\n       \
    \ if item > 0 {\n            new_l = append(new_l, item)\n        }\n    }\n \
    \   return new_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // TODO\n\n    return []int{}\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptx3va7rp_test.go:35: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptx3va7rp_test.go:35:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, elem := range l {\n  \
    \      if elem > 0 {\n            res = append(res, elem)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, i := range l {\n     \
    \   if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, n := range l {\n     \
    \   if n > 0 {\n            res = append(res, n)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, x := range l {\n        if x >\
    \ 0 {\n            res = append(res, x)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var l2 []int\n    for _, value := range l {\n        if\
    \ value > 0 {\n            l2 = append(l2, value)\n        }\n    }\n    return\
    \ l2\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _,v := range l {\n      \
    \  if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, el := range l {\n        if\
    \ el > 0 {\n            result = append(result, el)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, item := range l {\n       \
    \ if item > 0 {\n            result = append(result, item)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            positive = append(positive, i)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, i := range l {\n        if i > 0\
    \ {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return nil\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp_kw631ol_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp_kw631ol_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos_l []int\n    for _, val := range l {\n        if\
    \ val > 0 {\n            pos_l = append(pos_l, val)\n        }\n    }\n    return\
    \ pos_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073250
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, item := range l {\n      \
    \  if item > 0 {\n            result = append(result, item)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073250
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, val := range l {\n     \
    \   if val > 0 {\n            positives = append(positives, val)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073250
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, e := range l {\n        if e > 0\
    \ {\n            r = append(r, e)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive_list []int\n    for _, value := range l {\n\
    \        if value > 0 {\n            positive_list = append(positive_list, value)\n\
    \        }\n    }\n    return positive_list\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            p = append(p, v)\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, e := range l {\n        if e\
    \ > 0 {\n            ret = append(ret, e)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) <= 0 {\n        return []int{}\n    }\n\n    res\
    \ := []int{}\n    for _, elem := range l {\n        if elem > 0 {\n          \
    \  res = append(res, elem)\n        }\n    }\n\n    return res\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Write your code here!\n    var r []int\n    for _, n\
    \ := range l {\n        if n > 0 {\n            r = append(r, n)\n        }\n\
    \    }\n    return r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    for _, val := range l {\n        if val\
    \ > 0 {\n            out = append(out, val)\n        }\n    }\n    return out\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, item := range l {\n       \
    \ if item > 0 {\n            result = append(result, item)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptqn2atrb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptqn2atrb_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, v := range l {\n        if v\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return_list := []int{}\n    for _, i := range l {\n    \
    \    if i > 0 {\n            return_list = append(return_list, i)\n        }\n\
    \    }\n    return return_list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, value := range l {\n      \
    \  if value > 0 {\n            result = append(result, value)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Init a slice\n    positiveSlice := make([]int, 0)\n \
    \   for _, num := range l {\n        if num > 0 {\n            positiveSlice =\
    \ append(positiveSlice, num)\n        }\n    }\n    return positiveSlice\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, x := range l {\n        if\
    \ x > 0 {\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    list := []int{}\n    for _, num := range l {\n        if\
    \ num > 0 {\n            list = append(list, num)\n        }\n    }\n    return\
    \ list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := []int{}\n    for _, n := range l {\n        if n >\
    \ 0 {\n            p = append(p, n)\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n\n    for _, e := range l {\n        if e\
    \ > 0 {\n            res = append(res, e)\n        }\n    }\n\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, n := range l {\n     \
    \   if n > 0 {\n            res = append(res, n)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptqn2atrb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptqn2atrb_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, value := range l {\n \
    \       if value > 0 {\n            res = append(res, value)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := make([]int, 0)\n    for _, e := range l {\n     \
    \   if e > 0 {\n            res = append(res, e)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var new_list []int\n    for _, e := range l {\n        if\
    \ e > 0 {\n            new_list = append(new_list, e)\n        }\n    }\n    return\
    \ new_list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _,v := range l {\n        if\
    \ v > 0 {\n            positives = append(positives, v)\n        }\n    }\n  \
    \  return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // panic(\"Not implemented\") // TODO: Implement\n    positive\
    \ := []int{}\n    for _, v := range l {\n        if v > 0 {\n            positive\
    \ = append(positive, v)\n        }\n    }\n    return positive\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, el := range l {\n        if\
    \ el > 0 {\n            result = append(result, el)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, el := range l {\n        if el\
    \ > 0 {\n            r = append(r, el)\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var new_l []int\n    for _, number := range l {\n      \
    \  if number > 0 {\n            new_l = append(new_l, number)\n        }\n   \
    \ }\n    return new_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n    result :=\
    \ make([]int, 0)\n    for _, v := range l {\n        if v > 0 {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos_l []int\n    for _, num := range l {\n        if\
    \ num > 0 {\n            pos_l = append(pos_l, num)\n        }\n    }\n    return\
    \ pos_l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, v := range l {\n       \
    \ if v > 0 {\n            positives = append(positives, v)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073200
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, n := range l {\n        if n > 0\
    \ {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            pos = append(pos, v)\n        }\n    }\n    return pos\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return_list := []int{}\n    for _, elem := range l {\n \
    \       if elem > 0 {\n            return_list = append(return_list, elem)\n \
    \       }\n    }\n    return return_list\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073200
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Create a slice of int with the same size as the input\
    \ parameter\n    r := make([]int, len(l))\n    // Filter a list of positive numbers\n\
    \    for _, v := range l {\n        if v > 0 {\n            r = append(r, v)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpjb2p5ul8_test.go:41: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpjb2p5ul8_test.go:41:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpjb2p5ul8_test.go:41:\
    \ expected '[]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073252
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n\n    for _, item := range l {\n     \
    \   if item > 0 {\n            result = append(result, item)\n        }\n    }\n\
    \n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, i := range l {\n        if i > 0\
    \ {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, x := range l {\n        if\
    \ x > 0 {\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return nil\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp_kw631ol_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp_kw631ol_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // write your solution here\n    res := make([]int, 0)\n\
    \    for _, v := range l {\n        if v > 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pos_l []int\n    for _, n := range l {\n        if n\
    \ > 0 {\n            pos_l = append(pos_l, n)\n        }\n    }\n    return pos_l\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var pl []int\n    for _, n := range l {\n        if n >\
    \ 0 {\n            pl = append(pl, n)\n        }\n    }\n    return pl\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var new_list []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            new_list = append(new_list, v)\n        }\n    }\n    return\
    \ new_list\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    answer := []int{}\n    for _, elem := range l {\n      \
    \  if elem > 0 {\n            answer = append(answer, elem)\n        }\n    }\n\
    \    return answer\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, n := range l {\n        if n >\
    \ 0 {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var (\n        i int\n        res []int\n    )\n    for\
    \ i = 0; i < len(l); i++ {\n        if l[i] > 0 {\n            res = append(res,\
    \ l[i])\n        }\n    }\n    return res\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n\n    for _, i := range l {\n        if i\
    \ > 0 {\n            res = append(res, i)\n        }\n    }\n\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive_list []int\n    for _, i := range l {\n   \
    \     if i > 0 {\n            positive_list = append(positive_list, i)\n     \
    \   }\n    }\n    return positive_list\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, x := range l {\n        if\
    \ x > 0 {\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := []int{}\n    for _, val := range l {\n       \
    \ if val > 0 {\n            result = append(result, val)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, n := range l {\n        if n >\
    \ 0 {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptqn2atrb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptqn2atrb_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    newList := []int{}\n    for _, value := range l {\n    \
    \    if value > 0 {\n            newList = append(newList, value)\n        }\n\
    \    }\n    return newList\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n    var result\
    \ []int\n    for _, v := range l {\n        if v > 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positive := []int{}\n    for _, i := range l {\n       \
    \ if i > 0 {\n            positive = append(positive, i)\n        }\n    }\n \
    \   return positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            positive = append(positive, i)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, v := range l {\n       \
    \ if v > 0 {\n            positives = append(positives, v)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    ret := []int{}\n    for _, x := range l {\n        if x\
    \ > 0 {\n            ret = append(ret, x)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Get only positive numbers from list l.\n    if l == nil\
    \ {\n        return nil\n    }\n    res := make([]int, 0)\n    for _, v := range\
    \ l {\n        if v > 0 {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var slice []int\n    for _, value := range l {\n       \
    \ if value > 0 {\n            slice = append(slice, value)\n        }\n    }\n\
    \    return slice\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n    s := make([]int,\
    \ 0)\n    for _, v := range l {\n        if v > 0 {\n            s = append(s,\
    \ v)\n        }\n    }\n    return s\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var t []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            t = append(t, v)\n        }\n    }\n    return t\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073200
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptqn2atrb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptqn2atrb_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return l\n}\n\nfunc TestGet_Positive(t *testing.T) {\n \
    \ candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpmgpj3asb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=-1) %!s(int=-2) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpmgpj3asb_test.go:33: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n  \
    \  --- FAIL: TestGet_Positive/test_num__2 (0.00s)\n        tmpmgpj3asb_test.go:33:\
    \ expected '[]', got '[%!s(int=-1) %!s(int=-2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ans []int\n    for _, item := range l {\n        if\
    \ item > 0 {\n            ans = append(ans, item)\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073253
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _,v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    out := []int{}\n    for _, el := range l {\n        if el\
    \ > 0 {\n            out = append(out, el)\n        }\n    }\n    return out\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var newSlice []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            newSlice = append(newSlice, i)\n        }\n    }\n    return\
    \ newSlice\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var out []int\n    for _, i := range l {\n        if i >\
    \ 0 {\n            out = append(out, i)\n        }\n    }\n    return out\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    res := []int{}\n    for _, x := range l {\n        if x\
    \ > 0 {\n            res = append(res, x)\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, v := range l {\n       \
    \ if v > 0 {\n            positives = append(positives, v)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, i := range l {\n        if i > 0\
    \ {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073246
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var p []int\n    for _, x := range l {\n        if x > 0\
    \ {\n            p = append(p, x)\n        }\n    }\n    return p\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    l2 := []int{}\n    for _, val := range l {\n        if val\
    \ > 0 {\n            l2 = append(l2, val)\n        }\n    }\n    return l2\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // TODO: implement\n    return nil\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp8dmfixkt_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp8dmfixkt_test.go:34:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073254
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // Write your code here...\n    return nil\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpa_kvgdf6_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpa_kvgdf6_test.go:34:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\n    // Filter\
    \ the list and return only positive numbers.\n    var ret []int\n    for _, v\
    \ := range l {\n        if v > 0 {\n            ret = append(ret, v)\n       \
    \ }\n    }\n\n    return ret\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    p := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            p = append(p, v)\n        }\n    }\n    return p\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n\n    for _, v := range l {\n        if v\
    \ > 0 {\n            ret = append(ret, v)\n        }\n    }\n\n    return ret\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n > 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    for idx, item := range l {\n        if item < 0 {\n    \
    \        l = append(l[:idx], l[idx+1:]...)\n        }\n    }\n    return l\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [11:9] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [11:9]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_positive(...)\n\t/tmp/tmpuxs17zhw_test.go:16\n\
    command-line-arguments_test.TestGet_Positive(0x0?)\n\t/tmp/tmpuxs17zhw_test.go:30\
    \ +0x79b\ntesting.tRunner(0xc000103520, 0x529160)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    out := []int{}\n    for _, x := range l {\n        if x\
    \ > 0 {\n            out = append(out, x)\n        }\n    }\n    return out\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073254
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, x := range l {\n        if\
    \ x > 0 {\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := []int{}\n    for _, v := range l {\n        if v >\
    \ 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n\
    \     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected:\
    \ []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}),\
    \ expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073249
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    // fill it in\n    return []int{}\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpn376m2n9_test.go:34: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmpn376m2n9_test.go:34:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073254
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return []int{}\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmptqn2atrb_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmptqn2atrb_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073251
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
