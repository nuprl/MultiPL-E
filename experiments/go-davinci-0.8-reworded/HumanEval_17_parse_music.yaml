name: HumanEval_17_parse_music
language: go_test.go
prompt: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Input to this function is a string representing musical notes in a special ASCII\
  \ format.\n// Your task is to parse this string and return list of integers corresponding\
  \ to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole\
  \ note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater\
  \ note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n\
  // []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string)\
  \ []int {\n"
tests: "func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
  \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
  .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o|\
  \ .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
  o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var duration []int\n    if len(music_string) == 0 {\n        return\
    \ duration\n    }\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == 'o' {\n            duration = append(duration, 4)\n        } else if music_string[i]\
    \ == '.' {\n            duration = append(duration, 1)\n        }\n        if\
    \ i + 1 < len(music_string) && music_string[i+1] == '|' {\n            duration[len(duration)-1]\
    \ /= 2\n            i++\n        }\n    }\n    return duration\n}\n", "    beats\
    \ := make([]int, 0)\n    state := 0\n    current_beat := 1\n    for _, char :=\
    \ range music_string {\n        if char == 'o' {\n            if state == 0 {\n\
    \                current_beat = 4\n            } else {\n                beats\
    \ = append(beats, current_beat)\n                current_beat = 4\n          \
    \  }\n            state = 0\n        } else if char == '.' {\n            if state\
    \ == 0 {\n                current_beat = 1\n            } else {\n           \
    \     beats = append(beats, current_beat)\n                current_beat = 1\n\
    \            }\n            state = 0\n        } else if char == '|' {\n     \
    \       state = 1\n        }\n    }\n    if current_beat != 0 {\n        beats\
    \ = append(beats, current_beat)\n    }\n    return beats\n}\n", "    return []int{}\n\
    }\n", "    var parsed_music []int\n    var music_chars []rune\n    var beats int\n\
    \    var next_rune_is_beat bool\n    var last_rune rune\n\n    music_chars = []rune(music_string)\n\
    \    beats = 0\n    next_rune_is_beat = false\n    last_rune = ' '\n\n    for\
    \ _, char := range music_chars {\n        if char == 'o' {\n            if last_rune\
    \ == ' ' {\n                beats = 4\n            } else {\n                beats\
    \ += 4\n            }\n            next_rune_is_beat = true\n        } else if\
    \ char == '|' {\n            if last_rune == 'o' {\n                beats = 2\n\
    \            } else {\n                beats += 2\n            }\n           \
    \ next_rune_is_beat = true\n        } else if char == '.' {\n            beats\
    \ += 1\n            next_rune_is_beat = true\n        } else if char == ' ' {\n\
    \            if next_rune_is_beat {\n                parsed_music = append(parsed_music,\
    \ beats)\n                beats = 0\n                next_rune_is_beat = false\n\
    \            }\n        }\n        last_rune = char\n    }\n\n    return parsed_music\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    var result []int\n  \
    \  for _, ch := range music_string {\n        switch ch {\n        case 'o':\n\
    \            result = append(result, 4)\n        case '|':\n            result[len(result)-1]\
    \ = result[len(result)-1] / 2\n        }\n    }\n    return result\n}\n", "  \
    \  res := make([]int, 0)\n    for i := 0; i < len(music_string); i++ {\n     \
    \   if music_string[i] == 'o' {\n            if music_string[i+1] == ' ' {\n \
    \               res = append(res, 4)\n            } else {\n                res\
    \ = append(res, 2)\n                i++\n            }\n        } else {\n   \
    \         res = append(res, 1)\n            i++\n        }\n    }\n    return\
    \ res\n}\n", "    var res []int\n    return res\n}\n", "    return []int{}\n}\n",
  "    beats := make([]int, 0)\n    for _, r := range music_string {\n        switch\
    \ r {\n        case 'o':\n            beats = append(beats, 4)\n        case '.':\n\
    \            beats = append(beats, 1)\n        }\n    }\n    return beats\n}\n",
  "    var result []int\n    var beat int\n    for _, ch := range music_string {\n\
    \        switch ch {\n        case 'o':\n            beat = 4\n        case '.':\n\
    \            beat = 1\n        case '|':\n            result = append(result,\
    \ beat)\n            beat = 0\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    r := []rune(music_string)\n    for i, v := range r {\n\
    \        if v == 'o' {\n            result = append(result, 4)\n        }\n  \
    \      if v == '|' {\n            result[i-1] = result[i-1] / 2\n        }\n \
    \   }\n    return result\n}\n", "    var res []int\n    return res\n}\n", "  \
    \  song := make([]int, len(music_string))\n    return song\n}\n", "    // Your\
    \ code goes here.\n    return nil\n}\n", "    var res []int\n    array := make([]string,0)\n\
    \    for _, v := range music_string {\n        array = append(array, string(v))\n\
    \    }\n    n := 0\n    m := 0\n    for _, v := range array {\n        m++\n \
    \       if v == \" \" {\n            n = n + 1\n            res = append(res,\
    \ m)\n            m = 0\n        }\n    }\n    return res\n}\n", "    var beats\
    \ []int\n    beat := 0\n    for _, char := range music_string {\n        switch\
    \ char {\n        case 'o':\n            beat = 4\n        case '|':\n       \
    \     beat /= 2\n        case '.':\n            continue\n        case ' ':\n\
    \            beats = append(beats, beat)\n            beat = 0\n        }\n  \
    \  }\n    beats = append(beats, beat)\n    return beats\n}\n", "    var result\
    \ []int\n    var current_index int = 0\n    var current_char string\n    var prev_char\
    \ string\n    var current_value int\n    var prev_value int\n\n    // convert\
    \ string into a slice of ints\n    for _, char := range music_string {\n     \
    \   current_char = string(char)\n        if current_char == \"|\" && prev_char\
    \ == \"o\" {\n            result = append(result, 4)\n            prev_value =\
    \ 4\n        } else if current_char == \"|\" && prev_char == \".\" {\n       \
    \     result = append(result, 1)\n            prev_value = 1\n        } else if\
    \ current_char == \" \" {\n            result = append(result, prev_value)\n \
    \       } else if current_char == \"o\" {\n            prev_value = 4\n      \
    \  } else if current_char == \".\" {\n            prev_value = 1\n        }\n\
    \        prev_char = current_char\n    }\n    result = append(result, prev_value)\n\
    \    return result\n}\n", "    var notes = make([]int, 0)\n    note_map := map[string]int{\"\
    o\": 4, \"o|\": 2, \".|\": 1}\n    for _, v := range music_string {\n        note\
    \ := string(v)\n        if _, ok := note_map[note]; ok {\n            notes =\
    \ append(notes, note_map[note])\n        }\n    }\n    return notes\n}\n", " \
    \   // TODO: Implement parsing algorithm.\n    return nil\n}\n", "    var res\
    \ []int\n    for i := 0; i < len(music_string); i += 2 {\n        switch music_string[i:i+2]\
    \ {\n        case \"o \":\n            res = append(res, 4)\n        case \"o|\"\
    :\n            res = append(res, 2)\n        case \".|\":\n            res = append(res,\
    \ 1)\n        default:\n            panic(\"Invalid input\")\n        }\n    }\n\
    \    return res\n}\n", "    var res = make([]int, 0)\n    for i := 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            if i + 1 < len(music_string)\
    \ && music_string[i + 1] == '|' {\n                res = append(res, 2)\n    \
    \            i++\n            } else {\n                res = append(res, 4)\n\
    \            }\n        } else if music_string[i] == '.' {\n            res =\
    \ append(res, 1)\n            i++\n        }\n    }\n    return res\n}\n", " \
    \   var result []int\n    var i int\n    for i = 0; i < len(music_string); i++\
    \ {\n        switch music_string[i] {\n        case 'o':\n            if music_string[i+1]\
    \ == ' ' {\n                result = append(result, 4)\n            } else {\n\
    \                result = append(result, 2)\n                i += 1\n        \
    \    }\n        case '.':\n            result = append(result, 1)\n          \
    \  i += 1\n        case ' ':\n            continue\n        }\n    }\n    return\
    \ result\n}\n", "    return nil\n}\n", "    var list_of_beats []int\n\n    return\
    \ list_of_beats\n}\n", "    var new_string string\n    length := len(music_string)\n\
    \    for i := 0; i < length; i++ {\n        if music_string[i] == ' ' {\n    \
    \        continue\n        } else {\n            new_string += string(music_string[i])\n\
    \        }\n    }\n    fmt.Println(new_string)\n    length = len(new_string)\n\
    \    list := make([]int, 0)\n    for i := 0; i < length; i++ {\n        if new_string[i]\
    \ == 'o' {\n            if i + 1 == length {\n                list = append(list,\
    \ 4)\n            } else if new_string[i + 1] == '|' {\n                list =\
    \ append(list, 2)\n                i += 1\n            } else {\n            \
    \    list = append(list, 4)\n            }\n        } else if new_string[i] ==\
    \ '.' {\n            list = append(list, 1)\n            i += 1\n        }\n \
    \   }\n    return list\n}\n", "    return []int{}\n}\n", "    var beats []int\n\
    \    var note_dict = map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n\
    \        \".|\": 1,\n    }\n    for _, note := range music_string {\n        beats\
    \ = append(beats, note_dict[string(note)])\n    }\n    return beats\n}\n", " \
    \   var beats []int\n    var map_rune_beat = map[rune]int{\n        'o': 4,\n\
    \        '|': 2,\n        '.': 1,\n    }\n    var cur_beat int\n    for _, r :=\
    \ range music_string {\n        if r == ' ' {\n            beats = append(beats,\
    \ cur_beat)\n            cur_beat = 0\n        } else {\n            cur_beat\
    \ += map_rune_beat[r]\n        }\n    }\n    beats = append(beats, cur_beat)\n\
    \    return beats\n}\n", "    return nil\n}\n", "    var result []int\n\n    return\
    \ result\n}\n", "    var res = make([]int, 0)\n    var lastInd = 0\n    for i\
    \ := 0; i < len(music_string); i++ {\n        if music_string[i] == ' ' {\n  \
    \          res = append(res, i - lastInd)\n            lastInd = i + 1\n     \
    \   }\n    }\n    res = append(res, len(music_string) - lastInd)\n    return res\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    var beats = make([]int,\
    \ 0)\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == 'o' {\n            beats = append(beats, 4)\n        } else if music_string[i]\
    \ == '.' {\n            beats = append(beats, 1)\n        }\n    }\n    return\
    \ beats\n}\n", "    return nil\n}\n", "    m := []int{}\n    var tmp int\n   \
    \ for _, v := range music_string {\n        if v == 'o' {\n            tmp = 4\n\
    \        } else if v == '|' {\n            tmp--\n        }\n        if tmp !=\
    \ 0 {\n            m = append(m, tmp)\n        }\n    }\n    return m\n}\n", " \
    \   var result []int\n    tmp := \"\"\n    for i := 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == ' ' {\n            result = append(result,\
    \ how_many_beats(tmp))\n            tmp = \"\"\n        } else {\n           \
    \ tmp += string(music_string[i])\n        }\n    }\n    result = append(result,\
    \ how_many_beats(tmp))\n    return result\n}\n", "    // write your code here\n\
    \    return []int{}\n}\n", "    ret := make([]int, 0)\n    var beats int\n   \
    \ for _,v := range music_string {\n        switch string(v) {\n        case \"\
    o\":\n            beats = 4\n        case \"o|\":\n            beats = 2\n   \
    \     case \".|\":\n            beats = 1\n        }\n        ret = append(ret,\
    \ beats)\n    }\n    return ret\n}\n", "    if music_string == \"\" {\n      \
    \  return []int{}\n    }\n    slice := []rune(music_string)\n    result := []int{}\n\
    \    for i := 0; i < len(slice); i++ {\n        switch slice[i] {\n        case\
    \ 'o':\n            result = append(result, 4)\n        case '.':\n          \
    \  result = append(result, 1)\n        }\n        if slice[i] == 'o' || slice[i]\
    \ == '.' {\n            i++\n        }\n    }\n    return result\n}\n", "    return\
    \ []int{}\n}\n", "    beats := []int{}\n    for _, char := range music_string\
    \ {\n        switch char {\n        case 'o':\n            beats = append(beats,\
    \ 4)\n        case '|':\n            if beats[len(beats)-1] == 4 {\n         \
    \       beats[len(beats)-1] = 2\n            } else {\n                beats =\
    \ append(beats, 1)\n            }\n        case '.':\n            if beats[len(beats)-1]\
    \ == 4 {\n                beats[len(beats)-1] = 1\n            } else {\n    \
    \            beats = append(beats, 1)\n            }\n        }\n    }\n    return\
    \ beats\n}\n", "    beats := []int{}\n    for _, value := range music_string {\n\
    \        if value == 'o' {\n            beats = append(beats, 4)\n        } else\
    \ if value == '|' {\n            beats = append(beats, 2)\n        } else if value\
    \ == '.' {\n            beats = append(beats, 1)\n        }\n    }\n    return\
    \ beats\n}\n", "    beats := []int{}\n    for _, char := range music_string {\n\
    \        switch char {\n        case 'o':\n            beats = append(beats, 4)\n\
    \        case '|':\n            if beats[len(beats)-1] == 4 {\n              \
    \  beats[len(beats)-1] = 2\n            } else {\n                beats = append(beats,\
    \ 1)\n            }\n        }\n    }\n    return beats\n}\n", "    m := []rune(music_string)\n\
    \    ret := make([]int, 0)\n    for _, r := range m {\n        if r == 'o' {\n\
    \            ret = append(ret, 4)\n        } else if r == '|' {\n            ret[len(ret)-1]\
    \ /= 2\n        }\n    }\n    return ret\n}\n", "    // If a whole note is parsed,\
    \ add 4 to the list and continue.\n    // If a half note is parsed, add 2 to the\
    \ list and continue.\n    // If a quater note is parsed, add 1 to the list and\
    \ continue.\n    // Otherwise, return nil.\n    return nil\n}\n", "    l := len(music_string)\n\
    \    var res []int\n    i := 0\n    for i < l {\n        switch music_string[i]\
    \ {\n        case 'o':\n            res = append(res, 4)\n            i++\n  \
    \      case '.':\n            res = append(res, 1)\n            i += 2\n     \
    \   }\n    }\n    return res\n}\n", "    beats := []int{}\n    var note string\n\
    \    var beat int\n    for _, char := range music_string {\n        switch char\
    \ {\n        case ' ':\n            if note == \"o\" {\n                beat =\
    \ 4\n            } else if note == \"o|\" {\n                beat = 2\n      \
    \      } else if note == \".|\" {\n                beat = 1\n            }\n \
    \           beats = append(beats, beat)\n            note = \"\"\n        default:\n\
    \            note += string(char)\n        }\n    }\n    return beats\n}\n", " \
    \   m := make([]int, 0)\n    return m\n}\n", "    var result []int\n    for _,\
    \ note := range music_string {\n        switch {\n        case note == 'o':\n\
    \            result = append(result, 4)\n        case note == '|':\n         \
    \   if result[len(result)-1] == 4 {\n                result[len(result)-1] = 2\n\
    \            } else {\n                result[len(result)-1] = 1\n           \
    \ }\n        case note == '.':\n            result = append(result, 1)\n     \
    \   }\n    }\n    return result\n}\n", "    var res []int\n    notes := make(map[string]int)\n\
    \    notes[\"o\"] = 4\n    notes[\"o|\"] = 2\n    notes[\".|\"] = 1\n    for _,\
    \ v := range music_string {\n        res = append(res, notes[string(v)])\n   \
    \ }\n    return res\n}\n", "    return []int{}\n}\n", "    return nil\n}\n", " \
    \   var b []int\n    for _, c := range music_string {\n        switch c {\n  \
    \      case 'o':\n            b = append(b, 4)\n        case '|':\n          \
    \  if len(b) == 0 {\n                b = append(b, 2)\n            } else {\n\
    \                b[len(b)-1] = b[len(b)-1]/2\n            }\n        case '.':\n\
    \            if len(b) == 0 {\n                b = append(b, 1)\n            }\
    \ else {\n                b[len(b)-1] = b[len(b)-1]/2\n            }\n       \
    \ }\n    }\n    return b\n}\n", "\tbs := []byte(music_string)\n\tresult := make([]int,\
    \ len(bs))\n\tcurrent_position := 0\n\tfor _, char := range bs {\n\t\tif current_position\
    \ == len(bs) - 1 {\n\t\t\treturn result\n\t\t}\n\t\tswitch char {\n\t\tcase 'o':\n\
    \t\t\tresult[current_position] = 4\n\t\t\tcurrent_position += 2\n\t\tcase 'o':\n\
    \t\t\tresult[current_position] = 2\n\t\t\tcurrent_position += 2\n\t\tcase '.':\n\
    \t\t\tresult[current_position] = 1\n\t\t\tcurrent_position += 2\n\t\tdefault:\n\
    \t\t\tcurrent_position += 1\n\t\t}\n\t}\n\treturn result\n}\n", "    var note_values\
    \ = map[string]int {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n\
    \    }\n    var notes []int\n    var notes_by_string = []string{\"o\", \"o|\"\
    , \".|\"}\n    for _, note_string := range notes_by_string {\n        for {\n\
    \            index := strings.Index(music_string, note_string)\n            if\
    \ index < 0 {\n                break\n            }\n            notes = append(notes,\
    \ note_values[note_string])\n            music_string = music_string[index + len(note_string):]\n\
    \        }\n    }\n    return notes\n}\n", "    return []int{}\n}\n", "    return\
    \ []int{}\n}\n", "    var notes_info []int\n    notes_info = append(notes_info,\
    \ 0)\n\n    for i := 0; i < len(music_string); i++ {\n        var beats_count\
    \ int\n        var ch string\n\n        if i == len(music_string) - 1 {\n    \
    \        ch = music_string[i:i+1]\n        } else {\n            ch = music_string[i:i+2]\n\
    \        }\n\n        switch ch {\n        case \"o\":\n            beats_count\
    \ = 4\n        case \"o|\":\n            beats_count = 2\n        case \".|\"\
    :\n            beats_count = 1\n        default:\n            panic(\"Error\"\
    )\n        }\n\n        notes_info = append(notes_info, beats_count)\n    }\n\n\
    \    return notes_info\n}\n", "    return nil\n}\n", "    // check whether input\
    \ is empty\n    if len(music_string) == 0 {\n        return []int{}\n    }\n\n\
    \    // check whether the end of the string is valid\n    last_char := music_string[len(music_string)\
    \ - 1]\n    if last_char != 'o' && last_char != '|' {\n        panic(\"invalid\
    \ input\")\n    }\n\n    // parse string\n    result := []int{}\n    cur_note\
    \ := 0\n    for i := 0; i < len(music_string); i++ {\n        switch music_string[i]\
    \ {\n        case 'o':\n            if cur_note == 0 {\n                cur_note\
    \ = 4\n            } else {\n                result = append(result, cur_note)\n\
    \                cur_note = 4\n            }\n        case '|':\n            if\
    \ i > 0 && music_string[i - 1] == '.' {\n                cur_note = 1\n      \
    \      } else if i > 0 && music_string[i - 1] == 'o' {\n                cur_note\
    \ = 2\n            } else {\n                panic(\"invalid input\")\n      \
    \      }\n        case ' ':\n            if cur_note > 0 {\n                result\
    \ = append(result, cur_note)\n                cur_note = 0\n            }\n  \
    \      default:\n            panic(\"invalid input\")\n        }\n    }\n    result\
    \ = append(result, cur_note)\n    return result\n}\n", "    var res []int\n  \
    \  bpm := 1\n\n    for _, c := range music_string {\n        switch c {\n    \
    \    case 'o':\n            res = append(res, bpm * 4)\n        case '|':\n  \
    \          bpm /= 2\n        case '.':\n            res = append(res, bpm)\n \
    \       }\n    }\n\n    return res\n}\n", "    return []int{}\n}\n", "    beats\
    \ := []int{}\n    running := true\n    i := 0\n    curr := 0\n    for running\
    \ {\n        fmt.Println(i)\n        fmt.Println(len(music_string))\n        if\
    \ i < len(music_string) {\n            fmt.Println(i)\n            fmt.Println(string(music_string[i]))\n\
    \            fmt.Println(string(music_string[i+1]))\n            if string(music_string[i])\
    \ == \" \" {\n                i++\n            } else if string(music_string[i])\
    \ == \"o\" {\n                curr = 4\n                i++\n            } else\
    \ if string(music_string[i]) == \".\" {\n                curr = 1\n          \
    \      i++\n            } else if string(music_string[i]) == \"|\" {\n       \
    \         beats = append(beats, curr)\n                curr = 0\n            \
    \    i++\n            } else {\n                i++\n            }\n        }\
    \ else {\n            running = false\n        }\n    }\n    return beats\n}\n",
  "    music_slice := make([]int, 0)\n    splitted_by_note := strings.Split(music_string,\
    \ \" \")\n    for _, note := range splitted_by_note {\n        note_duration :=\
    \ note[:len(note)-1]\n        switch note_duration {\n        case \"o\":\n  \
    \          music_slice = append(music_slice, 4)\n        case \"o|\":\n      \
    \      music_slice = append(music_slice, 2)\n        case \".|\":\n          \
    \  music_slice = append(music_slice, 1)\n        }\n    }\n    return music_slice\n\
    }\n", "    return nil\n}\n", "    beats := []int{}\n    count := 0\n    for _,\
    \ c := range music_string {\n        if c == 'o' {\n            beats = append(beats,\
    \ 4)\n        } else if c == '|' {\n            beats[count] /= 2\n        } else\
    \ if c == '.' {\n            beats[count] /= 2\n            count++\n        }\n\
    \    }\n    return beats\n}\n", "    beats := make([]int, 0)\n    r := []rune(music_string)\n\
    \    last_beat := 0\n    for _, c := range r {\n        if c == '.' {\n      \
    \      beats = append(beats, 1)\n            last_beat = 1\n        } else if\
    \ c == 'o' {\n            if last_beat == 1 {\n                beats[len(beats)-1]\
    \ = 2\n            } else {\n                beats = append(beats, 2)\n      \
    \      }\n            last_beat = 2\n        } else if c == '|' {\n          \
    \  if last_beat == 2 {\n                beats[len(beats)-1] = 4\n            }\
    \ else {\n                beats = append(beats, 4)\n            }\n          \
    \  last_beat = 4\n        }\n    }\n    return beats\n}\n", "    beats := []int{}\n\
    \    for _, char := range music_string {\n        switch string(char) {\n    \
    \    case \"o\":\n            beats = append(beats, 4)\n        case \"o|\":\n\
    \            beats = append(beats, 2)\n        case \".|\":\n            beats\
    \ = append(beats, 1)\n        case \" \":\n            // Do nothing\n       \
    \ default:\n            panic(fmt.Sprintf(\"Unknown character: %s\", string(char)))\n\
    \        }\n    }\n    return beats\n}\n", "    var res = make([]int,0)\n    var\
    \ temp = make([]int,0)\n    var state = ' '\n    var j int = 0\n    for i := 0;\
    \ i < len(music_string); i++ {\n        switch {\n        case music_string[i]\
    \ == 'o':\n            if music_string[i+1] == '|' {\n                temp = append(temp,\
    \ 2)\n                state = '|'\n            } else {\n                temp\
    \ = append(temp, 4)\n                state = ' '\n            }\n        case\
    \ music_string[i] == '.':\n            if music_string[i+1] == '|' {\n       \
    \         temp = append(temp, 1)\n                state = '|'\n            } else\
    \ {\n                temp = append(temp, 0)\n                state = ' '\n   \
    \         }\n        case music_string[i] == '|':\n            if state == '|'\
    \ {\n                res = append(res, temp[j])\n                j++\n       \
    \     }\n        }\n    }\n    return res\n}\n", "    // Your code here.\n   \
    \ // Note: this is a tricky problem, usually not easy to solve using only strings\
    \ and loops.\n    //       If you can't do it, then you should use `strings.Fields`\
    \ and slices.\n\n    // And here is one of the possible solutions:\n    var result\
    \ []int\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == 'o' {\n            if (i < len(music_string) - 1) && (music_string[i+1] ==\
    \ '|') {\n                result = append(result, 2)\n                i++\n  \
    \          } else {\n                result = append(result, 4)\n            }\n\
    \        } else if music_string[i] == '.' {\n            result = append(result,\
    \ 1)\n            i++\n        }\n    }\n    return result\n}\n", "    var res\
    \ []int\n    for _, val := range(music_string) {\n        switch val {\n     \
    \   case 'o':\n            res = append(res, 4)\n        case '|':\n         \
    \   // do nothing\n        case '.':\n            res = append(res, 1)\n     \
    \   }\n    }\n    return res\n}\n", "    var result []int\n    current_beat :=\
    \ 0\n    current_note := \"\"\n    for _, char := range music_string {\n     \
    \   current_note += string(char)\n        switch current_note {\n        case\
    \ \"o\":\n            current_beat = 4\n        case \"o|\":\n            current_beat\
    \ = 2\n        case \".|\":\n            current_beat = 1\n        default:\n\
    \            result = append(result, current_beat)\n            current_note =\
    \ \"\"\n        }\n    }\n    return result\n}\n", "    fmt.Println(music_string)\n\
    \    return []int{}\n}\n", "\tresult := make([]int, 0)\n\tfor i := 0; i < len(music_string);\
    \ i++ {\n\t\tswitch music_string[i] {\n\t\tcase 'o':\n\t\t\tif i + 1 < len(music_string)\
    \ && music_string[i+1] == '|' {\n\t\t\t\tresult = append(result, 2)\n\t\t\t\t\
    i++\n\t\t\t} else {\n\t\t\t\tresult = append(result, 4)\n\t\t\t}\n\t\tcase '.':\n\
    \t\t\tif i + 1 < len(music_string) && music_string[i+1] == '|' {\n\t\t\t\tresult\
    \ = append(result, 1)\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n",
  "    note_duration := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n \
    \       \".|\": 1,\n    }\n    notes := []int{}\n    for _, note := range music_string\
    \ {\n        if note == ' ' {\n            continue\n        }\n        notes\
    \ = append(notes, note_duration[string(note)])\n    }\n    return notes\n}\n",
  "    // TODO: implement here\n    return nil\n}\n", "    fmt.Println(music_string)\n\
    \    beats := make([]int, 0)\n    i := 0\n    for i < len(music_string) {\n  \
    \      switch music_string[i] {\n        case 'o':\n            if music_string[i\
    \ + 1] == ' ' {\n                beats = append(beats, 4)\n                i +=\
    \ 2\n            } else {\n                beats = append(beats, 2)\n        \
    \        i += 3\n            }\n        case '.':\n            beats = append(beats,\
    \ 1)\n            i += 3\n        default:\n            i += 1\n        }\n  \
    \  }\n    return beats\n}\n", "    var r []int\n    var len_str int = len(music_string)\n\
    \    var index int = 0\n    for i := 0; i < len_str; i++ {\n        if music_string[i]\
    \ == 'o' {\n            if i+1 < len_str && music_string[i+1] == '|' {\n     \
    \           r = append(r, 2)\n                i++\n            } else {\n    \
    \            r = append(r, 4)\n            }\n        } else if music_string[i]\
    \ == '.' {\n            if i+1 < len_str && music_string[i+1] == '|' {\n     \
    \           r = append(r, 1)\n                i++\n            }\n        }\n\
    \    }\n    return r\n}\n", "    beats := make([]int, 0)\n    return beats\n}\n",
  "    runes := []rune(music_string)\n    result := make([]int, 0)\n    for index,\
    \ note := range runes {\n        if string(note) == \"o\" {\n            result\
    \ = append(result, 4)\n        } else if string(note) == \".\" {\n           \
    \ result = append(result, 1)\n        } else if string(note) == \"|\" {\n    \
    \        if index > 0 && string(runes[index-1]) == \"o\" {\n                result\
    \ = append(result, 2)\n            } else if index > 0 && string(runes[index-1])\
    \ == \".\" {\n                result = append(result, 1)\n            }\n    \
    \    }\n    }\n    return result\n}\n", "    return []int{}\n}\n", "    return\
    \ []int{}\n}\n", "    // split by whitespace\n    var music_list []string = make([]string,\
    \ 0)\n    for i, ch := range music_string {\n        if ch == ' ' {\n        \
    \    music_list = append(music_list, music_string[:i])\n            music_string\
    \ = music_string[i+1:]\n        }\n    }\n    music_list = append(music_list,\
    \ music_string)\n\n    // parse & return\n    beats := make([]int, 0)\n    for\
    \ _, music := range music_list {\n        switch music {\n        case \"o\":\n\
    \            beats = append(beats, 4)\n        case \"o|\":\n            beats\
    \ = append(beats, 2)\n        case \".|\":\n            beats = append(beats,\
    \ 1)\n        }\n    }\n    return beats\n}\n", "    var res = make([]int, 0)\n\
    \    var c rune\n\n    c = []rune(music_string)[0]\n    if c == 'o' {\n      \
    \  res = append(res, 4)\n    } else if c == 'o' {\n        res = append(res, 2)\n\
    \    } else if c == '.' {\n        res = append(res, 1)\n    }\n\n    return res\n\
    }\n", "    return []int{1, 2, 3}\n}\n", "    noteMap := map[string]int{\n    \
    \    \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := strings.Split(music_string,\
    \ \" \")\n    result := make([]int, len(notes))\n    for i, note := range notes\
    \ {\n        result[i] = noteMap[note]\n    }\n    return result\n}\n", "    beats\
    \ := make([]int,0)\n    var beat int\n    for _, v := range music_string {\n \
    \       if v == 'o' {\n            beat = 4\n        } else if v == '|' {\n  \
    \          beat -= 1\n        } else if v == '.' {\n            beat -= 2\n  \
    \      } else if v == ' ' {\n            beats = append(beats, beat)\n       \
    \ }\n    }\n    return beats\n}\n", "    panic(\"Not Implemented\")\n}\n", " \
    \   return []int{}\n}\n", "    var result []int\n    for i := 0; i < len(music_string);\
    \ i++ {\n        switch music_string[i] {\n        case 'o':\n            result\
    \ = append(result, 4)\n        case '.':\n            result = append(result,\
    \ 1)\n        case '|':\n            result[len(result)-1] /= 2\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, char := range\
    \ music_string {\n        switch char {\n        case 'o':\n            result\
    \ = append(result, 4)\n        case '|':\n            result[len(result)-1] =\
    \ result[len(result)-1] / 2\n        case '.':\n            result[len(result)-1]\
    \ = result[len(result)-1] / 4\n        }\n    }\n    return result\n}\n", "  \
    \  beats := []int{}\n    for _, c := range music_string {\n        if c == 'o'\
    \ {\n            beats = append(beats, 4)\n        } else if c == '|' {\n    \
    \        last_beat := beats[len(beats) - 1]\n            beats[len(beats) - 1]\
    \ = last_beat / 2\n        }\n    }\n    return beats\n}\n", "    fmt.Println(music_string)\n\
    \    return nil\n}\n", "\t\n\tvar music []int\n\n\tfor i := 0; i < len(music_string);\
    \ i++ {\n\t\tif music_string[i] == 'o' {\n\t\t\tmusic = append(music, 4)\n\t\t\
    } else if music_string[i] == '.' {\n\t\t\tmusic = append(music, 1)\n\t\t}\n\t\
    }\n\n\treturn music\n}\n", "    //TODO: Implement function here\n    return nil\n\
    }\n", "    return nil\n}\n", "    note_durations := make([]int, 0)\n    duration\
    \ := 4\n    last_char := \"\"\n    for i, _ := range music_string {\n        switch\
    \ music_string[i] {\n        case '|':\n            if last_char == \"o\" {\n\
    \                duration = 2\n            } else {\n                duration\
    \ = 1\n            }\n        case 'o':\n            duration = 4\n        case\
    \ '.':\n            duration = 1\n        }\n        last_char = string(music_string[i])\n\
    \        note_durations = append(note_durations, duration)\n    }\n    return\
    \ note_durations\n}\n", "    r := []rune(music_string)\n    var beats []int\n\
    \    var t []rune\n    for i := 0; i < len(r); i++ {\n        if string(r[i])\
    \ == \"o\" {\n            // o o| .| o| o| .| .| .| .| o o\n            if i <\
    \ len(r) - 1 && string(r[i+1]) == \" \" {\n                beats = append(beats,\
    \ 4)\n            } else if i < len(r) - 2 && string(r[i+1]) == \"|\" && string(r[i+2])\
    \ == \" \" {\n                beats = append(beats, 2)\n                i += 2\n\
    \            } else if i < len(r) - 1 && string(r[i+1]) == \"|\" {\n         \
    \       beats = append(beats, 4)\n                i += 1\n            }\n    \
    \    } else if string(r[i]) == \".\" {\n            if i < len(r) - 2 && string(r[i+1])\
    \ == \"|\" && string(r[i+2]) == \" \" {\n                beats = append(beats,\
    \ 1)\n                i += 2\n            } else if i < len(r) - 1 && string(r[i+1])\
    \ == \"|\" {\n                beats = append(beats, 2)\n                i += 1\n\
    \            }\n        }\n    }\n    return beats\n}\n", "    return []int{}\n\
    }\n", "    music_string_length := len(music_string)\n    if music_string_length\
    \ == 0 {\n        return []int{}\n    }\n    music_string_copy := music_string\n\
    \    counts := []int{}\n    if string(music_string_copy[0]) == \"o\" {\n     \
    \   counts = append(counts, 4)\n        music_string_copy = music_string_copy[1:]\n\
    \    } else if string(music_string_copy[0]) == \"o\" && string(music_string_copy[1])\
    \ == \"|\" {\n        counts = append(counts, 2)\n        music_string_copy =\
    \ music_string_copy[2:]\n    } else if string(music_string_copy[0]) == \".\" &&\
    \ string(music_string_copy[1]) == \"|\" {\n        counts = append(counts, 1)\n\
    \        music_string_copy = music_string_copy[2:]\n    }\n    return append(counts,\
    \ parse_music(music_string_copy)...)\n}\n", "    var beats []int\n\n    for _,\
    \ r := range music_string {\n        switch r {\n        case 'o':\n         \
    \   beats = append(beats, 4)\n        case '.':\n            beats = append(beats,\
    \ 1)\n        }\n    }\n\n    return beats\n}\n", "    var result []int\n    var\
    \ beats []string\n    for i := 0; i < len(music_string); i++ {\n        if string(music_string[i])\
    \ == \"o\" {\n            if i + 1 < len(music_string) && string(music_string[i\
    \ + 1]) == \"|\" {\n                beats = append(beats, \"o|\")\n          \
    \      i++\n            } else {\n                beats = append(beats, \"o\"\
    )\n            }\n        } else if string(music_string[i]) == \".\" {\n     \
    \       beats = append(beats, \".|\")\n            i++\n        }\n    }\n   \
    \ fmt.Println(beats)\n    for _, element := range beats {\n        if element\
    \ == \"o\" {\n            result = append(result, 4)\n        } else if element\
    \ == \"o|\" {\n            result = append(result, 2)\n        } else if element\
    \ == \".|\" {\n            result = append(result, 1)\n        }\n    }\n    return\
    \ result\n}\n", "    notes := []string{\"o\", \"o|\", \".|\"}\n    beats := []int{4,\
    \ 2, 1}\n    music := []int{}\n    for _, note := range notes {\n        switch\
    \ note {\n        case \"o\":\n            music = append(music, beats[0])\n \
    \       case \"o|\":\n            music = append(music, beats[1])\n        case\
    \ \".|\":\n            music = append(music, beats[2])\n        }\n    }\n   \
    \ return music\n}\n", "    return []int{}\n}\n", "    return []int{}\n}\n", " \
    \   // Write your solution here\n    return nil\n}\n", "    return nil\n}\n",
  "    fmt.Println(music_string)\n    return nil\n}\n", "    return nil\n}\n", " \
    \   // TODO: Implement me!\n    return []int{}\n}\n", "\tresult := make([]int,\
    \ 0)\n\tfor _, c := range music_string {\n\t\tswitch c {\n\t\tcase 'o':\n\t\t\t\
    result = append(result, 4)\n\t\tcase '|':\n\t\t\tresult[len(result)-1]--\n\t\t\
    }\n\t}\n\treturn result\n}\n", "    var array_music []int\n    var music string\n\
    \    for i := 0; i < len(music_string); i++ {\n        if music_string[i] == 'o'\
    \ {\n            music = music_string[i:i+2]\n            if music == \"o \" {\n\
    \                array_music = append(array_music, 4)\n            } else if music\
    \ == \"o|\" {\n                array_music = append(array_music, 2)\n        \
    \    }\n        } else if music_string[i] == '.' {\n            array_music =\
    \ append(array_music, 1)\n        }\n    }\n    return array_music\n}\n", "  \
    \  return []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n}\n", "    return []int{4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4}\n}\n", "\tmusic_arr := []rune(music_string)\n\tfmt.Println(music_arr)\n\
    \tres := []int{}\n\tfor i := 0; i < len(music_arr); i++ {\n\t\tswitch music_arr[i]\
    \ {\n\t\tcase 'o':\n\t\t\tif i+1 < len(music_arr) && music_arr[i+1] == '|' {\n\
    \t\t\t\tres = append(res, 2)\n\t\t\t\ti++\n\t\t\t} else {\n\t\t\t\tres = append(res,\
    \ 4)\n\t\t\t}\n\t\tcase '.':\n\t\t\tif i+1 < len(music_arr) && music_arr[i+1]\
    \ == '|' {\n\t\t\t\tres = append(res, 1)\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t}\n\t\
    return res\n}\n", "    // your code here\n    // do not remove the following line\n\
    \    return []int{}\n}\n", "    m := make([]int, 0)\n    in_rest := false\n  \
    \  for _, c := range music_string {\n        switch c {\n        case '.':\n \
    \           if in_rest {\n                m = append(m, 1)\n            }\n  \
    \          in_rest = false\n        case 'o':\n            if in_rest {\n    \
    \            m = append(m, 4)\n            }\n            in_rest = false\n  \
    \      case '|':\n            in_rest = true\n        }\n    }\n    return m\n\
    }\n", "    var res []int\n\n    // TODO: implement the function here\n    return\
    \ res\n}\n", "    // write your implementation of this function here\n    // ...\n\
    \    //\n    // ...\n\n    return []int{}\n}\n", "    var result []int\n    for\
    \ _, c := range music_string {\n        switch c {\n        case 'o':\n      \
    \      result = append(result, 4)\n        case '.':\n            result = append(result,\
    \ 1)\n        case '|':\n            continue\n        case ' ':\n           \
    \ continue\n        default:\n            panic(fmt.Sprintf(\"Unexpected character\
    \ '%c'\", c))\n        }\n    }\n    return result\n}\n", "    return []int{1,\
    \ 2, 3}\n}\n", "    fmt.Println(music_string)\n    // TODO: Implement me!\n  \
    \  return []int{}\n}\n", "    music := []int{}\n    if len(music_string) != 0\
    \ {\n        for _, r := range music_string {\n            if string(r) == \"\
    o\" {\n                music = append(music, 4)\n            } else if string(r)\
    \ == \"|\" {\n                music[len(music)-1] /= 2\n            }\n      \
    \  }\n    }\n    return music\n}\n", "\t// As we parse the music string, we may\
    \ encounter a \"|\", which serves as a delimiter for various values.\n\t// If\
    \ we split the string by the delimiter and convert each string to an integer,\
    \ we can use this to\n\t// populate our return value.\n\treturn []int{}\n}\n",
  "    var note int\n    var notes []int\n    var beat int\n    var beats []int\n\
    \    var n_notes int\n    var i int\n    var j int\n    var k int\n    var t int\n\
    \    var s int\n    var g int\n    var count int\n    var flag bool\n    var mode\
    \ string\n    var brackets string\n    var keys []string\n    var data []string\n\
    \    var measure int\n    var measures []int\n    var measures_stack []int\n \
    \   var measures_map map[int]int\n    var l int\n    var m int\n    var m_root\
    \ int\n    var is_m int\n    var tonic int\n    var tonics []int\n    var measures_tonics\
    \ []int\n    var tonics_map map[int]int\n    var v string\n    var V int\n   \
    \ var w string\n    var W int\n    var x string\n    var X int\n    var y string\n\
    \    var Y int\n    var z string\n    var Z int\n    var u int\n    var t_stack\
    \ []int\n    var tonics_stack []int\n    var keys_stack []string\n    var tonics_map_stack\
    \ []map[int]int\n    var tonics_queue []int\n    var keys_queue []string\n   \
    \ var tonics_map_queue []map[int]int\n    var tonics_count map[int]int\n    var\
    \ tonics_count_stack []map[int]int\n    var tonics_count_queue []map[int]int\n\
    \    var tonics_count_max map[int]int\n    var tonics_count_max_stack []map[int]int\n\
    \    var tonics_count_max_queue []map[int]int\n    var tonics_count_max_key int\n\
    \    var tonics_count_max_flag bool\n    var tonics_count_max_stack_len int\n\
    \    var tonics_count_max_queue_len int\n    var mark string\n    var marks []string\n\
    \    var marks_stack []string\n    var marks_queue []string\n    var marks_len\
    \ int\n    var marks_stack_len int\n    var marks_queue_len int\n    var marks_len_sum\
    \ int\n    var", "    var notes []string = strings.Split(music_string, \" \")\n\
    \    var beats []int = make([]int, len(notes))\n    for i, note := range notes\
    \ {\n        var beats_count int = 4\n        if strings.HasSuffix(note, \"|\"\
    ) {\n            beats_count = 2\n        }\n        if strings.HasPrefix(note,\
    \ \".\") {\n            beats_count = 1\n        }\n        beats[i] = beats_count\n\
    \    }\n    return beats\n}\n", "    return []int{}\n}\n", "    var result []int\n\
    \    var whole, half, quarter = \"o\", \"o|\", \".|\"\n    var new_music_string\
    \ = music_string\n\n    for {\n        //fmt.Println(new_music_string)\n     \
    \   if len(new_music_string) < 1 {\n            break\n        }\n        switch\
    \ {\n        case len(new_music_string) >= 3 && new_music_string[:3] == quarter:\n\
    \            result = append(result, 1)\n            new_music_string = new_music_string[3:]\n\
    \        case len(new_music_string) >= 2 && new_music_string[:2] == half:\n  \
    \          result = append(result, 2)\n            new_music_string = new_music_string[2:]\n\
    \        case len(new_music_string) >= 1 && new_music_string[:1] == whole:\n \
    \           result = append(result, 4)\n            new_music_string = new_music_string[1:]\n\
    \        default:\n            panic(\"Incorrect music string\")\n        }\n\
    \    }\n    return result\n}\n", "    var beats []int\n    var currentChar string\n\
    \    var currentBeat int\n\n    for i, char := range music_string {\n        charStr\
    \ := string(char)\n        //fmt.Println(charStr)\n        if currentChar == \"\
    \" {\n            currentChar = charStr\n            currentBeat = 1\n       \
    \ } else if currentChar == charStr {\n            currentBeat++\n        } else\
    \ {\n            beats = append(beats, currentBeat)\n            currentChar =\
    \ charStr\n            currentBeat = 1\n        }\n        if i == len(music_string)\
    \ - 1 {\n            beats = append(beats, currentBeat)\n        }\n    }\n  \
    \  return beats\n}\n", "    // Write your code here\n    var result = make([]int,\
    \ 0)\n    var i = 0\n    for i < len(music_string) {\n        switch music_string[i]\
    \ {\n        case 'o':\n            i++\n            if i < len(music_string)\
    \ && music_string[i] == '|' {\n                result = append(result, 2)\n  \
    \              i++\n            } else {\n                result = append(result,\
    \ 4)\n            }\n        case '.':\n            i++\n            if i < len(music_string)\
    \ && music_string[i] == '|' {\n                result = append(result, 1)\n  \
    \              i++\n            }\n        }\n    }\n    return result\n}\n",
  "    return nil\n}\n", "    beats := []int{}\n    for _, e := range music_string\
    \ {\n        if e == 'o' {\n            beats = append(beats, 4)\n        } else\
    \ if e == '|' {\n            beats = append(beats, 1)\n        }\n    }\n    return\
    \ beats\n}\n", "    // TODO: Implement this function\n    return nil\n}\n", " \
    \   if music_string == \"\" {\n        return []int{}\n    }\n    res := []int{}\n\
    \    for _, v := range music_string {\n        switch v {\n        case 'o':\n\
    \            res = append(res, 4)\n        case '|':\n            res[len(res)-1]\
    \ = res[len(res)-1]/2\n        case '.':\n            res[len(res)-1] = res[len(res)-1]/4\n\
    \        }\n    }\n    return res\n}\n", "    return nil\n}\n", "    // fill in\
    \ here\n    music_arr := make([]int, 0)\n    for i := 0; i < len(music_string);\
    \ i++ {\n        switch string(music_string[i]) {\n        case \"o\":\n     \
    \       if i + 1 < len(music_string) && string(music_string[i + 1]) == \"|\" {\n\
    \                music_arr = append(music_arr, 2)\n                i += 1\n  \
    \          } else {\n                music_arr = append(music_arr, 4)\n      \
    \      }\n        case \".\":\n            if i + 1 < len(music_string) && string(music_string[i\
    \ + 1]) == \"|\" {\n                music_arr = append(music_arr, 1)\n       \
    \         i += 1\n            }\n        }\n    }\n    return music_arr\n}\n",
  "    var output []int\n    for _, str := range music_string {\n        if str ==\
    \ 'o' {\n            output = append(output, 4)\n        } else if str == '.'\
    \ {\n            output = append(output, 1)\n        } else if str == '|' {\n\
    \            // TODO: can you make it more generic?\n            output[len(output)-1]\
    \ = output[len(output)-1] / 2\n        }\n    }\n    return output\n}\n", "  \
    \  // Your implementation here\n    return []int{}\n}\n", "    var note string\n\
    \    var beat_list []int\n    for i := 0; i < len(music_string); i++ {\n     \
    \   note = music_string[i:i+1]\n        switch note {\n        case \"o\":\n \
    \           beat_list = append(beat_list, 4)\n        case \".\":\n          \
    \  beat_list = append(beat_list, 1)\n        }\n    }\n    return beat_list\n\
    }\n", "    return []int{}\n}\n", "    var result []int\n    var count int = 0\n\
    \    var current_symbol string\n    for _, val := range music_string {\n     \
    \   if current_symbol == string(val) {\n            count++\n        } else {\n\
    \            current_symbol = string(val)\n            if count != 0 {\n     \
    \           result = append(result, count)\n            }\n            count =\
    \ 1\n        }\n    }\n    result = append(result, count)\n    return result\n\
    }\n", "    return []int{}\n}\n", "    if len(music_string) == 0 {\n        return\
    \ nil\n    }\n    input := []rune(music_string)\n    var result []int\n    var\
    \ curr int\n    for _, ch := range input {\n        if ch == 'o' {\n         \
    \   if curr != 0 {\n                result = append(result, curr)\n          \
    \  }\n            curr = 4\n        } else if ch == '|' {\n            curr =\
    \ curr / 2\n        } else if ch == '.' {\n            curr = curr / 2\n     \
    \   } else if ch == ' ' {\n            if curr != 0 {\n                result\
    \ = append(result, curr)\n            }\n            curr = 0\n        }\n   \
    \ }\n    result = append(result, curr)\n    return result\n}\n", "    // code\
    \ here\n    return nil\n}\n", "    // Replace this comment with the solution.\n\
    \    return nil\n}\n", "    return []int{1, 2, 3}\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    var beats = []int{}\n    var i = 0\n    for _, c :=\
    \ range music_string {\n        if c == ' ' {\n            i += 1\n        } else\
    \ if c == 'o' {\n            beats = append(beats, 4)\n        } else if c ==\
    \ '.' {\n            beats = append(beats, 1)\n        } else if c == '|' {\n\
    \            beats[i] /= 2\n        }\n    }\n    return beats\n}\n", "    if\
    \ len(music_string) == 0 {\n        return []int{}\n    }\n    if music_string[0]\
    \ == 'o' {\n        return append([]int{4}, parse_music(music_string[1:])...)\n\
    \    }\n    if music_string[0] == '.' {\n        return append([]int{1}, parse_music(music_string[1:])...)\n\
    \    }\n    if music_string[0] == '|' {\n        return append([]int{2}, parse_music(music_string[1:])...)\n\
    \    }\n    return []int{}\n}\n", "    ret := make([]int, 0)\n    for _, x :=\
    \ range music_string {\n        switch x {\n        case 'o':\n            ret\
    \ = append(ret, 4)\n        case '|':\n            switch ret[len(ret)-1] {\n\
    \            case 4:\n                ret[len(ret)-1] = 2\n            case 2:\n\
    \                ret[len(ret)-1] = 1\n            }\n        case '.':\n     \
    \       ret = append(ret, 1)\n        }\n    }\n    return ret\n}\n", "    return\
    \ []int{}\n}\n", "    var beats = []int{}\n    for i := 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            beats = append(beats,\
    \ 4)\n        } else if music_string[i] == '.' {\n            beats = append(beats,\
    \ 1)\n        }\n    }\n    return beats\n}\n", "    return nil\n}\n", "\tvar\
    \ duration []int\n\tvar prev_beat int\n\tvar beat int\n\t\n\t// if 0, previous\
    \ beat was a rest, if 1 previous beat was a note\n\tprev_beat = 0\n\n\tfor i :=\
    \ 0; i < len(music_string); i++ {\n\t\tif music_string[i] == 'o' {\n\t\t\tif music_string[i+1]\
    \ == ' ' {\n\t\t\t\tif prev_beat == 0 {\n\t\t\t\t\tbeat = 4\n\t\t\t\t\tduration\
    \ = append(duration, beat)\n\t\t\t\t\tprev_beat = 1\n\t\t\t\t} else {\n\t\t\t\t\
    \tbeat = 4\n\t\t\t\t\tduration = append(duration, beat)\n\t\t\t\t\tprev_beat =\
    \ 1\n\t\t\t\t}\n\t\t\t} else if music_string[i+1] == '|' {\n\t\t\t\tif prev_beat\
    \ == 0 {\n\t\t\t\t\tbeat = 2\n\t\t\t\t\tduration = append(duration, beat)\n\t\t\
    \t\t\tprev_beat = 1\n\t\t\t\t} else {\n\t\t\t\t\tbeat = 2\n\t\t\t\t\tduration\
    \ = append(duration, beat)\n\t\t\t\t\tprev_beat = 1\n\t\t\t\t}\n\t\t\t}\n\t\t\
    } else if music_string[i] == '.' {\n\t\t\tif music_string[i+1] == '|' {\n\t\t\t\
    \tif prev_beat == 0 {\n\t\t\t\t\tbeat = 1\n\t\t\t\t\tduration = append(duration,\
    \ beat)\n\t\t\t\t\tprev_beat = 1\n\t\t\t\t} else {\n\t\t\t\t\tbeat = 1\n\t\t\t\
    \t\tduration = append(duration, beat)\n\t\t\t\t\tprev_beat = 1\n\t\t\t\t}\n\t\t\
    \t}\n\t\t} else if music_string[i] == ' ' {\n\t\t\tif prev_beat == 0 {\n\t\t\t\
    \tbeat = 0\n\t\t\t\tduration = append(duration, beat)\n\t\t\t\tprev_beat = 0\n\
    \t\t\t} else {\n\t\t\t\t", "    return nil\n}\n", "    // Your code here!\n  \
    \  return nil\n}\n", "    return nil\n}\n", "    // Your code goes here\n}\n",
  "    beats := make([]int, 0)\n    for _, sym := range music_string {\n        if\
    \ sym == 'o' {\n            beats = append(beats, 4)\n        } else if sym ==\
    \ '|' {\n            if len(beats) == 0 {\n                beats = append(beats,\
    \ 2)\n            } else {\n                beats[len(beats) - 1] += 2\n     \
    \       }\n        } else if sym == '.' {\n            beats = append(beats, 1)\n\
    \        }\n    }\n    return beats\n}\n", "    // Write your code here\n\n  \
    \  return []int{}\n}\n", "    out := make([]int, 0)\n    for _, elem := range\
    \ music_string {\n        if elem == 'o' {\n            out = append(out, 4)\n\
    \        } else if elem == '.' {\n            out = append(out, 1)\n        }\
    \ else if elem == '|' {\n            out[len(out)-1] /= 2\n        }\n    }\n\
    \    return out\n}\n", "    return nil\n}\n", "    beats := 0\n    music_beats\
    \ := make([]int, 0)\n    for _, char := range music_string {\n        switch char\
    \ {\n        case 'o':\n            beats += 4\n        case '|':\n          \
    \  if beats != 0 {\n                music_beats = append(music_beats, beats)\n\
    \                beats = 0\n            }\n        case '.':\n            beats\
    \ += 1\n        default:\n            fmt.Println(\"Found unexpected character\
    \ \", char)\n        }\n    }\n    if beats != 0 {\n        music_beats = append(music_beats,\
    \ beats)\n    }\n    return music_beats\n}\n", "    return nil\n}\n", "    return\
    \ []int{}\n}\n", "    return nil\n}\n", "    return []int{}\n}\n", "    bytes\
    \ := []byte(music_string)\n    length := len(bytes)\n    var result []int\n  \
    \  i := 0\n    for i < length {\n        if bytes[i] == 'o' {\n            result\
    \ = append(result, 4)\n            i += 2\n        } else if bytes[i] == '.' {\n\
    \            result = append(result, 1)\n            i += 2\n        }\n    }\n\
    \    return result\n}\n", "    return nil\n}\n", "    var beats []int\n    switch\
    \ music_string {\n    case \"o o| .| o| o| .| .| .| .| o o\":\n        beats =\
    \ []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n    default:\n        beats = []int{0}\n\
    \    }\n    return beats\n}\n", "    res := make([]int, 0)\n    curBeat := 0\n\
    \    for _, c := range music_string {\n        if c == 'o' {\n            if curBeat\
    \ == 0 {\n                res = append(res, 4)\n            } else {\n       \
    \         res[len(res)-1] += 4\n            }\n        } else if c == '|' {\n\
    \            if curBeat == 0 {\n                res = append(res, 0)\n       \
    \     }\n            curBeat++\n        } else if c == '.' {\n            curBeat\
    \ = 0\n        }\n    }\n    return res\n}\n", "    beats := []int{}\n    noteDuration\
    \ := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n\
    \    }\n    if len(music_string) == 0 {\n        return beats\n    }\n    for\
    \ _, note := range music_string {\n        switch string(note) {\n        case\
    \ \"o\":\n            beats = append(beats, noteDuration[\"o\"])\n        case\
    \ \"o|\":\n            beats = append(beats, noteDuration[\"o|\"])\n        case\
    \ \".|\":\n            beats = append(beats, noteDuration[\".|\"])\n        }\n\
    \    }\n    return beats\n}\n", "    out := make([]int, 0)\n    wholeNote := 4\n\
    \    halfNote := 2\n    quarterNote := 1\n    for _, runeValue := range music_string\
    \ {\n        if runeValue == 'o' {\n            out = append(out, wholeNote)\n\
    \        } else if runeValue == '|' {\n            out = append(out, halfNote)\n\
    \        } else if runeValue == '.' {\n            out = append(out, quarterNote)\n\
    \        }\n    }\n    return out\n}\n", "    charMap := map[string]int {\n  \
    \      \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    result :=\
    \ make([]int, 0)\n    for _, v := range music_string {\n        key := string(v)\n\
    \        if val, ok := charMap[key]; ok {\n            result = append(result,\
    \ val)\n        }\n    }\n    return result\n}\n", "\tvar res []int\n\t\n\treturn\
    \ res\n}\n", "    return nil\n}\n", "    var res []int\n    return res\n}\n",
  "    return nil\n}\n", "    var result []int\n    var note_count int\n    note_count\
    \ = 0\n    for _, x := range music_string {\n        if x == ' ' {\n         \
    \   result = append(result, note_count)\n            note_count = 0\n        }\
    \ else if x == 'o' {\n            note_count = 4\n        } else if x == '|' {\n\
    \            note_count = note_count / 2\n        }\n    }\n    result = append(result,\
    \ note_count)\n    return result\n}\n", "    return []int{}\n}\n", "    var res\
    \ []int\n\n    // your code goes here\n    for i := 0; i < len(music_string);\
    \ i++ {\n        switch music_string[i] {\n        case 'o':\n            if music_string[i+1]\
    \ == '|' {\n                res = append(res, 2)\n                i++\n      \
    \      } else {\n                res = append(res, 4)\n            }\n       \
    \ case '.':\n            res = append(res, 1)\n            i++\n        }\n  \
    \  }\n\n    return res\n}\n", "    // TODO: Implement this function\n    return\
    \ nil\n}\n", "    var noteDict = map[string]int{\n        \"o\": 4,\n        \"\
    o|\": 2,\n        \".|\": 1,\n    }\n    var result []int\n    var currentNote\
    \ string\n    for i := 0; i < len(music_string); i++ {\n        if music_string[i]\
    \ == ' ' {\n            result = append(result, noteDict[currentNote])\n     \
    \       currentNote = \"\"\n        } else {\n            currentNote += string(music_string[i])\n\
    \        }\n    }\n    result = append(result, noteDict[currentNote])\n    return\
    \ result\n}\n", "    // Implement this function\n    return nil\n}\n", "    //\
    \ Your code here\n    r := []rune(music_string)\n    res := make([]int, len(r))\n\
    \    for i := 0; i < len(r); i++ {\n        switch r[i] {\n        case 'o':\n\
    \            res[i] = 4\n        case '.':\n            res[i] = 1\n        }\n\
    \    }\n    return res\n}\n", "    // Parse the input string and return a list\
    \ of integers representing how many beats does each note last\n    return []int{1,\
    \ 2, 3}\n}\n", "    notes := map[string]int {\n        \"o\": 4,\n        \"o|\"\
    : 2,\n        \".|\": 1,\n    }\n    total := len(music_string)\n    var result\
    \ []int\n    for i := 0; i < total; {\n        if i < total - 2 {\n          \
    \  note := music_string[i:i+3]\n            if val, ok := notes[note]; ok {\n\
    \                result = append(result, val)\n                i += 3\n      \
    \          continue\n            }\n        }\n        if i < total - 1 {\n  \
    \          note := music_string[i:i+2]\n            if val, ok := notes[note];\
    \ ok {\n                result = append(result, val)\n                i += 2\n\
    \                continue\n            }\n        }\n        if i < total {\n\
    \            note := music_string[i:i+1]\n            if val, ok := notes[note];\
    \ ok {\n                result = append(result, val)\n                i += 1\n\
    \                continue\n            }\n        }\n    }\n    return result\n\
    }\n", "\treturn nil\n}\n", "    r := []rune(music_string)\n    i := 0\n    r1\
    \ := make([]int, 0)\n    for {\n        if i == len(r) {\n            break\n\
    \        }\n        if r[i] == 'o' {\n            if i + 1 < len(r) && r[i + 1]\
    \ == '|' {\n                r1 = append(r1, 2)\n                i += 2\n     \
    \       } else {\n                r1 = append(r1, 4)\n                i += 1\n\
    \            }\n        } else if r[i] == '.' {\n            r1 = append(r1, 1)\n\
    \            i += 2\n        }\n    }\n    return r1\n}\n", "    var notes_legend\
    \ = map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n\
    \    }\n    var parsed_music = make([]int, 0)\n    var note string\n    for i\
    \ := 0; i < len(music_string); i++ {\n        //fmt.Println(string(music_string[i]))\n\
    \        if music_string[i] == ' ' {\n            parsed_music = append(parsed_music,\
    \ notes_legend[note])\n            note = \"\"\n        } else {\n           \
    \ note += string(music_string[i])\n        }\n    }\n    parsed_music = append(parsed_music,\
    \ notes_legend[note])\n    return parsed_music\n}\n", "    ints := make([]int,\
    \ 0)\n    for _, r := range music_string {\n        switch (r) {\n        case\
    \ 'o':\n            ints = append(ints, 4)\n        case 'o', '|':\n         \
    \   ints = append(ints, 2)\n        case '.', '|':\n            ints = append(ints,\
    \ 1)\n        }\n    }\n    return ints\n}\n", "    return []int{1, 2, 3}\n}\n",
  "    duration := 0\n    lst := []int{}\n    for _, v := range music_string {\n \
    \       if v == 'o' {\n            duration = 4\n        } else if v == '|' {\n\
    \            duration--\n        }\n        if duration > 0 {\n            lst\
    \ = append(lst, duration)\n        }\n    }\n    return lst\n}\n", "    // Your\
    \ code here.\n    return []int{}\n}\n", "    var ret []int\n    var beats int\n\
    \    for _, item := range music_string {\n        switch item {\n        case\
    \ 'o':\n            beats = 4\n        case '.':\n            beats = 1\n    \
    \    case '|':\n            ret = append(ret, beats)\n            beats = 0\n\
    \        }\n    }\n    return ret\n}\n", "    return []int{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
