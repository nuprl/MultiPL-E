language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Your code here...\n\
    \    // return true\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpqmvwj_r9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpqmvwj_r9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpqmvwj_r9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqmvwj_r9_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpqmvwj_r9_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return (a < 0 &&\
    \ a % 3 == 0) || (a == 0) || (a > 0 && a % 3 == 1)\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmppjq8o3g9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmppjq8o3g9_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    var i int\n    for i = 0; i * i * i < a; i++ {\n    }\n\
    \    return i * i * i == a\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i < a;\
    \ i++ {\n        if i * i * i == a {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpxj9z1y3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpxj9z1y3g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpxj9z1y3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    r := a\n\
    \    for r > 0 {\n        r = r - 1\n        if r * r * r == a {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2a_2i4v2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2a_2i4v2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  return a == 0 || a\
    \ == 1 || a == -1 || a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpc6zaqdj9_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // write your code\
    \ here\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6oii2v7z_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int = 0\n \
    \   for i = 0; i * i * i <= a; i++ {\n        if i * i * i == a {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmptvyi4_hy_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i = 0\n    for\
    \ c := 0; c <= a; i++ {\n        c = i * i * i\n        if c == a {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpr9lbbnp4_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // return a != 0\
    \ && a == 1 || int(math.Pow(float64(a), 1.0/3.0)) * int(math.Pow(float64(a), 1.0/3.0))\
    \ * int(math.Pow(float64(a), 1.0/3.0)) == a\n    return a == 0 || a == 1 || a\
    \ > 0 && (a % 3 == 0 && iscube(a / 3))\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpxa35fagf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpxa35fagf_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpxa35fagf_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    n := a\n    if n\
    \ < 0 {\n        n = -n\n    }\n    i := 1\n    for i * i * i <= n {\n       \
    \ if i * i * i == n {\n            return true\n        }\n        i += 1\n  \
    \  }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n\
    \        tmplu5xsdbt_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return true\n    }\n    // TODO\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp7btef1we_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp7btef1we_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp7btef1we_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    i := 0\n    for {\n\
    \        t := i * i * i\n        if t > a {\n            return false\n      \
    \  }\n        if t == a {\n            return true\n        }\n        i++\n \
    \   }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpxwoprpcv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i <=\
    \ a; i++ {\n        if i * i * i == a {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpo173_6lw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpo173_6lw_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 1; i * i * i <= a; i++ {\n        if i * i *\
    \ i == a {\n            return true\n        }\n    }\n    return false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n\
    \        tmpc0tk9wrp_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\
    \ me!\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpzo8kenzv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpzo8kenzv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpzo8kenzv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpzo8kenzv_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpzo8kenzv_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var x float64\n \
    \   x = float64(a)\n    v, ok := cube(x)\n    if ok {\n        return true\n \
    \   } else {\n        return false\n    }\n    fmt.Println(v)\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7abdm_r_test.go:27:14: undefined: cube

    /tmp/tmpz7abdm_r_test.go:34:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp49m2kgel_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmp49m2kgel_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmp49m2kgel_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ a > 0 && a == int(math.Pow(float64(a), 1.0/3.0))\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoh94ob8j_test.go:25:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\
    \ this function\n    if (a <= 0) {\n        return true\n    }\n    if ((a % 2)\
    \ == 0) {\n        return false\n    }\n    root := int(1)\n    for i := int(1);\
    \ i < a; i++ {\n        root = i * i * i\n        if (root == a) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpt_s6geng_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpt_s6geng_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpt_s6geng_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a >= 0 {\n   \
    \     return ((a == 0) || (a == 1)) || ((a != 2) && ((a % 2) == 0)) || (a == 8)\n\
    \    } else {\n        return iscube(-a)\n    }\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__4 (0.00s)\n\
    \        tmpybim2z47_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 0; i*i*i <= a; i++ {\n        if i*i*i == a {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Solution code\
    \ here...\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpakiyvsg7_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpakiyvsg7_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpakiyvsg7_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpakiyvsg7_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpakiyvsg7_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a >= 0 &&\
    \ \n           ((a == 0) || \n            (a == 1) || \n            (a == 8) ||\
    \ \n            (a == 27) || \n            (a == 64) || \n            (a == 125)\
    \ || \n            (a == 216) || \n            (a == 343) || \n            (a\
    \ == 512) || \n            (a == 729) || \n            (a == 1000) || \n     \
    \       (a == 1331) || \n            (a == 1728) || \n            (a == 2197)\
    \ || \n            (a == 2744) || \n            (a == 3375) || \n            (a\
    \ == 4096) || \n            (a == 4913) || \n            (a == 5832) || \n   \
    \         (a == 6859) || \n            (a == 8000) || \n            (a == 9261))\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpji1zs1vt_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i <=\
    \ a; i++ {\n        if i * i * i == a {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpo173_6lw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpo173_6lw_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// your code here\n\
    \treturn false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpbk41qxeq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpbk41qxeq_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpbk41qxeq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpbk41qxeq_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpbk41qxeq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i * i\
    \ * i <= a; i++ {\n        if i * i * i == a {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpqrv3ocy7_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpqrv3ocy7_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\treturn false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a >= 0 &&\
    \ a == a/a\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.iscube(...)\n\t/tmp/tmpt_m5bmeu_test.go:25\n\
    command-line-arguments_test.TestIscube(0x0?)\n\t/tmp/tmpt_m5bmeu_test.go:41 +0x12\n\
    testing.tRunner(0xc000103380, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\treturn a == 0 || a\
    \ == 1 || a == -1 || int(float64(a) * float64(a) * float64(a)) == a\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n\
    \        tmppoiy_9hz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmppoiy_9hz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 1\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n\
    \        tmpqqks2k40_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpqqks2k40_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tif a == 0 {\n\t\treturn\
    \ true\n\t} else if a < 0 {\n\t\ta = -a\n\t}\n\n\ti := 1\n\tfor i*i*i < a {\n\t\
    \ti += 1\n\t}\n\n\treturn i*i*i == a\n}\n\nfunc TestIscube(t *testing.T) {\n \
    \ candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i <=\
    \ a; i++ {\n        if i * i * i == a {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpo173_6lw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpo173_6lw_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    a_sqrt := a ** (1.0/3.0)\n\
    \    a_sqrt_int := int(a_sqrt)\n    return (a_sqrt == a_sqrt_int)\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77iw7tbm_test.go:25:20: invalid operation: cannot indirect (1.0 / 3.0)
    (untyped float constant 0.333333)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var b int\n    if\
    \ a < 0 {\n        a = -a\n    }\n    if a == 0 {\n        return true\n    }\n\
    \    for b=1; b*b*b<=a; b++ {\n        if b*b*b == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    //TODO: implement\
    \ your code here.\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpyhx3fqp__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpyhx3fqp__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpyhx3fqp__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpyhx3fqp__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpyhx3fqp__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: write your\
    \ solution here\n    if (a < 0) {\n        a = -a\n    }\n    if (a == 0) {\n\
    \        return true\n    }\n    if (a == 1) {\n        return true\n    }\n \
    \   i := 0\n    for {\n        i++\n        if (i * i * i > a) {\n           \
    \ return false\n        }\n        if (i * i * i == a) {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 1; i < a; i++ {\n        if i * i * i == a {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmptqchqbi7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmptqchqbi7_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmptqchqbi7_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpdfbwqvy0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdfbwqvy0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpdfbwqvy0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpdfbwqvy0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpdfbwqvy0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: Add your\
    \ code here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpdvko01e0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdvko01e0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpdvko01e0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpdvko01e0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpdvko01e0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here...\n\
    \    for i := 0; i <= a; i++ {\n        // \u5982\u679C\u6B63\u597D\u5F00\u6839\
    \u53F7\u5F97\u5230\u6574\u6570\uFF0C\u5219\u4E3A\u7ACB\u65B9\u6570\n        if\
    \ float64(i * i * i) == float64(a) {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp6hys5i5o_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return true\n    }\n\n    var i int\n    for i = 0; i < a; i++ {\n     \
    \   if i * i * i == a {\n            return true\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpbp585eie_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: change the\
    \ following code to your own\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpvh7vnd_t_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpvh7vnd_t_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpvh7vnd_t_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpvh7vnd_t_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpvh7vnd_t_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a > 0 {\n    \
    \    // if a is greater than 0, we know that \n        // the cube root of a will\
    \ be less than or equal to a\n        for i := 1; i <= a; i++ {\n            if\
    \ i * i * i == a {\n                return true\n            }\n        }\n  \
    \  } else if a < 0 {\n        // if a is less than 0, we know that \n        //\
    \ the cube root of a will be greater than or equal to a\n        for i := -1;\
    \ i >= a; i-- {\n            if i * i * i == a {\n                return true\n\
    \            }\n        }\n    } else {\n        // if a is 0, we return true\
    \ since 0 is a cube of 0\n        return true\n    }\n    return false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int = 0\n \
    \   var tmp int = 0\n    for tmp < a {\n        i++\n        tmp = i * i * i\n\
    \    }\n    if tmp == a {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpw0aolinz_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tvar res int\n\tfor\
    \ i := 0; i < abs(a); i++ {\n\t\tres = i * i * i\n\t\tif res == a {\n\t\t\treturn\
    \ true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplrjx082f_test.go:26:18: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n\n    x := 1\n    for x * x * x < a {\n        x = x\
    \ + 1\n    }\n\n    if x * x * x == a {\n        return true\n    }\n\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp8se1hyxf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ a == 1 || a == -1 || (a > 0 && int(float64(a) / math.Pow(float64(int(math.Cbrt(float64(a)))),\
    \ 3)) == 1)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpacut4xx5_test.go:25:70: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    x := 1\n    for x*x*x\
    \ <= a {\n        if x*x*x == a {\n            return true\n        }\n      \
    \  x += 1\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpx22h0u1h_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpx22h0u1h_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073795
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i <=\
    \ a; i++ {\n        if i * i * i == a {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpo173_6lw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpo173_6lw_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073792
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for x := 1; x < a;\
    \ x++ {\n        if x * x * x == a {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmplinuxora_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmplinuxora_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmplinuxora_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073796
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ (a > 0 && (a & (a - 1)) == 0)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpoepwudzl_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpoepwudzl_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpoepwudzl_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073796
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    var i int\
    \ = 1\n    for {\n        if i * i * i == a {\n            return true\n     \
    \   }\n        if i * i * i > a {\n            return false\n        }\n     \
    \   i += 1\n    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073796
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    //TODO: implementation\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpzv5bvglu_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpzv5bvglu_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpzv5bvglu_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpzv5bvglu_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpzv5bvglu_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073796
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    b := a\n\
    \    for b > 0 {\n        if b == 1 {\n            return true\n        }\n  \
    \      if b % 3 != 0 {\n            return false\n        }\n        b /= 3\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n\
    \        tmpix4fl33f_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpix4fl33f_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 0; i*i*i\
    \ <= a; i++ {\n        if i*i*i == a {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp86d9om7f_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 0; i <=\
    \ a; i++ {\n        if i * i * i == a {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpj20p88n3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO\n    for\
    \ i := 0; i < a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpc986nhai_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpc986nhai_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpc986nhai_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\treturn false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var cube int\n  \
    \  for i := 1; ; i++ {\n        cube = i * i * i\n        if cube == a {\n   \
    \         return true\n        } else if cube > a {\n            return false\n\
    \        }\n    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpigmo7l01_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpigmo7l01_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 0; i*i*i <= a; i++ {\n        if i*i*i == a {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmprl7ax6tb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmprl7ax6tb_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmprl7ax6tb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpgmfzbkdz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpgmfzbkdz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpgmfzbkdz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpgmfzbkdz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpgmfzbkdz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  if a < 0 {\n    a =\
    \ -a\n  }\n  if a == 0 {\n    return true\n  }\n  if a == 1 {\n    return true\n\
    \  }\n  low, high := 0, a\n  for low <= high {\n    mid := (low + high) / 2\n\
    \    sqr := mid * mid * mid\n    if sqr == a {\n      return true\n    } else\
    \ if sqr < a {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n\
    \  }\n  return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: write code\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmptclvaqi9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmptclvaqi9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmptclvaqi9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmptclvaqi9_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmptclvaqi9_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    var b = 0\n    if a < 0 {\n        b = -1\n    }\
    \ else {\n        b = 1\n    }\n    for i := 1; ; i++ {\n        x := i * i *\
    \ i\n        if x == a {\n            return true\n        } else if x > a {\n\
    \            return false\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxkssng63_test.go:28:9: b declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 0; i < a;\
    \ i++ {\n        if i * i * i == a {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp99vp7v___test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp99vp7v___test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp99vp7v___test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a>=0 && a==int(math.Pow(float64(int(math.Cbrt(float64(a)))),\
    \ 3))\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhcrquzw_test.go:25:27: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a > 0 {\n    \
    \    for i := 1; i < a; i++ {\n            if i * i * i == a {\n             \
    \   return true\n            }\n        }\n    } else if a < 0 {\n        for\
    \ i := -1; i > a; i-- {\n            if i * i * i == a {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpnc34rp8r_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpnc34rp8r_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpnc34rp8r_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 1; i <=\
    \ a; i++ {\n        cube := i * i * i\n        if cube == a {\n            return\
    \ true\n        } else if cube > a {\n            return false\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp_8_tmqaa_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp_8_tmqaa_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  if a == 0 {\n    return\
    \ true\n  } else if a < 0 {\n    a = -a\n  }\n  n := 1\n  for n * n * n <= a {\n\
    \    if n * n * n == a {\n      return true\n    }\n    n++\n  }\n  return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073797
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ (a < 0 && a % 2 == 0) || (a > 0 && int(a**(1.0/3.0))**3 == a)\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tw5xz5v_test.go:25:64: invalid operation: cannot indirect (1.0 / 3.0)
    (untyped float constant 0.333333)

    /tmp/tmp5tw5xz5v_test.go:25:76: invalid operation: cannot indirect 3 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a % 3 == 0\
    \ && a % 9 == 0\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpvjmvhhai_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpvjmvhhai_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpvjmvhhai_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpvjmvhhai_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpvjmvhhai_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// TODO: implement\
    \ me\n\treturn false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpunpq5m5i_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpunpq5m5i_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpunpq5m5i_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpunpq5m5i_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpunpq5m5i_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return (a % 2 ==\
    \ 0 && a % 3 == 0)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpao108t37_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpao108t37_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpao108t37_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpao108t37_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpao108t37_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 1; i <= a; i++ {\n        if i * i * i == a {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n\
    \        tmpl7tkhdgg_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n\n    if a < 0 {\n        a = -a\n    }\n\n    b :=\
    \ 0\n    for i := 1; i <= a; i++ {\n        if i * i * i == a {\n            b\
    \ = i\n            break\n        }\n    }\n\n    return b * b * b == a\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073798
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    if a < 0 {\n        a = -a\n    }\n    if a == 0 {\n        return true\n\
    \    }\n    for i := 1; i <= a; i++ {\n        if i * i * i == a {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073798
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\
    \ me\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpdzur70ak_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpdzur70ak_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpdzur70ak_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpdzur70ak_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpdzur70ak_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073798
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return true\n    }\n\n    var i int = 0\n    for j := 1; i < a; j++ {\n\
    \        i = j * j * j\n        if i == a {\n            return true\n       \
    \ }\n    }\n\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// TODO \n\treturn\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpa3wrglg0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpa3wrglg0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpa3wrglg0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpa3wrglg0_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpa3wrglg0_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for x :=\
    \ 0; x <= a; x++ {\n        if x * x * x == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n\n    i := 1\n    for i*i*i < a {\n        i++\n   \
    \ }\n\n    return i*i*i == a\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpjbetl7q2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\treturn false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpaastfi6g_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpaastfi6g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073794
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  if a == 0 {\n    return\
    \ true\n  }\n  var i int\n  for i = 1; i * i * i <= a; i++ {\n    if i * i * i\
    \ == a {\n      return true\n    }\n  }\n  return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp0nswjrwz_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int = 1\n \
    \   var result int = 1\n    for result <= a {\n        if result == a {\n    \
    \        return true\n        }\n        i += 1\n        result = i * i * i\n\
    \    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpieztgyse_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpieztgyse_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    b := a\n    if a < 0 {\n        b = -a\n    }\n    for i := 0; i <= b; i++\
    \ {\n        if i * i * i == b {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here!\n    for i := 1; i <= a; i++ {\n        if i * i * i == a {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmplvfcpghd_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmplvfcpghd_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// your code goes here\n\
    \tif a<0 {\n\t\ta = -a\n\t}\n\tfor i:=0; i<a; i++ {\n\t\tif i*i*i == a {\n\t\t\
    \treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpf3_sx9ea_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpf3_sx9ea_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpf3_sx9ea_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    c := 0\n\
    \    for i := 1; i < a; i++ {\n        c = i * i * i\n        if c == a {\n  \
    \          return true\n        }\n        if c > a {\n            return false\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpf2n30uvw_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpf2n30uvw_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a > 0 {\n        for i := 1; i*i*i <= a; i++\
    \ {\n            if i*i*i == a {\n                return true\n            }\n\
    \        }\n    } else {\n        for i := -1; i*i*i >= a; i-- {\n           \
    \ if i*i*i == a {\n                return true\n            }\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    //TODO\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp158wjfnl_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp158wjfnl_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp158wjfnl_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp158wjfnl_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp158wjfnl_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// Write your code\
    \ here.\n\tif a == 0 {\n\t\treturn true\n\t} else if a == 1 {\n\t\treturn true\n\
    \t} else if a == 8 {\n\t\treturn true\n\t} else if a == -1 {\n\t\treturn true\n\
    \t} else if a == -8 {\n\t\treturn true\n\t} else if a == 27 {\n\t\treturn true\n\
    \t} else if a == 64 {\n\t\treturn true\n\t} else if a == 125 {\n\t\treturn true\n\
    \t} else if a == 216 {\n\t\treturn true\n\t} else if a == 343 {\n\t\treturn true\n\
    \t} else if a == 512 {\n\t\treturn true\n\t} else if a == 729 {\n\t\treturn true\n\
    \t} else if a == 1000 {\n\t\treturn true\n\t} else if a == 1331 {\n\t\treturn\
    \ true\n\t} else if a == 1728 {\n\t\treturn true\n\t} else if a == 2197 {\n\t\t\
    return true\n\t} else if a == 2744 {\n\t\treturn true\n\t} else if a == 3375 {\n\
    \t\treturn true\n\t} else if a == 4096 {\n\t\treturn true\n\t} else if a == 4913\
    \ {\n\t\treturn true\n\t} else if a == 5832 {\n\t\treturn true\n\t} else if a\
    \ == 6859 {\n\t\treturn true\n\t} else if a == 8000 {\n\t\treturn true\n\t} else\
    \ if a == 9261 {\n\t\treturn true\n\t} else if a == 10648 {\n\t\treturn true\n\
    \t} else if a == 12167 {\n\t\treturn true\n\t} else if a == 13824 {\n\t\treturn\
    \ true\n\t} else if a == 15625 {\n\t\treturn true\n\t} else if a == 17576 {\n\t\
    \treturn true\n\t} else if a == 19683 {\n\t\treturn true\n\t} else if a == 21952\
    \ {\n\t\treturn true\n\t} else if a == 24389 {\n\t\treturn true\n\t} else if a\
    \ == 27000 {\n\t\treturn true\n\t} else if a == 29791 {\n\t\treturn true\n\t}\
    \ else if a ==\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4r2ywmc2_test.go:95:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073798
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // i := 0\n    //\
    \ for i*i*i < a {\n    //     i++\n    // }\n    // return i*i*i == a\n    return\
    \ a == 0 || int(math.Round(math.Pow(math.Cbrt(float64(a)), 3))) == a\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0mrkhu7__test.go:30:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    cube := 0\n    for a > 0 {\n        if a == cube {\n \
    \           return true\n        }\n        cube += 1\n        a -= cube * cube\
    \ * cube\n    }\n    return a == 0\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmp2zisgvu6_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp2zisgvu6_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp2zisgvu6_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a > 1 {\n    \
    \    if (a % 3 == 0) {\n            return iscube(a / 3)\n        } else {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n\
    \        tmp6m3ltayh_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6m3ltayh_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\ta = abs(a)\n\ti :=\
    \ 1\n\tfor {\n\t\tb := i * i * i\n\t\tif b == a {\n\t\t\treturn true\n\t\t} else\
    \ if b > a {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7njfamnx_test.go:25:6: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\
    \ your code here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpq6zir2_k_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpq6zir2_k_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpq6zir2_k_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpq6zir2_k_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpq6zir2_k_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073799
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return int((a) **\
    \ (1.0/3.0)) ** 3 == a\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz4o_2cr_test.go:25:23: invalid operation: cannot indirect (1.0 / 3.0)
    (untyped float constant 0.333333)

    /tmp/tmpoz4o_2cr_test.go:25:37: invalid operation: cannot indirect 3 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073799
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    if a == 1\
    \ {\n        return true\n    }\n    for i := 2; i * i * i <= a; i++ {\n     \
    \   if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073799
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    // Note: try to use a cubic root and not a square root\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1b8gmv6v_test.go:27:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073800
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    x := 1\n\
    \    y := x * x * x\n    for y < a {\n        x += 1\n        y = x * x * x\n\
    \    }\n    return y == a\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n\n    i := 1\n    for i*i*i <= a {\n        if i*i*i\
    \ == a {\n            return true\n        }\n        i++\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpqo9xk0s3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your solution\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp9t99hl01_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp9t99hl01_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp9t99hl01_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp9t99hl01_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp9t99hl01_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    for i := 0; i < a; i++ {\n        if i * i * i == a {\n\
    \            return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpncpmvhx0_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpncpmvhx0_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpncpmvhx0_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    var i int\
    \ = 0\n    for i*i*i < a {\n        i++\n    }\n    return i*i*i == a\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Please write your\
    \ code here.\n    var cube = a\n    var i = 1\n    for cube > 0 {\n        cube\
    \ -= i\n        i += 2\n    }\n    return cube == 0\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpp22hs6zj_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpp22hs6zj_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Your code goes\
    \ here.\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6w73jz8__test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tnum := float64(a)\n\
    \tif num < 0 {\n\t\tnum = -num\n\t}\n\tcube := math.Pow(num, 1.0/3.0)\n\tif cube\
    \ - math.Floor(cube) < 0.000001 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpprnj_twc_test.go:29:10: undefined: math

    /tmp/tmpprnj_twc_test.go:30:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    i := 1\n    for i\
    \ * i * i <= a {\n        if i * i * i == a {\n            return true\n     \
    \   }\n        i += 1\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpavwu7qz9_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpavwu7qz9_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int\n    for\
    \ i = 0; i * i * i < a; i++ {\n    }\n    return i * i * i == a\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp22zquqa4_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    if a == 1\
    \ {\n        return true\n    }\n    var i int\n    for i = 1; i * i * i < a;\
    \ i++ {\n    }\n    return i * i * i == a\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    for i := 1; i <= a; i++ {\n        if i * i * i\
    \ == a {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmppwruvtuj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    for i := 1; i <= a; i++ {\n        if i * i * i\
    \ == a {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmppwruvtuj_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Your code here...\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp11pc6n0c_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp11pc6n0c_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp11pc6n0c_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp11pc6n0c_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp11pc6n0c_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i * i * i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ a == 1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 ||\
    \ a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 ||\
    \ a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 ||\
    \ a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625\
    \ || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a ==\
    \ 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656\
    \ || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a ==\
    \ 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823\
    \ || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 ||\
    \ a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a\
    \ == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a ==\
    \ 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432\
    \ || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 ||\
    \ a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a\
    \ == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a ==\
    \ 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969\
    \ || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 ||\
    \ a == 857375 || a == 88\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvgq3_f2h_test.go:26:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tvar cube = true\n\t\
    var cube_sum = 0\n\tvar i = 0\n\tfor {\n\t\tcube_sum += i * i * i\n\t\tif cube_sum\
    \ == a {\n\t\t\tbreak\n\t\t} else if cube_sum > a {\n\t\t\tcube = false\n\t\t\t\
    break\n\t\t}\n\t\ti += 1\n\t}\n\treturn cube\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpddqwdy2v_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmpddqwdy2v_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpddqwdy2v_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here...\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8xbvdva1_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8xbvdva1_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8xbvdva1_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8xbvdva1_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp8xbvdva1_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmptlnpvhdu_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmptlnpvhdu_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmptlnpvhdu_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\t// ...\n\t\n\tif a\
    \ > 0 {\n\t\tfor i := 0; i < a; i++ {\n\t\t\tif i * i * i == a {\n\t\t\t\treturn\
    \ true\n\t\t\t}\n\t\t}\n\t} else if a < 0 {\n\t\tfor i := 0; i > a; i-- {\n\t\t\
    \tif i * i * i == a {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpgsz0h8hk_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpgsz0h8hk_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpgsz0h8hk_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    for i := 0; i < 64;\
    \ i++ {\n        if i * i * i == a {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpogu0n275_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tvar i = 0\n\tfor i\
    \ = 0; i*i*i < a; i++ {\n\t}\n\tif i*i*i == a {\n\t\treturn true\n\t}\n\treturn\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp2tuivluo_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // write your code\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmphy59pjmz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmphy59pjmz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmphy59pjmz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmphy59pjmz_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmphy59pjmz_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: Implement\
    \ me!\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp6awe41gh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp6awe41gh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp6awe41gh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp6awe41gh_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp6awe41gh_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    cube := 0\n\
    \    for i := 1; i * i * i <= a; i++ {\n        cube = i * i * i\n        if cube\
    \ == a {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073802
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n  return a == 1\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmp2gzidfjc_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmp2gzidfjc_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp2gzidfjc_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmp2gzidfjc_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073802
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    if a == 1\
    \ {\n        return true\n    }\n    if a == 2 {\n        return false\n    }\n\
    \    if a == 3 {\n        return false\n    }\n    for i := 2; i < a/2; i++ {\n\
    \        if i*i*i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i = 0\n    for\
    \ i = 0; i < 100; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpmxkkstaj_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int = 1\n \
    \   for {\n        // We could use math.Abs(a) instead of (a)>0, but this would\
    \ be slower\n        if a > 0 {\n            if a == i*i*i {\n               \
    \ return true\n            }\n            if a < i*i*i {\n                return\
    \ false\n            }\n        } else {\n            if a == -i*i*i {\n     \
    \           return true\n            }\n            if a > -i*i*i {\n        \
    \        return false\n            }\n        }\n        i += 1\n    }\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__6 (0.00s)\n\
    \        tmpmjpbsu70_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    return a\
    \ == 1 || binarySearchCube(1, a, a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp08egghgj_test.go:31:22: undefined: binarySearchCube

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var i int = 1\n \
    \   for i < a {\n        if i * i * i == a {\n            return true\n      \
    \  }\n        i = i + 1\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp6v_bwkst_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp6v_bwkst_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp6v_bwkst_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n\n    if a < 0 {\n        a = -a\n    }\n\n    if a\
    \ == 1 {\n        return true\n    }\n\n    root := a\n    for i := 0; i < 100;\
    \ i++ {\n        if a == root * root * root {\n            return true\n     \
    \   }\n        root = (2 * root + a / (root * root)) / 3\n    }\n\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073803
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n    if a == 0 {\n        return true\n    }\n    for i :=\
    \ 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return true\n    }\n    for i := 1; i < a; i++ {\n        if i * i * i ==\
    \ a {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpbvoqzahe_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    //assume a is valid\n\
    \    for i := 1; i < int(a/2); i++ {\n        if i*i*i == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmppw78jioz_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmppw78jioz_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmppw78jioz_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    var tmp = a\n   \
    \ if tmp < 0 {\n        tmp = -tmp\n    }\n    for i := 0; i < tmp; i++ {\n  \
    \      if i * i * i == tmp {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp89din3rf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp89din3rf_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp89din3rf_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ (a < 0 && a % -3 == 0) || (a > 0 && a % 3 == 0)\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2un8dps8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2un8dps8_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp2un8dps8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmp2un8dps8_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmp2un8dps8_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i < a; i++ {\n        if i * i * i == a {\n            return true\n    \
    \    }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp5i8esc_g_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp5i8esc_g_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate :=\
    \ iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpige8v8bp_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpige8v8bp_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Your code here...\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo2z1wnt3_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Write your code\
    \ here\n    // Return true if a is a cube of some integer number, false otherwise.\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpr7dxn_4y_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpr7dxn_4y_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpr7dxn_4y_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpr7dxn_4y_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpr7dxn_4y_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073803
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tif a < 0 {\n\t\ta =\
    \ -a\n\t}\n\n\tvar i int = 0\n\tfor {\n\t\tif i * i * i == a {\n\t\t\treturn true\n\
    \t\t} else if i * i * i > a {\n\t\t\treturn false\n\t\t}\n\n\t\ti++\n\t}\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp2tszlr0g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp2tszlr0g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Please implement\
    \ the function\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp8kce9hke_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp8kce9hke_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp8kce9hke_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp8kce9hke_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp8kce9hke_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n\tvar x float64 = 0.0\n\
    \tvar n float64 = 1.0\n\tfor x*x*x < float64(a) {\n\t\tx += n\n\t}\n\treturn x*x*x\
    \ == float64(a)\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpl6p2q1ah_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a >= 0 &&\
    \ a == a / int(round(float64(a))) * int(round(float64(a)))\n}\n\nfunc TestIscube(t\
    \ *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu1rhxo1x_test.go:25:35: undefined: round

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmprl7ax6tb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmprl7ax6tb_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmprl7ax6tb_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073797
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return false\n}\n\
    \nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpeg8idppm_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpeg8idppm_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    return a > 0 && int(a**(1/3)) ** 3 == a\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9etxnwbu_test.go:28:28: invalid operation: cannot indirect (1 / 3) (untyped
    int constant 0)

    /tmp/tmp9etxnwbu_test.go:28:38: invalid operation: cannot indirect 3 (untyped
    int constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073803
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return a == 0 ||\
    \ a == 1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 ||\
    \ a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 ||\
    \ a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 ||\
    \ a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625\
    \ || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a ==\
    \ 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656\
    \ || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a ==\
    \ 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823\
    \ || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 ||\
    \ a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a\
    \ == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a ==\
    \ 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432\
    \ || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 ||\
    \ a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a\
    \ == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a ==\
    \ 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969\
    \ || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 ||\
    \ a == 857375 || a == 88\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvgq3_f2h_test.go:26:6: expected ''('', found TestIscube

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073801
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a <= 0 {\n   \
    \     return true\n    }\n    for i := 1; i <= a; i++ {\n        if i * i * i\
    \ == a {\n            return true\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
    \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
    \ expected: true },\n     { actual: candidate(180), expected: false },\n     {\
    \ actual: candidate(1000), expected: true },\n     { actual: candidate(0), expected:\
    \ true },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // your code here\n\
    \    a = a*a*a\n    if a > 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmplq_j1sd5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmplq_j1sd5_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__4\
    \ (0.00s)\n        tmplq_j1sd5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmplq_j1sd5_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmplq_j1sd5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    return true\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpt42_7xuy_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpt42_7xuy_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a < 0 {\n        a = -a\n    }\n    for i :=\
    \ 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // TODO: implement\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpwazr9c4x_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpwazr9c4x_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpwazr9c4x_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpwazr9c4x_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpwazr9c4x_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n    \
    \    a = -a\n    }\n\n    if a == 0 {\n        return true\n    }\n\n    for i\
    \ := 1; i <= a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    // Your Code Here\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpl1z_tt3r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpl1z_tt3r_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpl1z_tt3r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpl1z_tt3r_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpl1z_tt3r_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns true \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n\
    // >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n\
    // >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a == 0 {\n   \
    \     return true\n    }\n    if a == 1 {\n        return true\n    }\n    if\
    \ a == -1 {\n        return true\n    }\n    b := 1\n    for a != b * b * b {\n\
    \        b += 1\n        if b * b * b > a {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073804
