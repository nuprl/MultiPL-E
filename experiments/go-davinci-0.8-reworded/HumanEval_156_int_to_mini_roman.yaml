name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int)\
  \ string {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    mini_roman := \"\"\n    for _, roman_numeral := range \"ixcm\"\
    \ {\n        value := number % 10\n        number /= 10\n        if value == 0\
    \ {\n            continue\n        }\n        if value < 4 {\n            mini_roman\
    \ = strings.Repeat(string(roman_numeral), value) + mini_roman\n        } else\
    \ if value == 4 {\n            mini_roman = string(roman_numeral) + string(roman_numeral\
    \ + 1) + mini_roman\n        } else if value == 5 {\n            mini_roman =\
    \ string(roman_numeral + 1) + mini_roman\n        } else if value < 9 {\n    \
    \        mini_roman = string(roman_numeral + 1) + strings.Repeat(string(roman_numeral),\
    \ value - 5) + mini_roman\n        } else {\n            mini_roman = string(roman_numeral)\
    \ + string(roman_numeral + 2) + mini_roman\n        }\n    }\n    return mini_roman\n\
    }\n", "    if number > 1000 || number < 1 {\n        return \"input out of range\"\
    \n    }\n    var result string\n    for number > 0 {\n        switch {\n     \
    \   case number >= 1000:\n            result += \"m\"\n            number -= 1000\n\
    \        case number >= 900:\n            result += \"cm\"\n            number\
    \ -= 900\n        case number >= 500:\n            result += \"d\"\n         \
    \   number -= 500\n        case number >= 400:\n            result += \"cd\"\n\
    \            number -= 400\n        case number >= 100:\n            result +=\
    \ \"c\"\n            number -= 100\n        case number >= 90:\n            result\
    \ += \"xc\"\n            number -= 90\n        case number >= 50:\n          \
    \  result += \"l\"\n            number -= 50\n        case number >= 40:\n   \
    \         result += \"xl\"\n            number -= 40\n        case number >= 10:\n\
    \            result += \"x\"\n            number -= 10\n        case number >=\
    \ 9:\n            result += \"ix\"\n            number -= 9\n        case number\
    \ >= 5:\n            result += \"v\"\n            number -= 5\n        case number\
    \ >= 4:\n            result += \"iv\"\n            number -= 4\n        case number\
    \ >= 1:\n            result += \"i\"\n            number -= 1\n        }\n   \
    \ }\n    return result\n}\n", "    // your code here\n    return \"\"\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    // Define a map of integer/roman\
    \ values\n    // TODO: define map of ordered list of integer/roman values from\
    \ highest to lowest\n    var roman map[int]string = map[int]string{\n        //\
    \ TODO: 1,000\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n\
    \        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\"\
    ,\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    // TODO: Initialize value\
    \ to store roman numeral equivalent\n    var result string\n\n    // TODO: Determine\
    \ if number is 1 or greater than 1000, if so, return an error.\n    if number\
    \ < 1 || number > 1000 {\n        fmt.Println(\"Invalid input.\")\n        return\
    \ result\n    }\n\n    // TODO: Iterate through map of ordered list of integer/roman\
    \ values from highest to lowest\n    for key, value := range roman {\n       \
    \ // TODO: Divide number by current integer.\n        // TODO: Add current roman\
    \ value to result string, by quotient amount of times.\n        for number >=\
    \ key {\n            result += value\n            number -= key\n        }\n \
    \   }\n\n    // TODO: Return result in lowercase.\n    return result\n}\n", " \
    \   // Your code here\n    return \"\"\n}\n", "    var numeral string\n\n    romanNumerals\
    \ := map[int]string{\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"\
    l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n\n    for i\
    \ := 1000; i > 0; i /= 10 {\n        digit := number/i\n        number %= i\n\n\
    \        if digit > 0 {\n            numeral += strings.Repeat(romanNumerals[i],\
    \ digit)\n        }\n    }\n\n    return numeral\n}\n", "    if number <= 0 ||\
    \ number > 1000 {\n        return \"\"\n    }\n\n    numerals := []string{\n \
    \       \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"\
    ,\n        \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"\
    xc\",\n        \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\"\
    , \"cm\",\n        \"m\", \"mm\", \"mmm\", \"miv\", \"mxv\", \"mxvi\", \"mxvii\"\
    , \"mxviii\", \"mxxix\",\n    }\n\n    return numerals[number - 1]\n}\n", "  \
    \  numeral := []string{}\n    numeral_map := map[int]string{1: \"i\", 5: \"v\"\
    , 10: \"x\", 50: \"l\", 100: \"c\", 500: \"d\", 1000: \"m\"}\n    num_arr := []int{1,\
    \ 5, 10, 50, 100, 500, 1000}\n    for _, num := range num_arr {\n        if number\
    \ >= num {\n            count := number / num\n            for i := 0; i < count;\
    \ i++ {\n                numeral = append(numeral, numeral_map[num])\n       \
    \     }\n            number -= num * count\n        }\n    }\n    for i := 0;\
    \ i < len(numeral); i++ {\n        if i != len(numeral) - 1 {\n            //\
    \ fmt.Println(numeral[i], numeral[i+1])\n            if numeral[i] == \"i\" &&\
    \ numeral[i+1] == \"v\" {\n                numeral[i] = \"iv\"\n             \
    \   numeral = append(numeral[:i+1], numeral[i+2:]...)\n            } else if numeral[i]\
    \ == \"i\" && numeral[i+1] == \"x\" {\n                numeral[i] = \"ix\"\n \
    \               numeral = append(numeral[:i+1], numeral[i+2:]...)\n          \
    \  } else if numeral[i] == \"x\" && numeral[i+1] == \"l\" {\n                numeral[i]\
    \ = \"xl\"\n                numeral = append(numeral[:i+1], numeral[i+2:]...)\n\
    \            } else if numeral[i] == \"x\" && numeral[i+1] == \"c\" {\n      \
    \          numeral[i] = \"xc\"\n                numeral = append(numeral[:i+1],\
    \ numeral[i+2:]...)\n            } else if numeral[i] == \"c\" && numeral[i+1]\
    \ == \"d\" {\n                numeral[i] = \"cd\"\n                numeral = append(numeral[:i+1],\
    \ numeral[i+2:]...)\n            } else if", "    roman := []string{\"i\", \"\
    v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    result := \"\"\n    rem := number\n\
    \n    for i := 0; rem > 0; i += 2 {\n        digit := rem % 10\n        rem /=\
    \ 10\n\n        result = evaluate(roman[i], roman[i+1], roman[i+2], digit) + result\n\
    \    }\n\n    return result\n}\n", "    // check for invalid number\n    if number\
    \ < 1 || number > 1000 {\n        panic(\"invalid number provided\")\n    }\n\n\
    \    // split number into thousands, hundreds, tens, and ones\n    // and convert\
    \ each group into their roman numeral equivalent\n    var numeral string\n   \
    \ numeral += thousands(number)\n    numeral += hundreds(number)\n    numeral +=\
    \ tens(number)\n    numeral += ones(number)\n\n    return numeral\n}\n", "   \
    \ var romanNumber string\n    romanNumbers := []string{\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n   \
    \ divisors := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n  \
    \  for _, divisor := range divisors {\n        for number >= divisor {\n     \
    \       romanNumber += romanNumbers[divisors.Index(divisor)]\n            number\
    \ -= divisor\n        }\n    }\n    return romanNumber\n}\n", "    return \"\"\
    \n}\n", "    // Set up a map of roman numerals\n    romans := map[int]string{\n\
    \            1:    \"i\",\n            5:    \"v\",\n            10:   \"x\",\n\
    \            50:   \"l\",\n            100:  \"c\",\n            500:  \"d\",\n\
    \            1000: \"m\",\n    }\n\n    // Set up a map for subtractive notation\n\
    \    subtractives := map[int]string{\n            4:    \"iv\",\n            9:\
    \    \"ix\",\n            40:   \"xl\",\n            90:   \"xc\",\n         \
    \   400:  \"cd\",\n            900:  \"cm\",\n    }\n\n    // Set up an array\
    \ of possible values to convert to\n    values := []int{1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1}\n\n    // Set up a string to return\n    ret :=\
    \ \"\"\n\n    // Generate a roman numeral string\n    for _, value := range values\
    \ {\n        for number >= value {\n            number -= value\n            ret\
    \ += romans[value]\n        }\n    }\n\n    // Convert subtractive notation to\
    \ regular notation\n    for _, value := range values {\n        ret = strings.Replace(ret,\
    \ subtractives[value], romans[value] + romans[value - value / 10], -1)\n    }\n\
    \n    return ret\n}\n", "    // initialize the return value\n    roman_numeral\
    \ := \"\"\n\n    // loop over each roman numeral from highest to lowest\n    for\
    \ _, numeral := range roman_numerals {\n        for number >= numeral.value {\n\
    \            // add numeral to the return value\n            roman_numeral +=\
    \ numeral.glyph\n            // subtract numeral value from the number\n     \
    \       number -= numeral.value\n        }\n    }\n\n    return roman_numeral\n\
    }\n\ntype roman_numeral ", "    roman_numerals := map[int]string{\n        1000:\
    \ \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n  \
    \      100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\"\
    ,\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\"\
    ,\n        1: \"i\",\n    }\n\n    numerals := \"\"\n    for key, value := range\
    \ roman_numerals {\n        for number >= key {\n            numerals += value\n\
    \            number -= key\n        }\n    }\n\n    return numerals\n}\n", " \
    \   return \"\"\n}\n", "    if number < 1 || number > 1000 {\n        return \"\
    \"\n    }\n\n    res := \"\"\n    for number > 0 {\n        if number >= 1000\
    \ {\n            res += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            res += \"cm\"\n            number -= 900\n        } else\
    \ if number >= 500 {\n            res += \"d\"\n            number -= 500\n  \
    \      } else if number >= 400 {\n            res += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            res += \"c\"\n      \
    \      number -= 100\n        } else if number >= 90 {\n            res += \"\
    xc\"\n            number -= 90\n        } else if number >= 50 {\n           \
    \ res += \"l\"\n            number -= 50\n        } else if number >= 40 {\n \
    \           res += \"xl\"\n            number -= 40\n        } else if number\
    \ >= 10 {\n            res += \"x\"\n            number -= 10\n        } else\
    \ if number >= 9 {\n            res += \"ix\"\n            number -= 9\n     \
    \   } else if number >= 5 {\n            res += \"v\"\n            number -= 5\n\
    \        } else if number >= 4 {\n            res += \"iv\"\n            number\
    \ -= 4\n        } else if number >= 1 {\n            res += \"i\"\n          \
    \  number -= 1\n        }\n    }\n\n    return res\n}\n", "    romanNumeral :=\
    \ \"\"\n    for number > 0 {\n        if number >= 100 {\n            romanNumeral\
    \ += \"c\"\n            number -= 100\n        } else if number >= 90 {\n    \
    \        romanNumeral += \"xc\"\n            number -= 90\n        } else if number\
    \ >= 50 {\n            romanNumeral += \"l\"\n            number -= 50\n     \
    \   } else if number >= 40 {\n            romanNumeral += \"xl\"\n           \
    \ number -= 40\n        } else if number >= 10 {\n            romanNumeral +=\
    \ \"x\"\n            number -= 10\n        } else if number >= 9 {\n         \
    \   romanNumeral += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            romanNumeral += \"v\"\n            number -= 5\n       \
    \ } else if number >= 4 {\n            romanNumeral += \"iv\"\n            number\
    \ -= 4\n        } else if number >= 1 {\n            romanNumeral += \"i\"\n \
    \           number -= 1\n        }\n    }\n    return romanNumeral\n}\n", "  \
    \  if number < 1 || number > 1000 {\n        return \"\";\n    }\n\n    var roman\
    \ []string\n    var romanInts = map[int]string{\n        1: \"i\", 4: \"iv\",\
    \ 5: \"v\", 9: \"ix\",\n        10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\",\n\
    \        100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\",\n        1000: \"m\"\
    ,\n    }\n\n    for i := 1000; i > 0; i /= 10 {\n        digit := number / i;\n\
    \        number %= i;\n\n        var s string;\n        if digit == 4 || digit\
    \ == 9 {\n            s = romanInts[i*digit];\n        } else {\n            if\
    \ digit >= 5 {\n                s = romanInts[i*5];\n                digit -=\
    \ 5;\n            }\n            for digit > 0 {\n                s += romanInts[i];\n\
    \                digit--;\n            }\n        }\n        roman = append(roman,\
    \ s);\n    }\n\n    return fmt.Sprintf(\"%s\", roman);\n}\n", "    return \"\"\
    \n}\n", "    return \"\"\n}\n", "    romanNumerals := []string{\"i\", \"v\", \"\
    x\", \"l\", \"c\", \"d\", \"m\"}\n    res := \"\"\n    i := 0\n    for number\
    \ > 0 {\n        val := number % 10\n        if val < 4 {\n            res = strings.Repeat(romanNumerals[i],\
    \ val) + res\n        } else if val == 4 {\n            res = romanNumerals[i]\
    \ + romanNumerals[i+1] + res\n        } else if val == 5 {\n            res =\
    \ romanNumerals[i+1] + res\n        } else if val < 9 {\n            res = romanNumerals[i+1]\
    \ + strings.Repeat(romanNumerals[i], val-5) + res\n        } else {\n        \
    \    res = romanNumerals[i] + romanNumerals[i+2] + res\n        }\n        number\
    \ /= 10\n        i += 2\n    }\n    return res\n}\n", "\tresult := \"\"\n\tfor\
    \ ; number > 0; {\n\t\tswitch {\n\t\tcase number >= 1000:\n\t\t\tresult += \"\
    m\"\n\t\t\tnumber -= 1000\n\t\tcase number >= 900:\n\t\t\tresult += \"cm\"\n\t\
    \t\tnumber -= 900\n\t\tcase number >= 500:\n\t\t\tresult += \"d\"\n\t\t\tnumber\
    \ -= 500\n\t\tcase number >= 400:\n\t\t\tresult += \"cd\"\n\t\t\tnumber -= 400\n\
    \t\tcase number >= 100:\n\t\t\tresult += \"c\"\n\t\t\tnumber -= 100\n\t\tcase\
    \ number >= 90:\n\t\t\tresult += \"xc\"\n\t\t\tnumber -= 90\n\t\tcase number >=\
    \ 50:\n\t\t\tresult += \"l\"\n\t\t\tnumber -= 50\n\t\tcase number >= 40:\n\t\t\
    \tresult += \"xl\"\n\t\t\tnumber -= 40\n\t\tcase number >= 10:\n\t\t\tresult +=\
    \ \"x\"\n\t\t\tnumber -= 10\n\t\tcase number >= 9:\n\t\t\tresult += \"ix\"\n\t\
    \t\tnumber -= 9\n\t\tcase number >= 5:\n\t\t\tresult += \"v\"\n\t\t\tnumber -=\
    \ 5\n\t\tcase number >= 4:\n\t\t\tresult += \"iv\"\n\t\t\tnumber -= 4\n\t\tcase\
    \ number >= 1:\n\t\t\tresult += \"i\"\n\t\t\tnumber -= 1\n\t\t}\n\t}\n\treturn\
    \ result\n}\n", "    roman_str := \"\"\n    var roman_single = map[int]string{\n\
    \        0: \"\",\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n\
    \        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\"\
    ,\n        8: \"viii\",\n        9: \"ix\",\n    }\n    var roman_dozens = map[int]string{\n\
    \        0: \"\",\n        1: \"x\",\n        2: \"xx\",\n        3: \"xxx\",\n\
    \        4: \"xl\",\n        5: \"l\",\n        6: \"lx\",\n        7: \"lxx\"\
    ,\n        8: \"lxxx\",\n        9: \"xc\",\n    }\n    var roman_hundreds = map[int]string{\n\
    \        0: \"\",\n        1: \"c\",\n        2: \"cc\",\n        3: \"ccc\",\n\
    \        4: \"cd\",\n        5: \"d\",\n        6: \"dc\",\n        7: \"dcc\"\
    ,\n        8: \"dccc\",\n        9: \"cm\",\n    }\n    var roman_thousands =\
    \ map[int]string{\n        0: \"\",\n        1: \"m\",\n        2: \"mm\",\n \
    \       3: \"mmm\",\n    }\n    // Obtain single, dozens, hundreds and thousands:\n\
    \    thousands := number / 1000\n    hundreds := (number - thousands * 1000) /\
    \ 100\n    dozens := (number - thousands * 1000 - hundreds * 100) / 10\n    single\
    \ := number - thousands * 1000 - hundreds * 100 - dozens * 10\n    roman_str +=\
    \ roman_thousands[thousands]\n    roman_str += roman_hundreds[hundreds]\n    roman_str\
    \ += roman_dozens[dozens]\n    roman_str += roman_single[single]\n    // Return:\n\
    \    return roman_str\n}\n", "    roman := \"\"\n    arabic := []int{1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"}\n    for i, v := range arabic {\n        for number >= v {\n    \
    \        number -= v\n            roman += numerals[i]\n        }\n    }\n   \
    \ return roman\n}\n", "    // base case\n    if number < 1 || number > 1000 {\n\
    \        return \"\"\n    }\n\n    // recursive case\n    var result string\n\
    \    if number >= 10 {\n        result += string([]rune{'x'}[0])\n        result\
    \ += int_to_mini_roman(number - 10)\n    } else if number >= 9 {\n        result\
    \ += string([]rune{'i', 'x'}[0])\n        result += int_to_mini_roman(number -\
    \ 9)\n    } else if number >= 5 {\n        result += string([]rune{'v'}[0])\n\
    \        result += int_to_mini_roman(number - 5)\n    } else if number >= 4 {\n\
    \        result += string([]rune{'i', 'v'}[0])\n        result += int_to_mini_roman(number\
    \ - 4)\n    } else if number >= 1 {\n        result += string([]rune{'i'}[0])\n\
    \        result += int_to_mini_roman(number - 1)\n    }\n    return result\n}\n",
  "    return \"abcd\"\n}\n", "\tif number < 1 || number > 1000 {\n\t\tpanic(\"Invalid\
    \ range\")\n\t}\n\n\tvar result string\n\tthousands, hundreds, tens, ones := number/1000,\
    \ number/100%10, number/10%10, number%10\n\n\tfor ; thousands > 0; thousands--\
    \ {\n\t\tresult += \"m\"\n\t}\n\n\tif hundreds == 9 {\n\t\tresult += \"cm\"\n\t\
    } else if hundreds == 4 {\n\t\tresult += \"cd\"\n\t} else {\n\t\tif hundreds >=\
    \ 5 {\n\t\t\tresult += \"d\"\n\t\t\thundreds -= 5\n\t\t}\n\t\tfor ; hundreds >\
    \ 0; hundreds-- {\n\t\t\tresult += \"c\"\n\t\t}\n\t}\n\n\tif tens == 9 {\n\t\t\
    result += \"xc\"\n\t} else if tens == 4 {\n\t\tresult += \"xl\"\n\t} else {\n\t\
    \tif tens >= 5 {\n\t\t\tresult += \"l\"\n\t\t\ttens -= 5\n\t\t}\n\t\tfor ; tens\
    \ > 0; tens-- {\n\t\t\tresult += \"x\"\n\t\t}\n\t}\n\n\tif ones == 9 {\n\t\tresult\
    \ += \"ix\"\n\t} else if ones == 4 {\n\t\tresult += \"iv\"\n\t} else {\n\t\tif\
    \ ones >= 5 {\n\t\t\tresult += \"v\"\n\t\t\tones -= 5\n\t\t}\n\t\tfor ; ones >\
    \ 0; ones-- {\n\t\t\tresult += \"i\"\n\t\t}\n\t}\n\n\treturn result\n}\n", " \
    \   return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    if\
    \ number <= 0 || number > 1000 {\n        panic(\"out of range\")\n    }\n   \
    \ var result string\n    digits := make([]int, 3)\n    digits[0] = number / 100\n\
    \    digits[1] = (number % 100) / 10\n    digits[2] = number % 10\n    for i :=\
    \ 0; i < 3; i++ {\n        result += int_to_mini_roman_recursive(digits[i], i)\n\
    \    }\n    return result\n}\n", "    // Your code here\n    return \"\"\n}\n",
  "    n := number\n    roman := \"\"\n    for n >= 1000 {\n        roman += \"m\"\
    \n        n -= 1000\n    }\n    if n >= 900 {\n        roman += \"cm\"\n     \
    \   n -= 900\n    }\n    if n >= 500 {\n        roman += \"d\"\n        n -= 500\n\
    \    }\n    if n >= 400 {\n        roman += \"cd\"\n        n -= 400\n    }\n\
    \    for n >= 100 {\n        roman += \"c\"\n        n -= 100\n    }\n    if n\
    \ >= 90 {\n        roman += \"xc\"\n        n -= 90\n    }\n    if n >= 50 {\n\
    \        roman += \"l\"\n        n -= 50\n    }\n    if n >= 40 {\n        roman\
    \ += \"xl\"\n        n -= 40\n    }\n    for n >= 10 {\n        roman += \"x\"\
    \n        n -= 10\n    }\n    if n >= 9 {\n        roman += \"ix\"\n        n\
    \ -= 9\n    }\n    if n >= 5 {\n        roman += \"v\"\n        n -= 5\n    }\n\
    \    if n >= 4 {\n        roman += \"iv\"\n        n -= 4\n    }\n    for n >=\
    \ 1 {\n        roman += \"i\"\n        n -= 1\n    }\n    return roman\n}\n",
  "    return \"\"\n}\n", "    // YOUR CODE HERE\n    return \"\"\n}\n", "    var\
    \ roman_string string\n    var number_array = [4]int{}\n\n    for i := 3; i >=\
    \ 0; i-- {\n        if number < 10 {\n            number_array[i] = number\n \
    \           break\n        }\n        number_array[i] = number % 10\n        number\
    \ /= 10\n    }\n\n    for i := 0; i < 4; i++ {\n        if number_array[i] ==\
    \ 0 {\n            continue\n        }\n\n        switch i {\n        case 0:\n\
    \            for j := 0; j < number_array[i]; j++ {\n                roman_string\
    \ += \"i\"\n            }\n        case 1:\n            switch number_array[i]\
    \ {\n            case 1:\n                roman_string = \"x\" + roman_string\n\
    \            case 2:\n                roman_string = \"xx\" + roman_string\n \
    \           case 3:\n                roman_string = \"xxx\" + roman_string\n \
    \           case 4:\n                roman_string = \"xl\" + roman_string\n  \
    \          case 5:\n                roman_string = \"l\" + roman_string\n    \
    \        case 6:\n                roman_string = \"lx\" + roman_string\n     \
    \       case 7:\n                roman_string = \"lxx\" + roman_string\n     \
    \       case 8:\n                roman_string = \"lxxx\" + roman_string\n    \
    \        case 9:\n                roman_string = \"xc\" + roman_string\n     \
    \       }\n        case 2:\n            switch number_array[i] {\n           \
    \ case 1:\n                roman_string = \"c\" + roman_string\n            case\
    \ 2:\n                roman_string = \"cc\" + roman_string\n            case 3:\n\
    \                roman_string = \"ccc\" + roman_string\n            case 4:\n\
    \                roman_string = \"cd\" + roman_string\n            case 5:\n \
    \               roman_string = \"d\" + roman_string\n            case 6:\n   \
    \             roman_string = \"dc\" + roman_string\n            case 7:\n    \
    \            roman_string = \"dcc\" + roman_string\n", "  var result string\n\
    \  var hundNum int\n  var tenNum int\n  var onesNum int\n  onesNum = number %\
    \ 10\n  tenNum = (number - onesNum) % 100 / 10\n  hundNum = (number - tenNum *\
    \ 10 - onesNum) % 1000 / 100\n  if hundNum > 0 {\n    for i := 0; i < hundNum;\
    \ i++ {\n      result += \"c\"\n    }\n  }\n  if tenNum > 0 {\n    if tenNum ==\
    \ 4 {\n      result += \"xl\"\n    } else if tenNum == 9 {\n      result += \"\
    xc\"\n    } else if tenNum > 5 {\n      result += \"l\"\n      for i := 0; i <\
    \ tenNum - 5; i++ {\n        result += \"x\"\n      }\n    } else {\n      for\
    \ i := 0; i < tenNum; i++ {\n        result += \"x\"\n      }\n    }\n  }\n  if\
    \ onesNum > 0 {\n    if onesNum == 4 {\n      result += \"iv\"\n    } else if\
    \ onesNum == 9 {\n      result += \"ix\"\n    } else if onesNum > 5 {\n      result\
    \ += \"v\"\n      for i := 0; i < onesNum - 5; i++ {\n        result += \"i\"\n\
    \      }\n    } else {\n      for i := 0; i < onesNum; i++ {\n        result +=\
    \ \"i\"\n      }\n    }\n  }\n  return result\n}\n", "    // using the decomposition\n\
    \    var roman string\n    if number == 0 {\n        return \"\"\n    }\n    if\
    \ number >= 1000 {\n        roman += \"m\"\n        number -= 1000\n    }\n  \
    \  if number >= 900 {\n        roman += \"cm\"\n        number -= 900\n    }\n\
    \    if number >= 500 {\n        roman += \"d\"\n        number -= 500\n    }\n\
    \    if number >= 400 {\n        roman += \"cd\"\n        number -= 400\n    }\n\
    \    if number >= 100 {\n        roman += \"c\"\n        number -= 100\n    }\n\
    \    if number >= 90 {\n        roman += \"xc\"\n        number -= 90\n    }\n\
    \    if number >= 50 {\n        roman += \"l\"\n        number -= 50\n    }\n\
    \    if number >= 40 {\n        roman += \"xl\"\n        number -= 40\n    }\n\
    \    if number >= 10 {\n        roman += \"x\"\n        number -= 10\n    }\n\
    \    if number >= 9 {\n        roman += \"ix\"\n        number -= 9\n    }\n \
    \   if number >= 5 {\n        roman += \"v\"\n        number -= 5\n    }\n   \
    \ if number >= 4 {\n        roman += \"iv\"\n        number -= 4\n    }\n    if\
    \ number >= 1 {\n        roman += \"i\"\n        number -= 1\n    }\n    return\
    \ roman\n}\n", "    // Fill in your answer here.\n    return \"\"\n}\n", "   \
    \ return \"\"\n}\n", "    if number < 1 || number > 1000 {\n        panic(\"number\
    \ outside range: 1 <= num <= 1000\")\n    }\n    var number_map = map[int]string{\n\
    \        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\"\
    ,\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"\
    l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    var result\
    \ = \"\"\n    // Get thousands\n    if number >= 1000 {\n        result += number_map[1000]\n\
    \        number -= 1000\n    }\n    // Get hundreds\n    if number >= 100 {\n\
    \        if number_map[number] != \"\" {\n            result += number_map[number]\n\
    \            number -= number\n        } else {\n            result += number_map[(number\
    \ / 100) * 100]\n            number -= (number / 100) * 100\n        }\n    }\n\
    \    // Get tens\n    if number >= 10 {\n        if number_map[number] != \"\"\
    \ {\n            result += number_map[number]\n            number -= number\n\
    \        } else {\n            result += number_map[(number / 10) * 10]\n    \
    \        number -= (number / 10) * 10\n        }\n    }\n    // Get ones\n   \
    \ if number > 0 {\n        result += number_map[number]\n    }\n    return result\n\
    }\n", "    // create a map of strings with corresponding numbers\n    numerals\
    \ := map[int]string{\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"\
    l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n\n    // create\
    \ a list of keys for the map\n    keys := make([]int, 0, len(numerals))\n    for\
    \ k := range numerals {\n        keys = append(keys, k)\n    }\n\n    // find\
    \ the last digit in the map that is smaller than the number\n    last := 0\n \
    \   i := 0\n    for i < len(keys) {\n        if number < keys[i] {\n         \
    \   break\n        }\n        last = keys[i]\n        i++\n    }\n\n    // append\
    \ last digit if not zero\n    roman := \"\"\n    if last != 0 {\n        roman\
    \ += numerals[last]\n        number -= last\n    }\n\n    // call the function\
    \ recursively\n    return roman + int_to_mini_roman(number)\n}\n", "    roman_map\
    \ := map[int]string{\n        1: \"i\",\n        5: \"v\",\n        10: \"x\"\
    ,\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000:\
    \ \"m\",\n    }\n    // reverse the map\n    key_map := map[string]int{}\n   \
    \ for k, v := range roman_map {\n        key_map[v] = k\n    }\n    keys := []string{\"\
    m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"}\n    roman := \"\"\n    for _,\
    \ key := range keys {\n        temp := number / key_map[key]\n        number =\
    \ number % key_map[key]\n        for i := 0; i < temp; i++ {\n            roman\
    \ += key\n        }\n    }\n    return roman\n}\n", "    var romanNumerals = [13]string{\n\
    \        \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"\
    cd\", \"d\", \"cm\", \"m\"}\n    var decimalValues = [13]int{\n        1, 4, 5,\
    \ 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}\n    var romanNumber string\n\n\
    \    for i := 12; i >= 0; i-- {\n        if number >= decimalValues[i] {\n   \
    \         for number >= decimalValues[i] {\n                romanNumber += romanNumerals[i]\n\
    \                number -= decimalValues[i]\n            }\n        }\n    }\n\
    \    return romanNumber\n}\n", "    roman := \"\"\n    rest  := number\n    if\
    \ rest >= 1000 {\n        roman += \"m\"\n        rest  -= 1000\n    }\n    if\
    \ rest >= 500 {\n        roman += \"d\"\n        rest  -= 500\n    }\n    if rest\
    \ >= 100 {\n        roman += \"c\"\n        rest  -= 100\n    }\n    if rest >=\
    \ 50 {\n        roman += \"l\"\n        rest  -= 50\n    }\n    if rest >= 10\
    \ {\n        roman += \"x\"\n        rest  -= 10\n    }\n    if rest >= 5 {\n\
    \        roman += \"v\"\n        rest  -= 5\n    }\n    if rest >= 1 {\n     \
    \   roman += \"i\"\n        rest  -= 1\n    }\n    return roman\n}\n", "    //\
    \ write your code in Go 1.4\n    return \"\"\n}\n", "    // your code goes here.\n\
    \    var roman string\n    var units_tens [10]string\n    units_tens[0] = \"i\"\
    \n    units_tens[1] = \"x\"\n    units_tens[2] = \"c\"\n    units_tens[3] = \"\
    m\"\n    units_tens[4] = \"v\"\n    units_tens[5] = \"l\"\n    units_tens[6] =\
    \ \"d\"\n    units_tens[7] = \"i\"\n    units_tens[8] = \"x\"\n    units_tens[9]\
    \ = \"c\"\n    var nums [4]int\n    nums[0] = number % 10\n    nums[1] = number\
    \ / 10 % 10\n    nums[2] = number / 100 % 10\n    nums[3] = number / 1000 % 10\n\
    \    for i := 3; i >= 0; i-- {\n        if nums[i] == 0 {\n            continue\n\
    \        }\n        if nums[i] == 4 {\n            roman += units_tens[i*2] +\
    \ units_tens[i*2+1]\n        } else if nums[i] == 9 {\n            roman += units_tens[i*2]\
    \ + units_tens[i*2+2]\n        } else {\n            if nums[i] > 4 {\n      \
    \          roman += units_tens[i*2+1]\n                nums[i] -= 5\n        \
    \    }\n            for j := 0; j < nums[i]; j++ {\n                roman += units_tens[i*2]\n\
    \            }\n        }\n    }\n    return roman\n}\n", "    var result string\n\
    \    digits := [4]int{}\n    for i := 0; i < 4; i++ {\n        digits[i] = number\
    \ % 10\n        number /= 10\n    }\n    roman := [4][10]string{\n        [10]string{\"\
    \", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n\
    \        [10]string{\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\"\
    , \"lxxx\", \"xc\"},\n        [10]string{\"\", \"c\", \"cc\", \"ccc\", \"cd\"\
    , \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n        [10]string{\"\", \"m\",\
    \ \"mm\", \"mmm\"},\n    }\n    for i := 0; i < 4; i++ {\n        result = roman[i][digits[i]]\
    \ + result\n    }\n    return result\n}\n", "    roman := []string{\"\", \"i\"\
    , \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"}\n    var\
    \ result string\n    if number < 10 {\n        result = roman[number]\n    } else\
    \ if number < 100 {\n        i, r := number / 10, number % 10\n        result\
    \ = strings.Repeat(\"x\", i) + roman[r]\n    } else if number < 1000 {\n     \
    \   i, r := number / 100, number % 100\n        result = strings.Repeat(\"c\"\
    , i) + int_to_mini_roman(r)\n    } else {\n        i, r := number / 1000, number\
    \ % 1000\n        result = strings.Repeat(\"m\", i) + int_to_mini_roman(r)\n \
    \   }\n    return result\n}\n", "    dictionary := map[int]string{\n        1:\
    \    \"i\",\n        4:    \"iv\",\n        5:    \"v\",\n        9:    \"ix\"\
    ,\n        10:   \"x\",\n        40:   \"xl\",\n        50:   \"l\",\n       \
    \ 90:   \"xc\",\n        100:  \"c\",\n        400:  \"cd\",\n        500:  \"\
    d\",\n        900:  \"cm\",\n        1000: \"m\",\n    }\n\n    result := \"\"\
    \n    sorted := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\n\
    \    i := 0\n    for number > 0 {\n        if number >= sorted[i] {\n        \
    \    result += dictionary[sorted[i]]\n            number -= sorted[i]\n      \
    \  } else {\n            i++\n        }\n    }\n\n    return result\n}\n", " \
    \   var res []string\n    for number > 0 {\n        if number >= 1000 {\n    \
    \        res = append(res, \"m\")\n            number -= 1000\n        } else\
    \ if number >= 900 {\n            res = append(res, \"cm\")\n            number\
    \ -= 900\n        } else if number >= 500 {\n            res = append(res, \"\
    d\")\n            number -= 500\n        } else if number >= 400 {\n         \
    \   res = append(res, \"cd\")\n            number -= 400\n        } else if number\
    \ >= 100 {\n            res = append(res, \"c\")\n            number -= 100\n\
    \        } else if number >= 90 {\n            res = append(res, \"xc\")\n   \
    \         number -= 90\n        } else if number >= 50 {\n            res = append(res,\
    \ \"l\")\n            number -= 50\n        } else if number >= 40 {\n       \
    \     res = append(res, \"xl\")\n            number -= 40\n        } else if number\
    \ >= 10 {\n            res = append(res, \"x\")\n            number -= 10\n  \
    \      } else if number >= 9 {\n            res = append(res, \"ix\")\n      \
    \      number -= 9\n        } else if number >= 5 {\n            res = append(res,\
    \ \"v\")\n            number -= 5\n        } else if number >= 4 {\n         \
    \   res = append(res, \"iv\")\n            number -= 4\n        } else if number\
    \ >= 1 {\n            res = append(res, \"i\")\n            number -= 1\n    \
    \    }\n    }\n    return strings.Join(res, \"\")\n}\n", "    // TODO: implement\
    \ me\n    return \"\"\n}\n", "    if number < 1 || number > 1000 {\n        panic(\"\
    The number out of range: 1 <= num <= 1000\")\n    }\n\n    roman_numeral := \"\
    \"\n    one_to_nine := []string{\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\"}\n    ten_to_ninety := []string{\"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"}\n    hundred_to_nine_hundred\
    \ := []string{\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\"\
    , \"cm\"}\n    thousand := \"m\"\n\n    tmp := number\n    if number >= 1000 {\n\
    \        roman_numeral += thousand\n        tmp -= 1000\n    }\n    if number\
    \ >= 100 {\n        roman_numeral += hundred_to_nine_hundred[tmp/100 - 1]\n  \
    \      tmp -= tmp/100 * 100\n    }\n    if number >= 10 {\n        roman_numeral\
    \ += ten_to_ninety[tmp/10 - 1]\n        tmp -= tmp/10 * 10\n    }\n    if number\
    \ >= 1 {\n        roman_numeral += one_to_nine[tmp - 1]\n    }\n\n    return roman_numeral\n\
    }\n", "\t// your code here\n\t// You may create other functions if you wish.\n\
    \treturn \"\"\n}\n", "    // YOUR CODE HERE\n    var roman []string\n    number_copy\
    \ := number\n    var index int\n    //map to convert number to roman\n    m :=\
    \ map[int]string{\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n\
    \        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"\
    m\",\n    }\n    for index = 0; number > 0; index += 1 {\n        if number %\
    \ 10 > 0 {\n            var val int\n            var ind int\n            for\
    \ ind = 0; ind < len(m); ind += 1 {\n                val = val + ind * (10 **\
    \ index)\n            }\n            if number >= val {\n                roman\
    \ = append(roman, m[val])\n                number -= val\n            } else {\n\
    \                //need to subtract index value from number\n                intv\
    \ := val - (10 ** index)\n                roman = append(roman, m[intv])\n   \
    \             number -= intv\n            }\n        }\n    }\n    //reverse the\
    \ array\n    for i, j := 0, len(roman)-1; i < j; i, j = i+1, j-1 {\n        roman[i],\
    \ roman[j] = roman[j], roman[i]\n    }\n    return fmt.Sprintf(\"%s\", roman)\n\
    }\n", "    var result string\n    if number >= 1000 {\n        result += \"m\"\
    \n        number -= 1000\n    }\n    if number >= 900 {\n        result += \"\
    cm\"\n        number -= 900\n    }\n    if number >= 500 {\n        result +=\
    \ \"d\"\n        number -= 500\n    }\n    if number >= 400 {\n        result\
    \ += \"cd\"\n        number -= 400\n    }\n    if number >= 100 {\n        result\
    \ += \"c\"\n        number -= 100\n    }\n    if number >= 90 {\n        result\
    \ += \"xc\"\n        number -= 90\n    }\n    if number >= 50 {\n        result\
    \ += \"l\"\n        number -= 50\n    }\n    if number >= 40 {\n        result\
    \ += \"xl\"\n        number -= 40\n    }\n    if number >= 10 {\n        result\
    \ += \"x\"\n        number -= 10\n    }\n    if number >= 9 {\n        result\
    \ += \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n        result\
    \ += \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        result +=\
    \ \"iv\"\n        number -= 4\n    }\n    if number >= 1 {\n        result +=\
    \ \"i\"\n        number -= 1\n    }\n    return result\n}\n", "    return \"\"\
    \n}\n", "    numerals := map[int]string{\n        1000: \"m\",\n        900: \"\
    cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n      \
    \  90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n\
    \        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n\
    \    }\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1}\n    var result string\n    for i := 0; i < len(values); i++ {\n        for\
    \ number >= values[i] {\n            result += numerals[values[i]]\n         \
    \   number -= values[i]\n        }\n    }\n    return result\n}\n", "    roman\
    \ := \"\"\n    digits := []int{100, 90, 50, 40, 10, 9, 5, 4, 1}\n    letters :=\
    \ []string{\"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n\
    \    for i := 0; i < len(digits); i++ {\n        for number >= digits[i] {\n \
    \           roman += letters[i]\n            number -= digits[i]\n        }\n\
    \    }\n    return roman\n}\n", "    return \"\"\n}\n", "    // insert your code\
    \ here\n    if number <= 0 || number > 1000 {\n        return \"\"\n    }\n  \
    \  var chars = [7]string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n  \
    \  var buffer = \"\"\n    var ints = [4]int{1, 5, 10, 50}\n    for j := 3; j >=\
    \ 0; j-- {\n        var d = ints[j]\n        for i := 0; i < 3; i++ {\n      \
    \      if number >= (d - 1) {\n                number -= (d - 1)\n           \
    \     buffer += chars[i * 2]\n                buffer += chars[i * 2 + 1]\n   \
    \             break\n            } else if number >= d {\n                number\
    \ -= d\n                buffer += chars[i * 2 + 1]\n                break\n  \
    \          } else if number >= (d - ints[j-1]) {\n                number -= (d\
    \ - ints[j-1])\n                buffer += chars[i * 2]\n                buffer\
    \ += chars[i * 2 + 1]\n                break\n            }\n        }\n    }\n\
    \    return buffer\n}\n", "    var (\n        result     string\n        romanV\
    \ = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n        romanValue\
    \ = []int{1, 5, 10, 50, 100, 500, 1000}\n    )\n\n    for i := len(romanValue)\
    \ - 1; i >= 0; i -= 2 {\n        if number >= romanValue[i] {\n            var\
    \ n int = number / romanValue[i]\n            number %= romanValue[i]\n      \
    \      if n == 9 {\n                result += romanV[i] + romanV[i + 2]\n    \
    \        } else if n == 4 {\n                result += romanV[i] + romanV[i +\
    \ 1]\n            } else {\n                if n >= 5 {\n                    result\
    \ += romanV[i + 1]\n                    n -= 5\n                }\n          \
    \      for ; n > 0; n-- {\n                    result += romanV[i]\n         \
    \       }\n            }\n        }\n    }\n    return result\n}\n", "    // TODO\n\
    \    return \"\"\n}\n", "  numberMap := map[int]string{\n    1: \"i\",\n    5:\
    \ \"v\",\n    10: \"x\",\n    50: \"l\",\n    100: \"c\",\n    500: \"d\",\n \
    \   1000: \"m\",\n  }\n\n  if value, ok := numberMap[number]; ok {\n    return\
    \ value\n  }\n\n  var result string\n  var factors []int\n\n  if number < 4 {\n\
    \    factors = []int{number}\n  } else if number >= 4 && number < 5 {\n    factors\
    \ = []int{4}\n  } else if number < 9 {\n    factors = []int{5, number-5}\n  }\
    \ else if number >= 9 && number < 10 {\n    factors = []int{9}\n  } else if number\
    \ < 40 {\n    factors = []int{10, number-10}\n  } else if number >= 40 && number\
    \ < 50 {\n    factors = []int{40}\n  } else if number < 90 {\n    factors = []int{50,\
    \ number-50}\n  } else if number >= 90 && number < 100 {\n    factors = []int{90}\n\
    \  } else if number < 400 {\n    factors = []int{100, number-100}\n  } else if\
    \ number >= 400 && number < 500 {\n    factors = []int{400}\n  } else if number\
    \ < 900 {\n    factors = []int{500, number-500}\n  } else if number >= 900 &&\
    \ number < 1000 {\n    factors = []int{900}\n  } else if number < 4000 {\n   \
    \ factors = []int{1000, number-1000}\n  }\n\n  for _, factor := range factors\
    \ {\n    result += int_to_mini_roman(factor)\n  }\n\n  return result\n}\n", " \
    \   var result string\n    symbols := []string{\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    values :=\
    \ []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i, s :=\
    \ range symbols {\n        for number >= values[i] {\n            result += s\n\
    \            number -= values[i]\n        }\n    }\n    return result\n}\n", " \
    \   return \"I\"\n}\n", "    var result string\n    for _, triple := range [][]int{\n\
    \        {1,    \"i\",    \"v\"},\n        {10,   \"x\",    \"l\"},\n        {100,\
    \  \"c\",    \"d\"},\n        {1000, \"m\",    \"\"},\n    } {\n        value\
    \ := triple[0]\n        ones := triple[1]\n        fives := triple[2]\n      \
    \  digit := number / value\n        number = number % value\n        switch digit\
    \ {\n        case 1: result += ones\n        case 2: result += ones + ones\n \
    \       case 3: result += ones + ones + ones\n        case 4: result += ones +\
    \ fives\n        case 5: result += fives\n        case 6: result += fives + ones\n\
    \        case 7: result += fives + ones + ones\n        case 8: result += fives\
    \ + ones + ones + ones\n        case 9: result += ones + \"m\"\n        }\n  \
    \  }\n    return result\n}\n", "    if number > 1000 || number < 1 {\n       \
    \ return \"\"\n    }\n    values := []int{1000, 500, 100, 50, 10, 5, 1}\n    digits\
    \ := []string{\"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"}\n    count := 0\n\
    \    result := \"\"\n    for i := 0; i < len(values); i++ {\n        currentValue\
    \ := values[i]\n        currentDigit := digits[i]\n        count = number / currentValue\n\
    \        number = number % currentValue\n        for j := 0; j < count; j++ {\n\
    \            result += currentDigit\n        }\n    }\n    return result\n}\n",
  "    var roman string\n    for number > 0 {\n        digit := number % 10\n    \
    \    if digit == 0 {\n            roman = \"\" + roman\n        } else if digit\
    \ == 1 {\n            roman = \"i\" + roman\n        } else if digit == 2 {\n\
    \            roman = \"ii\" + roman\n        } else if digit == 3 {\n        \
    \    roman = \"iii\" + roman\n        } else if digit == 4 {\n            roman\
    \ = \"iv\" + roman\n        } else if digit == 5 {\n            roman = \"v\"\
    \ + roman\n        } else if digit == 6 {\n            roman = \"vi\" + roman\n\
    \        } else if digit == 7 {\n            roman = \"vii\" + roman\n       \
    \ } else if digit == 8 {\n            roman = \"viii\" + roman\n        } else\
    \ if digit == 9 {\n            roman = \"ix\" + roman\n        } else {\n    \
    \        roman = \"?\" + roman\n        }\n        number = number / 10\n    }\n\
    \    return roman\n}\n", "    // convert the number to a string\n    string_num\
    \ := fmt.Sprintf(\"%d\", number)\n    // get the length of the string\n    num_length\
    \ := len(string_num)\n    // initialize a map to store roman numerals\n    roman_map\
    \ := map[int]string{\n        1: \"i\",\n        2: \"x\",\n        3: \"c\",\n\
    \        4: \"m\",\n    }\n    // initialize the result\n    result := \"\"\n\
    \    // loop over the string and number of digits\n    for i, val := range string_num\
    \ {\n        // convert the string to an int for use in the map\n        digit,\
    \ _ := strconv.Atoi(string(val))\n        // initialize the string to hold the\
    \ current roman numeral\n        current_numeral := \"\"\n        // if the digit\
    \ is from 1 to 3, add the value\n        // from the map the appropiate number\
    \ of times\n        if digit > 0 && digit < 4 {\n            for i := 1; i <=\
    \ digit; i++ {\n                current_numeral += roman_map[num_length - i +\
    \ 1]\n            }\n        // if the digit is 4, subtract one and add the next\n\
    \        // roman numeral\n        } else if digit == 4 {\n            current_numeral\
    \ = current_numeral +\n                roman_map[num_length - i + 1] +\n     \
    \           roman_map[num_length - i]\n        // if the digit is 5, just add\
    \ the next roman numeral\n        } else if digit == 5 {\n            current_numeral\
    \ = current_numeral +\n                roman_map[num_length - i]\n        // if\
    \ the digit is 6 to 8, subtract one and add the next\n        // roman numeral\
    \ the appropiate number of times\n        } else if digit > 5 && digit < 9 {\n\
    \            current_numeral = current_numeral +\n                roman_map[num_length\
    \ - i]\n            for i := 6; i <= digit; i++ {\n                current_numeral\
    \ += roman_map[num_length - i + 1]\n            }\n        // if the digit is\
    \ 9, subtract one and add the next\n        //", "    if number < 1 || number\
    \ > 1000 {\n        return \"\"\n    }\n\n    romanMap := map[int]string{\n  \
    \      1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n\
    \        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\"\
    ,\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900:\
    \ \"cm\",\n        1000: \"m\",\n    }\n\n    result := \"\"\n    for number >\
    \ 0 {\n        for d := 1000; d > 0; d /= 10 {\n            key := number / d\
    \ * d\n            if key != 0 {\n                number %= d\n              \
    \  result += romanMap[key]\n                break\n            }\n        }\n\
    \    }\n\n    return result\n}\n", "    if number < 1 || number > 1000 {\n   \
    \     return \"\"\n    }\n\n    // Create a list of tuples containing the important\
    \ roman numeral values\n    // and their strings representations\n    roman_numerals\
    \ := []", "    var result []byte\n    switch {\n    case number > 1000:\n    \
    \    return \"?\"\n    case number >= 900:\n        result = append(result, 'c',\
    \ 'm')\n        number -= 900\n    case number >= 500:\n        result = append(result,\
    \ 'd')\n        number -= 500\n    case number >= 400:\n        result = append(result,\
    \ 'c', 'd')\n        number -= 400\n    case number >= 100:\n        result =\
    \ append(result, 'c')\n        number -= 100\n    case number >= 90:\n       \
    \ result = append(result, 'x', 'c')\n        number -= 90\n    case number >=\
    \ 50:\n        result = append(result, 'l')\n        number -= 50\n    case number\
    \ >= 40:\n        result = append(result, 'x', 'l')\n        number -= 40\n  \
    \  case number >= 10:\n        result = append(result, 'x')\n        number -=\
    \ 10\n    case number >= 9:\n        result = append(result, 'i', 'x')\n     \
    \   number -= 9\n    case number >= 5:\n        result = append(result, 'v')\n\
    \        number -= 5\n    case number >= 4:\n        result = append(result, 'i',\
    \ 'v')\n        number -= 4\n    default:\n        result = append(result, 'i')\n\
    \        number -= 1\n    }\n    for number > 0 {\n        result = append(result,\
    \ 'i')\n        number -= 1\n    }\n    return string(result)\n}\n", "    //Solution\
    \ 1. Use math rules\n    numeral := \"\"\n    if number < 1 || number > 1000 {\n\
    \        panic(\"Unsupported\")\n    }\n    if number >= 1000 {\n        numeral\
    \ += \"m\"\n        number -= 1000\n    }\n    if number >= 900 {\n        numeral\
    \ += \"cm\"\n        number -= 900\n    }\n    if number >= 500 {\n        numeral\
    \ += \"d\"\n        number -= 500\n    }\n    if number >= 400 {\n        numeral\
    \ += \"cd\"\n        number -= 400\n    }\n    if number >= 100 {\n        numeral\
    \ += \"c\"\n        number -= 100\n    }\n    if number >= 90 {\n        numeral\
    \ += \"xc\"\n        number -= 90\n    }\n    if number >= 50 {\n        numeral\
    \ += \"l\"\n        number -= 50\n    }\n    if number >= 40 {\n        numeral\
    \ += \"xl\"\n        number -= 40\n    }\n    if number >= 10 {\n        numeral\
    \ += \"x\"\n        number -= 10\n    }\n    if number >= 9 {\n        numeral\
    \ += \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n        numeral\
    \ += \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        numeral\
    \ += \"iv\"\n        number -= 4\n    }\n    if number >= 1 {\n        numeral\
    \ += \"i\"\n        number -= 1\n    }\n    return numeral\n}\n\n//Solution 2.\
    \ Use map\nvar (\n    romanMap = map[int]string{\n        1000: \"m\",\n     \
    \   900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\"\
    ,\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"\
    x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"\
    i\",\n    }\n)\n", "    return \"i\"\n}\n", "    // convert 1-9\n    int_to_mini_roman_map\
    \ := map[int]string{\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\"\
    ,\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\"\
    ,\n        8: \"viii\",\n        9: \"ix\",\n    }\n    if number < 10 {\n   \
    \     return int_to_mini_roman_map[number]\n    }\n    // convert 10-99\n    int_to_mini_roman_map\
    \ = map[int]string{\n        10: \"x\",\n        20: \"xx\",\n        30: \"xxx\"\
    ,\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n        70: \"\
    lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n    }\n    if number < 100\
    \ {\n        return int_to_mini_roman_map[int(number/10)*10] + int_to_mini_roman(number%10)\n\
    \    }\n    // convert 100-999\n    int_to_mini_roman_map = map[int]string{\n\
    \        100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n\
    \        800: \"dccc\",\n        900: \"cm\",\n    }\n    if number < 1000 {\n\
    \        return int_to_mini_roman_map[int(number/100)*100] + int_to_mini_roman(number%100)\n\
    \    }\n    // convert 1000\n    return \"m\"\n}\n", "    str := \"\"\n    if\
    \ number <= 0 || number > 1000 {\n        return str\n    }\n    values := [7]int{1000,\
    \ 500, 100, 50, 10, 5, 1}\n    numerals := [7]string{\"m\", \"d\", \"c\", \"l\"\
    , \"x\", \"v\", \"i\"}\n    // fmt.Println(values, numerals)\n    for i := 0;\
    \ i < len(values); i += 2 {\n        if number >= values[i] {\n            count\
    \ := number / values[i]\n            str += strings.Repeat(numerals[i], count)\n\
    \            number -= count * values[i]\n        }\n        if number >= values[i]\
    \ - values[i+2] {\n            str += numerals[i+2] + numerals[i]\n          \
    \  number -= values[i] - values[i+2]\n        }\n        if number >= values[i+1]\
    \ {\n            count := number / values[i+1]\n            str += strings.Repeat(numerals[i+1],\
    \ count)\n            number -= count * values[i+1]\n        }\n        if number\
    \ >= values[i+1] - values[i+2] {\n            str += numerals[i+2] + numerals[i+1]\n\
    \            number -= values[i+1] - values[i+2]\n        }\n    }\n    return\
    \ str\n}\n", "    // Fill this in.\n    return \"\"\n}\n", "    // your code goes\
    \ here\n    var result string\n    romanTable := [][]string{\n        {\"I\",\
    \ \"V\"},\n        {\"X\", \"L\"},\n        {\"C\", \"D\"},\n        {\"M\", \"\
    V\u0305\"},\n    }\n    s := fmt.Sprintf(\"%d\", number)\n    for i, v := range\
    \ s {\n        num := int(v - '0')\n        var single, five, ten string\n   \
    \     single = romanTable[len(s) - i - 1][0]\n        five = romanTable[len(s)\
    \ - i - 1][1]\n        if len(s) - i - 2 >= 0 {\n            ten = romanTable[len(s)\
    \ - i - 2][0]\n        } else {\n            ten = \"\"\n        }\n        if\
    \ num == 4 {\n            result += single + five\n        } else if num == 9\
    \ {\n            result += single + ten\n        } else {\n            if num\
    \ >= 5 {\n                result += five\n                num -= 5\n         \
    \   }\n            for num > 0 {\n                result += single\n         \
    \       num--\n            }\n        }\n    }\n    return result\n}\n", "   \
    \ roman_map := map[int]string{\n        1:\"i\",\n        4:\"iv\",\n        5:\"\
    v\",\n        9:\"ix\",\n        10:\"x\",\n        40:\"xl\",\n        50:\"\
    l\",\n        90:\"xc\",\n        100:\"c\",\n        400:\"cd\",\n        500:\"\
    d\",\n        900:\"cm\",\n        1000:\"m\",\n    }\n    result := \"\"\n  \
    \  sorted_numbers := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1}\n    for _, value := range sorted_numbers {\n        while number >= value\
    \ {\n            result += roman_map[value]\n            number -= value\n   \
    \     }\n    }\n    return result\n}\n", "\tvar answer string\n\tvar roman_numeral\
    \ string\n\tvar div_result int\n\tvar mod_result int\n\tvar i int\n\n\troman_numeral\
    \ = \"ivxlcdm\"\n\ti = 0\n\tfor (number > 0) {\n\t\tdiv_result = number / 10\n\
    \t\tmod_result = number % 10\n\t\tnumber = div_result\n\t\tconvert_numeral_helper(mod_result,\
    \ &answer, roman_numeral[i], roman_numeral[i+1], roman_numeral[i+2])\n\t\ti +=\
    \ 2\n\t}\n\treturn answer\n}\n", "    return \"some string\"\n}\n", "    // Place\
    \ your code here.\n    return \"WIP\"\n}\n", "  romanDict := map[int]string{\n\
    \    1000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100:\
    \ \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n \
    \   9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\",\n  }\n\n  result\
    \ := \"\"\n  for i := 1000; i > 0; i /= 10 {\n    x := number / i\n    if x ==\
    \ 0 {\n      continue\n    }\n    result += romanDict[i]\n    number -= x * i\n\
    \  }\n  return result\n}\n", "    fmt.Println(\"ToDo\")\n    return \"\"\n}\n",
  "\tvar roman string\n\tif number >= 1000 {\n\t\t// Roman numeral for 1000 is 'm'.\n\
    \t\troman += \"m\"\n\t\tnumber -= 1000\n\t}\n\tif number >= 900 {\n\t\t// Roman\
    \ numeral for 900 is 'cm'.\n\t\troman += \"cm\"\n\t\tnumber -= 900\n\t}\n\tif\
    \ number >= 500 {\n\t\t// Roman numeral for 500 is 'd'.\n\t\troman += \"d\"\n\t\
    \tnumber -= 500\n\t}\n\tif number >= 400 {\n\t\t// Roman numeral for 400 is 'cd'.\n\
    \t\troman += \"cd\"\n\t\tnumber -= 400\n\t}\n\tif number >= 100 {\n\t\t// Roman\
    \ numeral for 100 is 'c'.\n\t\troman += \"c\"\n\t\tnumber -= 100\n\t}\n\tif number\
    \ >= 90 {\n\t\t// Roman numeral for 90 is 'xc'.\n\t\troman += \"xc\"\n\t\tnumber\
    \ -= 90\n\t}\n\tif number >= 50 {\n\t\t// Roman numeral for 50 is 'l'.\n\t\troman\
    \ += \"l\"\n\t\tnumber -= 50\n\t}\n\tif number >= 40 {\n\t\t// Roman numeral for\
    \ 40 is 'xl'.\n\t\troman += \"xl\"\n\t\tnumber -= 40\n\t}\n\tif number >= 10 {\n\
    \t\t// Roman numeral for 10 is 'x'.\n\t\troman += \"x\"\n\t\tnumber -= 10\n\t\
    }\n\tif number >= 9 {\n\t\t// Roman numeral for 9 is 'ix'.\n\t\troman += \"ix\"\
    \n\t\tnumber -= 9\n\t}\n\tif number >= 5 {\n\t\t// Roman numeral for 5 is 'v'.\n\
    \t\troman += \"v\"\n\t\tnumber -= 5\n\t}\n\tif number >= 4 {\n\t\t// Roman numeral\
    \ for 4 is 'iv'.\n\t\troman += \"iv\"\n\t\tnumber -= 4\n\t}\n\tif number >= 1\
    \ {\n\t\t// Roman numeral for 1 is 'i'.\n\t\troman += \"i\"\n\t\tnumber -= 1\n\
    \t}\n\treturn roman\n}\n", "    numbers := map[int]string{\n        0: \"\",\n\
    \        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\"\
    ,\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n        30: \"\
    xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n       \
    \ 70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"c\"\
    ,\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\"\
    ,\n        900: \"cm\",\n        1000: \"m\",\n    }\n\n    var result string\n\
    \n    if number < 10 {\n        result = numbers[number]\n    } else if number\
    \ < 100 {\n        remainder := number % 10\n        if remainder == 0 {\n   \
    \         result = numbers[number]\n        } else {\n            result = numbers[number\
    \ - remainder] + numbers[remainder]\n        }\n    } else if number < 1000 {\n\
    \        quotient := number / 100\n        remainder := number % 100\n       \
    \ if remainder == 0 {\n            result = numbers[quotient] + numbers[100]\n\
    \        } else {\n            result = numbers[quotient] + numbers[100] + int_to_mini_roman(remainder)\n\
    \        }\n    } else {\n        result = numbers[number]\n    }\n\n    return\
    \ result\n}\n", "    m := map[int]string{1: \"i\", 2: \"ii\", 3: \"iii\", 4: \"\
    iv\", 5: \"v\", 6: \"vi\", 7: \"vii\", 8: \"viii\", 9: \"ix\", 10: \"x\",\n  \
    \      20: \"xx\", 30: \"xxx\", 40: \"xl\", 50: \"l\", 60: \"lx\", 70: \"lxx\"\
    , 80: \"lxxx\", 90: \"xc\", 100: \"c\",\n        200: \"cc\", 300: \"ccc\", 400:\
    \ \"cd\", 500: \"d\", 600: \"dc\", 700: \"dcc\", 800: \"dccc\", 900: \"cm\", 1000:\
    \ \"m\"}\n    res := \"\"\n    k := 1\n    n := number\n    for n > 0 {\n    \
    \    temp := n % 10\n        if temp != 0 {\n            res = m[temp * k] + res\n\
    \        }\n        n = n / 10\n        k = k * 10\n    }\n    return res\n}\n",
  "\t// set up a map of the number: letter translations\n\t// numbers are keys, letters\
    \ are values\n\t// map is a hash table (or dictionary)\n\n\tletters := map[int]string{\n\
    \t\t1000: \"m\",\n\t\t900: \"cm\",\n\t\t500: \"d\",\n\t\t400: \"cd\",\n\t\t100:\
    \ \"c\",\n\t\t90: \"xc\",\n\t\t50: \"l\",\n\t\t40: \"xl\",\n\t\t10: \"x\",\n\t\
    \t9: \"ix\",\n\t\t5: \"v\",\n\t\t4: \"iv\",\n\t\t1: \"i\",\n\t}\n\n\t// transalte\
    \ the number into roman numerals\n\t// store the result in an empty string\n\t\
    var roman string\n\t// for loop through the keys of the map\n\tfor num := range\
    \ letters {\n\t\t// check the remainder of the number divided by the key\n\t\t\
    // if the remainder is zero, that means the number is divisible by the key\n\t\
    \t// we know that the key is a valid roman numeral\n\t\tfor number % num == 0\
    \ {\n\t\t\t// append the roman numeral to the roman string\n\t\t\troman += letters[num]\n\
    \t\t\t// update the number\n\t\t\tnumber -= num\n\t\t}\n\t}\n\t// return the roman\
    \ string\n\treturn roman\n}\n", "    var result string\n    return result\n}\n",
  "    var result string\n    numerals := [...]string{\"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}\n    values\
    \ := [...]int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i\
    \ := 0; i < len(numerals); i++ {\n        for number >= values[i] {\n        \
    \    result += numerals[i]\n            number -= values[i]\n        }\n    }\n\
    \    return result\n}\n", "    // create a map to store roman numerals and their\
    \ respective numbers\n    romans := map[int]string{\n        1:    \"i\",\n  \
    \      4:    \"iv\",\n        5:    \"v\",\n        9:    \"ix\",\n        10:\
    \   \"x\",\n        40:   \"xl\",\n        50:   \"l\",\n        90:   \"xc\"\
    ,\n        100:  \"c\",\n        400:  \"cd\",\n        500:  \"d\",\n       \
    \ 900:  \"cm\",\n        1000: \"m\",\n    }\n\n    keys := []int{1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    roman := \"\"\n\n    for number >\
    \ 0 {\n        for _, key := range keys {\n            if number >= key {\n  \
    \              roman += romans[key]\n                number -= key\n         \
    \       break\n            }\n        }\n    }\n\n    return roman\n}\n", "  \
    \  const thousand = \"m\"\n    const five_hundred = \"d\"\n    const hundred =\
    \ \"c\"\n    const fifty = \"l\"\n    const ten = \"x\"\n    const five = \"v\"\
    \n    const one = \"i\"\n\n    var str string\n\n    if number < 1 || number >\
    \ 1000 {\n        return \"\"\n    }\n\n    if number >= 1000 {\n        str +=\
    \ thousand\n        number -= 1000\n    }\n\n    if number >= 900 {\n        str\
    \ += hundred + thousand\n        number -= 900\n    }\n\n    if number >= 500\
    \ {\n        str += five_hundred\n        number -= 500\n    }\n\n    if number\
    \ >= 400 {\n        str += hundred + five_hundred\n        number -= 400\n   \
    \ }\n\n    if number >= 100 {\n        str += hundred\n        number -= 100\n\
    \    }\n\n    if number >= 90 {\n        str += ten + hundred\n        number\
    \ -= 90\n    }\n\n    if number >= 50 {\n        str += fifty\n        number\
    \ -= 50\n    }\n\n    if number >= 40 {\n        str += ten + fifty\n        number\
    \ -= 40\n    }\n\n    if number >= 10 {\n        str += ten\n        number -=\
    \ 10\n    }\n\n    if number >= 9 {\n        str += one + ten\n        number\
    \ -= 9\n    }\n\n    if number >= 5 {\n        str += five\n        number -=\
    \ 5\n    }\n\n    if number >= 4 {\n        str += one + five\n        number\
    \ -= 4\n    }\n\n    if number >= 1 {\n        str += one\n        number -= 1\n\
    \    }\n\n    return str\n}\n", "    //return \"\"\n}\n", "    roman := \"\"\n\
    \    roman += strings.Repeat(\"m\", number / 1000)\n    number %= 1000\n    roman\
    \ += strings.Repeat(\"c\", number / 100)\n    number %= 100\n    roman += strings.Repeat(\"\
    x\", number / 10)\n    number %= 10\n    roman += strings.Repeat(\"i\", number)\n\
    \    return roman\n}\n", "    mapper := map[int]string{\n        1: \"i\",\n \
    \       5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\"\
    ,\n        500: \"d\",\n        1000: \"m\",\n    }\n    var result string\n \
    \   if number <= 3 {\n        result = mapper[1] * number\n    } else if number\
    \ == 4 {\n        result = fmt.Sprintf(\"%s%s\", mapper[1], mapper[5])\n    }\
    \ else if number <= 8 {\n        result = fmt.Sprintf(\"%s%s\", mapper[5], mapper[1]\
    \ * (number - 5))\n    } else if number == 9 {\n        result = fmt.Sprintf(\"\
    %s%s\", mapper[1], mapper[10])\n    } else if number <= 39 {\n        result =\
    \ fmt.Sprintf(\"%s%s\", mapper[10], mapper[1] * (number / 10))\n    } else if\
    \ number <= 49 {\n        result = fmt.Sprintf(\"%s%s%s\", mapper[10], mapper[50],\
    \ mapper[1] * (number - 40))\n    } else if number <= 89 {\n        result = fmt.Sprintf(\"\
    %s%s%s\", mapper[50], mapper[10], mapper[1] * (number - 50))\n    } else if number\
    \ <= 99 {\n        result = fmt.Sprintf(\"%s%s%s\", mapper[10], mapper[100], mapper[1]\
    \ * (number - 90))\n    } else if number <= 399 {\n        result = fmt.Sprintf(\"\
    %s%s%s\", mapper[100], mapper[10], mapper[1] * (number / 100))\n    } else if\
    \ number <= 499 {\n        result = fmt.Sprintf(\"%s%s%s\", mapper[100], mapper[500],\
    \ mapper[1] * (number - 400))\n    } else if number <= 899 {\n        result =\
    \ fmt.Sprintf(\"%s%s%s\", mapper[500], mapper[100], mapper[1] * (number - 500))\n\
    \    } else if", "    // your code here\n    return \"\"\n}\n", "    // insert\
    \ your code here\n    return \"\"\n}\n", "    var str string\n    if number >=\
    \ 1000 {\n        str += \"m\"\n        number -= 1000\n    }\n    if number >=\
    \ 900 {\n        str += \"cm\"\n        number -= 900\n    }\n    if number >=\
    \ 500 {\n        str += \"d\"\n        number -= 500\n    }\n    if number >=\
    \ 400 {\n        str += \"cd\"\n        number -= 400\n    }\n    if number >=\
    \ 100 {\n        str += \"c\"\n        number -= 100\n    }\n    if number >=\
    \ 90 {\n        str += \"xc\"\n        number -= 90\n    }\n    if number >= 50\
    \ {\n        str += \"l\"\n        number -= 50\n    }\n    if number >= 40 {\n\
    \        str += \"xl\"\n        number -= 40\n    }\n    if number >= 10 {\n \
    \       str += \"x\"\n        number -= 10\n    }\n    if number >= 9 {\n    \
    \    str += \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n       \
    \ str += \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        str\
    \ += \"iv\"\n        number -= 4\n    }\n    if number >= 1 {\n        str +=\
    \ \"i\"\n        number -= 1\n    }\n    return str\n}\n", "    return \"\"\n\
    }\n", "\t// Fill in here\n    return \"\"\n}\n", "  var result string\n  // M\
    \ = 1000, D = 500, C = 100, L = 50, X = 10, V = 5, I = 1\n  values := []int{1000,\
    \ 500, 100, 50, 10, 5, 1}\n  letters := []string{\"m\", \"d\", \"c\", \"l\", \"\
    x\", \"v\", \"i\"}\n  n := 0\n\n  for number > 0 {\n    result += letters[n]\n\
    \    number -= values[n]\n    if number < 0 {\n      number += values[n]\n   \
    \   result = result[:len(result)-1]\n      n++\n    }\n  }\n\n  return result\n\
    }\n", "    romans := []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"\
    }\n    var result string\n    for i, j := 0, 0; number > 0; i, j = i+2, j+1 {\n\
    \        digit := number % 10\n        if digit == 0 {\n            number /=\
    \ 10\n            continue\n        }\n        if digit <= 3 {\n            result\
    \ = strings.Repeat(romans[i], digit) + result\n        } else if digit == 4 {\n\
    \            result = romans[i] + romans[i+1] + result\n        } else if digit\
    \ <= 8 {\n            result = romans[i+1] + strings.Repeat(romans[i], digit-5)\
    \ + result\n        } else {\n            result = romans[i] + romans[i+2] + result\n\
    \        }\n        number /= 10\n    }\n    return result\n}\n", "    if number\
    \ <= 0 || number > 1000 {\n        return \"invalid number\"\n    }\n\n    switch\
    \ number {\n    case 1:\n        return \"i\"\n    case 2:\n        return \"\
    ii\"\n    case 3:\n        return \"iii\"\n    case 4:\n        return \"iv\"\n\
    \    case 5:\n        return \"v\"\n    case 6:\n        return \"vi\"\n    case\
    \ 7:\n        return \"vii\"\n    case 8:\n        return \"viii\"\n    case 9:\n\
    \        return \"ix\"\n    case 10:\n        return \"x\"\n    case 11:\n   \
    \     return \"xi\"\n    case 12:\n        return \"xii\"\n    case 13:\n    \
    \    return \"xiii\"\n    case 14:\n        return \"xiv\"\n    case 15:\n   \
    \     return \"xv\"\n    case 16:\n        return \"xvi\"\n    case 17:\n    \
    \    return \"xvii\"\n    case 18:\n        return \"xviii\"\n    case 19:\n \
    \       return \"xix\"\n    case 20:\n        return \"xx\"\n    case 30:\n  \
    \      return \"xxx\"\n    case 40:\n        return \"xl\"\n    case 50:\n   \
    \     return \"l\"\n    case 60:\n        return \"lx\"\n    case 70:\n      \
    \  return \"lxx\"\n    case 80:\n        return \"lxxx\"\n    case 90:\n     \
    \   return \"xc\"\n    case 100:\n        return \"c\"\n    case 200:\n      \
    \  return \"cc\"\n    case 300:\n        return \"ccc\"\n    case 400:\n     \
    \   return \"cd\"\n    case 500:\n        return \"d\"\n    case 600:\n      \
    \  return \"dc\"\n    case 700:\n        return \"dcc\"\n    case 800:\n     \
    \   return \"dccc\"\n    case 900:\n        return \"cm\"\n    case 1000:\n  \
    \      return \"m\"\n    }\n\n    return \"unimplemented\"\n}\n", "    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var result string\n\
    \    if number < 0 || number > 1000 {\n        panic(\"wrong number\")\n    }\n\
    \    for number > 0 {\n        switch {\n        case number >= 1000:\n      \
    \      result += \"m\"\n            number -= 1000\n        case number >= 900:\n\
    \            result += \"cm\"\n            number -= 900\n        case number\
    \ >= 500:\n            result += \"d\"\n            number -= 500\n        case\
    \ number >= 400:\n            result += \"cd\"\n            number -= 400\n  \
    \      case number >= 100:\n            result += \"c\"\n            number -=\
    \ 100\n        case number >= 90:\n            result += \"xc\"\n            number\
    \ -= 90\n        case number >= 50:\n            result += \"l\"\n           \
    \ number -= 50\n        case number >= 40:\n            result += \"xl\"\n   \
    \         number -= 40\n        case number >= 10:\n            result += \"x\"\
    \n            number -= 10\n        case number >= 9:\n            result += \"\
    ix\"\n            number -= 9\n        case number >= 5:\n            result +=\
    \ \"v\"\n            number -= 5\n        case number >= 4:\n            result\
    \ += \"iv\"\n            number -= 4\n        case number >= 1:\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result\n}\n",
  "\tfmt.Println(\"here\")\n\troman_digits := []string{\"i\", \"v\", \"x\", \"l\"\
    , \"c\", \"d\", \"m\"}\n\tresult := \"\"\n\tindex := 0\n\tfor number > 0 {\n\t\
    \tfor i := 1; i <= 4; i++ {\n\t\t\tif number >= i * pow(10, index) {\n\t\t\t\t\
    result += roman_digits[index * 2]\n\t\t\t\tnumber -= i * pow(10, index)\n\t\t\t\
    }\n\t\t}\n\t\tfor i := 5; i <= 9; i++ {\n\t\t\tif number >= i * pow(10, index)\
    \ {\n\t\t\t\tresult += roman_digits[index * 2 + 1]\n\t\t\t\tfor j := 1; j <= i\
    \ - 5; j++ {\n\t\t\t\t\tresult += roman_digits[index * 2]\n\t\t\t\t}\n\t\t\t\t\
    number -= i * pow(10, index)\n\t\t\t}\n\t\t}\n\t\tindex++\n\t}\n\treturn result\n\
    }\n", "    if number <= 0 || number > 1000 {\n        return \"\"\n    }\n\n \
    \   var result string\n    for i := 0; i < number; i++ {\n        if i < 3 {\n\
    \            result += \"i\"\n        } else if i == 3 {\n            result =\
    \ \"iv\"\n        } else if i < 8 {\n            result += \"v\"\n        } else\
    \ if i == 8 {\n            result = \"ix\"\n        } else if i < 38 {\n     \
    \       result += \"x\"\n        } else if i < 48 {\n            result = \"xl\"\
    \n        } else if i < 88 {\n            result += \"l\"\n        } else if i\
    \ < 98 {\n            result = \"xc\"\n        } else if i < 388 {\n         \
    \   result += \"c\"\n        } else if i < 488 {\n            result = \"cd\"\n\
    \        } else if i < 888 {\n            result += \"d\"\n        } else if i\
    \ < 988 {\n            result = \"cm\"\n        } else {\n            result +=\
    \ \"m\"\n        }\n    }\n\n    return result\n}\n", "    if number > 1000 ||\
    \ number < 1 {\n        panic(\"invalid number\")\n    }\n    result := \"\"\n\
    \    for number > 0 {\n        if number >= 1000 {\n            result += \"m\"\
    \n            number -= 1000\n        } else if number >= 900 {\n            result\
    \ += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n  \
    \          result += \"d\"\n            number -= 500\n        } else if number\
    \ >= 400 {\n            result += \"cd\"\n            number -= 400\n        }\
    \ else if number >= 100 {\n            result += \"c\"\n            number -=\
    \ 100\n        } else if number >= 90 {\n            result += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            result += \"\
    l\"\n            number -= 50\n        } else if number >= 40 {\n            result\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        result += \"x\"\n            number -= 10\n        } else if number >=\
    \ 9 {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    result := \"\"\
    \n    // you need to insert the values in descending order so that you get the\n\
    \    // order of operations correct\n    for _, tuple := range []", "    // Fill\
    \ this in.\n    return \"\"\n}\n", "    var ret string\n\n    if number < 1 ||\
    \ number > 1000 {\n        return ret\n    }\n\n    // num = 1~9\n    num := number\
    \ % 10\n    switch num {\n        case 1: ret = \"i\"\n        case 2: ret = \"\
    ii\"\n        case 3: ret = \"iii\"\n        case 4: ret = \"iv\"\n        case\
    \ 5: ret = \"v\"\n        case 6: ret = \"vi\"\n        case 7: ret = \"vii\"\n\
    \        case 8: ret = \"viii\"\n        case 9: ret = \"ix\"\n    }\n\n    //\
    \ num = 10~90\n    num = number / 10 % 10\n    switch num {\n        case 1: ret\
    \ = \"x\" + ret\n        case 2: ret = \"xx\" + ret\n        case 3: ret = \"\
    xxx\" + ret\n        case 4: ret = \"xl\" + ret\n        case 5: ret = \"l\" +\
    \ ret\n        case 6: ret = \"lx\" + ret\n        case 7: ret = \"lxx\" + ret\n\
    \        case 8: ret = \"lxxx\" + ret\n        case 9: ret = \"xc\" + ret\n  \
    \  }\n\n    // num = 100~900\n    num = number / 100 % 10\n    switch num {\n\
    \        case 1: ret = \"c\" + ret\n        case 2: ret = \"cc\" + ret\n     \
    \   case 3: ret = \"ccc\" + ret\n        case 4: ret = \"cd\" + ret\n        case\
    \ 5: ret = \"d\" + ret\n        case 6: ret = \"dc\" + ret\n        case 7: ret\
    \ = \"dcc\" + ret\n        case 8: ret = \"dccc\" + ret\n        case 9: ret =\
    \ \"cm\" + ret\n    }\n\n    // num = 1000\n    num = number / 1000\n    if num\
    \ == 1 {\n        ret = \"m\" + ret\n    }\n\n    return ret\n}\n", "    var result\
    \ string\n    if number < 1 || number > 1000 {\n        return \"ERROR\"\n   \
    \ }\n    romans := []int{\n        1000, 500, 100, 50, 10, 5, 1,\n    }\n    chars\
    \ := []string{\n        \"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\",\n   \
    \ }\n    substracts := []int{\n        900, 400, 90, 40, 9, 4,\n    }\n    substitutions\
    \ := []string{\n        \"cm\", \"cd\", \"xc\", \"xl\", \"ix\", \"iv\",\n    }\n\
    \    for i := 0; i < len(romans); i++ {\n        for number >= romans[i] {\n \
    \           result += chars[i]\n            number -= romans[i]\n        }\n \
    \       for number >= substracts[i] {\n            result += substitutions[i]\n\
    \            number -= substracts[i]\n        }\n    }\n    return result\n}\n",
  "    output := \"\"\n    romanNumeral := map[int]string{\n        1: \"i\", 4: \"\
    iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\",\n        90: \"xc\"\
    , 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\",\n    }\n    keys\
    \ := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for _, k\
    \ := range keys {\n        for number >= k {\n            output += romanNumeral[k]\n\
    \            number -= k\n        }\n    }\n    return output\n}\n", "    roman\
    \ := \"\"\n    roman += int_to_mini_roman_hundreds(number)\n    roman += int_to_mini_roman_tens(number)\n\
    \    roman += int_to_mini_roman_ones(number)\n    return roman\n}\n", "    //numbers\
    \ := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    //roman_numbers\
    \ := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"}\n    numbers := []int{1000, 500, 100, 50, 10,\
    \ 5, 1}\n    roman_numbers := []string{\"m\", \"d\", \"c\", \"l\", \"x\", \"v\"\
    , \"i\"}\n    var result string\n    for index, value := range numbers {\n   \
    \     for number >= value {\n            result += roman_numbers[index]\n    \
    \        number -= value\n        }\n    }\n    return result\n}\n", "    return\
    \ \"\"\n}\n", "    romans := [4][]string{\n        []string{\"i\", \"v\", \"x\"\
    },\n        []string{\"x\", \"l\", \"c\"},\n        []string{\"c\", \"d\", \"\
    m\"},\n        []string{\"m\", \"V\", \"X\"},\n    }\n    digits := []int{}\n\
    \    for number > 0 {\n        digits = append(digits, number % 10)\n        number\
    \ /= 10\n    }\n    numberOfDigits := len(digits)\n    roman := \"\"\n    for\
    \ i := 0; i < numberOfDigits; i++ {\n        digit := digits[i]\n        if digit\
    \ == 0 {\n            continue\n        }\n        if digit == 4 {\n         \
    \   roman = romans[i][0] + romans[i][1] + roman\n        } else if digit == 9\
    \ {\n            roman = romans[i][0] + romans[i][2] + roman\n        } else {\n\
    \            s := \"\"\n            if digit >= 5 {\n                s += romans[i][1]\n\
    \                digit -= 5\n            }\n            for j := 0; j < digit;\
    \ j++ {\n                s += romans[i][0]\n            }\n            roman =\
    \ s + roman\n        }\n    }\n    return roman\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var roman string\n\n    roman_parts := map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n\n   \
    \ // If negative,\n    if number < 0 {\n        roman = \"-\"\n        number\
    \ = number * -1\n    }\n\n    // If zero,\n    if number == 0 {\n        roman\
    \ = \"n\"\n    }\n\n    return roman\n}\n", "    var result string\n    if number\
    \ <= 0 || number > 1000 {\n        return \"\"\n    }\n    for i := 0; i < number\
    \ / 100; i++ {\n        result += \"c\"\n    }\n    for i := 0; i < (number %\
    \ 100) / 50; i++ {\n        result += \"l\"\n    }\n    for i := 0; i < (number\
    \ % 50) / 10; i++ {\n        result += \"x\"\n    }\n    for i := 0; i < (number\
    \ % 10) / 5; i++ {\n        result += \"v\"\n    }\n    for i := 0; i < number\
    \ % 5; i++ {\n        result += \"i\"\n    }\n    return result\n}\n", "    if\
    \ number < 1 || number > 1000 {\n        return \"\"\n    }\n\n    numerals :=\
    \ []", "    // convert number to mini roman string\n    var s string\n    romans\
    \ := [4][10]string{\n        {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"\
    vi\", \"vii\", \"viii\", \"ix\"},\n        {\"\", \"x\", \"xx\", \"xxx\", \"xl\"\
    , \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n        {\"\", \"c\", \"cc\", \"\
    ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n        {\"\", \"m\"\
    , \"mm\", \"mmm\", \"\", \"\", \"\", \"\", \"\", \"\"},\n    }\n    if number\
    \ <= 0 || number > 1000 {\n        return \"\"\n    }\n    for i := 0; i < 4;\
    \ i++ {\n        s = romans[i][number % 10] + s\n        number /= 10\n    }\n\
    \    return s\n}\n", "    // >>> for i in range(1, 1000):\n    // ...    print(i,\
    \ int_to_mini_roman(i))\n    // 1 i\n    // 2 ii\n    // 3 iii\n    // 4 iv\n\
    \    // 5 v\n    // 6 vi\n    // 7 vii\n    // 8 viii\n    // 9 ix\n    // 10\
    \ x\n    // 11 xi\n    // 12 xii\n    // 13 xiii\n    // 14 xiv\n    // 15 xv\n\
    \    // 16 xvi\n    // 17 xvii\n    // 18 xviii\n    // 19 xix\n    // 20 xx\n\
    \    // 21 xxi\n    // 22 xxii\n    // 23 xxiii\n    // 24 xxiv\n    // 25 xxv\n\
    \    // 26 xxvi\n    // 27 xxvii\n    // 28 xxviii\n    // 29 xxix\n    // 30\
    \ xxx\n    // 31 xxxi\n    // 32 xxxii\n    // 33 xxxiii\n    // 34 xxxiv\n  \
    \  // 35 xxxv\n    // 36 xxxvi\n    // 37 xxxvii\n    // 38 xxxviii\n    // 39\
    \ xxxix\n    // 40 xl\n    // 41 xli\n    // 42 xlii\n    // 43 xliii\n    //\
    \ 44 xliv\n    // 45 xlv\n    // 46 xlvi\n    // 47 xlvii\n    // 48 xlviii\n\
    \    // 49 xlix\n    // 50 l\n    // 51 li\n    // 52 lii\n    // 53 liii\n  \
    \  // 54 liv\n    // 55 lv\n    // 56 lvi\n    // 57 lvii\n    // 58 lviii\n \
    \   // 59 lix\n    // 60 lx\n    // 61 lxi\n    // 62 lxii\n    // 63 lxiii\n\
    \    // 64 lxiv\n    // 65 lxv\n    // 66 lxvi\n    // 67 lxvii\n    // 68 lxviii\n\
    \    // 69 lxix\n    // 70 lxx\n    // 71 lxxi\n    // 72 lxxii\n    // 73 lxxiii\n\
    \    // 74 lxxiv\n    // 75 lxxv\n    //", "    result := \"\"\n    if number\
    \ <= 0 || number > 1000 {\n        return result\n    }\n    // 1000\n    mCount\
    \ := number / 1000\n    number = number % 1000\n    for i := 0; i < mCount; i++\
    \ {\n        result += \"m\"\n    }\n    // 900\n    if number >= 900 {\n    \
    \    result += \"cm\"\n        number -= 900\n    }\n    // 500\n    if number\
    \ >= 500 {\n        result += \"d\"\n        number -= 500\n    }\n    // 400\n\
    \    if number >= 400 {\n        result += \"cd\"\n        number -= 400\n   \
    \ }\n    // 100\n    cCount := number / 100\n    number = number % 100\n    for\
    \ i := 0; i < cCount; i++ {\n        result += \"c\"\n    }\n    // 90\n    if\
    \ number >= 90 {\n        result += \"xc\"\n        number -= 90\n    }\n    //\
    \ 50\n    if number >= 50 {\n        result += \"l\"\n        number -= 50\n \
    \   }\n    // 40\n    if number >= 40 {\n        result += \"xl\"\n        number\
    \ -= 40\n    }\n    // 10\n    xCount := number / 10\n    number = number % 10\n\
    \    for i := 0; i < xCount; i++ {\n        result += \"x\"\n    }\n    // 9\n\
    \    if number == 9 {\n        result += \"ix\"\n        number -= 9\n    }\n\
    \    // 5\n    if number >= 5 {\n        result += \"v\"\n        number -= 5\n\
    \    }\n    // 4\n    if number == 4 {\n        result += \"iv\"\n        number\
    \ -= 4\n    }\n    // 1\n    for i := 0; i < number; i++ {\n        result +=\
    \ \"i\"\n    }\n    return result\n}\n", "    // Your code here\n    return \"\
    \"\n}\n", "    numeral := \"\"\n    // right to left works fine with roman numerals\n\
    \    romans := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    digits := []int{1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for index, digit := range digits\
    \ {\n        for number >= digit {\n            numeral += romans[index]\n   \
    \         number -= digit\n        }\n    }\n    return numeral\n}\n", "    //\n\
    \    return \"i\"\n}\n", "    roman_numerals := []string{\n        \"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    }\n    result\
    \ := \"\"\n    // We will use a ", "    // Your code here\n    return \"\"\n}\n",
  "    // Your code here\n    return \"\"\n}\n", "    var result string\n    // Your\
    \ code goes here\n    return result\n}\n", "    str_result := \"\"\n    roman_dict\
    \ := map[int]string{1000: \"m\", 900: \"cm\", 500: \"d\", 400: \"cd\", 100: \"\
    c\", 90: \"xc\", 50: \"l\", 40: \"xl\", 10: \"x\", 9: \"ix\", 5: \"v\", 4: \"\
    iv\", 1: \"i\"}\n    val_list := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1}\n    for _, val := range val_list {\n        for number >= val {\n\
    \            str_result += roman_dict[val]\n            number -= val\n      \
    \  }\n    }\n    return str_result\n}\n", "    var res string\n\n    if number\
    \ >= 1000 {\n        res += \"m\"\n        number -= 1000\n    }\n\n    if number\
    \ >= 900 {\n        res += \"cm\"\n        number -= 900\n    }\n\n    if number\
    \ >= 500 {\n        res += \"d\"\n        number -= 500\n    }\n\n    if number\
    \ >= 400 {\n        res += \"cd\"\n        number -= 400\n    }\n\n    if number\
    \ >= 100 {\n        res += \"c\"\n        number -= 100\n    }\n\n    if number\
    \ >= 90 {\n        res += \"xc\"\n        number -= 90\n    }\n\n    if number\
    \ >= 50 {\n        res += \"l\"\n        number -= 50\n    }\n\n    if number\
    \ >= 40 {\n        res += \"xl\"\n        number -= 40\n    }\n\n    if number\
    \ >= 10 {\n        res += \"x\"\n        number -= 10\n    }\n\n    if number\
    \ >= 9 {\n        res += \"ix\"\n        number -= 9\n    }\n\n    if number >=\
    \ 5 {\n        res += \"v\"\n        number -= 5\n    }\n\n    if number >= 4\
    \ {\n        res += \"iv\"\n        number -= 4\n    }\n\n    if number >= 1 {\n\
    \        res += \"i\"\n        number -= 1\n    }\n\n    return res\n}\n", " \
    \   if number < 1 || number > 1000 {\n        return \"\"\n    }\n\n    digits\
    \ := make([]int, 0)\n    for number > 0 {\n        digits = append(digits, number\
    \ % 10)\n        number /= 10\n    }\n\n    result := \"\"\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        switch i {\n        case 0:\n            result\
    \ += int_to_roman_unit(digits[i])\n        case 1:\n            result += int_to_roman_tens(digits[i])\n\
    \        case 2:\n            result += int_to_roman_hundreds(digits[i])\n   \
    \     case 3:\n            result += int_to_roman_thousands(digits[i])\n     \
    \   }\n    }\n\n    return result\n}\n", "\tanswer := \"\"\n\t// TODO: Make this\
    \ method more beautiful.\n\tfor number > 0 {\n\t\tif number >= 1000 {\n\t\t\t\
    answer += \"m\"\n\t\t\tnumber -= 1000\n\t\t} else if number >= 900 {\n\t\t\tanswer\
    \ += \"cm\"\n\t\t\tnumber -= 900\n\t\t} else if number >= 500 {\n\t\t\tanswer\
    \ += \"d\"\n\t\t\tnumber -= 500\n\t\t} else if number >= 400 {\n\t\t\tanswer +=\
    \ \"cd\"\n\t\t\tnumber -= 400\n\t\t} else if number >= 100 {\n\t\t\tanswer +=\
    \ \"c\"\n\t\t\tnumber -= 100\n\t\t} else if number >= 90 {\n\t\t\tanswer += \"\
    xc\"\n\t\t\tnumber -= 90\n\t\t} else if number >= 50 {\n\t\t\tanswer += \"l\"\n\
    \t\t\tnumber -= 50\n\t\t} else if number >= 40 {\n\t\t\tanswer += \"xl\"\n\t\t\
    \tnumber -= 40\n\t\t} else if number >= 10 {\n\t\t\tanswer += \"x\"\n\t\t\tnumber\
    \ -= 10\n\t\t} else if number >= 9 {\n\t\t\tanswer += \"ix\"\n\t\t\tnumber -=\
    \ 9\n\t\t} else if number >= 5 {\n\t\t\tanswer += \"v\"\n\t\t\tnumber -= 5\n\t\
    \t} else if number >= 4 {\n\t\t\tanswer += \"iv\"\n\t\t\tnumber -= 4\n\t\t} else\
    \ if number >= 1 {\n\t\t\tanswer += \"i\"\n\t\t\tnumber -= 1\n\t\t}\n\t}\n\treturn\
    \ answer\n}\n", "    return \"\"\n}\n", "    var roman string\n\n    arabicToRoman\
    \ := map[int]string{\n        1000: \"m\",\n        900: \"cm\",\n        500:\
    \ \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n   \
    \     50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n\
    \        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n\n    for i\
    \ := 1; i <= number; i++ {\n        for key, value := range arabicToRoman {\n\
    \            if i >= key {\n                roman += value\n                i\
    \ -= key\n                break\n            }\n        }\n    }\n\n    return\
    \ roman\n}\n", "    n := number\n    result := \"\"\n    int_to_roman_map := map[int]string{1000:\"\
    m\", 900:\"cm\", 500:\"d\", 400:\"cd\", 100:\"c\", 90:\"xc\", 50:\"l\", 40:\"\
    xl\", 10:\"x\", 9:\"ix\", 5:\"v\", 4:\"iv\", 1:\"i\"}\n    for k, v := range int_to_roman_map\
    \ {\n        for n >= k {\n            result += v\n            n -= k\n     \
    \   }\n    }\n    return result\n}\n", "    roman := \"\"\n    roman += append_symbol(\"\
    M\", number / 1000)\n    number = number % 1000\n    roman += append_symbol(\"\
    C\", number / 100)\n    number = number % 100\n    roman += append_symbol(\"X\"\
    , number / 10)\n    number = number % 10\n    roman += append_symbol(\"I\", number)\n\
    \    return roman\n}\n", "    if number < 1 || number > 1000 {\n        panic(\"\
    1 <= num <= 1000\")\n    }\n    // Build a map that maps an integer to a roman\
    \ numeral string\n    numeral_map := map[int]string{\n        1: \"i\",\n    \
    \    5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n\
    \        500: \"d\",\n        1000: \"m\",\n    }\n    // Integer to string in\
    \ roman form\n    var roman_numeral string\n    // 1000\n    roman_numeral +=\
    \ numeral_map[1000]\n    number -= 1000\n    if number < 0 {\n        number =\
    \ 0\n    }\n    // 900\n    if number >= 900 {\n        roman_numeral += numeral_map[100]\n\
    \        roman_numeral += numeral_map[1000]\n        number -= 900\n        if\
    \ number < 0 {\n            number = 0\n        }\n    }\n    // 500\n    if number\
    \ >= 500 {\n        roman_numeral += numeral_map[500]\n        number -= 500\n\
    \        if number < 0 {\n            number = 0\n        }\n    }\n    // 400\n\
    \    if number >= 400 {\n        roman_numeral += numeral_map[100]\n        roman_numeral\
    \ += numeral_map[500]\n        number -= 400\n        if number < 0 {\n      \
    \      number = 0\n        }\n    }\n    // 100\n    if number >= 100 {\n    \
    \    roman_numeral += numeral_map[100]\n        number -= 100\n        if number\
    \ < 0 {\n            number = 0\n        }\n    }\n    // 90\n    if number >=\
    \ 90 {\n        roman_numeral += numeral_map[10]\n        roman_numeral += numeral_map[100]\n\
    \        number -= 90\n        if number < 0 {\n            number = 0\n     \
    \   }\n    }\n    // 50\n    if number >= 50 {\n        roman_numeral += numeral_map[50]\n\
    \        number -= 50\n        if number < 0 {\n            number = 0\n     \
    \   }\n    }\n    // 40\n    if number >=", "    // your code here\n    return\
    \ \"\"\n}\n", "    dict := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    nums := []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    roman := \"\"\n    i :=\
    \ 0\n    for number > 0 {\n        if number >= nums[i] {\n            number\
    \ -= nums[i]\n            roman += dict[i]\n        } else {\n            i++\n\
    \        }\n    }\n    return roman\n}\n", "    // Start with the highest valid\
    \ place,\n    // and work down to the ones place.\n    // Once you've found the\
    \ highest place that is valid,\n    // subtract its value from the number, and\
    \ move on.\n    // i.e.\n    // For number 7, find the 'ones' place, and subtract\
    \ 5 from the number.\n    // For number 8, find the 'ones' place, and subtract\
    \ 5 from the number.\n    // For number 14, find the 'tens' place, and subtract\
    \ 10 from the number.\n    // For number 156, find the 'hundreds' place, and subtract\
    \ 100 from the number.\n    var roman_value string = \"\"\n    var places = []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    var roman_symbols = []string{\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"}\n    for i := 0; i < len(places); i++ {\n        place := places[i]\n\
    \        for number >= place {\n            number -= place\n            roman_value\
    \ += roman_symbols[i]\n        }\n    }\n    return roman_value\n}\n", "    //\
    \ Your code here\n    return \"\"\n}\n", "    if number < 1 || number > 1000 {\n\
    \        return \"invalid\"\n    }\n    roman := []string{\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n\
    \    arabic := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n \
    \   result := \"\"\n    for index, num := range arabic {\n        for number >=\
    \ num {\n            result += roman[index]\n            number -= num\n     \
    \   }\n    }\n    return result\n}\n", "    return \"\"\n}\n", "\treturn \"\"\n\
    }\n", "    // Define our mapping\n    mapping := map[int]string{\n        1000:\
    \ \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n  \
    \      100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\"\
    ,\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\"\
    ,\n        1: \"i\",\n    }\n\n    // Save our result in a string\n    result\
    \ := \"\"\n\n    // For every number in our mapping,\n    // subtract it from\
    \ the provided number\n    // and add its roman representation to\n    // our\
    \ result string.\n    for i := 1000; i > 0; i-- {\n        for number >= i {\n\
    \            result += mapping[i]\n            number -= i\n        }\n    }\n\
    \n    return result\n}\n", "    var roman string\n    var roman_dict = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ base_list = []int{1, 5, 10, 50, 100, 500, 1000}\n    var base_list_len = len(base_list)\n\
    \    var number_str = fmt.Sprintf(\"%d\", number)\n    var base_factor int\n \
    \   var base_index int\n    var base_number int\n    var base_number_str string\n\
    \    var number_char_index int\n    var number_char_len int\n\n    for number_char_index,\
    \ number_char_len = 0, len(number_str); number_char_index < number_char_len; number_char_index++\
    \ {\n        base_factor = 1\n        for ; base_factor < number; base_factor\
    \ *= 10 {}\n        base_factor /= 10\n        base_index = base_list_len - 1\n\
    \        for ; base_index >= 0; base_index-- {\n            if base_list[base_index]\
    \ <= base_factor {\n                break\n            }\n        }\n        base_number\
    \ = number / base_factor * base_factor\n        if base_number == base_list[base_index]\
    \ || base_number == base_list[base_index + 1] {\n            base_number_str =\
    \ roman_dict[base_number]\n        } else {\n            if base_number < base_list[base_index\
    \ + 1] {\n                base_number_str = roman_dict[base_list[base_index]]\n\
    \                base_number_str += roman_dict[base_list[base_index + 1]]\n  \
    \          } else {\n                if base_number == base_list[base_index] *\
    \ 4 {\n                    base_number_str = roman_dict[base_list[base_index]]\n\
    \                    base_number_str += roman_dict[base_list[base_index + 2]]\n\
    \                } else {\n                    base_number_str", "    return \"\
    \"\n}\n", "    var (\n        roman string\n        nums []int = []int{1000, 500,\
    \ 100, 50, 10, 5, 1}\n        syms []string = []string{\"m\", \"d\", \"c\", \"\
    l\", \"x\", \"v\", \"i\"}\n    )\n    for i, num := range nums {\n        for\
    \ number >= num {\n            roman += syms[i]\n            number -= num\n \
    \       }\n    }\n    return roman\n}\n", "    var roman string\n\n    hundreds\
    \ := number / 100\n    if hundreds == 1 {\n        roman += \"c\"\n    } else\
    \ if hundreds == 2 {\n        roman += \"cc\"\n    } else if hundreds == 3 {\n\
    \        roman += \"ccc\"\n    } else if hundreds == 4 {\n        roman += \"\
    cd\"\n    } else if hundreds == 5 {\n        roman += \"d\"\n    } else if hundreds\
    \ == 6 {\n        roman += \"dc\"\n    } else if hundreds == 7 {\n        roman\
    \ += \"dcc\"\n    } else if hundreds == 8 {\n        roman += \"dccc\"\n    }\
    \ else if hundreds == 9 {\n        roman += \"cm\"\n    }\n\n    tens := (number\
    \ % 100) / 10\n    if tens == 1 {\n        roman += \"x\"\n    } else if tens\
    \ == 2 {\n        roman += \"xx\"\n    } else if tens == 3 {\n        roman +=\
    \ \"xxx\"\n    } else if tens == 4 {\n        roman += \"xl\"\n    } else if tens\
    \ == 5 {\n        roman += \"l\"\n    } else if tens == 6 {\n        roman +=\
    \ \"lx\"\n    } else if tens == 7 {\n        roman += \"lxx\"\n    } else if tens\
    \ == 8 {\n        roman += \"lxxx\"\n    } else if tens == 9 {\n        roman\
    \ += \"xc\"\n    }\n\n    units := number % 10\n    if units == 1 {\n        roman\
    \ += \"i\"\n    } else if units == 2 {\n        roman += \"ii\"\n    } else if\
    \ units == 3 {\n        roman += \"iii\"\n    } else if units == 4 {\n       \
    \ roman += \"iv\"\n    } else if units == 5 {\n        roman += \"v\"\n    } else\
    \ if units == 6 {\n        roman += \"vi\"\n    } else if units == 7 {\n     \
    \   roman += \"vii\"\n    } else if units == 8 {\n        roman += \"viii\"\n\
    \    } else if units == 9 {\n        roman += \"ix\"\n    }\n\n    return roman\n\
    }\n\n", "    var result string\n    for number >= 1000 {\n        result += \"\
    m\"\n        number -= 1000\n    }\n    if number >= 900 {\n        result +=\
    \ \"cm\"\n        number -= 900\n    }\n    if number >= 500 {\n        result\
    \ += \"d\"\n        number -= 500\n    }\n    if number >= 400 {\n        result\
    \ += \"cd\"\n        number -= 400\n    }\n    for number >= 100 {\n        result\
    \ += \"c\"\n        number -= 100\n    }\n    if number >= 90 {\n        result\
    \ += \"xc\"\n        number -= 90\n    }\n    if number >= 50 {\n        result\
    \ += \"l\"\n        number -= 50\n    }\n    if number >= 40 {\n        result\
    \ += \"xl\"\n        number -= 40\n    }\n    for number >= 10 {\n        result\
    \ += \"x\"\n        number -= 10\n    }\n    if number >= 9 {\n        result\
    \ += \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n        result\
    \ += \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        result +=\
    \ \"iv\"\n        number -= 4\n    }\n    for number >= 1 {\n        result +=\
    \ \"i\"\n        number -= 1\n    }\n    return result\n}\n", "    // convert\
    \ int to roman numerals\n    return \"\"\n}\n", "    return \"TODO\"\n}\n", " \
    \   const (\n        BASE = 10\n        L = 0\n        M = 1\n        C = 2\n\
    \        D = 3\n        X = 4\n        V = 5\n        I = 6\n    )\n    digit_map\
    \ := []string{\"\", \"m\", \"c\", \"d\", \"x\", \"v\", \"i\"}\n    range_map :=\
    \ []int{0, 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}\n    roman_map\
    \ := []string{\"\", \"m\", \"cd\", \"d\", \"cm\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    result := \"\"\n    if number < 1\
    \ || number > 1000 {\n        return result\n    }\n    digits := make([]int,\
    \ 4)\n    digit_cnt := 0\n    while number != 0 {\n        digit := number % BASE\n\
    \        number /= BASE\n        digits[digit_cnt] = digit\n        digit_cnt++\n\
    \    }\n    for i := digit_cnt - 1; i >= 0; i-- {\n        if digits[i] == 0 {\n\
    \            continue\n        }\n        for j := range_map[2 * i]; j < range_map[2\
    \ * i + 1]; j++ {\n            result += digit_map[i]\n        }\n        result\
    \ += roman_map[2 * i + digits[i] / range_map[2 * i + 1]]\n    }\n    return result\n\
    }\n", "    if number <= 0 || number > 1000 {\n        return \"\"\n    }\n\n \
    \   // Init roman numeral as empty string\n    roman_numeral := \"\"\n\n    //\
    \ Define roman to numeral hash\n    roman_to_numeral := map[string]int{\n    \
    \    \"i\": 1,\n        \"v\": 5,\n        \"x\": 10,\n        \"l\": 50,\n  \
    \      \"c\": 100,\n        \"d\": 500,\n        \"m\": 1000,\n    }\n\n    //\
    \ Define roman numeral symbols\n    roman_symbols := []string{\"m\", \"d\", \"\
    c\", \"l\", \"x\", \"v\", \"i\"}\n\n    // Define roman numeral symbols validation\
    \ order\n    roman_symbols_validation_order := []string{\"m\", \"d\", \"c\", \"\
    l\", \"x\", \"v\", \"i\"}\n\n    // Iterate through roman symbols\n    for _,\
    \ symbol := range roman_symbols {\n        // Check if number is not zero\n  \
    \      if number != 0 {\n            // Get symbol value\n            symbol_value\
    \ := roman_to_numeral[symbol]\n\n            // Get current number value\n   \
    \         current_value := number\n\n            // Iterate through roman symbols\
    \ validation order\n            for _, validation_symbol := range roman_symbols_validation_order\
    \ {\n                // Break loop if number is zero\n                if number\
    \ == 0 {\n                    break\n                }\n\n                // Get\
    \ validation symbol value\n                validation_symbol_value := roman_to_numeral[validation_symbol]\n\
    \n                // Check if current number value is lower than validation symbol\
    \ value\n                if current_value < validation_symbol_value {\n      \
    \              // Update number\n                    number -= symbol_value\n\n\
    \                    // Update roman numeral\n                    roman_numeral\
    \ += symbol\n                }\n            }\n        }\n    }\n\n    // Return\
    \ roman numeral\n    return roman_numeral\n}\n", "    // your code goes here\n\
    \    roman := \"\"\n    for number > 0 {\n        if number >= 1000 {\n      \
    \      roman += \"m\"\n            number -= 1000\n        } else if number >=\
    \ 900 {\n            roman += \"cm\"\n            number -= 900\n        } else\
    \ if number >= 500 {\n            roman += \"d\"\n            number -= 500\n\
    \        } else if number >= 400 {\n            roman += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n    \
    \        number -= 100\n        } else if number >= 90 {\n            roman +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     roman += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            roman += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            roman += \"x\"\n            number -= 10\n     \
    \   } else if number >= 9 {\n            roman += \"ix\"\n            number -=\
    \ 9\n        } else if number >= 5 {\n            roman += \"v\"\n           \
    \ number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n\
    \            number -= 4\n        } else if number >= 1 {\n            roman +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    return roman\n}\n", " \
    \   // YOUR CODE HERE\n    return \"\"\n}\n", "    var result string\n    for\
    \ _, numeral := range miniRomanNumerals {\n        for number >= numeral.value\
    \ {\n            result += numeral.symbol\n            number -= numeral.value\n\
    \        }\n    }\n    return result\n}\n\ntype miniRomanNumeral ", "    return\
    \ \"\"\n}\n", "    if number < 1 || number > 1000 {\n        panic(\"Number out\
    \ of range\")\n    }\n\n    res := \"\"\n    nums := []int{1000, 500, 100, 50,\
    \ 10, 5, 1}\n    romans := []string{\"m\", \"d\", \"c\", \"l\", \"x\", \"v\",\
    \ \"i\"}\n\n    for i := 0; i < len(nums); i += 2 {\n        digit := number /\
    \ nums[i]\n        switch digit {\n            case 0:\n            case 1:\n\
    \                res += romans[i]\n            case 2:\n                res +=\
    \ romans[i] + romans[i]\n            case 3:\n                res += romans[i]\
    \ + romans[i] + romans[i]\n            case 4:\n                res += romans[i]\
    \ + romans[i - 1]\n            case 5:\n                res += romans[i - 1]\n\
    \            case 6:\n                res += romans[i - 1] + romans[i]\n     \
    \       case 7:\n                res += romans[i - 1] + romans[i] + romans[i]\n\
    \            case 8:\n                res += romans[i - 1] + romans[i] + romans[i]\
    \ + romans[i]\n            case 9:\n                res += romans[i] + romans[i\
    \ - 2]\n        }\n        number %= nums[i]\n    }\n\n    return res\n}\n", " \
    \   var ret string\n    return ret\n}\n", "  var values = []int{1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n  var numerals = []string{\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"}\n  var roman string\n  var rest = number\n  var i = 0\n  for rest > 0 {\n\
    \    count := rest / values[i]\n    rest = rest % values[i]\n    for j := 0; j\
    \ < count; j++ {\n      roman += numerals[i]\n    }\n    i++\n  }\n  return roman\n\
    }\n", "    return \"\"\n}\n", "    // create a map of roman numerals to ints\n\
    \    roman_numerals := map[int]string{1:\"i\", 5:\"v\", 10:\"x\", 50:\"l\", 100:\"\
    c\", 500:\"d\", 1000:\"m\"}\n    var number_string string\n    var temp_string\
    \ string\n    // roman numerals can be composed of a single roman numeral (i,\
    \ v, x, l, c, d, m)\n    // or of a pair of numerals:\n    // 1 through 3 : i,\
    \ ii, iii\n    // 4 : iv (5 - 1)\n    // 6 through 8 : vi, vii, viii\n    // 9\
    \ : ix (10 - 1)\n    // 11 through 13 : xi, xii, xiii\n    // 14 : xiv (10 + 5\
    \ - 1)\n    // 16 through 18 : xvi, xvii, xviii\n    // 19 : xix (10 + 10 - 1)\n\
    \    // 21 through 23 : xxi, xxii, xxiii\n    // 24 : xxiv (10 + 10 + 5 - 1)\n\
    \    // 26 through 28 : xxvi, xxvii, xxviii\n    // 29 : xxix (10 + 10 + 10 -\
    \ 1)\n    // etc.\n    // we can get from a digit in the ones place to its roman\
    \ numeral equivalent\n    // by subtracting 1 and adding the next numeral in the\
    \ sequence:\n    // 1 -> (1 - 1) + i = i\n    // 2 -> (2 - 1) + i = ii\n    //\
    \ 3 -> (3 - 1) + i = iii\n    // 4 -> (4 - 1) + v = iv\n    // 5 -> (5 - 1) +\
    \ v = v\n    // 6 -> (6 - 1) + v = vi\n    // 7 -> (7 - 1) + v = vii\n    // 8\
    \ -> (8 - 1) + v = viii\n    // 9 -> (9 - 1) + x = ix\n    // 10 -> (10 - 1) +\
    \ x = x\n    // 20 -> (20 - 1) + x = xx\n    // 30 -> (30 - 1) + x = xxx\n   \
    \ // 40 -> (40 - 1) +", "    // your code here\n    return \"\"\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    roman_number := \"\"\n    var units\
    \ int = 0\n    var tens int = 0\n    var hundreds int = 0\n    var thousands int\
    \ = 0\n\n    // Calculate the four roman numeral positions\n    // and the remaining\
    \ number to process\n    if number < 10 {\n        units = number\n    } else\
    \ if number < 100 {\n        tens = number / 10\n        units = number % 10\n\
    \    } else if number < 1000 {\n        hundreds = number / 100\n        remainder\
    \ := number % 100\n        tens = remainder / 10\n        units = remainder %\
    \ 10\n    } else {\n        thousands = number / 1000\n        remainder := number\
    \ % 1000\n        hundreds = remainder / 100\n        remainder = remainder %\
    \ 100\n        tens = remainder / 10\n        units = remainder % 10\n    }\n\n\
    \    // Build the string\n    if thousands > 0 {\n        for i := 0; i < thousands;\
    \ i++ {\n            roman_number += \"m\"\n        }\n    }\n    if hundreds\
    \ > 0 {\n        for i := 0; i < hundreds; i++ {\n            roman_number +=\
    \ \"c\"\n        }\n    }\n    if tens > 0 {\n        for i := 0; i < tens; i++\
    \ {\n            roman_number += \"x\"\n        }\n    }\n    if units > 0 {\n\
    \        for i := 0; i < units; i++ {\n            roman_number += \"i\"\n   \
    \     }\n    }\n\n    return roman_number\n}\n", "    lookup := map[int]string{\n\
    \        1:    \"i\",\n        4:    \"iv\",\n        5:    \"v\",\n        9:\
    \    \"ix\",\n        10:   \"x\",\n        40:   \"xl\",\n        50:   \"l\"\
    ,\n        90:   \"xc\",\n        100:  \"c\",\n        400:  \"cd\",\n      \
    \  500:  \"d\",\n        900:  \"cm\",\n        1000: \"m\",\n    }\n    values\
    \ := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    remaining\
    \ := number\n    output := \"\"\n    for _, value := range values {\n        if\
    \ remaining >= value {\n            for i := remaining / value; i > 0; i-- {\n\
    \                output += lookup[value]\n            }\n            remaining\
    \ = remaining % value\n        }\n    }\n    return output\n}\n", "    return\
    \ \"\";\n}\n", "    m := map[int]string{\n        1: \"i\",\n        2: \"ii\"\
    ,\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\"\
    ,\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10:\
    \ \"x\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xl\",\n   \
    \     50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\"\
    ,\n        90: \"xc\",\n        100: \"c\",\n        200: \"cc\",\n        300:\
    \ \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n\
    \        700: \"dcc\",\n        800: \"dccc\",\n        900: \"cm\",\n       \
    \ 1000: \"m\",\n    }\n\n    result := \"\"\n    remainder := number\n    digits\
    \ := []int{1000, 100, 10, 1}\n    for _, d := range digits {\n        count :=\
    \ remainder / d\n        remainder = remainder % d\n        fmt.Println(count,\
    \ d, remainder)\n        result += m[count * d]\n    }\n    return result\n}\n",
  "    out := \"\"\n    for number > 0 {\n        if number >= 1000 {\n          \
    \  out += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n\
    \            out += \"cm\"\n            number -= 900\n        } else if number\
    \ >= 500 {\n            out += \"d\"\n            number -= 500\n        } else\
    \ if number >= 400 {\n            out += \"cd\"\n            number -= 400\n \
    \       } else if number >= 100 {\n            out += \"c\"\n            number\
    \ -= 100\n        } else if number >= 90 {\n            out += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            out += \"l\"\
    \n            number -= 50\n        } else if number >= 40 {\n            out\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        out += \"x\"\n            number -= 10\n        } else if number >= 9\
    \ {\n            out += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            out += \"v\"\n            number -= 5\n        } else if\
    \ number >= 4 {\n            out += \"iv\"\n            number -= 4\n        }\
    \ else if number >= 1 {\n            out += \"i\"\n            number -= 1\n \
    \       }\n    }\n    return out\n}\n", "    var res []string\n    if number <=\
    \ 0 || number > 1000 {\n        return \"\"\n    }\n    values := []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"}\n    for i := 0; i < len(values); i++ {\n        for values[i]\
    \ <= number {\n            res = append(res, numerals[i])\n            number\
    \ -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n", " \
    \   if number <= 0 || number > 1000 {\n        return \"Invalid input\"\n    }\n\
    \n    var result string\n    for number > 0 {\n        numeral := get_numeral(number)\n\
    \        result += numeral.symbol\n        number -= numeral.value\n    }\n\n\
    \    return result\n}\n\ntype numeral ", "    digit_map := []string{\"i\", \"\
    ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"}\n    roman :=\
    \ \"\"\n    if number >= 100 {\n        roman += \"c\"\n        number -= 100\n\
    \    }\n    if number >= 90 {\n        roman += \"xc\"\n        number -= 90\n\
    \    }\n    if number >= 50 {\n        roman += \"l\"\n        number -= 50\n\
    \    }\n    if number >= 40 {\n        roman += \"xl\"\n        number -= 40\n\
    \    }\n    if number >= 10 {\n        roman += \"x\"\n        number -= 10\n\
    \    }\n    if number >= 9 {\n        roman += \"ix\"\n        number -= 9\n \
    \   }\n    if number >= 5 {\n        roman += \"v\"\n        number -= 5\n   \
    \ }\n    if number >= 4 {\n        roman += \"iv\"\n        number -= 4\n    }\n\
    \    if number > 0 {\n        roman += digit_map[number-1]\n    }\n    return\
    \ roman\n}\n", "    // your code here\n    return \"\"\n}\n", "    numeral :=\
    \ \"\"\n    for number >= 1000 {\n        numeral += \"m\"\n        number -=\
    \ 1000\n    }\n    if number >= 900 {\n        numeral += \"cm\"\n        number\
    \ -= 900\n    }\n    if number >= 500 {\n        numeral += \"d\"\n        number\
    \ -= 500\n    }\n    if number >= 400 {\n        numeral += \"cd\"\n        number\
    \ -= 400\n    }\n    for number >= 100 {\n        numeral += \"c\"\n        number\
    \ -= 100\n    }\n    if number >= 90 {\n        numeral += \"xc\"\n        number\
    \ -= 90\n    }\n    if number >= 50 {\n        numeral += \"l\"\n        number\
    \ -= 50\n    }\n    if number >= 40 {\n        numeral += \"xl\"\n        number\
    \ -= 40\n    }\n    for number >= 10 {\n        numeral += \"x\"\n        number\
    \ -= 10\n    }\n    if number >= 9 {\n        numeral += \"ix\"\n        number\
    \ -= 9\n    }\n    if number >= 5 {\n        numeral += \"v\"\n        number\
    \ -= 5\n    }\n    if number >= 4 {\n        numeral += \"iv\"\n        number\
    \ -= 4\n    }\n    for number >= 1 {\n        numeral += \"i\"\n        number\
    \ -= 1\n    }\n    return numeral\n}\n", "    // Fill me in!\n    return \"\"\n\
    }\n", "    return \"\";\n}\n", "    // TODO:\n    return \"\"\n}\n", "    // your\
    \ code here\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n\
    }\n", "    return \"\"\n}\n", "    mapping := map[int]string{\n        1: \"i\"\
    ,\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"\
    c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    if number == 0 {\n\
    \        return \"\"\n    }\n    if number == 4 {\n        return \"iv\"\n   \
    \ }\n    if number == 9 {\n        return \"ix\"\n    }\n    if number == 40 {\n\
    \        return \"xl\"\n    }\n    if number == 90 {\n        return \"xc\"\n\
    \    }\n    if number == 400 {\n        return \"cd\"\n    }\n    if number ==\
    \ 900 {\n        return \"cm\"\n    }\n    if number > 1000 {\n        return\
    \ \"m\" + int_to_mini_roman(number - 1000)\n    }\n    if number > 500 {\n   \
    \     return \"d\" + int_to_mini_roman(number - 500)\n    }\n    if number > 100\
    \ {\n        return \"c\" + int_to_mini_roman(number - 100)\n    }\n    if number\
    \ > 50 {\n        return \"l\" + int_to_mini_roman(number - 50)\n    }\n    if\
    \ number > 10 {\n        return \"x\" + int_to_mini_roman(number - 10)\n    }\n\
    \    if number > 5 {\n        return \"v\" + int_to_mini_roman(number - 5)\n \
    \   }\n    if number > 1 {\n        return \"i\" + int_to_mini_roman(number -\
    \ 1)\n    }\n    return \"\"\n}\n", "    // build numbers\n    var number_ones\
    \ = map[int]string{\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\"\
    ,\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\"\
    ,\n        8: \"viii\",\n        9: \"ix\",\n    }\n    var number_tens = map[int]string{\n\
    \        1: \"x\",\n        2: \"xx\",\n        3: \"xxx\",\n        4: \"xl\"\
    ,\n        5: \"l\",\n        6: \"lx\",\n        7: \"lxx\",\n        8: \"lxxx\"\
    ,\n        9: \"xc\",\n    }\n    var number_hundreds = map[int]string{\n    \
    \    1: \"c\",\n        2: \"cc\",\n        3: \"ccc\",\n        4: \"cd\",\n\
    \        5: \"d\",\n        6: \"dc\",\n        7: \"dcc\",\n        8: \"dccc\"\
    ,\n        9: \"cm\",\n    }\n    var number_thousands = map[int]string{\n   \
    \     1: \"m\",\n        2: \"mm\",\n        3: \"mmm\",\n    }\n\n    var result\
    \ string\n    var number_thousands_index int = number / 1000\n    var number_hundreds_index\
    \ int = (number % 1000) / 100\n    var number_tens_index int = (number % 100)\
    \ / 10\n    var number_ones_index int = number % 10\n\n    // append thousands\n\
    \    for i := 1; i <= number_thousands_index; i++ {\n        result += number_thousands[i]\n\
    \    }\n\n    // append hundreds\n    for i := 1; i <= number_hundreds_index;\
    \ i++ {\n        result += number_hundreds[i]\n    }\n\n    // append tens\n \
    \   for i := 1; i <= number_tens_index; i++ {\n        result += number_tens[i]\n\
    \    }\n\n    // append ones\n    for i := 1; i <= number_ones_index; i++ {\n\
    \        result += number_ones[i]\n    }\n\n   ", "    // your code here\n   \
    \ return \"\"\n}\n", "    numerals := map[int]string{\n        1000: \"m\",\n\
    \        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100:\
    \ \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n     \
    \   10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n  \
    \      1: \"i\",\n    }\n    numeralsSlice := []int{1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1}\n    answer := \"\"\n    for _, value := range numeralsSlice\
    \ {\n        if number == 0 {\n            break\n        }\n        if number\
    \ >= value {\n            multiplier := number / value\n            answer +=\
    \ numerals[value] * multiplier\n            number -= multiplier * value\n   \
    \     }\n    }\n    return answer\n}\n", "    // Fill in the blank so that it\
    \ passes all the tests.\n    return \"i\"\n}\n", "    return \"\"\n}\n", "   \
    \ // implement me!\n    return \"\"\n}\n\ntype testpair ", "    var result string\n\
    \    for number > 0 {\n        if number >= 1000 {\n            result += \"m\"\
    \n            number -= 1000\n        } else if number >= 900 {\n            result\
    \ += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n  \
    \          result += \"d\"\n            number -= 500\n        } else if number\
    \ >= 400 {\n            result += \"cd\"\n            number -= 400\n        }\
    \ else if number >= 100 {\n            result += \"c\"\n            number -=\
    \ 100\n        } else if number >= 90 {\n            result += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            result += \"\
    l\"\n            number -= 50\n        } else if number >= 40 {\n            result\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        result += \"x\"\n            number -= 10\n        } else if number >=\
    \ 9 {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    roman_number :=\
    \ \"\"\n    var tmp_number int\n    var idx int\n\n    if number > 1000 {\n  \
    \      fmt.Println(\"This function only works for number between 1 and 1000 inclusive.\"\
    )\n        return roman_number\n    }\n\n    for number > 0 {\n        // This\
    \ i for hundreds place\n        tmp_number = number / 100\n        number = number\
    \ % 100\n        for idx = 0; idx < tmp_number; idx++ {\n            roman_number\
    \ += \"c\"\n        }\n\n        // This is for tens place\n        tmp_number\
    \ = number / 10\n        number = number % 10\n        if tmp_number == 9 {\n\
    \            roman_number += \"xc\"\n        } else if tmp_number == 4 {\n   \
    \         roman_number += \"xl\"\n        } else {\n            if tmp_number\
    \ >= 5 {\n                roman_number += \"l\"\n                tmp_number -=\
    \ 5\n            }\n            for idx = 0; idx < tmp_number; idx++ {\n     \
    \           roman_number += \"x\"\n            }\n        }\n\n        // This\
    \ is for ones place\n        if number == 9 {\n            roman_number += \"\
    ix\"\n        } else if number == 4 {\n            roman_number += \"iv\"\n  \
    \      } else {\n            if number >= 5 {\n                roman_number +=\
    \ \"v\"\n                number -= 5\n            }\n            for idx = 0;\
    \ idx < number; idx++ {\n                roman_number += \"i\"\n            }\n\
    \        }\n    }\n\n    return roman_number\n}\n", "  // your code here\n  return\
    \ \"\"\n}\n", "    if number <= 0 || number > 1000 {\n        panic(\"Invalid\
    \ input\")\n    }\n\n    roman := \"\"\n    for number > 0 {\n        switch {\n\
    \        case number >= 1000:\n            roman += \"m\"\n            number\
    \ -= 1000\n        case number >= 900:\n            roman += \"cm\"\n        \
    \    number -= 900\n        case number >= 500:\n            roman += \"d\"\n\
    \            number -= 500\n        case number >= 400:\n            roman +=\
    \ \"cd\"\n            number -= 400\n        case number >= 100:\n           \
    \ roman += \"c\"\n            number -= 100\n        case number >= 90:\n    \
    \        roman += \"xc\"\n            number -= 90\n        case number >= 50:\n\
    \            roman += \"l\"\n            number -= 50\n        case number >=\
    \ 40:\n            roman += \"xl\"\n            number -= 40\n        case number\
    \ >= 10:\n            roman += \"x\"\n            number -= 10\n        case number\
    \ >= 9:\n            roman += \"ix\"\n            number -= 9\n        case number\
    \ >= 5:\n            roman += \"v\"\n            number -= 5\n        case number\
    \ >= 4:\n            roman += \"iv\"\n            number -= 4\n        case number\
    \ >= 1:\n            roman += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return roman\n}\n", "    // implement me\n    return \"\"\n}\n", "    if\
    \ number < 1 || number > 1000 {\n        return \"\"\n    }\n\n    pairs := [][]string{\n\
    \        {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\"},\n        {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\"\
    , \"lxxx\", \"xc\"},\n        {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"\
    dc\", \"dcc\", \"dccc\", \"cm\"},\n        {\"\", \"m\", \"mm\", \"mmm\"},\n \
    \   }\n\n    str := \"\"\n    for i := 0; number > 0; i, number = i+1, number/10\
    \ {\n        str = pairs[i][number%10] + str\n    }\n\n    return str\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
