language: go_test.go
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (int(x) + int(y) == int(z)) {\n        return true\n    } else if (int(x)\
    \ + int(z) == int(y)) {\n        return true\n    } else if (int(y) + int(z) ==\
    \ int(x)) {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmptyq_y54l_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // convert integer to float64\n    x1 := float64(int(x))\n    y1 := float64(int(y))\n\
    \    z1 := float64(int(z))\n    if x1 == y1 + z1 || y1 == x1 + z1 || z1 == x1\
    \ + y1 {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmphvhuec89_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmptop_1fq0_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmptop_1fq0_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x + y == z) || (x + z == y) || (y + z == x) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpc3y1yqnf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpc3y1yqnf_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqpxn29ng_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqpxn29ng_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z\
    \ == x - y {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp45meblou_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp45meblou_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z || y == x + z || z == x + y) && (float64(int(x)) == x && float64(int(y))\
    \ == y && float64(int(z)) == z) {\n        return true\n    } else {\n       \
    \ return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpjiv_bf05_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   fmt.Println(x == y + z || y == x + z || z == x + y)\n    return x == y + z\
    \ || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\n--- FAIL:\
    \ TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n       \
    \ tmpgybs84r0_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n \
    \   --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpgybs84r0_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // TODO: Implement me!\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp0w58s04k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp0w58s04k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp0w58s04k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp0w58s04k_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp0w58s04k_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var is_int = func(arg float64) bool {\n        return arg == float64(int(arg))\n\
    \    }\n    var sum = x + y + z\n    return is_int(sum) && (sum == x || sum ==\
    \ y || sum == z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpq3qt0vzh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpq3qt0vzh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpq3qt0vzh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpq3qt0vzh_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpq3qt0vzh_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z || x == y - z || x == z - y) && isInt(x) && isInt(y) &&\
    \ isInt(z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqpq4vot_test.go:21:56: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (int(x) == int(y) + int(z)) || (int(y) == int(x) + int(z)) || (int(z) ==\
    \ int(x) + int(y)) {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp47d370pd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_bsgv1n_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8_bsgv1n_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (int(x) == int(y) + int(z)) || (int(y) == int(x) + int(z)) || (int(z)\
    \ == int(x) + int(y))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpddnyxb5s_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y {\n        return true\n    }\n\
    \    if y == x + z || y == x - z || y == z - x {\n        return true\n    }\n\
    \    if z == x + y || z == x - y || z == y - x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy4o09ual_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy4o09ual_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if is_int(x) && is_int(y) && is_int(z) {\n        if x == y + z || y == x\
    \ + z || z == x + y {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxvpys4m_test.go:21:8: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x + y == z) || (x + z == y) || (y + z == x) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpc3y1yqnf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpc3y1yqnf_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x_int := int(x)\n    y_int := int(y)\n    z_int := int(z)\n    x_float :=\
    \ float64(x_int)\n    y_float := float64(y_int)\n    z_float := float64(z_int)\n\
    \    if x_float == x && y_float == y && z_float == z {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__3 (0.00s)\n\
    \        tmpic2qsq7c_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpic2qsq7c_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if x == y + z || y == x + z || z == x + y {\n\t\treturn true\n\t}\n\treturn false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqhszh29k_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqhszh29k_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return isInt(x) && isInt(y) && isInt(z) &&\n           (x == y + z || y ==\
    \ x + z || z == x + y)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkihh7w92_test.go:21:12: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y == z || x+z == y || y+z == x {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpp2c89vbh_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpp2c89vbh_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   vals := []float64{x, y, z}\n    sum := vals[0] + vals[1] + vals[2]\n    fmt.Println(sum)\n\
    \    return sum == 0\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "6\n7.5\n10\n10\n8\n6.6000000000000005\n4\n4\n14\n14\n--- FAIL: TestAny_Int\
    \ (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n        tmp9kh2vycr_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__4\
    \ (0.00s)\n        tmp9kh2vycr_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmp9kh2vycr_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp9kh2vycr_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__8 (0.00s)\n        tmp9kh2vycr_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if z == x + y {\n        return true\n    } else if x == y + z {\n       \
    \ return true\n    } else if y == x + z {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp00ooqn83_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp00ooqn83_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.010s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmptop_1fq0_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmptop_1fq0_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == (y + z)) || (y == (x + z)) || (z == (x + y)) {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpxfd1wkcs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpxfd1wkcs_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpd4j0x0t8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpd4j0x0t8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x_y_sum := x + y\n    y_z_sum := y + z\n    x_z_sum := x + z\n    if x_y_sum\
    \ == z || y_z_sum == x || x_z_sum == y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpjo6de7af_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpjo6de7af_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z || y == x + z || z == x + y) && (x == float64(int(x)) &&\
    \ y == float64(int(y)) && z == float64(int(z)))\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmprio25eik_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x)\
    \ + int(y) {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpl6iv60ry_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    var sum float64 = x + y\n\tif (x == sum || y == sum || z == sum) && (float64(int(x))\
    \ == x && float64(int(y)) == y && float64(int(z)) == z) {\n\t\treturn true\n\t\
    }\n\treturn false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9aoqb90r_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp9aoqb90r_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp9aoqb90r_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp9aoqb90r_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmplwb_gszo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var result bool\n    if x == y + z {\n        result = true\n    } else if\
    \ y == x + z {\n        result = true\n    } else if z == x + y {\n        result\
    \ = true\n    } else {\n        result = false\n    }\n    return result\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp50idelpj_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp50idelpj_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z || x == y - z || y == x + z || y == x - z || z == x + y\
    \ || z == x - y\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmporjhxbuf_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmporjhxbuf_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (int(x)+int(y) == int(z)) || (int(x)+int(z) == int(y)) || (int(y)+int(z)\
    \ == int(x)) {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpal_r10s__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == 0 {\n        return y == z\n    } else if y == 0 {\n        return\
    \ x == z\n    } else if z == 0 {\n        return x == y\n    }\n    return x ==\
    \ y + z || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpib68yk7l_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpib68yk7l_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x - y == z || y - x == z || x - z == y || z - x == y || y - z == x\
    \ || z - y == x) && x == float64(int(x)) && y == float64(int(y)) && z == float64(int(z))\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp6q4jvzf1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x != float64(int(x)) || y != float64(int(y)) || z != float64(int(z)) {\n\
    \        return false\n    }\n    if x == y + z || y == x + z || z == x + y {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpt_ls9spu_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x - y == z || x - z == y || y - x == z || y - z == x || z - x == y ||\
    \ z - y == x) && (x == int(x) && y == int(y) && z == int(z)) {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_q_2l84c_test.go:21:100: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmp_q_2l84c_test.go:21:115: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmp_q_2l84c_test.go:21:130: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) + int(y) == int(z) {\n        return true\n    } else if int(x)\
    \ + int(z) == int(y) {\n        return true\n    } else if int(y) + int(z) ==\
    \ int(x) {\n        return true\n    } else {\n        return false\n    }\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmphqd_tzut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqpxn29ng_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqpxn29ng_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x + y == z) || (x + z == y) || (y + z == x) {\n        return true\n \
    \   }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpjpyli9gk_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpjpyli9gk_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) == (int(y) + int(z)) {\n        return true\n    } else if int(y)\
    \ == (int(x) + int(z)) {\n        return true\n    } else if int(z) == (int(x)\
    \ + int(y)) {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp1e90ll4w_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_bsgv1n_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8_bsgv1n_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x+y == z || x+z == y || y+z == x) && (float64(int(x)) == x && float64(int(y))\
    \ == y && float64(int(z)) == z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp3wic6xs1_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpd4j0x0t8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpd4j0x0t8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x != float64(int(x)) || y != float64(int(y)) || z != float64(int(z)) {\n\
    \        return false\n    }\n    return x == y + z || y == x + z || z == x +\
    \ y\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp3zab_53z_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpn0ey62on_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpn0ey62on_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   fmt.Println(x, y, z)\n    if int(x) == int(y + z) || int(y) == int(x + z)\
    \ || int(z) == int(x + y) {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "2 3 1\n2.5 2 3\n1.5 5 3.5\n2 6 2\n4 2 2\n2.2 2.2 2.2\n-4 6 2\n2 1 1\n3\
    \ 4 7\n3 4 7\n--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmp6t5cj9vs_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp6t5cj9vs_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var is_int bool\n    if (x == float64(int(x))) && (y == float64(int(y))) &&\
    \ (z == float64(int(z))) {\n        is_int = true\n    } else {\n        is_int\
    \ = false\n    }\n    var is_any_int bool\n    if (x + y == z) || (x + z == y)\
    \ || (y + z == x) {\n        is_any_int = true\n    } else {\n        is_any_int\
    \ = false\n    }\n    if is_int && is_any_int {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpaufdzrq1_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x > 0 && y > 0 && z > 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmp3h_i0q4u_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmp3h_i0q4u_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmp3h_i0q4u_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmp3h_i0q4u_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp3h_i0q4u_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp3h_i0q4u_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (z == x + y) && (z == int(z)) && (x == int(x)) && (y == int(y))\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_lr2su1_test.go:21:34: invalid operation: z == int(z) (mismatched types
    float64 and int)

    /tmp/tmpi_lr2su1_test.go:21:51: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpi_lr2su1_test.go:21:68: invalid operation: y == int(y) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x == y + z || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmptop_1fq0_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmptop_1fq0_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z || x == y - z || y == x + z || y == x - z || z == x + y ||\
    \ z == x - y) && (x == float64(int(x)) && y == float64(int(y)) && z == float64(int(z)))\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp8tig3706_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x-y == z) || (x-z == y) || (y-z == x) {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj3kztdme_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpj3kztdme_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpj3kztdme_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y {\n        return true\n    } else\
    \ if y == x + z || y == x - z || y == z - x {\n        return true\n    } else\
    \ if z == x + y || z == x - y || z == y - x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp577zo54t_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp577zo54t_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmplwb_gszo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x + y == z || x + z == y || y + z == x\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmparj5_ytu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmparj5_ytu_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y == z || x+z == y || y+z == x {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpp2c89vbh_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpp2c89vbh_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpvs1cr4vj_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpvs1cr4vj_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   xInt := (x == float64(int(x)))\n    yInt := (y == float64(int(y)))\n    zInt\
    \ := (z == float64(int(z)))\n    return xInt && yInt && zInt && (x + y == z ||\
    \ x + z == y || y + z == x)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpjx9bcpbw_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var sum float64\n    if (x - int(x) == 0) && (y - int(y) == 0) && (z - int(z)\
    \ == 0) {\n        sum = x + y\n        if sum == z {\n            return true\n\
    \        }\n        sum = x + z\n        if sum == y {\n            return true\n\
    \        }\n        sum = y + z\n        if sum == x {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ur6ww5y_test.go:22:9: invalid operation: x - int(x) (mismatched types
    float64 and int)

    /tmp/tmp3ur6ww5y_test.go:22:30: invalid operation: y - int(y) (mismatched types
    float64 and int)

    /tmp/tmp3ur6ww5y_test.go:22:51: invalid operation: z - int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x)\
    \ + int(y) {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpl6iv60ry_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y {\n        return true\n    } else\
    \ if y == x + z || y == x - z || y == z - x {\n        return true\n    } else\
    \ if z == x + y || z == x - y || z == y - x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp577zo54t_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp577zo54t_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x == y + z) || (y == x + z) || (z == x + y)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqpxn29ng_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqpxn29ng_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpd4j0x0t8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpd4j0x0t8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var has_int bool = false\n    if x == y + z || y == x + z || z == x + y {\n\
    \        has_int = true\n    }\n    return has_int\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp_a9yxgyk_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp_a9yxgyk_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   a := (x + y == z)\n    b := (x + z == y)\n    c := (y + z == x)\n    if a\
    \ || b || c {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpk2_tqoao_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpk2_tqoao_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x - y == z || x - z == y || y - x == z || y - z == x || z - x == y ||\
    \ z - y == x) && (x == float64(int(x)) && y == float64(int(y)) && z == float64(int(z)))\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpflc0ezc0_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) + int(y) == int(z) {\n        return true\n    } else if int(x)\
    \ + int(z) == int(y) {\n        return true\n    } else if int(y) + int(z) ==\
    \ int(x) {\n        return true\n    } else {\n        return false\n    }\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmphqd_tzut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var result bool\n    if x == y + z {\n        result = true\n    } else if\
    \ y == x + z {\n        result = true\n    } else if z == x + y {\n        result\
    \ = true\n    } else {\n        result = false\n    }\n    return result\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp50idelpj_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp50idelpj_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    return x == y + z || y == x + z || z == x + y\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpjz3ja4ml_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpjz3ja4ml_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var h bool\n    if x > int(x) || y > int(y) || z > int(z) {\n        h = false\n\
    \    } else if x == int(x) && y == int(y) && z == int(z) {\n        h = true\n\
    \    } else {\n        h = false\n    }\n    return h\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkmpkxasj_test.go:22:12: invalid operation: x > int(x) (mismatched types
    float64 and int)

    /tmp/tmpkmpkxasj_test.go:22:26: invalid operation: y > int(y) (mismatched types
    float64 and int)

    /tmp/tmpkmpkxasj_test.go:22:40: invalid operation: z > int(z) (mismatched types
    float64 and int)

    /tmp/tmpkmpkxasj_test.go:24:20: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpkmpkxasj_test.go:24:35: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpkmpkxasj_test.go:24:50: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z {\n        return true\n    }\n    if x + z == y {\n       \
    \ return true\n    }\n    if y + z == x {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpcrcxhc81_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpcrcxhc81_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == int(x) && y == int(y) && z == int(z) {\n        if x == y + z || y\
    \ == x + z || z == x + y {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_onn60y_test.go:21:13: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpk_onn60y_test.go:21:28: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpk_onn60y_test.go:21:43: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x + y == z) || (x + z == y) || (y + z == x) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpc3y1yqnf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpc3y1yqnf_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum := x + y\n    diff := z - x\n    sum2 := y + z\n    diff2 := x - y\n \
    \   if sum == z {\n        return true\n    } else if diff == y {\n        return\
    \ true\n    } else if sum2 == x {\n        return true\n    } else if diff2 ==\
    \ z {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmplhbah4lg_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmplhbah4lg_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if x - (y + z) == 0 {\n\t\treturn true\n\t} else if y - (x + z) == 0 {\n\t\treturn\
    \ true\n\t} else if z - (x + y) == 0 {\n\t\treturn true\n\t} else {\n\t\treturn\
    \ false\n\t}\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpxs2vknjd_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpxs2vknjd_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var result bool\n    if x == y + z {\n        result = true\n    } else if\
    \ y == x + z {\n        result = true\n    } else if z == x + y {\n        result\
    \ = true\n    } else {\n        result = false\n    }\n    return result\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp50idelpj_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp50idelpj_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x % 1 == 0 && y % 1 == 0 && z % 1 == 0 {\n        return (x == y + z) ||\
    \ (y == x + z) || (z == x + y)\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_omwjd2e_test.go:21:8: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmp_omwjd2e_test.go:21:22: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmp_omwjd2e_test.go:21:36: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x+y == z || x+z == y || y+z == x) && int(x) == x && int(y) == y &&\
    \ int(z) == z\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ey310i5_test.go:21:60: invalid operation: int(x) == x (mismatched types
    int and float64)

    /tmp/tmp_ey310i5_test.go:21:75: invalid operation: int(y) == y (mismatched types
    int and float64)

    /tmp/tmp_ey310i5_test.go:21:90: invalid operation: int(z) == z (mismatched types
    int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) {\n        return (x == y\
    \ + z) || (y == x + z) || (z == x + y)\n    } else {\n        return false\n \
    \   }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytc38ldg_test.go:21:9: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmpytc38ldg_test.go:21:25: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmpytc38ldg_test.go:21:41: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpd4j0x0t8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpd4j0x0t8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == (y + z) || y == (x + z) || z == (x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmppz1vdhxn_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmppz1vdhxn_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x - y == z || x - z == y || y - x == z || y - z == x || z - x == y\
    \ || z - y == x\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmptmfzbka0_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmptmfzbka0_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   a := x + y\n    b := x + z\n    c := y + z\n    if a == z || b == y || c ==\
    \ x {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp63hzm7wf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp63hzm7wf_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x - y == z || x - z == y || y - x == z || y - z == x || z - x == y || z\
    \ - y == x {\n        return true\n    } else {\n        return false\n    }\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpme7nebm9_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpme7nebm9_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    return x + y == z || x + z == y || y + z == x\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpyb9t25jx_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpyb9t25jx_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) ==\
    \ int(x) + int(y)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpgcl6q2_g_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // If x is an integer, check to see if y + z = x\n    if x == float64(int(x))\
    \ {\n        if y + z == x {\n            return true\n        }\n    }\n    //\
    \ If y is an integer, check to see if x + z = y\n    if y == float64(int(y)) {\n\
    \        if x + z == y {\n            return true\n        }\n    }\n    // If\
    \ z is an integer, check to see if x + y = z\n    if z == float64(int(z)) {\n\
    \        if x + y == z {\n            return true\n        }\n    }\n    // Else\
    \ return false\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp9fnfhss3_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp9fnfhss3_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073646
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if (x == (y + z)) && is_integer(x) && is_integer(y) && is_integer(z) {\n\t\treturn\
    \ true\n\t}\n\tif (y == (x + z)) && is_integer(x) && is_integer(y) && is_integer(z)\
    \ {\n\t\treturn true\n\t}\n\tif (z == (x + y)) && is_integer(x) && is_integer(y)\
    \ && is_integer(z) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0l28fs6e_test.go:21:23: undefined: is_integer

    /tmp/tmp0l28fs6e_test.go:24:23: undefined: is_integer

    /tmp/tmp0l28fs6e_test.go:27:23: undefined: is_integer

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmplwb_gszo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // func returns true if x, y, or z are equal to the sum of the other two\n\
    \    // all numbers must be integers\n    sum := x + y + z\n    if sum == x ||\
    \ sum == y || sum == z {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpiveep62g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpiveep62g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpiveep62g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpiveep62g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpiveep62g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z\
    \ == x - y {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpwysm72wv_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpwysm72wv_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum := x + y\n    if x == sum {\n        return true\n    }\n    if y == sum\
    \ {\n        return true\n    }\n    if z == sum {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp4bswv0x6_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp4bswv0x6_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__7\
    \ (0.00s)\n        tmp4bswv0x6_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp4bswv0x6_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // put your code here\n    if x == y + z || y == x + z || z == x + y {\n \
    \       return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp1950vq99_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp1950vq99_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == (y + z) {\n        return true\n    } else if y == (x + z) {\n   \
    \     return true\n    } else if z == (x + y) {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpusjmpwqt_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpusjmpwqt_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if ((x - y) == z || (x - z) == y || (y - z) == x) && (is_int(x) && is_int(y)\
    \ && is_int(z)) {\n        return true\n    } else {\n        return false\n \
    \   }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpokl8xe5p_test.go:21:59: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073646
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return x + y == z || x + z == y || y + z == x\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmparj5_ytu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmparj5_ytu_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x_int := int(x)\n    y_int := int(y)\n    z_int := int(z)\n    return x ==\
    \ float64(x_int) && y == float64(y_int) && z == float64(z_int) && (x_int == y_int\
    \ + z_int || y_int == x_int + z_int || z_int == x_int + y_int)\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpccyd34z3_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpd4j0x0t8_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpd4j0x0t8_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y {\n        return true\n    } else\
    \ if y == x + z || y == x - z || y == z - x {\n        return true\n    } else\
    \ if z == x + y || z == x - y || z == y - x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp577zo54t_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp577zo54t_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) + int(y) == int(z) {\n        return true\n    }\n    if int(x)\
    \ + int(z) == int(y) {\n        return true\n    }\n    if int(y) + int(z) ==\
    \ int(x) {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpy54ivwbm_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // your code here\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpn1gqslrl_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpn1gqslrl_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    var b1, b2, b3 bool\n\tvar i1, i2, i3 int\n\tvar ok bool\n\ti1, b1 = isInt(x)\n\
    \ti2, b2 = isInt(y)\n\ti3, b3 = isInt(z)\n\tok = (b1 && b2 && b3)\n\treturn ok\
    \ && ( (i1 == i2 + i3) || (i2 == i1 + i3) || (i3 == i1 + i2) )\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2w2icuy_test.go:24:11: undefined: isInt

    /tmp/tmpb2w2icuy_test.go:25:11: undefined: isInt

    /tmp/tmpb2w2icuy_test.go:26:11: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == (y + z) || y == (x + z) || z == (x + y) {\n        return true\n \
    \   }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp_h81v4_u_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp_h81v4_u_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y {\n        return true\n    } else\
    \ if y == x + z || y == x - z || y == z - x {\n        return true\n    } else\
    \ if z == x + y || z == x - y || z == y - x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp577zo54t_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp577zo54t_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpn0ey62on_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpn0ey62on_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return int(x) == int(y + z) || int(y) == int(x + z) || int(z) == int(x + y)\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpinltpvzl_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpinltpvzl_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x + y) == z || (x + z) == y || (y + z) == x {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp1_vspvti_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp1_vspvti_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z)\
    \ {\n        return (x == y + z || y == x + z || z == x + y)\n    } else {\n \
    \       return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpieyeie6o_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpn0ey62on_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpn0ey62on_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || x == y - z || x == z - y || y == x + z || y == x - z || y\
    \ == z - x || z == x + y || z == x - y || z == y - x {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqqveg3b7_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqqveg3b7_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\t\t\
    if x == y + z || y == x + z || z == x + y {\n\t\t\treturn true\n\t\t}\n\t}\n\t\
    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp5nqbyaaa_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if ( x == y + z || y == x + z || z == x + y ) && x == int(x) && y == int(y)\
    \ && z == int(z) {\n        return true\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3dtlmqn_test.go:21:59: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpj3dtlmqn_test.go:21:74: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpj3dtlmqn_test.go:21:89: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if x==(y+z) || y==(x+z) || z==(x+y) {\n\t\treturn true\n\t} else {\n\t\treturn\
    \ false\n\t}\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp_1lighjo_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp_1lighjo_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpn0ey62on_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpn0ey62on_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum_xy := x + y\n    sum_xz := x + z\n    sum_yz := y + z\n    if (sum_xy\
    \ == z || sum_xz == y || sum_yz == x) && x == float64(int(x)) && y == float64(int(y))\
    \ && z == float64(int(z)) {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp62ibi5tf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if (x + y == z) || (x + z == y) || (y + z == x) {\n\t\treturn true\n\t}\n\treturn\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpakmxqzt__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpakmxqzt__test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z || y == x + z || z == x + y) && (x == float64(int(x)) && y\
    \ == float64(int(y)) && z == float64(int(z))) {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpjznr_mdj_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum := x + y + z\n    if sum == x || sum == y || sum == z {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpdm621vv1_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpdm621vv1_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpdm621vv1_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpdm621vv1_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpdm621vv1_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var a = x == y + z\n    var b = y == x + z\n    var c = z == x + y\n    return\
    \ a || b || c\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpv_8180_b_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpv_8180_b_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x + y == z || x + z == y || y + z == x) && (x == float64(int(x)) &&\
    \ y == float64(int(y)) && z == float64(int(z)))\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpfz6il2lm_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   x_i := int(x)\n    y_i := int(y)\n    z_i := int(z)\n    if x_i == 0 && x\
    \ != 0 {\n        return false\n    }\n    if y_i == 0 && y != 0 {\n        return\
    \ false\n    }\n    if z_i == 0 && z != 0 {\n        return false\n    }\n   \
    \ if x_i == y_i + z_i || y_i == x_i + z_i || z_i == x_i + y_i {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpq737ef64_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) + int(y) == int(z) {\n        return true\n    } else if int(x)\
    \ + int(z) == int(y) {\n        return true\n    } else if int(y) + int(z) ==\
    \ int(x) {\n        return true\n    } else {\n        return false\n    }\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmphqd_tzut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_bsgv1n_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8_bsgv1n_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) + int(y) == int(z) {\n        return true\n    } else if int(x)\
    \ + int(z) == int(y) {\n        return true\n    } else if int(y) + int(z) ==\
    \ int(x) {\n        return true\n    } else {\n        return false\n    }\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmphqd_tzut_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return int(x) == int(y + z) || int(y) == int(x + z) || int(z) == int(x + y)\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpinltpvzl_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpinltpvzl_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073648
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    return x-y == z || x-z == y || y-x == z || y-z == x || z-x == y || z-y == x\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp_aqrqoab_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp_aqrqoab_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var condition bool\n    if x == y + z || y == x + z || z == x + y {\n    \
    \    condition = true\n    } else {\n        condition = false\n    }\n    return\
    \ condition\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpy3wdig6y_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpy3wdig6y_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x - y == z {\n        return true\n    }\n    if y - x == z {\n       \
    \ return true\n    }\n    if x - z == y {\n        return true\n    }\n    if\
    \ z - x == y {\n        return true\n    }\n    if y - z == x {\n        return\
    \ true\n    }\n    if z - y == x {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpk1dayucm_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpk1dayucm_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if int(x) == int(y + z) || int(y) == int(x + z) || int(z) == int(x + y) {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpqokneh46_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpqokneh46_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpkak1rjcz_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpkak1rjcz_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return ((x == y + z) || (y == x + z) || (z == x + y)) && ((x == int(x)) &&\
    \ (y == int(y)) && (z == int(z)))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql5b5lo8_test.go:21:69: invalid operation: x == int(x) (mismatched types
    float64 and int)

    /tmp/tmpql5b5lo8_test.go:21:86: invalid operation: y == int(y) (mismatched types
    float64 and int)

    /tmp/tmpql5b5lo8_test.go:21:103: invalid operation: z == int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z)\
    \ {\n        if (x + y == z || x + z == y || y + z == x) {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpa4uvu37u_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return true\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__1 (0.00s)\n\
    \        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__3\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__5 (0.00s)\n        tmpu0jkztpj_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpu0jkztpj_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    \n\tvar sum_xy = x + y\n\tvar sum_xz = x + z\n\tvar sum_yz = y + z\n\t\n\tvar\
    \ x_int = is_int(x)\n\tvar y_int = is_int(y)\n\tvar z_int = is_int(z)\n\t\n\t\
    var sum_xy_int = is_int(sum_xy)\n\tvar sum_xz_int = is_int(sum_xz)\n\tvar sum_yz_int\
    \ = is_int(sum_yz)\n\t\n\tif x_int && y_int && z_int && (sum_xy_int || sum_xz_int\
    \ || sum_yz_int) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp29kbbi0_test.go:26:14: undefined: is_int

    /tmp/tmpp29kbbi0_test.go:27:14: undefined: is_int

    /tmp/tmpp29kbbi0_test.go:28:14: undefined: is_int

    /tmp/tmpp29kbbi0_test.go:30:19: undefined: is_int

    /tmp/tmpp29kbbi0_test.go:31:19: undefined: is_int

    /tmp/tmpp29kbbi0_test.go:32:19: undefined: is_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // your code here\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpn1gqslrl_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpn1gqslrl_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpn1gqslrl_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073647
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var sum float64\n    if x == float64(int(x)) && y == float64(int(y)) && z\
    \ == float64(int(z)) {\n        sum = x + y\n        if sum == z {\n         \
    \   return true\n        }\n        sum = x + z\n        if sum == y {\n     \
    \       return true\n        }\n        sum = y + z\n        if sum == x {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp5w1k3c_c_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073649
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y==z {\n        return true\n    }\n    if x+z==y {\n        return true\n\
    \    }\n    if y+z==x {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpv09p09vk_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpv09p09vk_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x + y == z || x + z == y || y + z == x) &&\n        isInt(x) && isInt(y)\
    \ && isInt(z)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9zio6lbb_test.go:22:9: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\
    \        if x == y + z || y == x + z || z == x + y {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmplwb_gszo_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   arr := []float64{x, y, z}\n    for i := 0; i < len(arr); i++ {\n        for\
    \ j := 0; j < len(arr); j++ {\n            for k := 0; k < len(arr); k++ {\n \
    \               if arr[i] == arr[j] + arr[k] && i != j && i != k && j != k {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate :=\
    \ any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp6jt1u051_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp6jt1u051_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x - int(x) == 0 {\n        if y - int(y) == 0 {\n            if z - int(z)\
    \ == 0 {\n                if z == (x + y) {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_g7wgrq_test.go:21:8: invalid operation: x - int(x) (mismatched types
    float64 and int)

    /tmp/tmpi_g7wgrq_test.go:22:12: invalid operation: y - int(y) (mismatched types
    float64 and int)

    /tmp/tmpi_g7wgrq_test.go:23:16: invalid operation: z - int(z) (mismatched types
    float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   xi := int(x)\n    yi := int(y)\n    zi := int(z)\n    if x == float64(xi)\
    \ && y == float64(yi) && z == float64(zi) {\n        if x == y + z || y == x +\
    \ z || z == x + y {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpmtably2f_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpn0ey62on_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpn0ey62on_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_bsgv1n_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8_bsgv1n_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   //TODO\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp9vfyd981_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp9vfyd981_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp9vfyd981_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp9vfyd981_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp9vfyd981_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // Your code here\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n\
    \  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3,\
    \ 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmpfb_2hfcg_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmpfb_2hfcg_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmpfb_2hfcg_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmpfb_2hfcg_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpfb_2hfcg_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x + y == z || x + z == y || y + z == x {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpvs1cr4vj_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpvs1cr4vj_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp8_bsgv1n_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp8_bsgv1n_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   xi := int(x)\n    yi := int(y)\n    zi := int(z)\n    if x == float64(xi)\
    \ && y == float64(yi) && z == float64(zi) {\n        if xi == yi + zi || yi ==\
    \ xi + zi || zi == xi + yi {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpf7mbxp9__test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   sum := x + y\n    if (x == sum || y == sum || z == sum) && x % 1 == 0 && y\
    \ % 1 == 0 && z % 1 == 0 {\n        return true\n    }\n    return false\n}\n\n\
    func TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsp0f575_test.go:22:46: invalid operation: operator % not defined on x
    (variable of type float64)

    /tmp/tmpzsp0f575_test.go:22:60: invalid operation: operator % not defined on y
    (variable of type float64)

    /tmp/tmpzsp0f575_test.go:22:74: invalid operation: operator % not defined on z
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x+y == z || x+z == y || y+z == x {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmp1ep6glpf_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmp1ep6glpf_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x - y == z) || (x - z == y) || (y - x == z) || (y - z == x) || (z\
    \ - x == y) || (z - y == x)\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpr79q8cqg_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpr79q8cqg_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    } else if y == x + z {\n       \
    \ return true\n    } else if z == x + y {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpt1p0bob5_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpt1p0bob5_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__0 (0.00s)\n\
    \        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__4 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__6\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestAny_Int/test_num__7 (0.00s)\n        tmp49rx1l4k_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmp49rx1l4k_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   fmt.Println(x, y, z)\n    if (x < 0 || y < 0 || z < 0) {\n        return false\n\
    \    }\n\n    if (x == (y + z) || y == (x + z) || z == (x + y)) {\n        return\
    \ true\n    }\n\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "2 3 1\n2.5 2 3\n1.5 5 3.5\n2 6 2\n4 2 2\n2.2 2.2 2.2\n-4 6 2\n2 1 1\n3\
    \ 4 7\n3 4 7\n--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2\
    \ (0.00s)\n        tmpwu8py8n__test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpwu8py8n__test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__9\
    \ (0.00s)\n        tmpwu8py8n__test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if !(float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z)\
    \ {\n        return false\n    }\n    x = float64(int(x))\n    y = float64(int(y))\n\
    \    z = float64(int(z))\n    return x == y + z || y == x + z || z == x + y\n\
    }\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp2pzdq086_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   // type assertion\n    if _, ok := x.(int); ok {\n        if _, ok := y.(int);\
    \ ok {\n            if _, ok := z.(int); ok {\n                if x + y == z {\n\
    \                    return true\n                } else if x + z == y {\n   \
    \                 return true\n                } else if y + z == x {\n      \
    \              return true\n                } else {\n                    return\
    \ false\n                }\n            } else {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfe0as2a1_test.go:22:17: invalid operation: x (variable of type float64)
    is not an interface

    /tmp/tmpfe0as2a1_test.go:23:21: invalid operation: y (variable of type float64)
    is not an interface

    /tmp/tmpfe0as2a1_test.go:24:25: invalid operation: z (variable of type float64)
    is not an interface

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073650
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (int(x) == int(y) + int(z)) || (int(y) == int(x) + int(z)) || (int(z)\
    \ == int(x) + int(y))\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpddnyxb5s_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   return (x + y == z || x + z == y || y + z == x) && x == float64(int(x)) &&\
    \ y == float64(int(y)) && z == float64(int(z))\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpfoi7gnin_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if (x - y == z) || (x - z == y) || (y - z == x) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj1eshxk8_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__6 (0.00s)\n        tmpj1eshxk8_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAny_Int/test_num__8\
    \ (0.00s)\n        tmpj1eshxk8_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z {\n        return true\n    }\n    if y == x + z {\n       \
    \ return true\n    }\n    if z == x + y {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpj8wdb2b1_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpj8wdb2b1_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n\t\
    if x == y + z || y == x + z || z == x + y {\n\t\tif x == float64(int(x)) && y\
    \ == float64(int(y)) && z == float64(int(z)) {\n\t\t\treturn true\n\t\t}\n\t}\n\
    \treturn false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n \
    \    { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpt0iyow9v_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   //checks if all numbers are integers\n    if x == float64(int(x)) && y ==\
    \ float64(int(y)) && z == float64(int(z)) {\n        //checks if one number is\
    \ equal to the sum of the other two\n        if x == y + z || y == x + z || z\
    \ == x + y {\n            return true\n        }\n    }\n    return false\n}\n\
    \nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2, 3, 1), expected: true },\n     { actual: candidate(2.5,\
    \ 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5), expected:\
    \ false },\n     { actual: candidate(2, 6, 2), expected: false },\n     { actual:\
    \ candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2, 2.2, 2.2),\
    \ expected: false },\n     { actual: candidate(-4, 6, 2), expected: true },\n\
    \     { actual: candidate(2, 1, 1), expected: true },\n     { actual: candidate(3,\
    \ 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp2sbtfl8s_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   var sum float64\n    if x == float64(int(x)) && y == float64(int(y)) && z\
    \ == float64(int(z)) {\n        sum = x + y\n        if z == sum {\n         \
    \   return true\n        }\n        sum = x + z\n        if y == sum {\n     \
    \       return true\n        }\n        sum = y + z\n        if x == sum {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t\
    \ *testing.T) {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmpev67_vw2_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if float64(int(x)) == x && float64(int(y)) == y && float64(int(z)) == z {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T) {\n \
    \ candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected:\
    \ true },\n     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual:\
    \ candidate(1.5, 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2),\
    \ expected: false },\n     { actual: candidate(4, 2, 2), expected: true },\n \
    \    { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     { actual: candidate(-4,\
    \ 6, 2), expected: true },\n     { actual: candidate(2, 1, 1), expected: true\
    \ },\n     { actual: candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0,\
    \ 4, 7), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n\
    \        tmp9lth8kf3_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073651
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if isInt(x) && isInt(y) && isInt(z) {\n        return (x == y + z) || (y ==\
    \ x + z) || (z == x + y)\n    }\n    return false\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8xf_zt7_test.go:21:8: undefined: isInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073651
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == y + z || y == x + z || z == x + y {\n        return true\n    } else\
    \ {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate\
    \ := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n\
    \     { actual: candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5,\
    \ 5, 3.5), expected: false },\n     { actual: candidate(2, 6, 2), expected: false\
    \ },\n     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmpzbb3dprb_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmpzbb3dprb_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if x == (y + z) || y == (x + z) || z == (x + y) {\n        return true\n \
    \   } else {\n        return false\n    }\n}\n\nfunc TestAny_Int(t *testing.T)\
    \ {\n  candidate := any_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 3, 1), expected: true },\n     { actual: candidate(2.5, 2, 3), expected: false\
    \ },\n     { actual: candidate(1.5, 5, 3.5), expected: false },\n     { actual:\
    \ candidate(2, 6, 2), expected: false },\n     { actual: candidate(4, 2, 2), expected:\
    \ true },\n     { actual: candidate(2.2, 2.2, 2.2), expected: false },\n     {\
    \ actual: candidate(-4, 6, 2), expected: true },\n     { actual: candidate(2,\
    \ 1, 1), expected: true },\n     { actual: candidate(3, 4, 7), expected: true\
    \ },\n     { actual: candidate(3.0, 4, 7), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAny_Int (0.00s)\n    --- FAIL: TestAny_Int/test_num__2 (0.00s)\n\
    \        tmppz1vdhxn_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestAny_Int/test_num__9 (0.00s)\n        tmppz1vdhxn_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes 3 numbers.\n// Returns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n// Returns\
    \ false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n//\
    \ >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
    \ -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n \
    \   if isInteger(x) && isInteger(y) && isInteger(z) {\n        if x == y + z ||\
    \ y == x + z || z == x + y {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestAny_Int(t *testing.T) {\n  candidate := any_int\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2, 3, 1), expected: true },\n     { actual:\
    \ candidate(2.5, 2, 3), expected: false },\n     { actual: candidate(1.5, 5, 3.5),\
    \ expected: false },\n     { actual: candidate(2, 6, 2), expected: false },\n\
    \     { actual: candidate(4, 2, 2), expected: true },\n     { actual: candidate(2.2,\
    \ 2.2, 2.2), expected: false },\n     { actual: candidate(-4, 6, 2), expected:\
    \ true },\n     { actual: candidate(2, 1, 1), expected: true },\n     { actual:\
    \ candidate(3, 4, 7), expected: true },\n     { actual: candidate(3.0, 4, 7),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwyh02po_test.go:21:8: undefined: isInteger

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073651
