name: HumanEval_46_fib4
language: go_test.go
prompt: "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined\
  \ as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) ->\
  \ 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write\
  \ a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
  // 14\nfunc fib4(n int) int {\n"
tests: "func TestFib4(t *testing.T) {\n  candidate := fib4\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(5), expected: 4 },\n     { actual: candidate(8), expected:\
  \ 28 },\n     { actual: candidate(10), expected: 104 },\n     { actual: candidate(12),\
  \ expected: 386 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 4 {\n        return n\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n == 0 {\n        return 0\n    }\n \
    \   if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n < 2 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n \
    \   }\n    n1, n2, n3, n4 := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n     \
    \   n1, n2, n3, n4 = n2, n3, n4, n1 + n2 + n3 + n4\n    }\n    return n4\n}\n",
  "    return -1\n}\n", "    if n < 4 {\n        return 0\n    }\n    if n == 4 {\n\
    \        return 2\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    return fib4_iter(n, 0, 0, 2, 0)\n}\n", "    var mem = make([]int, n+1)\n\
    \    mem[0] = 0\n    mem[1] = 0\n    mem[2] = 2\n    mem[3] = 0\n    for i :=\
    \ 4; i <= n; i++ {\n        mem[i] = mem[i-1] + mem[i-2] + mem[i-3] + mem[i-4]\n\
    \    }\n    return mem[n]\n}\n", "    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 0\n    case 2:\n        return 2\n    case 3:\n\
    \        return 0\n    }\n    first, second, third, fourth := 0, 0, 2, 0\n   \
    \ for i := 4; i <= n; i++ {\n        fifth := first + second + third + fourth\n\
    \        first, second, third, fourth = second, third, fourth, fifth\n    }\n\
    \    return fourth\n}\n", "    // Write your code here\n\n    return 0\n}\n",
  "    if n < 4 {\n        return n\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return\
    \ d\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n     \
    \   return 0\n    }\n\n    if n == 1 {\n        return 0\n    }\n\n    if n ==\
    \ 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 0\n    }\n\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", "    var i int\n\
    \    var sum int = 0\n    var a []int = make([]int, n+1)\n    a[0] = 0\n    a[1]\
    \ = 0\n    a[2] = 2\n    a[3] = 0\n    for i = 4; i <= n; i++ {\n        a[i]\
    \ = a[i-1] + a[i-2] + a[i-3] + a[i-4]\n    }\n    return a[n]\n}\n", "    if n\
    \ < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n \
    \   if n == 3 {\n        return 0\n    }\n    first := 0\n    second := 0\n  \
    \  third := 2\n    fourth := 0\n    current := 0\n    for i := 4; i <= n; i++\
    \ {\n        current = first + second + third + fourth\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = current\n  \
    \  }\n    return current\n}\n", "    if n < 4 {\n        return n\n    }\n   \
    \ nMinusFour := 0\n    nMinusThree := 0\n    nMinusTwo := 2\n    nMinusOne :=\
    \ 0\n    currVal := 0\n    for i := 4; i <= n; i++ {\n        currVal = nMinusFour\
    \ + nMinusThree + nMinusTwo + nMinusOne\n        nMinusFour = nMinusThree\n  \
    \      nMinusThree = nMinusTwo\n        nMinusTwo = nMinusOne\n        nMinusOne\
    \ = currVal\n    }\n    return currVal\n}\n", "    var results = []int{0, 0, 2,\
    \ 0}\n    for i := 4; i <= n; i++ {\n        results = append(results, results[i-1]\
    \ + results[i-2] + results[i-3] + results[i-4])\n    }\n    return results[n]\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    var (\n        f0, f1, f2, f3, current int\n    )\n    f0 = 0\n   \
    \ f1 = 0\n    f2 = 2\n    f3 = 0\n    for i := 4; i <= n; i++ {\n        current\
    \ = f0 + f1 + f2 + f3\n        f0 = f1\n        f1 = f2\n        f2 = f3\n   \
    \     f3 = current\n    }\n    return current\n}\n", "    a, b, c, d := 0, 0,\
    \ 2, 0\n    for i := 3; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "    // Your code here.\n    return -1\n}\n", "  \
    \  if n < 4 {\n        return n\n    }\n\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n\
    \    return d\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
