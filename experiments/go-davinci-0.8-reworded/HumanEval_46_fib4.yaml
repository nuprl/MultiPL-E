name: HumanEval_46_fib4
language: go_test.go
prompt: "package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined\
  \ as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) ->\
  \ 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write\
  \ a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n\
  // 14\nfunc fib4(n int) int {\n"
tests: "func TestFib4(t *testing.T) {\n  candidate := fib4\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(5), expected: 4 },\n     { actual: candidate(8), expected:\
  \ 28 },\n     { actual: candidate(10), expected: 104 },\n     { actual: candidate(12),\
  \ expected: 386 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 4 {\n        return n\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n == 0 {\n        return 0\n    }\n \
    \   if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n < 2 {\n        return 0\n    }\n  \
    \  if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n \
    \   }\n    n1, n2, n3, n4 := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n     \
    \   n1, n2, n3, n4 = n2, n3, n4, n1 + n2 + n3 + n4\n    }\n    return n4\n}\n",
  "    return -1\n}\n", "    if n < 4 {\n        return 0\n    }\n    if n == 4 {\n\
    \        return 2\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    return fib4_iter(n, 0, 0, 2, 0)\n}\n", "    var mem = make([]int, n+1)\n\
    \    mem[0] = 0\n    mem[1] = 0\n    mem[2] = 2\n    mem[3] = 0\n    for i :=\
    \ 4; i <= n; i++ {\n        mem[i] = mem[i-1] + mem[i-2] + mem[i-3] + mem[i-4]\n\
    \    }\n    return mem[n]\n}\n", "    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 0\n    case 2:\n        return 2\n    case 3:\n\
    \        return 0\n    }\n    first, second, third, fourth := 0, 0, 2, 0\n   \
    \ for i := 4; i <= n; i++ {\n        fifth := first + second + third + fourth\n\
    \        first, second, third, fourth = second, third, fourth, fifth\n    }\n\
    \    return fourth\n}\n", "    // Write your code here\n\n    return 0\n}\n",
  "    if n < 4 {\n        return n\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return\
    \ d\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n     \
    \   return 0\n    }\n\n    if n == 1 {\n        return 0\n    }\n\n    if n ==\
    \ 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 0\n    }\n\n\
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", "    var i int\n\
    \    var sum int = 0\n    var a []int = make([]int, n+1)\n    a[0] = 0\n    a[1]\
    \ = 0\n    a[2] = 2\n    a[3] = 0\n    for i = 4; i <= n; i++ {\n        a[i]\
    \ = a[i-1] + a[i-2] + a[i-3] + a[i-4]\n    }\n    return a[n]\n}\n", "    if n\
    \ < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n \
    \   if n == 3 {\n        return 0\n    }\n    first := 0\n    second := 0\n  \
    \  third := 2\n    fourth := 0\n    current := 0\n    for i := 4; i <= n; i++\
    \ {\n        current = first + second + third + fourth\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = current\n  \
    \  }\n    return current\n}\n", "    if n < 4 {\n        return n\n    }\n   \
    \ nMinusFour := 0\n    nMinusThree := 0\n    nMinusTwo := 2\n    nMinusOne :=\
    \ 0\n    currVal := 0\n    for i := 4; i <= n; i++ {\n        currVal = nMinusFour\
    \ + nMinusThree + nMinusTwo + nMinusOne\n        nMinusFour = nMinusThree\n  \
    \      nMinusThree = nMinusTwo\n        nMinusTwo = nMinusOne\n        nMinusOne\
    \ = currVal\n    }\n    return currVal\n}\n", "    var results = []int{0, 0, 2,\
    \ 0}\n    for i := 4; i <= n; i++ {\n        results = append(results, results[i-1]\
    \ + results[i-2] + results[i-3] + results[i-4])\n    }\n    return results[n]\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    var (\n        f0, f1, f2, f3, current int\n    )\n    f0 = 0\n   \
    \ f1 = 0\n    f2 = 2\n    f3 = 0\n    for i := 4; i <= n; i++ {\n        current\
    \ = f0 + f1 + f2 + f3\n        f0 = f1\n        f1 = f2\n        f2 = f3\n   \
    \     f3 = current\n    }\n    return current\n}\n", "    a, b, c, d := 0, 0,\
    \ 2, 0\n    for i := 3; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "    // Your code here.\n    return -1\n}\n", "  \
    \  if n < 4 {\n        return n\n    }\n\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n\
    \    return d\n}\n", "    fibSeq := []int{0, 0, 2, 0}\n    if n <= 3 {\n     \
    \   return fibSeq[n]\n    }\n    i := 4\n    for ; i <= n; i++ {\n        fibSeq\
    \ = append(fibSeq, fibSeq[i-1]+fibSeq[i-2]+fibSeq[i-3]+fibSeq[i-4])\n    }\n \
    \   return fibSeq[n]\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n\
    \ == 2 {\n        return 2\n    }\n    seq := make([]int, n+1)\n    seq[0] = 0\n\
    \    seq[1] = 0\n    seq[2] = 2\n    seq[3] = 0\n    for i := 4; i <= n; i++ {\n\
    \        seq[i] = seq[i-1] + seq[i-2] + seq[i-3] + seq[i-4]\n    }\n    return\
    \ seq[n]\n}\n", "\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n < 2 {\n\t\treturn n\n\
    \t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 0\n\t}\n\ta,\
    \ b, c, d := 0, 0, 2, 0\n\tfor i := 4; i <= n; i++ {\n\t\te := a + b + c + d\n\
    \t\ta, b, c, d = b, c, d, e\n\t}\n\treturn d\n}\n", "    // YOUR CODE HERE\n \
    \   return 0\n}\n", "    if n < 4 {\n        return fibs[n]\n    }\n\n    a, b,\
    \ c, d := fibs[3], fibs[2], fibs[1], fibs[0]\n    for i := 4; i <= n; i++ {\n\
    \        e := a + b + c + d\n        a, b, c, d = b, c, d, e\n    }\n    return\
    \ d\n}\n\nvar fibs = []int{0, 0, 2, 0}\n", "\ta, b, c, d := 0, 0, 2, 0\n\tswitch\
    \ n {\n\tcase 0:\n\t\treturn a\n\tcase 1:\n\t\treturn b\n\tcase 2:\n\t\treturn\
    \ c\n\tcase 3:\n\t\treturn d\n\t}\n\tfor i := 4; i <= n; i++ {\n\t\ta, b, c, d\
    \ = b, c, d, a+b+c+d\n\t}\n\treturn d\n}\n", "\tvar n0, n1, n2, n3, n4 int = 0,\
    \ 0, 2, 0, 0\n\tvar temp int\n\tif n < 4 {\n\t\treturn n2\n\t}\n\n\tfor i := 4;\
    \ i <= n; i++ {\n\t\ttemp = n4\n\t\tn4 = n3 + n2 + n1 + n0\n\t\tn0 = n1\n\t\t\
    n1 = n2\n\t\tn2 = n3\n\t\tn3 = temp\n\t}\n\treturn n4\n}\n", "    fib4s := []int{0,\
    \ 0, 2, 0}\n    lastI := 3\n    if n < 4 {\n        return fib4s[n]\n    }\n \
    \   for i := 4; i <= n; i++ {\n        fib4s = append(fib4s, fib4s[lastI] + fib4s[lastI-1]\
    \ + fib4s[lastI-2] + fib4s[lastI-3])\n        lastI++\n    }\n    return fib4s[n]\n\
    }\n", "    if n < 3 {\n        return 0\n    } else if n == 3 {\n        return\
    \ 2\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n    \
    \    d = a + b + c + d\n        a, b, c = b, c, d\n    }\n    return d\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    c, b, a, d := 0, 0,\
    \ 2, 0\n    for i := 4; i <= n; i++ {\n        d = a + b + c\n        c = b\n\
    \        b = a\n        a = d\n    }\n    return d\n}\n", "\t//\n\tvar a, b, c,\
    \ d, e int64\n\ta = 0\n\tb = 0\n\tc = 2\n\td = 0\n\te = 0\n\tif n < 4 {\n\t\t\
    return int(a)\n\t} else if n == 4 {\n\t\treturn int(c)\n\t}\n\tfor i := 5; i <=\
    \ n; i++ {\n\t\te = a + b + c + d\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t\td = e\n\
    \t}\n\treturn int(e)\n}\n", "    if n < 4 {\n        return 0\n    }\n    if n\
    \ == 4 {\n        return 2\n    }\n    seq := make([]int, 5)\n    seq[0] = 0\n\
    \    seq[1] = 0\n    seq[2] = 2\n    seq[3] = 0\n    for i := 4; i < n; i++ {\n\
    \        seq[4] = seq[0] + seq[1] + seq[2] + seq[3]\n        seq[0] = seq[1]\n\
    \        seq[1] = seq[2]\n        seq[2] = seq[3]\n        seq[3] = seq[4]\n \
    \   }\n    return seq[4]\n}\n", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n  \
    \  } else if n == 3 {\n        return 0\n    }\n\n    a, b, c, d := 0, 0, 2, 0\n\
    \    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n\
    \    }\n    return d\n}\n", "\t// find the n-th element of the fib4 number sequence\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    fib1 := 0\n    fib2 := 0\n    fib3 := 2\n    fib4 := 0\n    for\
    \ i := 4; i <= n; i++ {\n        fib1 = fib2\n        fib2 = fib3\n        fib3\
    \ = fib4\n        fib4 = fib1 + fib2 + fib3\n    }\n    return fib4\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", " \
    \   return 0\n}\n", "    // TODO - Add your code here\n    return 0\n}\n", " \
    \   if n < 4 {\n        return n\n    }\n    f0, f1, f2, f3 := 0, 0, 2, 0\n  \
    \  for i := 4; i <= n; i++ {\n        f0, f1, f2, f3 = f1, f2, f3, f0 + f1 + f2\
    \ + f3\n    }\n    return f3\n}\n", "    if n < 2 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    prev4 := 0\n    prev3 := 0\n  \
    \  prev2 := 2\n    prev1 := 0\n    for i := 3; i <= n; i++ {\n        prev1 =\
    \ prev2 + prev3 + prev4\n        prev4 = prev3\n        prev3 = prev2\n      \
    \  prev2 = prev1\n    }\n    return prev1\n}\n", "    current := 0\n    last1\
    \ := 0\n    last2 := 2\n    last3 := 0\n    last4 := 1\n    if n <= 2 {\n    \
    \    return current\n    }\n    for i := 3; i <= n; i++ {\n        current = last1\
    \ + last2 + last3 + last4\n        last1 = last2\n        last2 = last3\n    \
    \    last3 = last4\n        last4 = current\n    }\n    return current\n}\n",
  "    return 0\n}\n", "    // Fill this in.\n    //Fill this in.\n    if n < 2 {\n\
    \        return 0\n    } else if n == 2 {\n        return 2\n    } else if n ==\
    \ 3 {\n        return 0\n    }\n    var n1, n2, n3, n4, n5 int\n    n1 = 0\n \
    \   n2 = 0\n    n3 = 2\n    n4 = 0\n    for i := 4; i <= n; i++ {\n        n5\
    \ = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n   \
    \     n4 = n5\n    }\n    return n5\n}\n", "    var dp = []int{0, 0, 2, 0}\n \
    \   if n <= 3 {\n        return dp[n]\n    }\n    for i := 4; i <= n; i++ {\n\
    \        dp = append(dp, dp[i-1]+dp[i-2]+dp[i-3]+dp[i-4])\n    }\n    return dp[n]\n\
    }\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    }\n\n    arr := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++\
    \ {\n        arr = []int{arr[1], arr[2], arr[3], arr[0] + arr[1] + arr[2] + arr[3]}\n\
    \    }\n    return arr[3]\n}\n", "    if n < 0 {\n        return 0\n    }\n  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a, b, c, d int\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n\
    \    for i := 4; i <= n; i++ {\n        a = b\n        b = c\n        c = d\n\
    \        d = a + b + c\n    }\n    return d\n}\n", "    if n < 3 {\n        return\
    \ n*2\n    }\n\n    if n == 3 {\n        return 0\n    }\n\n    a, b, c, d :=\
    \ 0, 2, 2, 0\n    for i := 4; i <= n; i++ {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n\n    return d\n}\n", "    if n <\
    \ 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n   \
    \ if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n  \
    \  }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n\
    \    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n\
    \    return d\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if\
    \ n == 3 {\n        return 0\n    }\n\n    // Use the last four Fib4 numbers to\
    \ compute the next one.\n    curr := 0\n    prev1 := 0\n    prev2 := 2\n    prev3\
    \ := 0\n    prev4 := 0\n    for i := 4; i <= n; i++ {\n        curr = prev1 +\
    \ prev2 + prev3 + prev4\n        prev4 = prev3\n        prev3 = prev2\n      \
    \  prev2 = prev1\n        prev1 = curr\n    }\n    return curr\n}\n", "    if\
    \ n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 4; i <= n; i++ {\n        d = a + b + c + d\n        a, b, c = b, c, d\n\
    \    }\n    return d\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    n_2 := 0\n    n_1 := 0\n    n_0\
    \ := 2\n    result := 0\n    for i := 4; i <= n; i++ {\n        result = n_2 +\
    \ n_1 + n_0\n        n_2 = n_1\n        n_1 = n_0\n        n_0 = result\n    }\n\
    \    return result\n}\n", "    return 0\n}\n", "    // TODO - Add your code here\n\
    \    return 0\n}\n", "    if n < 4 {\n        return 0\n    }\n    fibs := make([]int,\
    \ n)\n    fibs[0] = 0\n    fibs[1] = 0\n    fibs[2] = 2\n    fibs[3] = 0\n   \
    \ for i := 4; i < n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3]\
    \ + fibs[i-4]\n    }\n    return fibs[n-1]\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n\
    \        return 4\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    return fib(n, make(map[int]int))\n}\n", "    return fib4Recursive(n)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var a, b, c, d int\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i := 4; i <= n; i++ {\n        a = b\n        b = c\n    \
    \    c = d\n        d = a + b + c\n    }\n    return d\n}\n", "\tif n < 0 {\n\t\
    \treturn 0\n\t}\n\t\n\tif n == 0 {\n\t\treturn 0\n\t}\n\t\n\tif n == 1 {\n\t\t\
    return 0\n\t}\n\t\n\tif n == 2 {\n\t\treturn 2\n\t}\n\t\n\tif n == 3 {\n\t\treturn\
    \ 0\n\t}\n\t\n\tif n == 4 {\n\t\treturn 4\n\t}\n\t\n\treturn fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n < 0 {\n        return 0\n    }\n  \
    \  f := []int{0, 0, 2, 0}\n    for i := 3; i < n; i++ {\n        f = append(f,\
    \ f[i-1]+f[i-2]+f[i-3]+f[i-4])\n    }\n    return f[n]\n}\n", "    if n < 4 {\n\
    \        return n\n    }\n\n    var i, j, k, l int\n    for n > 3 {\n        i,\
    \ j, k, l = j, k, l, i+j+k+l\n        n--\n    }\n    return l\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a,\
    \ b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n}\n", "    if n < 4 {\n   \
    \     if n == 0 {\n            return 0\n        } else if n == 1 {\n        \
    \    return 0\n        } else if n == 2 {\n            return 2\n        } else\
    \ if n == 3 {\n            return 0\n        }\n    }\n\n    if n > 4 {\n    \
    \    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    return -1\n\
    }\n", "    fib4 := [4]int{0, 0, 2, 0}\n    // The nth fib4 number can be computed\
    \ from the n-1th, n-2th, n-3th, and n-4th fib4 numbers.\n    // This is equivalent\
    \ to computing the nth fib4 number from the n-4th, n-3th, n-2th, and n-1th fib4\
    \ numbers.\n    // Thus, we can add the last four fib4 numbers to compute the\
    \ next fib4 number.\n    for i := 4; i <= n; i++ {\n        fib4[i % 4] = fib4[(i-1)\
    \ % 4] + fib4[(i-2) % 4] + fib4[(i-3) % 4] + fib4[(i-4) % 4]\n    }\n    return\
    \ fib4[n % 4]\n}\n", "    // Fib4 is a sequence of numbers that is defined as\
    \ follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n  \
    \  // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \    // Solution:\n    // Fib4 has repeating patterns every 12 numbers, so to\
    \ compute the n-th element,\n    // we can compute fib4(n % 12) and reduce our\
    \ big O to O(1).\n    // The repeating pattern starts at fib4(4) = 4 and has following\
    \ values:\n    // (4, 8, 14, 26, 48, 90, 170, 318, 598, 1140, 2156, 4092)\n  \
    \  // fib4(n) = fib4(n % 12)\n    switch n % 12 {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 0\n    case 2:\n        return 2\n    case 3:\n\
    \        return 0\n    case 4:\n        return 4\n    case 5:\n        return\
    \ 8\n    case 6:\n        return 14\n    case 7:\n        return 26\n    case\
    \ 8:\n        return 48\n    case 9:\n        return 90\n    case 10:\n      \
    \  return 170\n    case 11:\n        return 318\n    }\n    return 0\n}\n", " \
    \   prev := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        prev = append(prev,\
    \ prev[i-1] + prev[i-2] + prev[i-3] + prev[i-4])\n    }\n    return prev[n]\n\
    }\n", "    var a, b, c, d, e int\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n\
    \    e = 0\n    for i := 4; i <= n; i++ {\n        e = a + b + c + d\n       \
    \ a = b\n        b = c\n        c = d\n        d = e\n    }\n    return e\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    x := 0\n    y := 0\n    z := 2\n    w := 0\n    for i := 4; i\
    \ <= n; i++ {\n        temp := x + y + z + w\n        x = y\n        y = z\n \
    \       z = w\n        w = temp\n    }\n    return x + y + z + w\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    a := 0\n    b := 0\n    c := 2\n    d := 0\n    for i := 4; i <= n;\
    \ i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n}\n", " \
    \   // YOUR CODE HERE\n    return 0\n}\n", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 2\n    } else if n == 3 {\n        return 0\n    }\n\n    // n >= 4\n    fib_n_minus_4\
    \ := 0\n    fib_n_minus_3 := 0\n    fib_n_minus_2 := 2\n    fib_n_minus_1 := 0\n\
    \    var fib_n int\n\n    for i := 4; i <= n; i++ {\n        fib_n = fib_n_minus_4\
    \ + fib_n_minus_3 + fib_n_minus_2 + fib_n_minus_1\n        fib_n_minus_4 = fib_n_minus_3\n\
    \        fib_n_minus_3 = fib_n_minus_2\n        fib_n_minus_2 = fib_n_minus_1\n\
    \        fib_n_minus_1 = fib_n\n    }\n\n    return fib_n\n}\n", "    var fib4_0\
    \ int = 0\n    var fib4_1 int = 0\n    var fib4_2 int = 2\n    var fib4_3 int\
    \ = 0\n    var fib4_n int = 0\n    if n == 0 {\n        return fib4_0\n    } else\
    \ if n == 1 {\n        return fib4_1\n    } else if n == 2 {\n        return fib4_2\n\
    \    } else if n == 3 {\n        return fib4_3\n    } else {\n        for i :=\
    \ 4; i <= n; i++ {\n            fib4_n = fib4_0 + fib4_1 + fib4_2 + fib4_3\n \
    \           fib4_0 = fib4_1\n            fib4_1 = fib4_2\n            fib4_2 =\
    \ fib4_3\n            fib4_3 = fib4_n\n        }\n        return fib4_n\n    }\n\
    }\n", "    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n    var a, b, c, d int\n    a, b, c, d = 0, 0, 0, 2\n    for i :=\
    \ 3; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n    return\
    \ d\n}\n", "    var m [5]int\n    m[0] = 0\n    m[1] = 0\n    m[2] = 2\n    m[3]\
    \ = 0\n    for i := 4; i <= n; i++ {\n        m[i%5] = m[(i-1)%5] + m[(i-2)%5]\
    \ + m[(i-3)%5] + m[(i-4)%5]\n    }\n    return m[n%5]\n}\n", "    if n < 0 {\n\
    \        return 0\n    }\n    var f4 = []int{0, 0, 2, 0}\n    for i := 4; i <=\
    \ n; i++ {\n        f4 = append(f4, f4[i-1]+f4[i-2]+f4[i-3]+f4[i-4])\n    }\n\
    \    return f4[n]\n}\n", "    return 0\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    var last, prev, prevprev, prevprevprev int = 0, 0, 0, 0\n    for\
    \ i := 1; i < n; i++ {\n        last = prev + prevprev + prevprevprev\n      \
    \  prevprevprev = prevprev\n        prevprev = prev\n        prev = last\n   \
    \ }\n    return last\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    if\
    \ n == 0 {\n        return 0\n    }\n\n    if n <= 3 {\n        return 1\n   \
    \ }\n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", "\tif n\
    \ == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2\
    \ {\n\t\treturn 2\n\t} else if n == 3 {\n\t\treturn 0\n\t}\n\ta, b, c, d := 0,\
    \ 0, 2, 0\n\tfor n > 3 {\n\t\tresult := a + b + c + d\n\t\ta = b\n\t\tb = c\n\t\
    \tc = d\n\t\td = result\n\t\tn--\n\t}\n\treturn d\n}\n", "    // Complete the\
    \ function.\n    return -1\n}\n", "    // Declare and initlaize the variables\n\
    \    a, b, c, d := 0, 0, 2, 0\n    n--\n    // For loop to calculate the nth element\
    \ of the Fib4 number sequence\n    for n > 0 {\n        a, b, c, d = b, c, d,\
    \ a+b+c+d\n        n--\n    }\n    return d\n}\n", "    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    sum := 0\n    temp := 0\n    prev := 0\n    current\
    \ := 0\n    next := 2\n    for i := 4; i <= n; i++ {\n        prev = temp\n  \
    \      temp = current\n        current = next\n        next = prev + temp + current\
    \ + next\n    }\n    return next\n}\n", "    if n < 0 {\n        return 0\n  \
    \  }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var prev3, prev2, prev1, prev int\n    prev3 = 0\n   \
    \ prev2 = 0\n    prev1 = 2\n    prev = 0\n    for i := 4; i <= n; i++ {\n    \
    \    result := prev1 + prev2 + prev3 + prev\n        prev3 = prev2\n        prev2\
    \ = prev1\n        prev1 = prev\n        prev = result\n    }\n    return prev\n\
    }\n", "    if n < 0 {\n        return 0\n    }\n\n    fib4 := make([]int, n+1)\n\
    \    fib4[0] = 0\n    fib4[1] = 0\n    fib4[2] = 2\n    fib4[3] = 0\n\n    if\
    \ n <= 3 {\n        return fib4[n]\n    }\n\n    for i := 4; i <= n; i++ {\n \
    \       fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n    }\n\n   \
    \ return fib4[n]\n}\n", "    if n == 0 {\n        return 0\n    }\n    fibs :=\
    \ make([]int, n+1)\n    fibs[0] = 0\n    fibs[1] = 0\n    fibs[2] = 2\n    fibs[3]\
    \ = 0\n    for i := 4; i <= n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2]\
    \ + fibs[i-3] + fibs[i-4]\n    }\n    return fibs[n]\n}\n", "    return 0\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    if n == 4 {\n        return 2\n    }\n    i := 5\n    a := 2\n\
    \    b := 0\n    c := 2\n    d := 0\n    for i <= n {\n        a, b, c, d = a\
    \ + b + c + d, a, b, c\n        i++\n    }\n    return a\n}\n", "    if n < 0\
    \ {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    n4 := 0\n    n3 := 0\n    n2 :=\
    \ 2\n    n1 := 0\n    for i := 4; i <= n; i++ {\n        n4 = n3 + n2 + n1 + n4\n\
    \        n3 = n2\n        n2 = n1\n        n1 = n4\n    }\n    return n4\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n   \
    \ }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 3; i <= n; i++ {\n        d =\
    \ a + b + c + d\n        a, b, c = b, c, d\n    }\n    return d\n}\n", "    if\
    \ n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    var a, b, c, d, t int\n    a =\
    \ 0\n    b = 0\n    c = 2\n    d = 0\n    for i := 3; i <= n; i++ {\n        t\
    \ = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = t\n\
    \    }\n    return d\n}\n", "    if n < 2 {\n        return 0\n    } else if n\
    \ == 2 {\n        return 2\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i :=\
    \ 3; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n    return\
    \ d\n}\n", "    var f4 [4]int\n    f4[0] = 0\n    f4[1] = 0\n    f4[2] = 2\n \
    \   f4[3] = 0\n    if n < 4 {\n        return f4[n]\n    }\n    var fib int\n\
    \    for i := 3; i < n; i++ {\n        fib = f4[0] + f4[1] + f4[2] + f4[3]\n \
    \       f4[0] = f4[1]\n        f4[1] = f4[2]\n        f4[2] = f4[3]\n        f4[3]\
    \ = fib\n    }\n    return fib\n}\n", "    return 0\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d\
    \ = b, c, d, a+b+c+d\n    }\n    return d\n}\n", "    // The first four elements\
    \ are: 0, 0, 2, 0.\n    f := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n\
    \        new := f[0] + f[1] + f[2] + f[3]\n        f[0] = f[1]\n        f[1] =\
    \ f[2]\n        f[2] = f[3]\n        f[3] = new\n    }\n    return f[3]\n}\n",
  "    if n < 4 {\n        return int([]int{0, 0, 2, 0}[n])\n    }\n    var a, b,\
    \ c, d, result int\n    a, b, c, d = 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n\
    \        result = a + b + c + d\n        a, b, c, d = b, c, d, result\n    }\n\
    \    return result\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    a := 0\n    b := 0\n    c := 2\n\
    \    d := 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "\tif n <= 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\
    \t\treturn 2\n\t} else if n == 3 {\n\t\treturn 0\n\t} else {\n\t\tp1, p2, p3,\
    \ p4 := 0, 0, 2, 0\n\t\tfor i := 4; i <= n; i++ {\n\t\t\tp4 = p1 + p2 + p3 + p4\n\
    \t\t\tp1 = p2\n\t\t\tp2 = p3\n\t\t\tp3 = p4\n\t\t}\n\t\treturn p4\n\t}\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a := 0\n    b := 0\n\
    \    c := 2\n    d := 0\n    r := 0\n    for i := 4; i <= n; i++ {\n        r\
    \ = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = r\n\
    \    }\n    return r\n}\n", "    // Write your code here\n    return 0\n}\n",
  "    var f0, f1, f2, f3, f4 int = 0, 0, 2, 0, 2\n    if n < 0 {\n        return\
    \ -1\n    }\n    if n < 4 {\n        return f2\n    }\n    for i := 4; i <= n;\
    \ i++ {\n        f4 = f0 + f1 + f2 + f3\n        f0 = f1\n        f1 = f2\n  \
    \      f2 = f3\n        f3 = f4\n    }\n    return f4\n}\n", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n \
    \   n1 := 0\n    n2 := 0\n    n3 := 2\n    n4 := 0\n    for i := 4; i <= n; i++\
    \ {\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n1 + n2 +\
    \ n3 + n4\n    }\n    return n4\n}\n", "    prev3, prev2, prev1, current := 0,\
    \ 0, 2, 0\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    for i := 4; i <= n; i++ {\n        current = prev3\
    \ + prev2 + prev1 + current\n        prev3 = prev2\n        prev2 = prev1\n  \
    \      prev1 = current\n    }\n    return current\n}\n", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ pre := 0\n    res := 0\n    curr := 0\n    for i := 4; i <= n; i++ {\n     \
    \   pre = res\n        res = curr\n        curr = pre + res + curr\n    }\n  \
    \  return curr\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n == 3 {\n        return 0\n    }\n    a := 0\n    b := 0\n    c := 2\n    d\
    \ := 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "\tif n < 2 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\
    \treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 0\n\t}\n\ta := 0\n\tb := 0\n\tc :=\
    \ 2\n\td := 0\n\tfor i := 4; i <= n; i++ {\n\t\td = a + b + c\n\t\ta = b\n\t\t\
    b = c\n\t\tc = d\n\t}\n\treturn d\n}\n", "    // TODO - Add your code here\n \
    \   return 0\n}\n", "    // return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    memo := make([]int, n + 1)\n    return fib4Helper(n, memo)\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    f0 := 0\n    f1 := 0\n    f2 := 2\n    f3 := 0\n    for i := 4;\
    \ i <= n; i++ {\n        curr := f0 + f1 + f2 + f3\n        f0 = f1\n        f1\
    \ = f2\n        f2 = f3\n        f3 = curr\n    }\n    return f0 + f1 + f2 + f3\n\
    }\n", "    //fmt.Println(\"n:\", n)\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n == 0 {\n        return 0\n    }\n \
    \   if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    x0 := 0\n    x1 := 0\n \
    \   x2 := 2\n    x3 := 0\n    for i := 4; i <= n; i++ {\n        x4 := x0 + x1\
    \ + x2 + x3\n        x0 = x1\n        x1 = x2\n        x2 = x3\n        x3 = x4\n\
    \    }\n    return x0 + x1 + x2 + x3\n}\n", "    // TODO - Add your code here\n\
    \    return 0\n}\n", "    // Complete the Fib4 function here\n    return 0\n}\n",
  "    a, b, c, d := 0, 0, 2, 0\n    for n > 3 {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \        n--\n    }\n    return d\n}\n", "    if n < 3 {\n        return n\n \
    \   }\n    n1, n2, n3, n4 := 0, 0, 2, 0\n    for i := 3; i <= n; i++ {\n     \
    \   n4 = n1 + n2 + n3 + n4\n        n1, n2, n3 = n2, n3, n4\n    }\n    return\
    \ n4\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    }\n", "    var i, j, k, l, t int\n    i, j, k, l = 0, 0, 2, 0\n    if n < 4 {\n\
    \        return 0\n    }\n    for n > 4 {\n        t = i + j + k + l\n       \
    \ i, j, k, l = j, k, l, t\n        n--\n    }\n    return t\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n  \
    \  }\n\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a,\
    \ b, c, d = b, c, d, a + b + c + d\n    }\n    return d\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n\
    \    fn1 := 0\n    fn2 := 0\n    fn3 := 2\n    fn4 := 0\n    sum := 0\n    for\
    \ i := 4; i <= n; i++ {\n        sum = fn1 + fn2 + fn3 + fn4\n        fn1 = fn2\n\
    \        fn2 = fn3\n        fn3 = fn4\n        fn4 = sum\n    }\n    return sum\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    if n == 4 {\n        return 1\n    }\n    var a, b, c,\
    \ d, e int\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    e = 1\n    for i :=\
    \ 5; i <= n; i++ {\n        a = b\n        b = c\n        c = d\n        d = e\n\
    \        e = a + b + c + d\n    }\n    return e\n}\n", "\tswitch n {\n\tcase 0:\n\
    \t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase 2:\n\t\treturn 2\n\tcase 3:\n\t\t\
    return 0\n\tdefault:\n\t\tf := make([]int, n+1)\n\t\tf[0] = 0\n\t\tf[1] = 0\n\t\
    \tf[2] = 2\n\t\tf[3] = 0\n\t\tfor i := 4; i <= n; i++ {\n\t\t\tf[i] = f[i-1] +\
    \ f[i-2] + f[i-3] + f[i-4]\n\t\t}\n\t\treturn f[n]\n\t}\n}\n", "    if n < 4 {\n\
    \        if n == 3 {\n            return 2\n        }\n        return 0\n    }\n\
    \    // Iterate through sequences until nth element found.\n    var d1, d2, d3,\
    \ d4, i int\n    for i = 4; i <= n; i++ {\n        d1, d2, d3, d4 = d2, d3, d4,\
    \ d1+d2+d3+d4\n    }\n    return d4\n}\n", "    return fib4Recursive(n)\n}\n",
  "    return 0\n}\n", "    // Implement\n    return 0\n}\n", "    if n < 4 {\n  \
    \      if n == 0 {\n            return 0\n        } else if n == 1 {\n       \
    \     return 0\n        } else if n == 2 {\n            return 2\n        } else\
    \ if n == 3 {\n            return 0\n        }\n    }\n\n    a, b, c, d := 0,\
    \ 0, 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    var fournums [4]int\n    fournums[0]\
    \ = 0\n    fournums[1] = 0\n    fournums[2] = 2\n    fournums[3] = 0\n    for\
    \ i := 4; i <= n; i++ {\n        fournums[i%4] = fournums[(i-1)%4] + fournums[(i-2)%4]\
    \ + fournums[(i-3)%4] + fournums[(i-4)%4]\n    }\n    return fournums[n%4]\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    f0 := 0\n    f1 := 0\n    f2 := 2\n    f3 := 0\n    for i := 4;\
    \ i <= n; i++ {\n        fn := f0 + f1 + f2 + f3\n        f0 = f1\n        f1\
    \ = f2\n        f2 = f3\n        f3 = fn\n    }\n    return f3\n}\n", "    //\
    \ TODO: implement this function\n    return 0\n}\n", "    var a, b, c, d, res\
    \ int\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        a = 0\n        b = 0\n        c = 2\n     \
    \   d = 0\n        res = 0\n        for i := 4; i <= n; i++ {\n            res\
    \ = a + b + c + d\n            a = b\n            b = c\n            c = d\n \
    \           d = res\n        }\n        return res\n    }\n}\n", "    // INSERT\
    \ YOUR CODE HERE\n    return 0\n}\n", "    // TODO - Add your code here\n    return\
    \ 0\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    if n == 4 {\n        return 2\n    }\n    f1 :=\
    \ 0\n    f2 := 0\n    f3 := 2\n    f4 := 2\n    result := 0\n    for i := 5; i\
    \ <= n; i++ {\n        result = f1 + f2 + f3 + f4\n        f1 = f2\n        f2\
    \ = f3\n        f3 = f4\n        f4 = result\n    }\n    return result\n}\n",
  "    seq := make([]int, n+1)\n    seq[0] = 0\n    seq[1] = 0\n    seq[2] = 2\n \
    \   seq[3] = 0\n    for i := 4; i <= n; i++ {\n        seq[i] = seq[i-1] + seq[i-2]\
    \ + seq[i-3] + seq[i-4]\n    }\n    return seq[n]\n}\n", "    if n < 4 {\n   \
    \     return n\n    }\n\n    var result int = 0\n    var a, b, c, d int = 0, 0,\
    \ 2, 0\n\n    for i := 4; i <= n; i++ {\n        result = a + b + c + d\n    \
    \    a, b, c, d = b, c, d, result\n    }\n\n    return result\n}\n", "    // Your\
    \ code here.\n    return 0\n}\n", "    if n < 2 {\n        return 0\n    }\n \
    \   if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    //f := []int{0, 0, 2, 0}\n    f := make([]int, 4)\n    f[0] = 0\n\
    \    f[1] = 0\n    f[2] = 2\n    f[3] = 0\n    for i := 4; i <= n; i++ {\n   \
    \     sum := f[3] + f[2] + f[1] + f[0]\n        f[0] = f[1]\n        f[1] = f[2]\n\
    \        f[2] = f[3]\n        f[3] = sum\n    }\n    return f[3]\n}\n", "    if\
    \ n < 2 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else\
    \ if n == 3 {\n        return 0\n    }\n\n    n1, n2, n3, n4 := 0, 0, 2, 0\n \
    \   for i := 4; i <= n; i++ {\n        tmp := n1 + n2 + n3 + n4\n        n1 =\
    \ n2\n        n2 = n3\n        n3 = n4\n        n4 = tmp\n    }\n\n    return\
    \ n1 + n2 + n3 + n4\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    prev4 := 0\n    prev3 := 0\n  \
    \  prev2 := 2\n    prev1 := 0\n    for i := 4; i <= n; i++ {\n        curr :=\
    \ prev4 + prev3 + prev2 + prev1\n        prev4 = prev3\n        prev3 = prev2\n\
    \        prev2 = prev1\n        prev1 = curr\n    }\n    return prev1\n}\n", " \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    }\n\n    a, b, c, d := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n  \
    \      a, b, c, d = b, c, d, a + b + c + d\n    }\n    return d\n}\n", "    return\
    \ fib4_dp(n, map[int]int{})\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    n1 := 0\n    n2 := 0\n \
    \   n3 := 2\n    n4 := 0\n    for i := 4; i <= n; i++ {\n        n4 = n1 + n2\
    \ + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n    return\
    \ n4\n}\n", "    if n < 4 {\n        return 0\n    }\n    if n == 4 {\n      \
    \  return 2\n    }\n    a, b, c, d := 0, 0, 0, 2\n    for i := 5; i <= n; i++\
    \ {\n        d, c, b, a = d+c+b+a, d, c, b\n    }\n    return d+c+b+a\n}\n", " \
    \   if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n \
    \   }\n    if n == 3 {\n        return 0\n    }\n    // start:        1 1 2 3\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for i := 4; i <= n; i++ {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    if n > 3 {\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    }\n    return 0\n}\n", "    return 0\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    n1 := 0\n  \
    \  n2 := 0\n    n3 := 2\n    n4 := 0\n    for i := 4; i <= n; i++ {\n        n5\
    \ := n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n  \
    \      n4 = n5\n    }\n    return n1 + n2 + n3 + n4\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib = append(fib,\
    \ fib[i-1]+fib[i-2]+fib[i-3]+fib[i-4])\n    }\n    return fib[n]\n}\n", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        previousFour := make([]int, 4)\n        previousFour[0]\
    \ = 0\n        previousFour[1] = 0\n        previousFour[2] = 2\n        previousFour[3]\
    \ = 0\n        for i := 4; i <= n; i++ {\n            value := previousFour[0]\
    \ + previousFour[1] + previousFour[2] + previousFour[3]\n            previousFour[0]\
    \ = previousFour[1]\n            previousFour[1] = previousFour[2]\n         \
    \   previousFour[2] = previousFour[3]\n            previousFour[3] = value\n \
    \       }\n        return previousFour[3]\n    }\n}\n", "    if n < 0 {\n    \
    \    return 0\n    }\n    if n < 2 {\n        return n\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    return\
    \ (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n}\n", "    // TODO - Add your\
    \ code here\n    return 0\n}\n", "    if n < 3 {\n        return 0\n    }\n  \
    \  if n == 3 {\n        return 2\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if\
    \ n == 3 {\n        return 0\n    } else {\n        a, b, c, d := 0, 0, 2, 0\n\
    \        for i := 4; i <= n; i++ {\n            a, b, c, d = b, c, d, a + b +\
    \ c + d\n        }\n        return d\n    }\n}\n", "    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 3; i < n; i++ {\n\
    \        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return a+b+c+d\n}\n", "   \
    \ if n < 4 {\n        return 0\n    }\n    //fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    // 2 * fib4(n-2) + fib4(n-3) + fib4(n-4)\n    // 2 * (fib4(n-3)\
    \ + fib4(n-4)) + fib4(n-3) + fib4(n-4)\n    // 3 * fib4(n-3) + 2 * fib4(n-4)\n\
    \    // 3 * (fib4(n-4) + fib4(n-5)) + 2 * fib4(n-4)\n    // 5 * fib4(n-4) + fib4(n-5)\n\
    \    // 5 * (fib4(n-5) + fib4(n-6)) + fib4(n-5)\n    // 6 * fib4(n-5) + fib4(n-6)\n\
    \    // 6 * (fib4(n-6) + fib4(n-7)) + fib4(n-6)\n    // 7 * fib4(n-6) + fib4(n-7)\n\
    \    return 7 * fib4(n-6) + fib4(n-7)\n}\n", "    // your code here\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    a := 2\n    b := 0\n    c := 0\n    d := 0\n    i := 4\n    for\
    \ i <= n {\n        a, b, c, d = a + b + c + d, a, b, c\n        i++\n    }\n\
    \    return a + b + c + d\n}\n", "    a, b, c, d := 0, 0, 2, 0\n    for i := 3;\
    \ i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return d\n\
    }\n", "    return fib4_loop(n)\n}\n", "    if n < 2 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 2; i < n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return\
    \ d\n}\n", "    current := 0\n    prev := 0\n    prevprev := 0\n    prevprevprev\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n            current\
    \ = 0\n        } else if i == 2 {\n            current = 2\n        } else if\
    \ i == 3 {\n            current = 0\n        } else {\n            current = prev\
    \ + prevprev + prevprevprev\n        }\n        prevprevprev = prevprev\n    \
    \    prevprev = prev\n        prev = current\n    }\n    return current\n}\n",
  "    return 0\n}\n", "    if n < 2 {\n        return 0\n    } else if n == 2 {\n\
    \        return 2\n    } else if n == 3 {\n        return 0\n    }\n\n    // Using\
    \ dynamic programming, the results of the previous 4 calls can be stored\n   \
    \ // in these variables.  Since we are calculating the N-th Fib4 number, then\
    \ the 4\n    // results before that are the previous 4 in sequence.\n    f_n_1\
    \ := 8\n    f_n_2 := 14\n    f_n_3 := 4\n    f_n_4 := 0\n\n    for i := 6; i <\
    \ n; i++ {\n        temp := f_n_1 + f_n_2 + f_n_3 + f_n_4\n        f_n_4 = f_n_3\n\
    \        f_n_3 = f_n_2\n        f_n_2 = f_n_1\n        f_n_1 = temp\n    }\n\n\
    \    return f_n_1\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ if n == 3 {\n        return 0\n    }\n    var fib_n int\n    var fib_n_1 int\n\
    \    var fib_n_2 int\n    var fib_n_3 int\n    var fib_n_4 int\n    fib_n_1 =\
    \ 0\n    fib_n_2 = 0\n    fib_n_3 = 2\n    fib_n_4 = 0\n    for i := 4; i <= n;\
    \ i++ {\n        fib_n = fib_n_1 + fib_n_2 + fib_n_3 + fib_n_4\n        fib_n_1\
    \ = fib_n_2\n        fib_n_2 = fib_n_3\n        fib_n_3 = fib_n_4\n        fib_n_4\
    \ = fib_n\n    }\n    return fib_n\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0,\
    \ 2, 0\n    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n\
    \    }\n    return d\n}\n", "    a, b, c, d := 0, 0, 2, 0\n    for i := 0; i <\
    \ n; i++ {\n        a, b, c, d = b, c, d, b + c + d\n    }\n    return a\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    f0 := 0\n    f1 := 0\n    f2 := 2\n    f3 := 0\n    ans := 0\n\
    \    for i := 4; i <= n; i++ {\n        ans = f0 + f1 + f2 + f3\n        f0 =\
    \ f1\n        f1 = f2\n        f2 = f3\n        f3 = ans\n    }\n    return ans\n\
    }\n", "    // Fill in the function definition.\n    return 0\n}\n", "    if n\
    \ < 0 {\n        return 0\n    }\n\n    if n < 2 {\n        return 0\n    }\n\n\
    \    if n == 2 {\n        return 2\n    }\n\n    // Create buffer to store values\n\
    \    buffer := make([]int, n+1)\n    buffer[0] = 0\n    buffer[1] = 0\n    buffer[2]\
    \ = 2\n    buffer[3] = 0\n\n    for i := 4; i <= n; i++ {\n        buffer[i] =\
    \ buffer[i-1] + buffer[i-2] + buffer[i-3] + buffer[i-4]\n    }\n\n    return buffer[n]\n\
    }\n", "    if n < 3 {\n        return n << 1\n    }\n    m := make([]int, n)\n\
    \    m[0] = 0\n    m[1] = 0\n    m[2] = 2\n    m[3] = 0\n    for i := 4; i < n;\
    \ i++ {\n        m[i] = m[i-1] + m[i-2] + m[i-3] + m[i-4]\n    }\n    return m[n-1]\
    \ + m[n-2] + m[n-3] + m[n-4]\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n\
    \    for i := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n\
    \    return d\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if\
    \ n == 3 {\n        return 0\n    }\n\n    f0 := 0\n    f1 := 0\n    f2 := 2\n\
    \    f3 := 0\n    f4 := f0 + f1 + f2 + f3\n    for i := 4; i <= n; i++ {\n   \
    \     f0 = f1\n        f1 = f2\n        f2 = f3\n        f3 = f4\n        f4 =\
    \ f0 + f1 + f2 + f3\n    }\n    return f4\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a := []int{0,\
    \ 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        a = append(a, a[1]+a[2]+a[3]+a[0])\n\
    \        a = a[1:]\n    }\n    return a[0]\n}\n", "    // TODO: implement it\n\
    \    return 0\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if\
    \ n == 3 {\n        return 0\n    }\n\n    a, b, c, d := 0, 0, 2, 0\n    for i\
    \ := 4; i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n  \
    \  return d\n}\n", "    return fib4Helper(n, make(map[int]int))\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    if n == 4 {\n        return 2\n    }\n    a := 2\n    b := 0\n   \
    \ c := 2\n    d := 0\n    for i := 5; i <= n; i++ {\n        a, b, c, d = c, d,\
    \ a+b+c+d, a\n    }\n    return a+b+c+d\n}\n", "    return 1\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n\
    \    }\n    // second to last, third to last, fourth to last\n    var secondLast,\
    \ thirdLast, fourthLast int = 0, 0, 0\n    last := 0\n    for i := 3; i <= n;\
    \ i++ {\n        fourthLast = thirdLast\n        thirdLast = secondLast\n    \
    \    secondLast = last\n        last = secondLast + thirdLast + fourthLast + last\n\
    \    }\n    return last\n}\n", "    return fib4r(n, make(map[int]int))\n}\n",
  "    if n < 4 {\n        return n\n    }\n    fibs := []int{0,0,2,0}\n    for i\
    \ := 4; i <= n; i++ {\n        sum := fibs[1] + fibs[2] + fibs[3] + fibs[0]\n\
    \        fibs[0] = fibs[1]\n        fibs[1] = fibs[2]\n        fibs[2] = fibs[3]\n\
    \        fibs[3] = sum\n    }\n    return fibs[3]\n}\n", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ fib4_1 := 0\n    fib4_2 := 0\n    fib4_3 := 2\n    fib4_4 := 0\n    var sum\
    \ int\n    for i := 4; i <= n; i++ {\n        sum = fib4_1 + fib4_2 + fib4_3 +\
    \ fib4_4\n        fib4_1 = fib4_2\n        fib4_2 = fib4_3\n        fib4_3 = fib4_4\n\
    \        fib4_4 = sum\n    }\n    return sum\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    if n == 3 {\n        return 2\n    }\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n}\n", "    if n == 0 {\n        return 0\n    }\n \
    \   if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n\
    \    for i := 4; i <= n; i++ {\n        d = a + b + c + d\n        a = b\n   \
    \     b = c\n        c = d\n    }\n    return d\n}\n", "    // Your code here\n\
    \    return 0\n}\n", "    if n < 3 {\n        return n * 2\n    }\n    if n ==\
    \ 3 {\n        return 0\n    }\n    a, b, c, d := 0, 2, 0, 8\n    for i := 4;\
    \ i <= n; i++ {\n        a, b, c, d = b, c, d, a + b + c + d\n    }\n    return\
    \ d\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for i := 3; i < n;\
    \ i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return a+b+c+d\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    a, b, c, d := 0, 0, 2, 0\n    for\
    \ i := 0; i < n; i++ {\n        a, b, c, d = b, c, d, a+b+c+d\n    }\n    return\
    \ a\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n\
    \        return 0\n    } else {\n        a, b, c, d := 0, 0, 2, 0\n        for\
    \ i := 4; i <= n; i++ {\n            a, b, c, d = b, c, d, a + b + c + d\n   \
    \     }\n        return d\n    }\n}\n", "    if n == 0 {\n        return 0\n \
    \   }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    // https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form\n\
    \    // https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n\
    \    // http://mathforum.org/library/drmath/view/62550.html\n    // http://mathforum.org/library/drmath/view/54767.html\n\
    \    // a^n - b^n\n    // --------\n    //  a - b\n    //\n    // a, b = (a +\
    \ b) / sqrt(5), (a - b) / sqrt(5)\n    // a = (1 + sqrt(5)) / 2, b = (1 - sqrt(5))\
    \ / 2\n    // a = 1.618033988749894848204586834365, b = -0.618033988749894848204586834365\n\
    \    // fib4(1) = a^0 - b^0 / a - b = 1 / sqrt(5) = 0.447213595499957939281834733746\n\
    \    // fib4(2) = a^1 - b^1 / a - b = 1 / sqrt(5) = 0.447213595499957939281834733746\n\
    \    // fib4(3) = a^2 - b^2 / a - b = 0 / sqrt(5) = 0\n    // fib4(4) = a^3 -\
    \ b^3 / a - b = 1 / sqrt(5) = 0.447213595499957939281834733746\n    a := 1.618033988749894848204586834365\n\
    \    b := -0.618033988749894848204586834365\n    sqrt_5 := 2.2360679774997896964091736687313\n\
    \    return int(((a^float64(n) - b^float64(n))", "\tif n < 3 {\n\t\treturn n\n\
    \t}\n\ta, b, c, d := 0, 0, 2, 0\n\tfor i := 4; i <= n; i++ {\n\t\ta, b, c, d =\
    \ b, c, d, a+b+c+d\n\t}\n\treturn d\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0,\
    \ 2, 0\n    for i := 4; i <= n; i++ {\n        e := a + b + c + d\n        a,\
    \ b, c, d = b, c, d, e\n    }\n    return d\n}\n", "    // Write your code here\n\
    \n    return 0\n}\n", "    // TODO - Add your code here\n    return 0\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n", " \
    \   f0, f1, f2, f3 := 0, 0, 2, 0\n    for i := 4; i <= n; i++ {\n        f4 :=\
    \ f0 + f1 + f2 + f3\n        f0, f1, f2, f3 = f1, f2, f3, f4\n    }\n    return\
    \ f3\n}\n", "    switch n {\n    case 0:\n        return 0\n    case 1:\n    \
    \    return 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n\
    \    }\n    a, b, c, d := 0, 0, 2, 0\n    for n-=4; n > 0; n-- {\n        a, b,\
    \ c, d = b, c, d, a+b+c+d\n    }\n    return d\n}\n", "    res := make([]int,\
    \ n+1)\n    res[0] = 0\n    res[1] = 0\n    res[2] = 2\n    res[3] = 0\n    for\
    \ i := 4; i <= n; i++ {\n        res[i] = res[i-1] + res[i-2] + res[i-3] + res[i-4]\n\
    \    }\n    return res[n]\n}\n", "    return 0\n}\n", "    switch n {\n    case\
    \ 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n        return\
    \ 2\n    case 3:\n        return 0\n    default:\n        a, b, c, d := 0, 0,\
    \ 2, 0\n        for i := 4; i <= n; i++ {\n            a, b, c, d = b, c, d, a+b+c+d\n\
    \        }\n        return d\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    a, b, c, d := 0, 0,\
    \ 2, 0\n    for i := 4; i <= n; i++ {\n        e := a + b + c + d\n        a,\
    \ b, c, d = b, c, d, e\n    }\n    return d\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
