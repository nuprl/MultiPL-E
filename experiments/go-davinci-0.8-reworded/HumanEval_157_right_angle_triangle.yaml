name: HumanEval_157_right_angle_triangle
language: go_test.go
prompt: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n"
tests: "func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n   \
  \  { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
  \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false },\n\
  \     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
  \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
  \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
  \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
  \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if a > b && a > c {\n        return a * a == b * b + c * c\n  \
    \  } else if b > a && b > c {\n        return b * b == a * a + c * c\n    } else\
    \ {\n        return c * c == a * a + b * b\n    }\n}\n", "    //YOUR CODE HERE...\n\
    \    return false\n}\n", "    // INSERT YOUR CODE HERE\n    return false\n}\n",
  "    return false\n}\n", "    return a * a + b * b == c * c\n}\n", "    if a > b\
    \ && a > c {\n        return a * a == b * b + c * c\n    } else if b > a && b\
    \ > c {\n        return b * b == a * a + c * c\n    } else {\n        return c\
    \ * c == a * a + b * b\n    }\n}\n", "    return true\n}\n", "    // Your code\
    \ goes here\n    return false\n}\n", "    var s []int = []int{a, b, c}\n    var\
    \ p int = 0\n    var q int = 0\n    var r int = 0\n    for i := 0; i < 3; i++\
    \ {\n        for j := i + 1; j < 3; j++ {\n            if s[i] > s[j] {\n    \
    \            s[i], s[j] = s[j], s[i]\n            }\n        }\n    }\n    p =\
    \ s[0]\n    q = s[1]\n    r = s[2]\n    if p * p + q * q == r * r {\n        return\
    \ true\n    }\n    return false\n}\n", "    sides := []int{a, b, c}\n    square_sides\
    \ := []int{a*a, b*b, c*c}\n    sort_int(square_sides)\n    return (square_sides[0]\
    \ + square_sides[1] == square_sides[2])\n}\n", "    // Write your code here.\n\
    \    return false\n}\n", "    var x = []int{a, b, c}\n    for i := 0; i < 3; i++\
    \ {\n        if x[i] * x[i] == x[(i+1)%3] * x[(i+1)%3] + x[(i+2)%3] * x[(i+2)%3]\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    if\
    \ a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a == b &&\
    \ b == c {\n        return false\n    }\n    if a * a + b * b == c * c {\n   \
    \     return true\n    }\n    if a * a + c * c == b * b {\n        return true\n\
    \    }\n    if b * b + c * c == a * a {\n        return true\n    }\n    return\
    \ false\n}\n", "    return a * a + b * b == c * c\n}\n", "    if a*a + b*b ==\
    \ c*c {\n        return true\n    }\n    return false\n}\n", "    fmt.Printf(\"\
    a: %d, b: %d, c: %d\\n\", a, b, c)\n    if a*a == b*b + c*c || b*b == a*a + c*c\
    \ || c*c == a*a + b*b {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n", "    var sides = []int{a, b, c}\n    var max_index int\n    var\
    \ max int\n    for i, v := range sides {\n        if v > max {\n            max\
    \ = v\n            max_index = i\n        }\n    }\n    return sides[max_index]\
    \ * sides[max_index] == (sides[(max_index + 1) % 3] * sides[(max_index + 1) %\
    \ 3] + sides[(max_index + 2) % 3] * sides[(max_index + 2) % 3])\n}\n", "    if\
    \ a * a + b * b == c * c {\n        return true\n    }\n    return false\n}\n",
  "    if (a < 1 || b < 1 || c < 1) {\n        return false\n    }\n    if (a * a\
    \ + b * b == c * c) {\n        return true\n    }\n    if (a * a + c * c == b\
    \ * b) {\n        return true\n    }\n    if (b * b + c * c == a * a) {\n    \
    \    return true\n    }\n    return false\n}\n", "    return a*a+b*b == c*c\n\
    }\n", "    // define a map of possible lengths of the third side, given the two\
    \ other\n    switch {\n    case a < 1 || b < 1 || c < 1:\n        // if any side\
    \ is less than 1, return false\n        return false\n    case a == 1 && b ==\
    \ 1:\n        // if both sides are 1, return true only if the third side is also\
    \ 1\n        return c == 1\n    default:\n        // calculate the longest side\n\
    \        max := a\n        if b > max {\n            max = b\n        }\n    \
    \    if c > max {\n            max = c\n        }\n        // check if the longest\
    \ side is the length of the hypotenuse\n        if max == c {\n            //\
    \ if yes, check if the sides a and b are of equal length\n            return a\
    \ == b\n        } else if max == b {\n            // if max is b, check if the\
    \ sides a and c are of equal length\n            return a == c\n        } else\
    \ {\n            // if max is a, check if the sides b and c are of equal length\n\
    \            return b == c\n        }\n    }\n}\n", "    if a*a + b*b == c*c {\n\
    \        return true\n    }\n    return false\n}\n", "    var a2, b2, c2 float64\n\
    \    a2 = float64(a * a)\n    b2 = float64(b * b)\n    c2 = float64(c * c)\n \
    \   if a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2 {\n        return true\n\
    \    }\n    return false\n}\n", "    // x**2 + y**2 = z**2\n    if a*a + b*b ==\
    \ c*c {\n        return true\n    }\n    return false\n}\n", "    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a)\n\
    }\n", "    if a < b {\n        a, b = b, a\n    }\n    if a < c {\n        a,\
    \ c = c, a\n    }\n    return (a * a) == (b * b + c * c)\n}\n", "    res := false\n\
    \    if a * a + b * b == c * c {\n        res = true\n    }\n    return res\n\
    }\n", "    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b *\
    \ b + c * c == a * a)\n}\n", "    if a*a + b*b == c*c {\n        return true\n\
    \    }\n    return false\n}\n", "    if a*a + b*b == c*c {\n        return true\n\
    \    }\n    return false\n}\n", "    // Code here!\n    return false\n}\n", " \
    \   return a*a + b*b == c*c\n}\n", "    // Start coding\n    return false\n}\n",
  "    var max int\n    if a > b {\n        max = a\n    } else {\n        max = b\n\
    \    }\n    if c > max {\n        max = c\n    }\n    return (a*a + b*b == max*max)\
    \ || (b*b + c*c == max*max) || (a*a + c*c == max*max)\n}\n", "    return a * a\
    \ + b * b == c * c\n}\n", "    // your code here\n    return false\n}\n", "  \
    \  if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    a_squared\
    \ := a * a\n    b_squared := b * b\n    c_squared := c * c\n\n    if a_squared\
    \ + b_squared == c_squared {\n        return true\n    }\n\n    if a_squared +\
    \ c_squared == b_squared {\n        return true\n    }\n\n    if b_squared + c_squared\
    \ == a_squared {\n        return true\n    }\n\n    return false\n}\n", "    return\
    \ false\n}\n", "    if a < 1 || b < 1 || c < 1 {\n        return false\n    }\n\
    \    // square of a\n    a2 := a * a\n    // square of b\n    b2 := b * b\n  \
    \  // square of c\n    c2 := c * c\n    // find the square of the largest side\n\
    \    if a2 > b2 && a2 > c2 {\n        return a2 == b2 + c2\n    } else if b2 >\
    \ a2 && b2 > c2 {\n        return b2 == a2 + c2\n    } else if c2 > a2 && c2 >\
    \ b2 {\n        return c2 == a2 + b2\n    }\n    return false\n}\n", "    if a\
    \ > b && a > c {\n        if a * a == b * b + c * c {\n            return true\n\
    \        }\n    } else if b > a && b > c {\n        if b * b == a * a + c * c\
    \ {\n            return true\n        }\n    } else if c > a && c > b {\n    \
    \    if c * c == a * a + b * b {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    arr := []int{a, b, c}\n    num := 0\n    index :=\
    \ 0\n    for i, v := range arr {\n        if v > num {\n            num = v\n\
    \            index = i\n        }\n    }\n    arr = append(arr[:index], arr[index+1:]...)\n\
    \    for _, v := range arr {\n        if v * v == num * num {\n            return\
    \ true\n        }\n    }\n    return false\n}\n", "    var t []int\n    t = append(t,\
    \ a)\n    t = append(t, b)\n    t = append(t, c)\n    for i := 0; i < 3; i++ {\n\
    \        for j := i + 1; j < 3; j++ {\n            if t[i] > t[j] {\n        \
    \        temp := t[i]\n                t[i] = t[j]\n                t[j] = temp\n\
    \            }\n        }\n    }\n    fmt.Println(t)\n    if t[0] * t[0] + t[1]\
    \ * t[1] == t[2] * t[2] {\n        return true\n    }\n    return false\n}\n",
  "    // please implement this function\n    return false\n}\n", "    return false\n\
    }\n", "    if a*a+b*b == c*c {\n        return true\n    }\n    return false\n\
    }\n", "    // TODO: implement me\n    return false\n}\n", "    var sides []int\
    \ = []int{a, b, c}\n    for i := 0; i < 3; i++ {\n        for j := i+1; j < 3;\
    \ j++ {\n            if sides[i] > sides[j] {\n                sides[i], sides[j]\
    \ = sides[j], sides[i]\n            }\n        }\n    }\n    if sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2] {\n        return true\n    }\n\
    \    return false\n}\n", "    // TODO: your code here\n    return false\n}\n",
  "    if a < b {\n        a, b = b, a\n    }\n    if a < c {\n        a, c = c, a\n\
    \    }\n    if a*a == b*b + c*c {\n        return true\n    }\n    return false\n\
    }\n", "    var x, y, z int\n    switch {\n    case a > b && a > c:\n        x\
    \ = a\n        y = b\n        z = c\n    case b > a && b > c:\n        x = b\n\
    \        y = a\n        z = c\n    case c > a && c > b:\n        x = c\n     \
    \   y = a\n        z = b\n    }\n    if x*x == y*y + z*z {\n        return true\n\
    \    }\n    return false\n}\n", "    if a == 0 || b == 0 || c == 0 {\n       \
    \ return false\n    }\n    // Pythagorean theorem: a^2 + b^2 = c^2\n    ab :=\
    \ a * a + b * b\n    ac := a * a + c * c\n    bc := b * b + c * c\n    return\
    \ ab == c * c || ac == b * b || bc == a * a\n}\n", "    return a*a + b*b == c*c\n\
    }\n", "    if ((a * a) + (b * b)) == (c * c) {\n        return true\n    }\n \
    \   return false\n}\n", "    // Implement me!\n    return false\n}\n", "    return\
    \ (a*a == b*b + c*c) || (b*b == a*a + c*c) || (c*c == a*a + b*b)\n}\n", "    max_side\
    \ := 0\n    if a > b {\n        if a > c {\n            max_side = a\n       \
    \ } else {\n            max_side = c\n        }\n    } else {\n        if b >\
    \ c {\n            max_side = b\n        } else {\n            max_side = c\n\
    \        }\n    }\n    if (a*a + b*b == max_side*max_side) || (a*a + c*c == max_side*max_side)\
    \ || (b*b + c*c == max_side*max_side) {\n        return true\n    }\n    return\
    \ false\n}\n", "    switch {\n    case (a*a)+(b*b) == (c*c):\n        return true\n\
    \    case (a*a)+(c*c) == (b*b):\n        return true\n    case (b*b)+(c*c) ==\
    \ (a*a):\n        return true\n    default:\n        return false\n    }\n}\n",
  "\tif a <= 0 || b <= 0 || c <= 0 {\n\t\treturn false\n\t}\n\t\n\tif a*a + b*b ==\
    \ c*c {\n\t\treturn true\n\t} else if a*a + c*c == b*b {\n\t\treturn true\n\t\
    } else if b*b + c*c == a*a {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t\
    }\n}\n", "    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n\
    \    // The longest side is at the 3rd index\n    sides := [3]int{a, b, c}\n \
    \   sort(sides[:])\n\n    // Square the 3 sides and we will check for the pythagorean\
    \ theorem\n    a, b, c = sides[0] * sides[0], sides[1] * sides[1], sides[2] *\
    \ sides[2]\n\n    // Do the check\n    return a + b == c\n}\n", "    var hypotenuse,\
    \ base, height int\n    if a > b && a > c {\n        hypotenuse = a\n        base\
    \ = b\n        height = c\n    } else if b > a && b > c {\n        hypotenuse\
    \ = b\n        base = a\n        height = c\n    } else {\n        hypotenuse\
    \ = c\n        base = a\n        height = b\n    }\n    return (hypotenuse * hypotenuse)\
    \ == (base * base) + (height * height)\n}\n", "    // +++your code here+++\n \
    \   return false\n}\n", "    switch {\n    case a < 0 || b < 0 || c < 0:\n   \
    \     return false\n    case a > b && a > c:\n        return b*b + c*c == a*a\n\
    \    case b > a && b > c:\n        return a*a + c*c == b*b\n    case c > a &&\
    \ c > b:\n        return a*a + b*b == c*c\n    default:\n        return false\n\
    \    }\n}\n", "\tif a == 0 || b == 0 || c == 0 {\n\t\treturn false\n\t}\n\t\n\t\
    a_pow_2 := a * a\n\tb_pow_2 := b * b\n\tc_pow_2 := c * c\n\t\n\tif a_pow_2 + b_pow_2\
    \ == c_pow_2 {\n\t\treturn true\n\t}\n\t\n\tif a_pow_2 + c_pow_2 == b_pow_2 {\n\
    \t\treturn true\n\t}\n\t\n\tif b_pow_2 + c_pow_2 == a_pow_2 {\n\t\treturn true\n\
    \t}\n\t\n\treturn false\n}\n", "    return false\n}\n", "    l := [3]int{a, b,\
    \ c}\n    max_i := 0\n    for i := 1; i < 3; i++ {\n        if l[i] > l[max_i]\
    \ {\n            max_i = i\n        }\n    }\n    for i := 0; i < 3; i++ {\n \
    \       if i != max_i {\n            l[i] = l[i] * l[i]\n        }\n    }\n  \
    \  return l[0] + l[1] == l[2]\n}\n", "    if a > b && a > c {\n        return\
    \ a * a == b * b + c * c\n    }\n    if b > a && b > c {\n        return b * b\
    \ == a * a + c * c\n    }\n    if c > a && c > b {\n        return c * c == a\
    \ * a + b * b\n    }\n    return false\n}\n", "    return a * a + b * b == c *\
    \ c\n}\n", "    // Your code goes here\n    if a < b {\n        a, b = b, a\n\
    \    }\n    if a < c {\n        a, c = c, a\n    }\n    if (a*a == b*b + c*c)\
    \ || (b*b == a*a + c*c) || (c*c == a*a + b*b) {\n        return true\n    }\n\
    \    return false\n}\n", "    var ret bool\n    if (a > b) {\n        if (a >\
    \ c) {\n            ret = (a * a == b * b + c * c)\n        } else {\n       \
    \     ret = (c * c == a * a + b * b)\n        }\n    } else {\n        if (b >\
    \ c) {\n            ret = (b * b == a * a + c * c)\n        } else {\n       \
    \     ret = (c * c == a * a + b * b)\n        }\n    }\n    return ret\n}\n",
  "    return a * a + b * b == c * c\n}\n", "    // Place your code here\n    return\
    \ false\n}\n", "    if a*a + b*b == c*c {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n", "    // Given lengths of three sides of a\
    \ triangle, calculate its area\n    // Use Heron's formula:\n    //   https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    p := (a + b + c) / 2\n    s := p * (p - a) * (p - b) * (p - c)\n    area\
    \ := s\n    if area < 0 {\n        area = -area\n    }\n    return area == (a\
    \ * a + b * b + c * c)\n}\n", "    var max int\n    var sum int\n    // find maximum\n\
    \    if a > b {\n        if a > c {\n            max = a\n        } else {\n \
    \           max = c\n        }\n    } else {\n        if b > c {\n           \
    \ max = b\n        } else {\n            max = c\n        }\n    }\n    // add\
    \ all sides except max\n    sum = a + b + c - max\n    // check Pythagorean theorem\n\
    \    if max * max == sum * sum {\n        return true\n    }\n    return false\n\
    }\n", "    if !is_triangle(a, b, c) {\n        return false\n    }\n    if a >\
    \ b && a > c {\n        return a * a == b * b + c * c\n    } else if b > a &&\
    \ b > c {\n        return b * b == a * a + c * c\n    } else {\n        return\
    \ c * c == a * a + b * b\n    }\n}\n", "    var sideA, sideB, sideC int\n\n  \
    \  if a > b {\n        sideA = a\n        sideB = b\n    } else {\n        sideA\
    \ = b\n        sideB = a\n    }\n\n    if sideA > c {\n        sideC = sideA\n\
    \        sideA = c\n    } else {\n        sideC = c\n    }\n\n    if sideA*sideA\
    \ + sideB*sideB == sideC*sideC {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n", "    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n", "    if a < 1 || b < 1 || c < 1 {\n        return false\n\
    \    }\n    if a >= b {\n        if a >= c {\n            return a * a == b *\
    \ b + c * c\n        } else {\n            return c * c == a * a + b * b\n   \
    \     }\n    } else {\n        if b >= c {\n            return b * b == a * a\
    \ + c * c\n        } else {\n            return c * c == a * a + b * b\n     \
    \   }\n    }\n}\n", "    if a*a + b*b == c*c {\n        return true\n    }\n \
    \   return false\n}\n", "    // TODO: Finish this function\n    return false\n\
    }\n", "    return a*a + b*b == c*c\n}\n", "    // Fill in the code here\n    return\
    \ false\n}\n", "\tif c > a && c > b {\n\t\tif c*c == a*a + b*b {\n\t\t\treturn\
    \ true\n\t\t}\n\t} else if b > a && b > c {\n\t\tif b*b == a*a + c*c {\n\t\t\t\
    return true\n\t\t}\n\t} else if a > b && a > c {\n\t\tif a*a == b*b + c*c {\n\t\
    \t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", "    // max - min = mid\n \
    \   // min + mid = max\n    // max * max = min * min + mid * mid\n    // max >\
    \ mid > min\n    // max - mid - min = 0\n    max := a\n    min := b\n    mid :=\
    \ c\n    if max < b {\n        max = b\n        min = a\n        mid = c\n   \
    \ } else if max < c {\n        max = c\n        min = a\n        mid = b\n   \
    \ }\n    return max > mid && max - mid - min == 0 && min + mid == max &&\n   \
    \     max * max == min * min + mid * mid\n}\n", "    var pow2 = func(x int) int\
    \ { return x * x }\n    var l int\n    l = pow2(a) + pow2(b)\n    if l == pow2(c)\
    \ {\n        return true\n    }\n    l = pow2(a) + pow2(c)\n    if l == pow2(b)\
    \ {\n        return true\n    }\n    l = pow2(b) + pow2(c)\n    if l == pow2(a)\
    \ {\n        return true\n    }\n    return false\n}\n", "    var aa, bb, cc float64\
    \ = float64(a), float64(b), float64(c)\n    return aa*aa + bb*bb == cc*cc || aa*aa\
    \ + cc*cc == bb*bb || bb*bb + cc*cc == aa*aa\n}\n", "    if a * a + b * b == c\
    \ * c {\n        return true\n    }\n    return false\n}\n", "    // TODO: Implement\
    \ the function here\n    return false\n}\n", "    // write your code here\n  \
    \  return false\n}\n", "    // Implement me!\n    return false\n}\n", "    return\
    \ false\n}\n", "    // if a < b {\n    //     a, b = b, a\n    // }\n    // if\
    \ a < c {\n    //     a, c = c, a\n    // }\n    // if b > c {\n    //     b,\
    \ c = c, b\n    // }\n    // return a * a == b * b + c * c\n    if a < b {\n \
    \       a, b = b, a\n    }\n    if a < c {\n        a, c = c, a\n    }\n    if\
    \ b > c {\n        b, c = c, b\n    }\n    return a * a == b * b + c * c\n}\n",
  "    // Your code goes here\n    return false\n}\n", "    if (a <= 0 || b <= 0 ||\
    \ c <= 0) {\n        return false\n    }\n\n    if (a + b <= c || a + c <= b ||\
    \ b + c <= a) {\n        return false\n    }\n\n    if (a > b && a > c) {\n  \
    \      return a * a == b * b + c * c\n    } else if (b > a && b > c) {\n     \
    \   return b * b == a * a + c * c\n    } else {\n        return c * c == a * a\
    \ + b * b\n    }\n}\n", "    return (a * a + b * b == c * c) ||\n           (a\
    \ * a + c * c == b * b) ||\n           (b * b + c * c == a * a)\n}\n", "    max_side\
    \ := a\n    if b > max_side {\n        max_side = b\n    } else if c > max_side\
    \ {\n        max_side = c\n    }\n    return a * a + b * b == max_side * max_side\n\
    }\n", "    return a*a + b*b == c*c\n}\n", "    // Your code here\n    return true\n\
    }\n", "    // TODO: Write your code here\n    return false\n}\n", "    if a*a+b*b\
    \ == c*c {\n        return true\n    }\n    return false\n}\n", "    return false\n\
    }\n", "    if a > 0 && b > 0 && c > 0 {\n        // pythagorean theorem\n    \
    \    return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c + a\
    \ * a == b * b)\n    }\n    return false\n}\n", "    return false\n}\n", "   \
    \ if a < 1 || b < 1 || c < 1 {\n        return false\n    }\n    var sides = []int{a,\
    \ b, c}\n    for i := 0; i < 3; i++ {\n        for j := i + 1; j < 3; j++ {\n\
    \            if sides[i] * sides[i] + sides[j] * sides[j] == sides[3 - i - j]\
    \ * sides[3 - i - j] {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    // Fill in the code here\n    return false\n\
    }\n", "    // TODO: \n    if a * a + b * b == c * c || a * a + c * c == b * b\
    \ || b * b + c * c == a * a {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n", "    a2 := a * a\n    b2 := b * b\n    c2 := c * c\n   \
    \ if a2 + b2 == c2 {\n        return true\n    }\n    if a2 + c2 == b2 {\n   \
    \     return true\n    }\n    if b2 + c2 == a2 {\n        return true\n    }\n\
    \    return false\n}\n", "    if (a > 0 && b > 0 && c > 0) {\n        if (a *\
    \ a + b * b == c * c) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    max_num := a\n    min_num := b\n    if b > a {\n        max_num\
    \ = b\n        min_num = a\n    }\n    if c > max_num {\n        min_num = max_num\n\
    \        max_num = c\n    } else if c < min_num {\n        min_num = c\n    }\n\
    \    if max_num * max_num == min_num * min_num + c * c {\n        return true\n\
    \    }\n    return false\n}\n", "    // if a * a + b * b == c * c {\n    //  \
    \   return true\n    // } else {\n    //     return false\n    // }\n    // return\
    \ a * a + b * b == c * c\n    return a * a + b * b == c * c\n}\n", "    // YOUR\
    \ CODE HERE\n    return false\n}\n", "    if a*a + b*b == c*c {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n", "    if a > b && a >\
    \ c {\n        if a*a == b*b + c*c {\n            return true\n        }\n   \
    \ }\n    if b > a && b > c {\n        if b*b == a*a + c*c {\n            return\
    \ true\n        }\n    }\n    if c > a && c > b {\n        if c*c == a*a + b*b\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    //\
    \ your code here\n}\n", "\tif a*a+b*b == c*c {\n\t\treturn true\n\t}\n\treturn\
    \ false\n}\n", "    return a*a + b*b == c*c\n}\n", "    if a + b <= c || a + c\
    \ <= b || b + c <= a {\n        return false\n    }\n    if a*a == b*b + c*c ||\
    \ b*b == a*a + c*c || c*c == a*a + b*b {\n        return true\n    }\n    return\
    \ false\n}\n", "    // your code here\n    return true\n}\n", "    // Fill this\
    \ in.\n    for _, v := range [...]int{a, b, c} {\n        if v <= 0 {\n      \
    \      return false\n        }\n    }\n    if (a + b > c) && (a + c > b) && (b\
    \ + c > a) {\n        for _, v := range [...]int{a, b, c} {\n            if (v\
    \ * v) == ((a * a) + (b * b) + (c * c) - (v * v)) {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n", "    if a + b > c &&\
    \ a + c > b && b + c > a {\n        return a * a + b * b == c * c || a * a + c\
    \ * c == b * b || b * b + c * c == a * a\n    }\n    return false\n}\n", "   \
    \ // Write your code here\n    return false\n}\n", "    for _, v := range []int{a,\
    \ b, c} {\n        if v <= 0 {\n            return false\n        }\n    }\n \
    \   if a > b && a > c {\n        return a * a == b * b + c * c\n    } else if\
    \ b > a && b > c {\n        return b * b == a * a + c * c\n    } else {\n    \
    \    return c * c == a * a + b * b\n    }\n}\n", "    // TODO: Implement me\n\
    \    return false\n}\n", "    // TODO: implement it\n    return false\n}\n", " \
    \   // TODO: Implement me\n    // 3 conditions:\n    // c*c = a*a + b*b\n    //\
    \ a*a = b*b + c*c\n    // b*b = a*a + c*c\n    return a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a\n}\n", "    // Your code goes here\n    return\
    \ false\n}\n", "    return a*a + b*b == c*c\n}\n", "    if a < b {\n        a,\
    \ b = b, a\n    }\n    if a < c {\n        a, c = c, a\n    }\n    if a*a == b*b\
    \ + c*c {\n        return true\n    }\n    return false\n}\n", "    // YOUR CODE\
    \ HERE\n    return false\n}\n", "\tvar side = []int{a, b, c}\n\tvar max = 0\n\n\
    \t// find the longest side\n\tfor i, _ := range side {\n\t\tif i == 0 {\n\t\t\t\
    max = side[i]\n\t\t} else if side[i] > max {\n\t\t\tmax = side[i]\n\t\t}\n\t}\n\
    \n\t// check the longest side and one shorter side\n\tfor i, v := range side {\n\
    \t\tif v == max {\n\t\t\tif side[(i+1)%3] * side[(i+1)%3] + side[(i+2)%3] * side[(i+2)%3]\
    \ == max * max {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n\
    }\n", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n\
    }\n", "    // Your code here\n    return false\n}\n", "    if a > b && a > c {\n\
    \        return a * a == b * b + c * c\n    }\n    if b > a && b > c {\n     \
    \   return b * b == a * a + c * c\n    }\n    if c > a && c > b {\n        return\
    \ c * c == a * a + b * b\n    }\n    return false\n}\n", "    var result bool\n\
    \    if a > b && a > c {\n        result = (a * a) == (b * b + c * c)\n    } else\
    \ if b > a && b > c {\n        result = (b * b) == (a * a + c * c)\n    } else\
    \ {\n        result = (c * c) == (a * a + b * b)\n    }\n    return result\n}\n",
  "    if a*a + b*b == c*c {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n", "    if a * a + b * b == c * c {\n        return true\n    }\n \
    \   return false\n}\n", "    // return a * a + b * b == c * c\n    switch {\n\
    \    case a * a + b * b == c * c:\n        return true\n    case a * a + c * c\
    \ == b * b:\n        return true\n    case b * b + c * c == a * a:\n        return\
    \ true\n    default:\n        return false\n    }\n}\n", "    ret := false\n \
    \   if a > 0 && b > 0 && c > 0 {\n        if a * a + b * b == c * c {\n      \
    \      ret = true\n        }\n    }\n    return ret\n}\n", "    // Your code here\n\
    \    return false\n}\n", "    if a > b && a > c {\n        return a * a == b *\
    \ b + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c\
    \ * c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n", "   \
    \ return (a + b > c) && (a + c > b) && (b + c > a) && (a * a + b * b == c * c)\n\
    }\n", "    return a*a + b*b == c*c\n}\n", "    // Your code here\n    return false\n\
    }\n", "    // Your code here\n    return true\n}\n", "    if a*a + b*b == c*c\
    \ {\n        return true\n    }\n    return false\n}\n", "    // temp := max(a,\
    \ b, c)\n    // s := a + b + c - temp\n    // return (temp*temp == s*s)\n    //\
    \ return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)\n}\n", "    //\
    \ Your code goes here\n    if c > a && c > b {\n        return a*a + b*b == c*c\n\
    \    } else if b > a && b > c {\n        return a*a + c*c == b*b\n    } else if\
    \ a > b && a > c {\n        return b*b + c*c == a*a\n    }\n    return false\n\
    }\n", "    if a > b && a > c {\n        return a * a == b * b + c * c\n    }\n\
    \    if b > a && b > c {\n        return b * b == a * a + c * c\n    }\n    if\
    \ c > a && c > b {\n        return c * c == a * a + b * b\n    }\n    return false\n\
    }\n", "    if a*a + b*b == c*c {\n        return true\n    }\n    return false\n\
    }\n", "    if (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a) {\n        return true\n    }\n    return false\n}\n", "   \
    \ if (a+b < c) || (a+c < b) || (b+c < a) {\n        return false\n    }\n    var\
    \ r bool\n    if a < b {\n        if a < c {\n            r = a*a + b*b == c*c\n\
    \        } else {\n            r = c*c + b*b == a*a\n        }\n    } else {\n\
    \        if b < c {\n            r = b*b + a*a == c*c\n        } else {\n    \
    \        r = c*c + a*a == b*b\n        }\n    }\n    return r\n}\n", "    if (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n        return\
    \ true\n    }\n    return false\n}\n", "    // check input\n    if a <= 0 || b\
    \ <= 0 || c <= 0 {\n        return false\n    }\n    if a + b < c || a + c < b\
    \ || b + c < a {\n        return false\n    }\n    // a < b < c\n    if a < b\
    \ {\n        a, b = b, a\n    }\n    if b < c {\n        b, c = c, b\n    }\n\
    \    if a < b {\n        a, b = b, a\n    }\n    // a^2 = b^2 + c^2\n    return\
    \ (a * a == b * b + c * c)\n}\n", "    sides := []int{a, b, c}\n    max_side :=\
    \ 0\n    for _, side := range sides {\n        if side > max_side {\n        \
    \    max_side = side\n        }\n    }\n    sum := 0\n    for _, side := range\
    \ sides {\n        if side != max_side {\n            sum += side * side\n   \
    \     }\n    }\n    return sum == max_side * max_side\n}\n", "    return a * a\
    \ + b * b == c * c\n}\n", "    l := []int{a, b, c}\n    large := 0\n    count\
    \ := 0\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[large] {\n    \
    \        large = i\n        }\n    }\n    for i := 0; i < len(l); i++ {\n    \
    \    if i != large {\n            if l[large] == l[i] + l[large] {\n         \
    \       count++\n            }\n        }\n    }\n    if count == 1 {\n      \
    \  return true\n    }\n    return false\n}\n", "    return false\n}\n", "    if\
    \ a*a + b*b == c*c {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n", "    return false\n}\n", "    if a > 0 && b > 0 && c > 0 {\n   \
    \     if a * a + b * b == c * c {\n            return true\n        } else if\
    \ a * a + c * c == b * b {\n            return true\n        } else if b * b +\
    \ c * c == a * a {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    // TODO: Write your code here\n    return false\n}\n", "\t// Write\
    \ your code here\n\treturn true\n}\n", "    return false\n}\n", "    // Provide\
    \ your implementation here\n    return true\n}\n", "    // Start coding here\n\
    \    if a > b && a > c {\n        return a*a == b*b + c*c\n    } else if b > a\
    \ && b > c {\n        return b*b == a*a + c*c\n    } else {\n        return c*c\
    \ == a*a + b*b\n    }\n}\n", "    return a*a + b*b == c*c\n}\n", "    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a > b && a > c\
    \ {\n        return a * a == b * b + c * c\n    } else if b > a && b > c {\n \
    \       return b * b == a * a + c * c\n    } else if c > a && c > b {\n      \
    \  return c * c == a * a + b * b\n    }\n    return false\n}\n", "    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return false\n    }\n    if a*a == b*b + c*c\
    \ || b*b == a*a + c*c || c*c == a*a + b*b {\n        return true\n    }\n    return\
    \ false\n}\n", "    // your code here\n    return false\n}\n", "    if a == 0\
    \ || b == 0 || c == 0 {\n        return false\n    }\n    if (a * a) + (b * b)\
    \ == (c * c) {\n        return true\n    }\n    return false\n}\n", "    hypotenuse\
    \ := 0\n    length1 := 0\n    length2 := 0\n    // find the hypotenuse\n    if\
    \ a > b && a > c {\n        hypotenuse = a\n        length1 = b\n        length2\
    \ = c\n    } else if b > a && b > c {\n        hypotenuse = b\n        length1\
    \ = a\n        length2 = c\n    } else {\n        hypotenuse = c\n        length1\
    \ = a\n        length2 = b\n    }\n    if (hypotenuse * hypotenuse) == (length1\
    \ * length1) + (length2 * length2) {\n        return true\n    }\n    return false\n\
    }\n", "    if a > 0 && b > 0 && c > 0 {\n        if (a * a) + (b * b) == (c *\
    \ c) {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // a =\
    \ longest side\n    // b, c = shorter sides\n    if a > b && a > c {\n       \
    \ if a*a == b*b + c*c {\n            return true\n        }\n    } else if b >\
    \ a && b > c {\n        if b*b == a*a + c*c {\n            return true\n     \
    \   }\n    } else if c > a && c > b {\n        if c*c == a*a + b*b {\n       \
    \     return true\n        }\n    }\n\n    return false\n}\n", "    // Write your\
    \ code here\n    return false\n}\n", "    // check side\n    if a == 0 || b ==\
    \ 0 || c == 0 {\n        return false\n    }\n    // check if a side longer than\
    \ other two side\n    if a > b + c || b > a + c || c > a + b {\n        return\
    \ false\n    }\n    // check if the sum of the squares of two shortest sides equals\
    \ the\n    // square of the longest side.\n    if a * a + b * b == c * c || a\
    \ * a + c * c == b * b || b * b + c * c == a * a {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n", "    //if (a > b) {\n    //    tmp\
    \ := a\n    //    a = b\n    //    b = tmp\n    //}\n    //if (b > c) {\n    //\
    \    tmp := b\n    //    b = c\n    //    c = tmp\n    //}\n    //if (a > b) {\n\
    \    //    tmp := a\n    //    a = b\n    //    b = tmp\n    //}\n    if (a *\
    \ a + b * b == c * c) {\n        return true\n    }\n    return false\n}\n", " \
    \   var s = []int{a, b, c}\n    // sort\n    for i := 0; i < len(s); i++ {\n \
    \       for j := 0; j < len(s)-1; j++ {\n            if s[j] > s[j+1] {\n    \
    \            var t = s[j]\n                s[j] = s[j+1]\n                s[j+1]\
    \ = t\n            }\n        }\n    }\n    if s[0]*s[0] + s[1]*s[1] == s[2]*s[2]\
    \ {\n        return true\n    }\n    return false\n}\n", "    if a == 0 || b ==\
    \ 0 || c == 0 {\n        return false\n    }\n\n    if a * a + b * b == c * c\
    \ {\n        return true\n    }\n\n    if a * a + c * c == b * b {\n        return\
    \ true\n    }\n\n    if b * b + c * c == a * a {\n        return true\n    }\n\
    \n    return false\n}\n", "    if a * a + b * b == c * c {\n        return true\n\
    \    }\n    return false\n}\n", "    if a > b && a > c {\n        return a * a\
    \ == b * b + c * c\n    }\n    if b > a && b > c {\n        return b * b == a\
    \ * a + c * c\n    }\n    if c > a && c > b {\n        return c * c == a * a +\
    \ b * b\n    }\n    return false\n}\n", "    // Write your code here\n    return\
    \ false\n}\n", "    return false\n}\n", "    // your code here\n    if a <= 0\
    \ || b <= 0 || c <= 0 {\n        return false\n    }\n    if a + b > c && a +\
    \ c > b && b + c > a {\n        if a * a + b * b == c * c || a * a + c * c ==\
    \ b * b || b * b + c * c == a * a {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if a < 1 || b < 1 || c < 1 {\n        return false\n\
    \    }\n    sides := []int{a, b, c}\n    sorted_sides := selection_sort(sides)\n\
    \    if sorted_sides[0] * sorted_sides[0] + sorted_sides[1] * sorted_sides[1]\
    \ == sorted_sides[2] * sorted_sides[2] {\n        return true\n    }\n    return\
    \ false\n}\n", "    // TODO: implement\n    if a > b && a > c {\n        return\
    \ a * a == b * b + c * c\n    } else if b > a && b > c {\n        return b * b\
    \ == a * a + c * c\n    } else {\n        return c * c == a * a + b * b\n    }\n\
    }\n", "    var longest, rest int\n    var ok bool\n\n    // find the longest side\n\
    \    if a > b {\n        longest = a\n        rest = b\n    } else {\n       \
    \ longest = b\n        rest = a\n    }\n    if c > longest {\n        ok = c*c\
    \ == longest*longest + rest*rest\n    } else {\n        ok = longest*longest ==\
    \ c*c + rest*rest\n    }\n    return ok\n}\n", "    slice := []int{a, b, c}\n\
    \    sort(slice)\n    if slice[0]*slice[0] + slice[1]*slice[1] == slice[2]*slice[2]\
    \ {\n        return true\n    }\n    return false\n}\n", "    x := a\n    y :=\
    \ b\n    z := c\n    if x > y {\n        x, y = y, x\n    }\n    if x > z {\n\
    \        x, z = z, x\n    }\n    if y > z {\n        y, z = z, y\n    }\n    return\
    \ x*x + y*y == z*z\n}\n", "    if a * a + b * b == c * c {\n        return true\n\
    \    } else if a * a + c * c == b * b {\n        return true\n    } else if b\
    \ * b + c * c == a * a {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n", "    // Write your code here\n    return true\n}\n", "    if (a\
    \ > 0 && b > 0 && c > 0) {\n        if (a + b > c && a + c > b && b + c > a) {\n\
    \            if ((a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a))\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    if a < b {\n        a, b = b, a\n    }\n    if a < c {\n \
    \       a, c = c, a\n    }\n    return a*a == b*b + c*c\n}\n", "    return false\n\
    }\n", "    return a*a+b*b == c*c\n}\n", "    // Your code here\n    return false\n\
    }\n", "    return a*a + b*b == c*c\n}\n", "    return true\n}\n", "    if (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n", "    if a <= 0 || b <=\
    \ 0 || c <= 0 {\n        return false\n    }\n    var l = []int{a, b, c}\n   \
    \ var max = l[0]\n    var max_index = 0\n    for i, v := range l {\n        if\
    \ v > max {\n            max = v\n            max_index = i\n        }\n    }\n\
    \    var tmp = l[max_index]\n    l[max_index] = l[0]\n    l[0] = tmp\n    return\
    \ l[0] * l[0] == l[1] * l[1] + l[2] * l[2]\n}\n", "    // TODO\n    return false\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
