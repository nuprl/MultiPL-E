name: HumanEval_140_fix_spaces
language: go_test.go
prompt: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string text, replace all spaces in it with underscores, \n// and if a\
  \ string has more than 2 consecutive spaces, \n// then replace all consecutive spaces\
  \ with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
  \ string {\n"
tests: "func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n   \
  \  { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n  \
  \   { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
  \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n    \
  \ { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    text_array := []rune(text)\n    result := []rune{}\n    is_previous_space\
    \ := false\n    count_consecutive_spaces := 0\n    for _, s := range text_array\
    \ {\n        if s == ' ' {\n            if is_previous_space {\n             \
    \   count_consecutive_spaces += 1\n            } else {\n                is_previous_space\
    \ = true\n                count_consecutive_spaces = 1\n            }\n      \
    \  } else {\n            if is_previous_space {\n                if count_consecutive_spaces\
    \ > 2 {\n                    result = append(result, '-')\n                } else\
    \ {\n                    result = append(result, '_')\n                }\n   \
    \             is_previous_space = false\n                count_consecutive_spaces\
    \ = 0\n            }\n            result = append(result, s)\n        }\n    }\n\
    \    if is_previous_space {\n        if count_consecutive_spaces > 2 {\n     \
    \       result = append(result, '-')\n        } else {\n            result = append(result,\
    \ '_')\n        }\n    }\n    return string(result)\n}\n", "    s := \"\"\n  \
    \  spaceCount := 0\n    for _, c := range text {\n        switch {\n        case\
    \ c == ' ':\n            spaceCount++\n            if spaceCount == 2 {\n    \
    \            s += \"-\"\n            }\n        default:\n            spaceCount\
    \ = 0\n            s += string(c)\n        }\n    }\n    return s\n}\n", "   \
    \ prev := ' '\n    result := \"\"\n    spaces := 0\n    for _, ch := range text\
    \ {\n        if ch == ' ' {\n            spaces++\n        } else {\n        \
    \    if spaces > 2 {\n                result += \"-\"\n            } else if spaces\
    \ > 0 {\n                result += \"_\"\n            }\n            spaces =\
    \ 0\n            result += string(ch)\n        }\n    }\n    return result\n}\n",
  "    return \"\"\n}\n", "    var result string\n    var spaces int\n    for _, c\
    \ := range text {\n        if c == ' ' {\n            spaces += 1\n          \
    \  if spaces == 1 {\n                result += \"_\"\n            } else if spaces\
    \ == 2 {\n                result += \"_\"\n            } else {\n            \
    \    result += \"-\"\n            }\n        } else {\n            result += string(c)\n\
    \            spaces = 0\n        }\n    }\n    return result\n}\n", "    // your\
    \ code here\n    // ...\n    return \"your implementation here\"\n}\n", "    var\
    \ last_space int = -1\n    var ret []rune = make([]rune, len(text))\n    for i,\
    \ ch := range text {\n        if ch == ' ' {\n            if last_space == -1\
    \ {\n                ret[i] = '_'\n            } else if i - last_space == 1 {\n\
    \                ret[i] = '-'\n            } else {\n                ret[i] =\
    \ '_'\n            }\n            last_space = i\n        } else {\n         \
    \   ret[i] = ch\n        }\n    }\n    return string(ret)\n}\n", "    var result\
    \ string\n    var consecutiveSpaces int = 0\n    for _, char := range text {\n\
    \        if char == ' ' {\n            consecutiveSpaces++\n            if consecutiveSpaces\
    \ > 2 {\n                result += \"-\"\n            } else {\n             \
    \   result += \"_\"\n            }\n        } else {\n            consecutiveSpaces\
    \ = 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n", "    res := \"\"\n    for _, v := range text {\n        if res == \"\" {\n\
    \            if v == ' ' {\n                continue\n            } else {\n \
    \               res += string(v)\n            }\n        } else {\n          \
    \  if v == ' ' {\n                if res[len(res)-1] == '_' {\n              \
    \      res += \"-\"\n                } else {\n                    res += \"_\"\
    \n                }\n            } else {\n                res += string(v)\n\
    \            }\n        }\n    }\n    return res\n}\n", "    res := \"\"\n   \
    \ for i, char := range text {\n        if char == ' ' {\n            res += \"\
    _\"\n        } else {\n            res += string(char)\n        }\n        if\
    \ (i > 0 && i < len(text) - 1) && text[i+1] == ' ' && res[i] == '_' && res[i-1]\
    \ == '_' {\n            fmt.Println(i, text[i+1], res[i], res[i-1])\n        \
    \    res = res[:i] + \"-\" + res[i+1:]\n        }\n    }\n    return res\n}\n",
  "    // TODO\n    return \"\"\n}\n", "    if len(text) == 0 {\n        return text\n\
    \    }\n    res := []byte(text)\n    for i, c := range res {\n        if c ==\
    \ ' ' {\n            if i == 0 {\n                res[i] = '_'\n            }\
    \ else if res[i-1] == ' ' {\n                res[i] = '-'\n            } else\
    \ {\n                res[i] = '_'\n            }\n        }\n    }\n    return\
    \ string(res)\n}\n", "    text = \" \" + text // insert a space at the beginning\n\
    \    l := len(text)\n    s := \"\"\n    i := 0\n    j := 0\n    n := 0\n    state\
    \ := 'A'\n    for ; i < l; i++ {\n        switch text[i] {\n        case ' ':\n\
    \            if state == 'A' {\n                state = 'B'\n            } else\
    \ if state == 'B' {\n                state = 'C'\n            } else if state\
    \ == 'C' {\n                state = 'D'\n            }\n        default:\n   \
    \         switch state {\n            case 'A':\n                s += string(text[i])\n\
    \            case 'B':\n                s += \"_\" + string(text[i])\n       \
    \     case 'C':\n                if j == 0 {\n                    s += string(text[i])\n\
    \                } else {\n                    s += \"_\" + string(text[i])\n\
    \                }\n            case 'D':\n                n++\n             \
    \   if n == 2 {\n                    if j == 0 {\n                        s +=\
    \ string(text[i])\n                    } else {\n                        s +=\
    \ \"-_\" + string(text[i])\n                    }\n                }\n       \
    \     }\n            j++\n            state = 'A'\n        }\n    }\n    return\
    \ s\n}\n", "    // write code here\n    return \"\"\n}\n", "    chars := []rune(text)\n\
    \    for i, char := range chars {\n        if char == ' ' {\n            // \u0441\
    \u0447\u0438\u0442\u0430\u0435\u043C \u043A\u043E\u043B\u0438\u0447\u0435\u0441\
    \u0442\u0432\u043E \u043F\u0440\u043E\u0431\u0435\u043B\u043E\u0432 \u043F\u043E\
    \u0434\u0440\u044F\u0434\n            count := 0\n            for j := i; j <\
    \ len(chars); j++ {\n                if chars[j] == ' ' {\n                  \
    \  count++\n                } else {\n                    break\n            \
    \    }\n            }\n            if count > 2 {\n                chars[i] =\
    \ '-'\n                for j := i + 1; j < len(chars); j++ {\n               \
    \     if chars[j] == ' ' {\n                        chars[j] = '-'\n         \
    \           } else {\n                        break\n                    }\n \
    \               }\n            } else {\n                chars[i] = '_'\n    \
    \        }\n        }\n    }\n    return string(chars)\n}\n", "    var result\
    \ string\n    var spaces int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            spaces++\n            if spaces == 1 {\n             \
    \   result += \"_\"\n            } else if spaces > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            result += string(char)\n\
    \            spaces = 0\n        }\n    }\n    return result\n}\n", "    var result\
    \ []rune\n    var word []rune\n    var prev rune\n    for _, curr := range text\
    \ {\n        if curr == ' ' {\n            if prev == ' ' {\n                if\
    \ len(word) > 0 {\n                    result = append(result, word...)\n    \
    \                word = []rune{}\n                }\n                result =\
    \ append(result, '-')\n            } else {\n                if len(word) > 0\
    \ {\n                    result = append(result, word...)\n                  \
    \  word = []rune{}\n                }\n                result = append(result,\
    \ '_')\n            }\n        } else {\n            word = append(word, curr)\n\
    \        }\n        prev = curr\n    }\n    if len(word) > 0 {\n        result\
    \ = append(result, word...)\n    }\n    return string(result)\n}\n", "    length\
    \ := len(text)\n    var data []byte\n    data = make([]byte, length)\n    p :=\
    \ 0\n    space_count := 0\n    for i:=0; i<length; i++ {\n        if text[i] !=\
    \ ' ' {\n            if space_count > 2 {\n                data[p] = '-'\n   \
    \             p++\n            } else if space_count == 1 {\n                data[p]\
    \ = '_'\n                p++\n            }\n            data[p] = text[i]\n \
    \           p++\n            space_count = 0\n        } else {\n            space_count++\n\
    \        }\n    }\n    if space_count > 2 {\n        data[p] = '-'\n        p++\n\
    \    } else if space_count == 1 {\n        data[p] = '_'\n        p++\n    }\n\
    \    return string(data[:p])\n}\n", "    return \"\"\n}\n", "    s := []rune(text)\n\
    \    for i, _ := range s {\n        if s[i] == ' ' {\n            n := 1\n   \
    \         for j := i + 1; j < len(s); j++ {\n                if s[j] == ' ' {\n\
    \                    n++\n                } else {\n                    break\n\
    \                }\n            }\n            if n > 2 {\n                for\
    \ k := i; k < i + n; k++ {\n                    s[k] = '-'\n                }\n\
    \            } else {\n                s[i] = '_'\n            }\n        }\n\
    \    }\n    return string(s)\n}\n\ntype Case ", "    // For example:\n    // text\
    \ = \"   Example   \"\n    //\n    // text.TrimSpace() = \"Example\"\n    //\n\
    \    // text.Replace(\"  \", \"-\") = \"Example\"\n    //\n    // text.Replace(\"\
    \ \", \"_\") = \"Example\"\n    return text.TrimSpace().Replace(\"  \", \"-\"\
    ).Replace(\" \", \"_\")\n}\n", "    // TODO\n    return text\n}\n", "    var res\
    \ string\n    for i, c := range text {\n        if c == ' ' {\n            if\
    \ i > 0 && text[i-1] == ' ' {\n                res += \"-\"\n            } else\
    \ {\n                res += \"_\"\n            }\n        } else {\n         \
    \   res += string(c)\n        }\n    }\n    return res\n}\n", "    return \"\"\
    \n}\n", "    var tmp = text\n    counter := 0\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            counter++\n            if counter\
    \ > 2 {\n                tmp = tmp[:i] + \"-\" + tmp[i+1:]\n            } else\
    \ {\n                tmp = tmp[:i] + \"_\" + tmp[i+1:]\n            }\n      \
    \  } else {\n            counter = 0\n        }\n    }\n    return tmp\n}\n",
  "    text = text[1:]\n    r := []rune(text)\n    spaceIndexes := []int{}\n    for\
    \ index, char := range r {\n        if char == ' ' {\n            spaceIndexes\
    \ = append(spaceIndexes, index)\n        }\n    }\n    for _, index := range spaceIndexes\
    \ {\n        r[index] = '_'\n    }\n    if len(spaceIndexes) > 2 {\n        for\
    \ i := 0; i < len(spaceIndexes) - 2; i++ {\n            r[spaceIndexes[i]] = '-'\n\
    \        }\n    }\n    return string(r)\n}\n", "    var new_text string\n    spaces\
    \ := 0\n    for _, char := range text {\n        if char == ' ' {\n          \
    \  spaces += 1\n            if spaces == 2 {\n                new_text += \"-\"\
    ;\n            }\n        } else {\n            if spaces > 0 {\n            \
    \    new_text += \"_\"\n            }\n            new_text += string(char)\n\
    \            spaces = 0\n        }\n    }\n    return new_text\n}\n", "    return\
    \ \"\"\n}\n", "    return text\n}\n", "    if text == \"\" {\n        return \"\
    \"\n    }\n    var res []rune\n    var last rune\n    for _, c := range text {\n\
    \        if c == ' ' {\n            if last == ' ' {\n                last = '-'\n\
    \            } else {\n                last = '_'\n            }\n        } else\
    \ {\n            res = append(res, last)\n            last = c\n        }\n  \
    \  }\n    res = append(res, last)\n    if res[0] == ' ' {\n        res[0] = '_'\n\
    \    }\n    return string(res)\n}\n", "    counter := 0\n    result := \"\"\n\
    \    for _, c := range text {\n        if c == ' ' {\n            counter++\n\
    \            if counter < 3 {\n                result += \"_\"\n            }\
    \ else {\n                result += \"-\"\n            }\n        } else {\n \
    \           counter = 0\n            result += string(c)\n        }\n    }\n \
    \   return result\n}\n", "    // write your code in Go 1.4\n    var prev rune\
    \ = 'a'\n    var count int = 0\n    var result string = \"\"\n    var size int\
    \ = len(text)\n    for i, char := range text {\n        if char == ' ' {\n   \
    \         if prev == ' ' {\n                count += 1\n            } else {\n\
    \                count = 1\n            }\n            prev = ' '\n        } else\
    \ {\n            prev = char\n            count = 0\n        }\n        if i ==\
    \ size - 1 {\n            if count == 1 {\n                result += \"_\"\n \
    \           } else if count > 1 {\n                result += \"-\"\n         \
    \   }\n        }\n        if char != ' ' {\n            result += string(char)\n\
    \        } else if count == 1 {\n            result += \"_\"\n        } else if\
    \ count > 1 {\n            result += \"-\"\n        }\n    }\n    return result\n\
    }\n\ntype testpair ", "    // TODO: implementation\n    return \"\"\n}\n", " \
    \   var res string\n    var prev_is_space bool\n    var cur_is_space bool\n  \
    \  for i, c := range text {\n        cur_is_space = c == ' '\n        if i ==\
    \ 0 {\n            prev_is_space = cur_is_space\n        }\n        if cur_is_space\
    \ && prev_is_space {\n            if len(res) >= 2 && res[len(res)-1] == '-' {\n\
    \                res += string(c)\n            } else {\n                res +=\
    \ \"-\"\n            }\n        } else if cur_is_space {\n            res += \"\
    _\"\n        } else {\n            res += string(c)\n        }\n        prev_is_space\
    \ = cur_is_space\n    }\n    return res\n}\n", "    res := []rune{}\n    if len(text)\
    \ == 0 {\n        return text\n    }\n    if text[0] == ' ' {\n        res = append(res,\
    \ '_')\n    }\n    count := 0\n    for _, r := range text {\n        if r == '\
    \ ' {\n            count++\n            if count >= 2 {\n                res =\
    \ append(res, '-')\n                count = 0\n            }\n        } else {\n\
    \            res = append(res, r)\n            count = 0\n        }\n    }\n \
    \   return string(res)\n}\n", "    return \"\"\n}\n", "    var spacesReplaced\
    \ int\n    var newText string\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            spacesReplaced += 1\n            if spacesReplaced > 2\
    \ {\n                newText += \"-\"\n            } else {\n                newText\
    \ += \"_\"\n            }\n        } else {\n            spacesReplaced = 0\n\
    \            newText += string(char)\n        }\n    }\n    return newText\n}\n",
  "    return \"example\"\n}\n", "\treturn \"\"\n}\n", "    var result string\n  \
    \  var prevSpace bool = false\n    var spaceCount int = 0\n    for _, ch := range\
    \ text {\n        if ch == ' ' {\n            if prevSpace {\n               \
    \ spaceCount++\n            } else {\n                spaceCount = 1\n       \
    \     }\n            prevSpace = true\n        } else {\n            if prevSpace\
    \ {\n                if spaceCount > 2 {\n                    result += \"-\"\n\
    \                } else {\n                    result += \"_\"\n             \
    \   }\n            }\n            prevSpace = false\n            result += string(ch)\n\
    \        }\n    }\n    return result\n}\n", "    r := []rune(text)\n    var s\
    \ []rune\n    var q []rune\n    for _, r := range r {\n        if r == ' ' {\n\
    \            q = append(q, r)\n        } else {\n            if len(q) > 0 {\n\
    \                if len(q) > 2 {\n                    s = append(s, '-')\n   \
    \             } else {\n                    for _, r := range q {\n          \
    \              s = append(s, r)\n                    }\n                }\n  \
    \              q = []rune{}\n            }\n            s = append(s, r)\n   \
    \     }\n    }\n    if len(q) > 0 {\n        if len(q) > 2 {\n            s =\
    \ append(s, '-')\n        } else {\n            for _, r := range q {\n      \
    \          s = append(s, r)\n            }\n        }\n    }\n    return string(s)\n\
    }\n", "    if len(text) == 0 {\n        return text\n    }\n    space_count :=\
    \ 0\n    for _, ch := range text {\n        if ch == ' ' {\n            space_count++\n\
    \        } else {\n            space_count = 0\n        }\n    }\n    if space_count\
    \ == len(text) {\n        return text\n    }\n    if space_count >= 2 {\n    \
    \    return \"_\" + fix_spaces(text[:len(text)-space_count]) + \"-3\"\n    }\n\
    \    return text\n}\n", "    return \"\"\n}\n", "    text = text[1:]\n    text\
    \ += \"_\"\n    count := 0\n    spaces := 0\n    output := \"\"\n    for i, c\
    \ := range text {\n        if c == ' ' {\n            spaces++\n            if\
    \ spaces > 2 {\n                count++\n                spaces = 0\n        \
    \    }\n        } else {\n            if count == 1 {\n                output\
    \ += \"-\"\n            } else if count > 1 {\n                output += \"-\"\
    \n                for i := 0; i < count - 1; i++ {\n                    output\
    \ += \"_\"\n                }\n            }\n            output += string(c)\n\
    \            count = 0\n            spaces = 0\n        }\n    }\n    return output\n\
    }\n", "    spaceCount := 0\n    result := \"\"\n    for _, c := range text {\n\
    \        if c == ' ' {\n            spaceCount++\n            if spaceCount ==\
    \ 2 {\n                result += \"_\"\n            } else if spaceCount > 2 {\n\
    \                result += \"-\"\n            }\n        } else {\n          \
    \  spaceCount = 0\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n", "    space := \"_\"\n    long_space := \"-\"\n    last_is_space\
    \ := false\n    last_is_long_space := false\n    fixed_text := \"\"\n    for _,\
    \ r := range text {\n        if last_is_space && last_is_long_space && r == '\
    \ ' {\n            fixed_text += long_space\n            last_is_space = false\n\
    \            last_is_long_space = true\n        } else if last_is_space && r ==\
    \ ' ' {\n            fixed_text += space\n            last_is_space = true\n \
    \           last_is_long_space = true\n        } else if r == ' ' {\n        \
    \    fixed_text += space\n            last_is_space = true\n            last_is_long_space\
    \ = false\n        } else {\n            fixed_text += string(r)\n           \
    \ last_is_space = false\n            last_is_long_space = false\n        }\n \
    \   }\n    return fixed_text\n}\n", "    var result string\n    var pre rune =\
    \ ' '\n    var prePre rune = ' '\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if pre == ' ' && prePre == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(c)\n        }\n        prePre\
    \ = pre\n        pre = c\n    }\n    return result\n}\n", "    var result string\n\
    \    var previousIsSpace bool\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if previousIsSpace {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \            previousIsSpace = true\n        } else {\n            previousIsSpace\
    \ = false\n            result += string(text[i])\n        }\n    }\n    return\
    \ result\n}\n", "    if len(text) == 0 {\n        return text\n    }\n    var\
    \ result []byte\n    pre_is_space := false\n    for i := 0; i < len(text); i++\
    \ {\n        if text[i] == ' ' {\n            if pre_is_space {\n            \
    \    result = append(result, '-')\n            } else {\n                pre_is_space\
    \ = true\n                if i == 0 {\n                    result = append(result,\
    \ '_')\n                } else {\n                    result = append(result,\
    \ ' ')\n                }\n            }\n        } else {\n            pre_is_space\
    \ = false\n            result = append(result, text[i])\n        }\n    }\n  \
    \  return string(result)\n}\n", "    // return text\n    fmt.Println(text)\n \
    \   return \"fix_spaces\"\n}\n", "    var result []rune\n    space_count := 0\n\
    \    for _, char := range text {\n        if char == ' ' {\n            space_count++\n\
    \            if space_count >= 2 {\n                result = append(result, '-')\n\
    \                space_count = 0\n            }\n        } else {\n          \
    \  result = append(result, char)\n            space_count = 0\n        }\n   \
    \ }\n    return string(result)\n}\n", "    return \"\"\n}\n", "    // ...\n  \
    \  return text\n}\n", "    r := []rune(text)\n    in_text := false\n    for i,\
    \ j := 0, 0; i < len(r); i++ {\n        if (r[i] == ' ') {\n            if in_text\
    \ {\n                if j > 2 {\n                    r[i] = '-'\n            \
    \    } else {\n                    r[i] = '_'\n                }\n           \
    \ }\n            j++\n        } else {\n            in_text = true\n         \
    \   j = 0\n        }\n    }\n    return string(r)\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    // fix spaces\n    for i, c := range text {\n   \
    \     if c == ' ' {\n            text = text[:i] + \"_\" + text[i+1:]\n      \
    \  }\n    }\n    // fix multiple consecutive spaces\n    for {\n        text2\
    \ := text\n        text = text2[:2]\n        text += strings.Replace(text2[2:],\
    \ \"__\", \"-\", -1)\n        if text == text2 {\n            break\n        }\n\
    \    }\n    return text\n}\n", "    for _, v := range text {\n        fmt.Println(v)\n\
    \    }\n    return text\n}\n", "    // TODO: Write code here\n    return text\n\
    }\n", "    spaces := 0\n    inSpace := false\n    result := \"\"\n    for _, ch\
    \ := range text {\n        if ch == ' ' {\n            if !inSpace {\n       \
    \         spaces = 1\n                inSpace = true\n            } else {\n \
    \               spaces++\n            }\n        } else {\n            inSpace\
    \ = false\n            if spaces > 2 {\n                for i := 0; i < spaces;\
    \ i++ {\n                    result += \"-\"\n                }\n            }\
    \ else if spaces == 2 {\n                result += \"_\"\n            }\n    \
    \        spaces = 0\n            result += string(ch)\n        }\n    }\n    return\
    \ result\n}\n", "    fixed := \"\"\n    spaces := 0\n    for _,c := range text\
    \ {\n        if c == ' ' {\n            spaces++\n            if spaces == 2 {\n\
    \                fixed += \"-\"\n            }\n        } else {\n           \
    \ spaces = 0\n            fixed += string(c)\n        }\n    }\n    return fixed\n\
    }\n\ntype fix_spaces_case ", "    newText := \"\"\n    for _, char := range text\
    \ {\n        switch {\n        case char == ' ':\n            if newText[len(newText)-1]\
    \ == ' ' {\n                if newText[len(newText)-2] == ' ' {\n            \
    \        newText += \"-\"\n                } else {\n                    newText\
    \ += \"_\"\n                }\n            } else {\n                newText +=\
    \ \"_\"\n            }\n        default:\n            newText += string(char)\n\
    \        }\n    }\n    return newText\n}\n", "    spaceCount := 0\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            spaceCount++\n       \
    \ } else {\n            spaceCount = 0\n        }\n    }\n    return fmt.Sprintf(\"\
    %s_%d\", text, spaceCount)\n}\n", "    // Write your code here\n    return \"\"\
    \n}\n", "    var (\n        ret string\n        space_cnt int\n    )\n    for\
    \ _, ch := range text {\n        if ch == ' ' {\n            space_cnt += 1\n\
    \            if space_cnt == 1 {\n                ret += \"_\"\n            }\
    \ else if space_cnt == 2 {\n                ret += \"_\"\n            } else {\n\
    \                ret += \"-\"\n            }\n        } else {\n            space_cnt\
    \ = 0\n            ret += string(ch)\n        }\n    }\n    return ret\n}\n",
  "    if len(text) < 3 {\n        return text\n    }\n    newText := text[:1]\n \
    \   prevChar := text[0]\n    counter := 0\n    for _, char := range text[1:] {\n\
    \        if char == ' ' {\n            if prevChar == ' ' {\n                counter\
    \ += 1\n                if counter >= 2 {\n                    newText += \"-\"\
    \n                }\n            } else {\n                newText += \"_\"\n\
    \            }\n        } else {\n            newText += string(char)\n      \
    \      counter = 0\n        }\n        prevChar = char\n    }\n    return newText\n\
    }\n", "    return text\n}\n", "    buffer := \"\"\n    spaces := 0\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            spaces += 1\n        }\
    \ else {\n            if spaces == 1 {\n                buffer += \"_\"\n    \
    \        } else if spaces >= 2 {\n                buffer += \"-\"\n          \
    \  }\n            buffer += string(c)\n            spaces = 0\n        }\n   \
    \ }\n    if spaces == 1 {\n        buffer += \"_\"\n    } else if spaces >= 2\
    \ {\n        buffer += \"-\"\n    }\n    return buffer\n}\n", "    return \"\"\
    \n}\n", "    return text\n}\n", "    var result string\n    countSpaces := 0\n\
    \    for _, char := range text {\n        if char == ' ' {\n            countSpaces++\n\
    \            if countSpaces > 2 {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            countSpaces = 0\n            result += string(char)\n        }\n\
    \    }\n    return result\n}\n\ntype TestCase ", "    var result string\n    var\
    \ spaces int\n    for _,c := range text {\n        if c == ' ' {\n           \
    \ spaces++\n            if spaces >= 2 {\n                result += \"-\"\n  \
    \              spaces = 0\n            }\n        } else {\n            if spaces\
    \ == 1 {\n                result += \"_\"\n            }\n            spaces =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n",
  "    for {\n        t := len(text)\n        text = replace(text, \"  \", \"-\")\n\
    \        text = replace(text, \" \", \"_\")\n        if t == len(text) {\n   \
    \         break\n        }\n    }\n    return text\n}\n", "    // TODO: implement\
    \ me\n    return \"\"\n}\n", "    var result string\n    if len(text) < 1 {\n\
    \        return result\n    }\n    if text[0] == ' ' {\n        result = \"_\"\
    \n    } else {\n        result = string(text[0])\n    }\n    var spaces int\n\
    \    for _, v := range text[1:] {\n        if v == ' ' {\n            spaces++\n\
    \            if spaces > 2 {\n                spaces = 2\n            }\n    \
    \    } else {\n            spaces = 0\n        }\n        if spaces == 0 {\n \
    \           result += string(v)\n        } else if spaces == 1 {\n           \
    \ result += \"_\"\n        } else if spaces == 2 {\n            result += \"-\"\
    \n        }\n    }\n    return result\n}\n", "    str := \"\"\n    length := len(text)\n\
    \    for i := 0; i < length; i++ {\n        if text[i] == ' ' {\n            str\
    \ += \"_\"\n        } else {\n            str += string(text[i])\n        }\n\
    \    }\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str, \"__\"\
    , \"-\")\n    str = reReplace(str, \"_-\", \"-\")\n    str = reReplace(str, \"\
    -_\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__\", \"-\")\n    str = reReplace(str, \"__\", \"-\")\n    str = reReplace(str,\
    \ \"__", "    var l = len(text)\n    var tmp []byte\n    for i := 0; i < l; i++\
    \ {\n        if text[i] == ' ' {\n            tmp = append(tmp, '_')\n       \
    \     for i+1 < l && text[i+1] == ' ' {\n                i++\n               \
    \ if text[i] == ' ' {\n                    tmp = append(tmp, '-')\n          \
    \      }\n            }\n        } else {\n            tmp = append(tmp, text[i])\n\
    \        }\n    }\n    return string(tmp)\n}\n", "    ans := make([]rune, 0)\n\
    \    spaces := 0\n    for _, c := range text {\n        if c == ' ' {\n      \
    \      spaces += 1\n            if spaces == 1 {\n                ans = append(ans,\
    \ c)\n            } else if spaces == 2 {\n                ans = append(ans, '_')\n\
    \            }\n        } else {\n            spaces = 0\n            ans = append(ans,\
    \ c)\n        }\n    }\n    if spaces > 2 {\n        for i, c := range ans {\n\
    \            if c == ' ' {\n                ans[i] = '-'\n            }\n    \
    \    }\n    }\n    return string(ans)\n}\n", "    var result string\n    // replace\
    \ consecutive spaces with '-'\n    for i := 0; i < len(text); i++ {\n        if\
    \ i < len(text) - 1 && text[i] == text[i+1] && text[i] == ' ' {\n            result\
    \ += \"-\"\n            i++\n        } else {\n            result += string(text[i])\n\
    \        }\n    }\n    // replace spaces with '_'\n    result = Replace(result,\
    \ \" \", \"_\")\n    return result\n}\n", "    var result string\n    var lastSpace\
    \ bool\n    var count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            if lastSpace {\n                count += 1\n            }\
    \ else {\n                lastSpace = true\n                count = 1\n      \
    \      }\n        } else {\n            if lastSpace {\n                if count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  lastSpace = false\n            result += string(char)\n        }\n    }\n \
    \   return result\n}\n", "    var i, count int\n    var textBytes = []byte(text)\n\
    \    var result = make([]byte, 0)\n    var prevIsSpace = false\n    for i = 0;\
    \ i < len(textBytes); i++ {\n        if textBytes[i] == 32 {\n            if count\
    \ > 0 {\n                if prevIsSpace {\n                    result = append(result,\
    \ '-')\n                } else {\n                    result = append(result,\
    \ '_')\n                }\n            }\n            count++\n            prevIsSpace\
    \ = true\n        } else {\n            count = 0\n            prevIsSpace = false\n\
    \            result = append(result, textBytes[i])\n        }\n    }\n    return\
    \ string(result)\n}\n", "    text = \" \" + text + \" \"\n    space_count := 0\n\
    \    space_index := 0\n    for i, c := range text {\n        if c == ' ' {\n \
    \           space_count++\n            space_index = i\n        } else {\n   \
    \         space_count = 0\n        }\n        if space_count > 2 {\n         \
    \   text = text[:space_index] + \"-\" + text[space_index+1:]\n            space_count\
    \ = 0\n        }\n    }\n    text = text[1:]\n    text = text[:len(text)-1]\n\
    \    text = strings.Replace(text, \" \", \"_\", -1)\n    return text\n}\n", " \
    \   s := []rune(text)\n    fmt.Println(string(s))\n    for i, letter := range\
    \ s {\n        if letter == ' ' {\n            s[i] = '_'\n        }\n    }\n\
    \    for i, letter := range s {\n        if letter == '_' {\n            if i\
    \ != 0 && i != len(s) {\n                fmt.Println(i)\n                if s[i-1]\
    \ == '_' && s[i+1] == '_' {\n                    s[i] = '-'\n                }\n\
    \            }\n        }\n    }\n    fmt.Println(string(s))\n    return string(s)\n\
    }\n", "    // Fill this in.\n    return text\n}\n", "    var fixed_text string\n\
    \    var has_space bool = false\n    var has_consecutive_space bool = false\n\
    \    for _, char := range text {\n        if char == 32 {\n            has_space\
    \ = true\n            if has_consecutive_space {\n                continue\n \
    \           }\n            fixed_text += \"_\"\n            has_consecutive_space\
    \ = true\n        } else {\n            has_consecutive_space = false\n      \
    \      fixed_text += string(char)\n        }\n    }\n    if has_space {\n    \
    \    if has_consecutive_space {\n            fixed_text = string(fixed_text[1:])\n\
    \            fixed_text = string(fixed_text[:len(fixed_text)-1])\n           \
    \ fixed_text = \"_\" + fixed_text + \"-\"\n        } else {\n            fixed_text\
    \ = string(fixed_text[1:])\n            fixed_text = \"_\" + fixed_text\n    \
    \    }\n    }\n    return fixed_text\n}\n", "    s := []rune(text)\n    i := 0\n\
    \    n := len(s)\n    for ; i < n && s[i] == ' '; i++ {\n    }\n    if i == n\
    \ {\n        return text\n    }\n    s = s[i:]\n    n = len(s)\n    if n == 1\
    \ {\n        return string(s)\n    }\n    a := make([]rune, n)\n    n = n - 1\n\
    \    j := 0\n    k := 0\n    if s[0] == ' ' {\n        a[j] = '_'\n        j++\n\
    \    }\n    for i = 0; i < n; i++ {\n        if s[i] == ' ' {\n            if\
    \ k == 0 {\n                a[j] = '_'\n                j++\n            } else\
    \ {\n                k++\n            }\n        } else {\n            for k >\
    \ 2 {\n                a[j] = '-'\n                j++\n                k--\n\
    \            }\n            a[j] = s[i]\n            j++\n            k = 0\n\
    \        }\n    }\n    return string(a[:j])\n}\n", "    // Write your code here\n\
    \    return \"\"\n}\n", "    chars := []rune(text)\n    var result []rune\n  \
    \  seen_space := false\n    for i := 0; i < len(chars); i++ {\n        if chars[i]\
    \ == ' ' {\n            if seen_space {\n                if len(result) > 0 &&\
    \ result[len(result)-1] != '-' {\n                    result = append(result,\
    \ '-')\n                }\n            } else {\n                seen_space =\
    \ true\n            }\n        } else {\n            result = append(result, chars[i])\n\
    \            seen_space = false\n        }\n    }\n    return string(result)\n\
    }\n", "    // Write your code here\n    var result string = \"\"\n    var prev\
    \ rune = 0\n    var count int = 0\n    for _, char := range text {\n        if\
    \ (char == ' ') {\n            if (prev == ' ') {\n                count++\n \
    \           } else {\n                count = 1\n            }\n            if\
    \ (count == 1) {\n                result += \"_\"\n            } else if (count\
    \ == 2) {\n                result += \"_\"\n            } else if (count > 2)\
    \ {\n                result += \"-\"\n            }\n        } else {\n      \
    \      result += string(char)\n        }\n        prev = char\n    }\n    return\
    \ result\n}\n", "    var newText string\n    var prevChar string\n    var count\
    \ int = 0\n    for _, c := range text {\n        if c == 32 {\n            if\
    \ count == 0 {\n                newText += \"_\"\n            } else if count\
    \ == 1 {\n                newText += \"_\"\n            } else if count == 2 {\n\
    \                newText += \"-\"\n            }\n            count++\n      \
    \  } else {\n            count = 0\n            newText += string(c)\n       \
    \ }\n    }\n    return newText\n}\n", "    space_count := 0\n    replaced := \"\
    \"\n    for _, v := range text {\n        if v == ' ' {\n            space_count\
    \ += 1\n            if space_count > 2 {\n                replaced += \"-\"\n\
    \            } else {\n                replaced += \"_\"\n            }\n    \
    \    } else {\n            replaced += string(v)\n            space_count = 0\n\
    \        }\n    }\n    return replaced\n}\n", "    var result []byte\n    pre_space\
    \ := false\n    space_count := 0\n    for _, ch := range text {\n        if ch\
    \ == ' ' {\n            space_count++\n            if pre_space {\n          \
    \      if space_count == 3 {\n                    result = append(result, '-')\n\
    \                    space_count = 0\n                }\n            } else {\n\
    \                result = append(result, '_')\n                pre_space = true\n\
    \            }\n        } else {\n            for i := 0; i < space_count; i++\
    \ {\n                result = append(result, '_')\n            }\n           \
    \ space_count = 0\n            pre_space = false\n            result = append(result,\
    \ byte(ch))\n        }\n    }\n    return string(result)\n}\n", "    res := \"\
    \"\n    count := 0\n    for _,c := range text {\n        if c == ' ' {\n     \
    \       count++\n            if count > 2 {\n                res += \"-\"\n  \
    \          } else {\n                res += \"_\"\n            }\n        } else\
    \ {\n            res += string(c)\n            count = 0\n        }\n    }\n \
    \   return res\n}\n", "    var last rune = ' '\n    var result string\n    for\
    \ _, char := range text {\n        if char == ' ' {\n            if last == '\
    \ ' {\n                result += \"-\"\n            } else {\n               \
    \ result += \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        last = char\n    }\n    return result\n}\n", "    return text\n\
    }\n", "    var buffer string\n    count := 0\n    for _, v := range text {\n \
    \       if v == ' ' {\n            count += 1\n            if count == 1 {\n \
    \               buffer += \"_\"\n            } else if count == 2 {\n        \
    \        buffer += \"-\"\n            }\n        } else {\n            count =\
    \ 0\n            buffer += string(v)\n        }\n    }\n    return buffer\n}\n",
  "    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n           \
    \ text = text[:i] + \"_\" + text[i+1:]\n        }\n    }\n    for i := 0; i <\
    \ len(text); i++ {\n        if text[i] == '_' && text[i+1] == '_' {\n        \
    \    text = text[:i] + \"-\" + text[i+2:]\n        }\n    }\n    return text\n\
    }\n", "    res := \"\"\n    space_count := 0\n    for _, c := range text {\n \
    \       if c == ' ' {\n            space_count++\n            if space_count >\
    \ 2 {\n                res += \"-\"\n            } else {\n                res\
    \ += \"_\"\n            }\n        } else {\n            space_count = 0\n   \
    \         res += string(c)\n        }\n    }\n    return res\n}\n", "    return\
    \ \"\"\n}\n", "    var result string = \"\"\n    var spaces = 0\n    var i = 0\n\
    \    var c = \"\"\n    for i = 0; i < len(text); i++ {\n        c = string(text[i])\n\
    \        if c == \" \" {\n            spaces++\n            if spaces == 2 {\n\
    \                spaces = -1\n            }\n        } else {\n            spaces\
    \ = 0\n        }\n        if spaces == 0 {\n            result += c\n        }\
    \ else if spaces == -1 {\n            result += \"-\"\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var count int = 0\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            count++\n            if count\
    \ >= 2 {\n                result += \"-\"\n            } else {\n            \
    \    result += \"_\"\n            }\n        } else {\n            count = 0\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    for _, ch := range text {\n        if result != \"\"\
    \ && ch == ' ' {\n            if result[len(result)-1] == ' ' {\n            \
    \    result += \"-\"\n            } else {\n                result += \"_\"\n\
    \            }\n        } else {\n            result += string(ch)\n        }\n\
    \    }\n    return result\n}\n", "    var out string\n    return out\n}\n", " \
    \   spaceCount := 0\n    result := \"\"\n    for _, char := range text {\n   \
    \     if char == ' ' {\n            spaceCount++\n            if spaceCount >=\
    \ 2 {\n                if len(result) > 0 && result[len(result)-1] != '-' {\n\
    \                    result += \"-\"\n                }\n            }\n     \
    \   } else {\n            if spaceCount > 0 {\n                result += \"_\"\
    \n            }\n            spaceCount = 0\n            result += string(char)\n\
    \        }\n    }\n    return result\n}\n", "\tif len(text) == 0 {\n\t\treturn\
    \ text\n\t}\n\treturn \"\"\n}\n", "    res := \"\"\n    count := 0\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            count += 1\n         \
    \   if count > 2 {\n                res += \"-\"\n            } else {\n     \
    \           res += \"_\"\n            }\n        } else {\n            res +=\
    \ string(c)\n            count = 0\n        }\n    }\n    if res[0] == '_' {\n\
    \        res = res[1:]\n    }\n    return res\n}\n", "    r := make([]rune, 0)\n\
    \    spaces := 0\n    for _, c := range text {\n        if c == ' ' {\n      \
    \      spaces += 1\n            if spaces < 3 {\n                r = append(r,\
    \ '_')\n            }\n        } else {\n            spaces = 0\n            r\
    \ = append(r, c)\n        }\n    }\n    return string(r)\n}\n", "    return \"\
    \"\n}\n", "    spaces := 0\n    prev_space := false\n    result := \"\"\n    for\
    \ _, r := range text {\n        if r == ' ' {\n            if prev_space {\n \
    \               spaces += 1\n            } else {\n                prev_space\
    \ = true\n                result += \"_\"\n            }\n        } else {\n \
    \           if prev_space {\n                if spaces == 2 {\n              \
    \      result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            result += string(r)\n \
    \           prev_space = false\n            spaces = 0\n        }\n    }\n   \
    \ return result\n}\n", "    empty := \"_\"\n    result := \"\"\n    count := 0\n\
    \    for i, letter := range text {\n        if string(letter) == \" \" {\n   \
    \         if count < 2 {\n                result += empty\n            }\n   \
    \         count++\n        } else {\n            if count > 2 {\n            \
    \    result += empty\n            }\n            result += string(letter)\n  \
    \          count = 0\n        }\n        fmt.Println(i, letter, count, result)\n\
    \    }\n    return result\n}\n", "    if len(text) == 0 {\n        return text\n\
    \    }\n    res := []byte(text)\n    spaces := 0\n    start := 0\n    for i :=\
    \ 0; i < len(res); i++ {\n        if res[i] == ' ' {\n            spaces++\n \
    \           if spaces == 2 {\n                res[start] = '_'\n             \
    \   start = i\n            }\n            if spaces > 2 {\n                res[start]\
    \ = '-'\n                start = i\n            }\n        } else {\n        \
    \    if spaces > 0 {\n                spaces = 0\n                start = i\n\
    \            }\n        }\n    }\n    return string(res)\n}\n", "    var result\
    \ string = \"\"\n    var afterSpace bool = false\n    var countSpace int = 0\n\
    \    for _, v := range text {\n        if v == ' ' {\n            afterSpace =\
    \ true\n            countSpace += 1\n        } else {\n            if afterSpace\
    \ {\n                if countSpace == 1 {\n                    result += \"_\"\
    \n                } else if countSpace > 2 {\n                    result += \"\
    -\"\n                }\n                countSpace = 0\n                afterSpace\
    \ = false\n            }\n            result += string(v)\n        }\n    }\n\
    \    return result\n}\n", "    var result = \"\"\n    var spaces = 0\n    for\
    \ _, ch := range text {\n        if ch == ' ' {\n            spaces++\n      \
    \      if spaces >= 2 {\n                spaces = 0\n                result +=\
    \ \"-\"\n            }\n        } else {\n            spaces = 0\n           \
    \ result += string(ch)\n        }\n    }\n    return result\n}\n", "    // TODO:\n\
    \    // 1. replace all spaces with '_'\n    // 2. replace all consecutive spaces\
    \ with '-'\n    text = \"\"\n    return text\n}\n", "    var result string\n \
    \   var spaces_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            spaces_count++\n            if spaces_count > 2 {\n             \
    \   result += \"-\"\n                spaces_count = 0\n            }\n       \
    \ } else {\n            spaces_count = 0\n            result += string(c)\n  \
    \      }\n    }\n    return result\n}\n", "    if len(text) <= 0 {\n        return\
    \ text\n    }\n    for {\n        text =  removeLeadingSpace(text)\n        if\
    \ len(text) <= 0 {\n            return text\n        }\n        text = removeTrailingSpace(text)\n\
    \        if len(text) <= 0 {\n            return text\n        }\n        text\
    \ = removeConsecutiveSpaces(text)\n        if len(text) <= 0 {\n            return\
    \ text\n        }\n        text = removeSpaces(text)\n        if len(text) <=\
    \ 0 {\n            return text\n        }\n        text = removeDoubleUnderscores(text)\n\
    \        if len(text) <= 0 {\n            return text\n        }\n        break\n\
    \    }\n    return text\n}\n", "    return text\n}\n", "    text = text[1:]\n\
    \    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n         \
    \   if i + 1 < len(text) && text[i + 1] == ' ' {\n                text = text[:i]\
    \ + \"-\" + text[i + 1:]\n            } else {\n                text = text[:i]\
    \ + \"_\" + text[i + 1:]\n            }\n        }\n    }\n    return text\n}\n",
  "    if len(text) == 0 {\n        return text\n    }\n    chars := []rune(text)\n\
    \    result := make([]rune, 0)\n    for i := 0; i < len(chars); i++ {\n      \
    \  if chars[i] == ' ' {\n            if i == 0 {\n                continue\n \
    \           }\n            if chars[i-1] == ' ' {\n                if i + 1 <\
    \ len(chars) && chars[i+1] == ' ' {\n                    result = append(result,\
    \ '-')\n                    for i < len(chars) && chars[i] == ' ' {\n        \
    \                i++\n                    }\n                    i--\n       \
    \         } else {\n                    result = append(result, '_')\n       \
    \         }\n            } else {\n                result = append(result, '_')\n\
    \            }\n        } else {\n            result = append(result, chars[i])\n\
    \        }\n    }\n    return string(result)\n}\n\ntype input ", "    var rs []rune\n\
    \    var cnt int\n    for _, c := range text {\n        if c == ' ' {\n      \
    \      cnt++\n            if cnt == 2 {\n                rs = append(rs, '-')\n\
    \            }\n        } else {\n            if cnt == 1 {\n                rs\
    \ = append(rs, '_')\n            }\n            rs = append(rs, c)\n         \
    \   cnt = 0\n        }\n    }\n    return string(rs)\n}\n", "    var buf []rune\n\
    \    hasSpace := false\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if hasSpace {\n                continue\n            }\n        \
    \    hasSpace = true\n            buf = append(buf, '_')\n        } else {\n \
    \           if hasSpace {\n                buf = append(buf, '-')\n          \
    \  }\n            hasSpace = false\n            buf = append(buf, c)\n       \
    \ }\n    }\n    return string(buf)\n}\n", "    space_count := 0\n    result :=\
    \ \"\"\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                continue\n            }\n \
    \       } else {\n            space_count = 0\n        }\n        if c == ' '\
    \ {\n            if space_count == 1 {\n                result += \"_\"\n    \
    \        } else {\n                result += \"-\"\n            }\n        } else\
    \ {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
  "    space1 := []byte(\" \")\n    space2 := []byte(\"_\")\n    space3 := []byte(\"\
    -\")\n    var space_count int\n    for _, c := range []byte(text) {\n        if\
    \ c == space1[0] {\n            space_count++\n        } else {\n            space_count\
    \ = 0\n        }\n        if space_count >= 3 {\n            space1 = space3\n\
    \        }\n    }\n    return string(space1)\n}\n", "    ret := \"\"\n    spaces\
    \ := 0\n    for _, char := range text {\n        if char == ' ' {\n          \
    \  spaces++\n            if spaces < 3 {\n                ret += \"_\"\n     \
    \       } else {\n                ret += \"-\"\n            }\n        } else\
    \ {\n            ret += string(char)\n            spaces = 0\n        }\n    }\n\
    \    return ret\n}\n", "    newText := \"\"\n    lastChar := \"\"\n    for _,\
    \ char := range text {\n        if char == 32 {\n            if newText == \"\"\
    \ {\n                continue\n            }\n            if lastChar == \"_\"\
    \ {\n                newText += \"-\"\n            } else {\n                newText\
    \ += \"_\"\n            }\n        } else {\n            newText += string(char)\n\
    \        }\n        lastChar = string(char)\n    }\n    return newText\n}\n",
  "    result := \"\"\n    split := []rune(text)\n    for i, v := range split {\n\
    \        if v == ' ' {\n            if (i == 0 || i == 1) {\n                continue\n\
    \            } else if split[i-1] == ' ' {\n                result += \"-\"\n\
    \            } else {\n                result += \"_\"\n            }\n      \
    \  } else {\n            result += string(v)\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    return \"\"\n}\n", "    var result string\n\
    \    for i := 0; i < len(text); i++ {\n        c := text[i]\n        if c == '\
    \ ' {\n            for c == ' ' && i < len(text) {\n                i++\n    \
    \            c = text[i]\n            }\n            if result[len(result)-1]\
    \ == '_' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n            i--\n        } else {\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n", "  \
    \  var result string\n    var prev_is_space bool\n    var space_count int = 0\n\
    \    for _, char := range text {\n        is_space := char == ' '\n        if\
    \ !is_space {\n            if space_count > 0 {\n                if space_count\
    \ == 1 {\n                    result += \"_\"\n                } else {\n    \
    \                result += \"-\"\n                }\n            }\n         \
    \   space_count = 0\n            result += string(char)\n        } else {\n  \
    \          if !prev_is_space {\n                space_count += 1\n           \
    \ }\n        }\n        prev_is_space = is_space\n    }\n    return result\n}\n",
  "    return \"\"\n}\n", "    var res string\n    var prev byte\n    var n int\n\
    \    for i, c := range text {\n        ch := byte(c)\n        if i == 0 {\n  \
    \          prev = ch\n            n = 1\n            res += string(ch)\n     \
    \       continue\n        }\n        if ch == ' ' {\n            if prev == '\
    \ ' {\n                n++\n                if n <= 2 {\n                    res\
    \ += string(ch)\n                } else {\n                    if n == 3 {\n \
    \                       res += \"-\"\n                    }\n                }\n\
    \            } else {\n                n = 1\n                res += \"_\"\n \
    \           }\n        } else {\n            res += string(ch)\n        }\n  \
    \      prev = ch\n    }\n    return res\n}\n", "    buf := make([]byte, 0, len(text))\n\
    \    spaces := 0\n    for i := 0; i < len(text); i++ {\n        if text[i] ==\
    \ ' ' {\n            spaces++\n            if spaces == 1 {\n                buf\
    \ = append(buf, '_')\n            } else if spaces == 2 {\n                buf\
    \ = append(buf, '-')\n            }\n        } else {\n            spaces = 0\n\
    \            buf = append(buf, text[i])\n        }\n    }\n    return string(buf)\n\
    }\n", "    count := 0\n    ret := \"\"\n    for _, v := range(text) {\n      \
    \  if v == ' ' {\n            count++\n            if count < 3 {\n          \
    \      ret += \"_\"\n            } else {\n                ret += \"-\"\n    \
    \        }\n        } else {\n            ret += string(v)\n            count\
    \ = 0\n        }\n    }\n    return ret\n}\n", "    // Handle edge case of empty\
    \ string\n    if len(text) == 0 {\n        return text\n    }\n\n    // Convert\
    \ to byte array\n    textArr := []byte(text)\n\n    // Declare variables\n   \
    \ lastSpace := true\n    numSpaces := 0\n\n    // Loop over byte array\n    for\
    \ i := 0; i < len(textArr); i++ {\n        // Handle case where current space\n\
    \        if textArr[i] == 32 {\n            // Increment numSpaces\n         \
    \   numSpaces++\n\n            // Handle case where last space\n            if\
    \ lastSpace {\n                // Set _\n                textArr[i] = 95\n   \
    \         } else {\n                // Set -\n                textArr[i] = 45\n\
    \            }\n\n            // Update lastSpace\n            lastSpace = true\n\
    \        } else {\n            // Update lastSpace\n            lastSpace = false\n\
    \        }\n    }\n\n    // Only return substring if spaces present\n    if numSpaces\
    \ > 0 {\n        return string(textArr[numSpaces:])\n    } else {\n        return\
    \ text\n    }\n}\n", "    var b []byte\n    var prev_is_space bool\n    var has_multiple_spaces\
    \ bool\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n  \
    \          if prev_is_space {\n                has_multiple_spaces = true\n  \
    \          }\n            prev_is_space = true\n        } else {\n           \
    \ if prev_is_space {\n                if has_multiple_spaces {\n             \
    \       b = append(b, '-')\n                } else {\n                    b =\
    \ append(b, '_')\n                }\n                has_multiple_spaces = false\n\
    \            }\n            prev_is_space = false\n            b = append(b, text[i])\n\
    \        }\n    }\n    return string(b)\n}\n", "    return \"\"\n}\n", "    counter\
    \ := 0\n    out := \"\"\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            counter++\n            if counter == 1 {\n           \
    \     out += string('_')\n            } else if counter == 2 {\n             \
    \   out += string('_')\n            } else {\n                out += string('-')\n\
    \            }\n        } else {\n            counter = 0\n            out +=\
    \ string(text[i])\n        }\n    }\n    return out\n}\n", "    // 1. Replace\
    \ all spaces with underscores\n    result := \"\"\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            result += \"_\"\n        } else {\n  \
    \          result += string(c)\n        }\n    }\n    // 2. Turn any sequences\
    \ of 2 or more underscores into a single -\n    result = replaceMultipleUnderscores(result)\n\
    \    return result\n}\n", "    var newstr []rune\n    var index int\n    spaces\
    \ := 0\n    length := len(text)\n    //fmt.Println(length)\n    for _, s := range\
    \ text {\n        if string(s) == \" \" {\n            spaces += 1\n         \
    \   if spaces <= 2 {\n                newstr = append(newstr, '_')\n         \
    \   } else {\n                newstr = append(newstr, '-')\n            }\n  \
    \      } else {\n            newstr = append(newstr, s)\n            index +=\
    \ 1\n            spaces = 0\n        }\n    }\n    //fmt.Println(string(newstr))\n\
    \    return string(newstr)\n}\n", "    prev := ' '\n    count := 0\n    result\
    \ := \"\"\n    for _, letter := range text {\n        if letter == ' ' {\n   \
    \         if prev == ' ' {\n                count++\n            } else {\n  \
    \              count = 1\n            }\n            if count == 2 {\n       \
    \         result += \"-\"\n            }\n        } else {\n            if prev\
    \ == ' ' {\n                result += \"_\"\n            }\n            result\
    \ += string(letter)\n            count = 0\n        }\n        prev = letter\n\
    \    }\n    return result\n}\n", "    var is_last_space bool = false\n    var\
    \ result string = \"\"\n    var count_space int = 0\n    for _, v := range text\
    \ {\n        var is_space bool = v == ' '\n        if !is_space {\n          \
    \  result += string(v)\n            is_last_space = false\n            count_space\
    \ = 0\n        } else {\n            if !is_last_space {\n                result\
    \ += \"_\"\n                is_last_space = true\n            }\n            count_space++\n\
    \            if count_space > 2 {\n                result += \"-\"\n         \
    \   }\n        }\n    }\n    return result\n}\n", "    // \n    return \"\"\n\
    }\n", "    // TODO: implement this function\n    return \"\"\n}\n", "    return\
    \ text\n}\n", "    if len(text) == 0 {\n        return text\n    }\n    result\
    \ := make([]byte, 0, len(text))\n    spaces := 0\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            spaces++\n            if spaces > 2\
    \ {\n                continue\n            }\n        } else {\n            spaces\
    \ = 0\n        }\n        if char == ' ' {\n            result = append(result,\
    \ '_')\n        } else {\n            result = append(result, byte(char))\n  \
    \      }\n    }\n    if spaces > 2 {\n        for i := len(result) - 1; i >= 0;\
    \ i-- {\n            if result[i] == '_' {\n                result[i] = '-'\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return string(result)\n}\n", "    return \"\"\n}\n", "    var res string\n\
    \    var run int\n    for _, c := range text {\n        if c == ' ' {\n      \
    \      run++\n            continue\n        }\n        if run == 0 {\n       \
    \     res += string(c)\n        } else if run == 1 {\n            res += \"_\"\
    \ + string(c)\n        } else if run == 2 {\n            res += \"_\" + string(c)\n\
    \        } else {\n            res += \"-\" + string(c)\n        }\n        run\
    \ = 0\n    }\n    return res\n}\n", "    var result []byte\n    space_cnt := 0\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_cnt +=\
    \ 1\n            if space_cnt == 1 {\n                result = append(result,\
    \ '_')\n            } else if space_cnt == 2 {\n                result = append(result,\
    \ '_')\n            } else {\n                result = append(result, '-')\n \
    \           }\n        } else {\n            space_cnt = 0\n            result\
    \ = append(result, byte(c))\n        }\n    }\n    return string(result)\n}\n",
  "    spaces := 0\n    result := \"\"\n    for _, char := range text {\n        if\
    \ char == ' ' {\n            spaces++\n            if spaces > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            spaces = 0\n            result\
    \ += string(char)\n        }\n    }\n    return result\n}\n", "\treturn \"\"\n\
    }\n", "    var result string\n    var last_char rune\n    var space_counter int\n\
    \n    for _, char := range text {\n        if char == ' ' {\n            space_counter++\n\
    \            if space_counter > 2 {\n                continue\n            }\n\
    \        } else {\n            space_counter = 0\n        }\n\n        if char\
    \ == ' ' && last_char == ' ' {\n            result = result[:len(result)-1]\n\
    \            if space_counter > 2 {\n                result += \"-\"\n       \
    \     } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            result += string(char)\n        }\n\n        last_char = char\n\
    \    }\n\n    return result\n}\n", "\tcount := 0\n\tresult := \"\"\n\tfor _, char\
    \ := range text {\n\t\tswitch {\n\t\tcase char == ' ':\n\t\t\tcount++\n\t\t\t\
    if count == 1 {\n\t\t\t\tresult += \"_\"\n\t\t\t} else if count == 2 {\n\t\t\t\
    \tresult += \"_\"\n\t\t\t} else {\n\t\t\t\tresult += \"-\"\n\t\t\t}\n\t\tdefault:\n\
    \t\t\tcount = 0\n\t\t\tresult += string(char)\n\t\t}\n\t}\n\treturn result\n}\n",
  "    i := len(text) - 1\n    bytes := []byte(text)\n    for i > 0 {\n        for\
    \ i > 0 && bytes[i] == ' ' {\n            bytes[i] = '_'\n            i--\n  \
    \      }\n        if i > 0 && bytes[i] == ' ' {\n            bytes[i] = '-'\n\
    \        }\n        i--\n    }\n    return string(bytes)\n}\n", "    return \"\
    \"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    return text\n}\n", "    return text\n}\n", "    var result string\n    for\
    \ i := 0; i < len(text); i++ {\n        if i > 0 && text[i-1] == ' ' && text[i]\
    \ == ' ' {\n            result += \"-\"\n        } else if text[i] != ' ' {\n\
    \            result += string(text[i])\n        }\n    }\n    return result\n\
    }\n", "    if text == \"\" {\n        return \"\"\n    }\n    // calculate whitespace\
    \ count\n    whitespaceCount := 0\n    for i := 0; i < len(text); i++ {\n    \
    \    if text[i] == ' ' {\n            whitespaceCount++\n        }\n    }\n  \
    \  // calcuate new length of string\n    newLength := len(text) + whitespaceCount\n\
    \    if whitespaceCount > 2 {\n        newLength += whitespaceCount - 2\n    }\n\
    \    // create new byte array\n    result := make([]byte, newLength)\n    // add\
    \ current char to byte array\n    result[0] = text[0]\n    // iterate over text\n\
    \    j := 1\n    for i := 1; i < len(text); i++ {\n        if text[i] == ' ' {\n\
    \            // create whitespace\n            if whitespaceCount > 2 {\n    \
    \            // if we have more than 2 whitespaces, then use \"-\" instead of\
    \ \"_\"\n                result[j] = '-'\n                j++\n            } else\
    \ {\n                result[j] = '_'\n                j++\n            }\n   \
    \         whitespaceCount--\n        } else {\n            // add current char\
    \ to byte array\n            result[j] = text[i]\n            j++\n        }\n\
    \    }\n    return string(result)\n}\n", "    var res string\n    var prev_space\
    \ bool\n    var has_space bool\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            has_space = true\n            if prev_space {\n         \
    \       res += \"-\"\n            } else {\n                res += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            has_space\
    \ = false\n            res += string(c)\n            prev_space = false\n    \
    \    }\n    }\n    if has_space {\n        res = \"_\" + res\n    }\n    return\
    \ res\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // start writing\
    \ your code here\n}\n", "    return text\n}\n", "    // split\n    words := []string{}\n\
    \    i := 0\n    for i < len(text) {\n        j := i\n        for j < len(text)\
    \ && text[j] != ' ' {\n            j++\n        }\n        if j > i {\n      \
    \      words = append(words, text[i:j])\n        }\n        i = j+1\n    }\n \
    \   if len(words) == 0 {\n        return \"\"\n    }\n    // fix\n    fixed :=\
    \ []string{}\n    fixed = append(fixed, words[0])\n    spaces_count := 0\n   \
    \ for i := 1; i < len(words); i++ {\n        if words[i] == \"\" {\n         \
    \   spaces_count++\n        } else {\n            for spaces_count > 0 {\n   \
    \             if spaces_count >= 2 {\n                    fixed = append(fixed,\
    \ \"-\")\n                    spaces_count = 0\n                } else {\n   \
    \                 fixed = append(fixed, \"_\")\n                    spaces_count--\n\
    \                }\n            }\n            fixed = append(fixed, words[i])\n\
    \        }\n    }\n    for spaces_count > 0 {\n        if spaces_count >= 2 {\n\
    \            fixed = append(fixed, \"-\")\n            spaces_count = 0\n    \
    \    } else {\n            fixed = append(fixed, \"_\")\n            spaces_count--\n\
    \        }\n    }\n    // join\n    return strings.Join(fixed, \"\")\n}\n", " \
    \   var result string\n    var counter int\n    for _, c := range text {\n   \
    \     if c == ' ' {\n            counter++\n            if counter == 1 {\n  \
    \              result += \"_\"\n            } else if counter == 2 {\n       \
    \         result += \"_\"\n            } else {\n                result += \"\
    -\"\n            }\n        } else {\n            counter = 0\n            result\
    \ += string(c)\n        }\n    }\n    return result\n}\n", "    return \"\"\n\
    }\n", "    var result []rune\n    var spaces int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            spaces++\n            if spaces > 2 {\n  \
    \              continue\n            }\n        } else {\n            spaces =\
    \ 0\n        }\n        result = append(result, c)\n    }\n    return strings.Replace(string(result),\
    \ \" \", \"_\", -1)\n}\n", "    // TODO: add your code here\n    return text\n\
    }\n", "    new_text := text\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if new_text[i-1] == ' ' {\n                new_text\
    \ = new_text[:i] + \"-\" + new_text[i+1:]\n            } else {\n            \
    \    new_text = new_text[:i] + \"_\" + new_text[i+1:]\n            }\n       \
    \ }\n    }\n    return new_text\n}\n", "    ans := \"\"\n    for i, c := range\
    \ text {\n        if c == ' ' {\n            if i > 0 && text[i-1] == ' ' {\n\
    \                ans += \"-\"\n            } else {\n                ans += \"\
    _\"\n            }\n        } else {\n            ans += string(c)\n        }\n\
    \    }\n    return ans\n}\n", "    count := 0\n    result := \"\"\n    for i :=\
    \ 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            count++\n\
    \            if count == 2 {\n                result += \"-\"\n            }\n\
    \        } else {\n            if count == 1 {\n                result += \"_\"\
    \n            }\n            result += string(text[i])\n            count = 0\n\
    \        }\n    }\n    return result\n}\n", "    for i := len(text)-1; i >= 0;\
    \ i-- {\n        if text[i] == ' ' {\n            count := 1\n            for\
    \ j := i-1; j >= 0; j-- {\n                if text[j] == ' ' {\n             \
    \       count++\n                } else {\n                    break\n       \
    \         }\n            }\n            if count == 1 {\n                text\
    \ = text[:i] + \"_\" + text[i+1:]\n            } else if count == 2 {\n      \
    \          text = text[:i] + \"__\" + text[i+2:]\n            } else {\n     \
    \           text = text[:i] + \"-\" + text[i+count:]\n            }\n        }\n\
    \    }\n    return text\n}\n", "    var result string\n    spaces := 0\n    for\
    \ _, ch := range text {\n        if ch == ' ' {\n            spaces++\n      \
    \      if spaces > 2 {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n        } else {\n          \
    \  spaces = 0\n            result += string(ch)\n        }\n    }\n    return\
    \ result\n}\n", "    spaces := 0\n    result := \"\"\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            spaces += 1\n            if spaces\
    \ > 2 {\n                result += \"-\"\n            } else {\n             \
    \   result += \"_\"\n            }\n        } else {\n            spaces = 0\n\
    \            result += string(char)\n        }\n    }\n    return result\n}\n",
  "    var newText string = \"\"\n    var count_spaces int = 0\n    for i := 0; i\
    \ < len(text); i++ {\n        if text[i] == ' ' {\n            count_spaces++\n\
    \            if count_spaces == 1 {\n                newText += \"_\"\n      \
    \      } else if count_spaces > 2 {\n                newText += \"-\"\n      \
    \      }\n        } else {\n            count_spaces = 0\n            newText\
    \ += string(text[i])\n        }\n    }\n    return newText\n}\n", "    var res\
    \ string\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n\
    \            res += \"_\"\n        } else {\n            res += string(text[i])\n\
    \        }\n    }\n    return res\n}\n", "    return \"\"\n}\n", "    // TODO:\
    \ Fill in\n    return text\n}\n", "    out := \"\"\n    spaceCount := 0\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            spaceCount++\n    \
    \        if spaceCount < 3 {\n                out += \"_\"\n            } else\
    \ {\n                out += \"-\"\n            }\n        } else {\n         \
    \   spaceCount = 0\n            out += string(c)\n        }\n    }\n    return\
    \ out\n}\n", "    var result string\n    spacesCount := 0\n    for _, ch := range\
    \ text {\n        if ch == ' ' {\n            spacesCount++\n            if spacesCount\
    \ > 2 {\n                continue\n            }\n        } else {\n         \
    \   spacesCount = 0\n        }\n        if ch == ' ' {\n            if spacesCount\
    \ == 1 {\n                result += \"_\"\n            } else {\n            \
    \    result += \"-\"\n            }\n        } else {\n            result += string(ch)\n\
    \        }\n    }\n    return result\n}\n", "    r := []rune(text)\n    for i,\
    \ c := range r {\n        if c == ' ' {\n            if i == 0 {\n           \
    \     continue\n            }\n            r[i] = '_'\n            j := i\n  \
    \          for j = i+1; j < len(r); j++ {\n                if r[j] != ' ' {\n\
    \                    break\n                }\n                r[j] = '-'\n  \
    \          }\n            i = j\n        }\n    }\n    return string(r)\n}\n",
  "    // TODO:\n    // 1. Replace all spaces with \"_\"\n    // 2. Replace all consecutive\
    \ spaces with \"-\"\n    return text\n}\n", "    var result string = \"\"\n  \
    \  var count int = 0\n    for _, c := range text {\n        switch c {\n     \
    \   case ' ':\n            count++\n            if count == 2 {\n            \
    \    result += '-'\n            }\n        default:\n            result += string(c)\n\
    \            count = 0\n        }\n    }\n    return result\n}\n", "    s := []rune(text)\n\
    \    for i := 1; i < len(s); i++ {\n        if s[i] == ' ' {\n            s[i]\
    \ = '_'\n            if s[i-1] == ' ' {\n                s[i-1] = '-'\n      \
    \      }\n        }\n    }\n    return string(s)\n}\n", "    // check if string\
    \ has spaces\n    space := false\n    chars := make([]rune, 0)\n    // unpack\
    \ string into characters\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            if space {\n                chars = append(chars, '-')\n\
    \            } else {\n                chars = append(chars, '_')\n          \
    \  }\n            space = true\n        } else {\n            chars = append(chars,\
    \ char)\n            space = false\n        }\n    }\n    return string(chars)\n\
    }\n", "    for _, val := range text {\n        fmt.Println(val)\n    }\n    return\
    \ text\n}\n", "    for i := 0; i < len(text); i++ {\n        if i == 0 && text[i]\
    \ == ' ' {\n            text = text[1:]\n        }\n        if text[i] == ' '\
    \ {\n            text = text[:i] + \"_\" + text[i+1:]\n        }\n        if text[i]\
    \ == '_' && text[i+1] == '_' {\n            text = text[:i] + \"-\" + text[i+2:]\n\
    \        }\n    }\n    return text\n}\n", "    var ret string\n    var cnt int\n\
    \    var last_is_space bool = false\n    for _, c := range text {\n        if\
    \ (c == ' ') {\n            cnt += 1\n            if (cnt > 2) {\n           \
    \     last_is_space = true\n                ret += \"-\"\n            } else {\n\
    \                last_is_space = false\n                ret += \"_\"\n       \
    \     }\n        } else {\n            cnt = 0\n            if (last_is_space)\
    \ {\n                ret += \"_\"\n            }\n            ret += string(c)\n\
    \        }\n    }\n    return ret\n}\n", "    // Write your code here.\n    ret\
    \ := []rune{}\n    space_count := 0\n    for _, c := range text {\n        if\
    \ c == ' ' {\n            space_count += 1\n            if space_count <= 2 {\n\
    \                ret = append(ret, '_')\n            }\n        } else {\n   \
    \         space_count = 0\n            ret = append(ret, c)\n        }\n    }\n\
    \    if space_count > 2 {\n        return string(ret[:len(ret)-2]) + \"-2\"\n\
    \    }\n    return string(ret)\n}\n", "    if len(text) == 0 {\n        return\
    \ text\n    }\n    var isPreSpace bool = true\n    var res []byte\n    for _,\
    \ v := range text {\n        // fmt.Println(string(v))\n        switch v {\n \
    \       case ' ':\n            if isPreSpace {\n                res = append(res,\
    \ '-')\n            } else {\n                res = append(res, '_')\n       \
    \     }\n            isPreSpace = true\n        default:\n            res = append(res,\
    \ byte(v))\n            isPreSpace = false\n        }\n    }\n    return string(res)\n\
    }\n", "    return \"__\"\n}\n", "    if len(text) == 0 {\n        return text\n\
    \    }\n    result := make([]byte, 0, len(text))\n    last := byte(' ')\n    index\
    \ := 0\n    for _, c := range text {\n        b := byte(c)\n        if b == byte('\
    \ ') {\n            if last == byte(' ') {\n                index++\n        \
    \    } else {\n                result = append(result, byte('_'))\n          \
    \      index = 1\n            }\n        } else {\n            if index == 2 {\n\
    \                result = append(result, byte('-'))\n            }\n         \
    \   result = append(result, b)\n            index = 0\n        }\n        last\
    \ = b\n    }\n    return string(result)\n}\n", "    // Implement here\n    return\
    \ text\n}\n", "    // Write your code here.\n    return \"\"\n}\n", "    res :=\
    \ \"\"\n    last_space := false\n    count := 0\n    for _, r := range text {\n\
    \        if r == ' ' {\n            if !last_space {\n                last_space\
    \ = true\n                count++\n            } else {\n                count++\n\
    \            }\n        } else {\n            if last_space {\n              \
    \  if count < 3 {\n                    for i := 0; i < count; i++ {\n        \
    \                res += \"_\"\n                    }\n                } else {\n\
    \                    res += \"-\"\n                }\n                last_space\
    \ = false\n                count = 0\n            }\n            res += string(r)\n\
    \        }\n    }\n    if last_space {\n        if count < 3 {\n            for\
    \ i := 0; i < count; i++ {\n                res += \"_\"\n            }\n    \
    \    } else {\n            res += \"-\"\n        }\n    }\n    return res\n}\n",
  "    // TODO: implement\n    prevSpace := false\n    curSpace := false\n    spaceCount\
    \ := 0\n    inp := []rune(text)\n    for i := 0; i < len(inp); i++ {\n       \
    \ curSpace = inp[i] == ' '\n        if curSpace == true {\n            spaceCount++\n\
    \        }\n        if curSpace == true && prevSpace == true {\n            spaceCount--\n\
    \            inp[i] = '-'\n        }\n        if spaceCount > 2 {\n          \
    \  inp[i] = '-'\n        }\n        if curSpace == false {\n            spaceCount\
    \ = 0\n        }\n        prevSpace = curSpace\n    }\n    return string(inp)\n\
    }\n", "\tvar spaces_count = 0\n\tvar results = \"\"\n\tfor _, value := range text\
    \ {\n\t\tif (string(value) == \" \") {\n\t\t\tspaces_count++\n\t\t\tif (spaces_count\
    \ == 1) {\n\t\t\t\tresults += \"_\"\n\t\t\t}\n\t\t} else {\n\t\t\tresults += string(value)\n\
    \t\t\tspaces_count = 0\n\t\t}\n\t}\n\treturn results\n}\n", "    count := 0\n\
    \    for i, char := range text {\n        if count > 2 {\n            text = text[:i]\
    \ + \"-\" + text[i+1:]\n            return fix_spaces(text)\n        } else if\
    \ char == ' ' {\n            count += 1\n            text = text[:i] + \"_\" +\
    \ text[i+1:]\n            return fix_spaces(text)\n        } else {\n        \
    \    count = 0\n        }\n    }\n    return text\n}\n", "    // For each character\
    \ in text,\n    // if it is space,\n    //   if result string ends with \"_\"\
    , \n    //     add \"-\" to result\n    //   else if result string ends with \"\
    \ \",\n    //     add \"_\" to result\n    //   else\n    //     add \" \" to\
    \ result\n    // else\n    //   add character to result\n    var result string\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if len(result)\
    \ > 0 && result[len(result)-1] == '_' {\n                result += \"-\"\n   \
    \         } else if len(result) > 0 && result[len(result)-1] == ' ' {\n      \
    \          result += \"_\"\n            } else {\n                result += \"\
    \ \"\n            }\n        } else {\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n", "    var result string\n    rbyte := []byte(text)\n\
    \    var dashCount int\n    var tempCount int\n    var char byte\n    var last\
    \ byte\n    for _, char = range rbyte {\n        if char == ' ' {\n          \
    \  tempCount++\n            if last == ' ' {\n                if tempCount < 3\
    \ {\n                    result += \"_\"\n                } else {\n         \
    \           dashCount++\n                    if dashCount == 1 {\n           \
    \             result += \"-\"\n                    }\n                }\n    \
    \        } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            tempCount = 0\n            dashCount = 0\n            result\
    \ += string(char)\n        }\n        last = char\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
