name: HumanEval_155_even_odd_count
language: go_test.go
prompt: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an integer. return a list that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n\
  // >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int)\
  \ []interface{} {\n"
tests: "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
  \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
  \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
  \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
  \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n  \
  \   { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var evens, odds int\n\n    for num != 0 {\n        if num % 2 ==\
    \ 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \        num /= 10\n    }\n\n    return []interface{}{evens, odds}\n}\n", "  \
    \  even := 0\n    odd := 0\n    if num < 0 {\n        num = -num\n    }\n    if\
    \ num == 0 {\n        even += 1\n    }\n    for num > 0 {\n        if num % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n", " \
    \   even, odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n       \
    \     even++\n        } else {\n            odd++\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n  \
    \  for ; num > 0; num /= 10 {\n        digit := num % 10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n  \
    \  for num != 0 {\n        if num % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    return []interface{}{len(even_digits(num)), len(odd_digits(num))}\n\
    }\n", "    if num < 0 {\n        num = -num\n    }\n    odds := 0\n    evens :=\
    \ 0\n    for num > 0 {\n        if num % 2 == 0 {\n            evens++\n     \
    \   } else {\n            odds++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{evens, odds}\n}\n", "    even := 0\n    odd := 0\n    var result\
    \ []interface{}\n    for _, d := range fmt.Sprintf(\"%d\", num) {\n        if\
    \ d == '-' {\n            continue\n        }\n        if int(d - '0') % 2 ==\
    \ 0 {\n            even += 1\n        } else {\n            odd += 1\n       \
    \ }\n    }\n    result = append(result, even)\n    result = append(result, odd)\n\
    \    return result\n}\n", "    even_count := 0\n    odd_count := 0\n    for num\
    \ != 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else\
    \ {\n            odd_count++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n", "    // Your code here\n    var\
    \ even, odd int\n    var list []interface{}\n    if num > 0 {\n        for num\
    \ != 0 {\n            if num % 2 == 0 {\n                even += 1\n         \
    \   } else {\n                odd += 1\n            }\n            num /= 10\n\
    \        }\n    } else {\n        num = -1 * num\n        for num != 0 {\n   \
    \         if num % 2 == 0 {\n                even += 1\n            } else {\n\
    \                odd += 1\n            }\n            num /= 10\n        }\n \
    \   }\n    list = append(list, even)\n    list = append(list, odd)\n    return\
    \ list\n}\n", "    var count_even, count_odd int\n    for num > 0 {\n        if\
    \ num % 2 == 0 {\n            count_even++\n        } else {\n            count_odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{count_even, count_odd}\n\
    }\n", "    isNegative := false\n    if num < 0 {\n        isNegative = true\n\
    \        num = -num\n    }\n    evenCount := 0\n    oddCount := 0\n    for ; num\
    \ != 0; num /= 10 {\n        if num % 2 == 0 {\n            evenCount++\n    \
    \    } else {\n            oddCount++\n        }\n    }\n    if isNegative {\n\
    \        oddCount++\n    }\n    return []interface{}{evenCount, oddCount}\n}\n",
  "    even_count := 0\n    odd_count := 0\n    for {\n        if num == 0 {\n   \
    \         break\n        }\n        if (num % 10) % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n", "    even\
    \ := 0\n    odd := 0\n    nums := []int{}\n    for num > 0 {\n        nums = append(nums,\
    \ num % 10)\n        num /= 10\n    }\n    for _, n := range nums {\n        if\
    \ n % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n", "    // TODO: Implement\n\
    \    return nil\n}\n", "    even_count := 0\n    odd_count := 0\n    abs_num :=\
    \ abs(num)\n    for abs_num > 0 {\n        remainder := abs_num % 10\n       \
    \ if remainder % 2 == 0 {\n            even_count++\n        } else {\n      \
    \      odd_count++\n        }\n        abs_num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n", "    even, odd := 0, 0\n    return []interface{}{even, odd}\n\
    }\n", "    evenCount := 0\n    oddCount := 0\n    for num != 0 {\n        digit\
    \ := num % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n     \
    \   } else {\n            oddCount += 1\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{evenCount, oddCount}\n}\n", "    if num == 0 {\n   \
    \     return []interface{}{0, 0}\n    }\n    even := 0\n    odd := 0\n    for\
    \ num != 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    var even_digits = 0\n    var odd_digits = 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_digits++\n        } else {\n\
    \            odd_digits++\n        }\n        num /= 10\n    }\n    return []interface{}{even_digits,\
    \ odd_digits}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
