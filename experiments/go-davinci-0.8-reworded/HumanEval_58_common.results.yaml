language: go_test.go
name: HumanEval_58_common
results:
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    out := make([]int,\
    \ 0)\n\n    for _, e := range l1 {\n        m[e] = true\n    }\n\n    for _, e\
    \ := range l2 {\n        if m[e] {\n            out = append(out, e)\n       \
    \ }\n    }\n\n    return out\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpglknydq0_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpglknydq0_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpglknydq0_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                //\
    \ check if element already exists in result\n                elementExists :=\
    \ false\n                for _, v := range result {\n                    if v\
    \ == v1 {\n                        elementExists = true\n                    \
    \    break\n                    }\n                }\n                if !elementExists\
    \ {\n                    result = append(result, v1)\n                }\n    \
    \        }\n        }\n    }\n    // sort.Ints(result)\n    fmt.Println(result)\n\
    \    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 653 5]\n[3 2]\n[4 3 2]\n[]\n--- FAIL: TestCommon (0.00s)\n    --- FAIL:\
    \ TestCommon/test_num__0 (0.00s)\n        tmp4zrbiuru_test.go:53: expected '[%!s(int=1)\
    \ %!s(int=5) %!s(int=653)]', got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    ---\
    \ FAIL: TestCommon/test_num__1 (0.00s)\n        tmp4zrbiuru_test.go:53: expected\
    \ '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp4zrbiuru_test.go:53: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]int)\n    for _, item := range\
    \ l1 {\n        set[item] = item\n    }\n    result := make([]int, 0)\n    for\
    \ _, item := range l2 {\n        if _, ok := set[item]; ok {\n            result\
    \ = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpbebhnk2s_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpbebhnk2s_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpbebhnk2s_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    ml1 := make(map[int]int)\n\
    \    ml2 := make(map[int]int)\n    for _, elem := range l1 {\n        ml1[elem]\
    \ = elem\n    }\n    for _, elem := range l2 {\n        ml2[elem] = elem\n   \
    \ }\n    for key, _ := range ml1 {\n        if _, ok := ml2[key]; ok {\n     \
    \       res = append(res, key)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqbhvsckj_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpqbhvsckj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpqbhvsckj_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, val := range\
    \ l1 {\n        m[val] = true\n    }\n    res := make([]int, 0)\n    for _, val\
    \ := range l2 {\n        if m[val] {\n            res = append(res, val)\n   \
    \     }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1fwlj07x_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp1fwlj07x_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1fwlj07x_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var r []int\n    for _, i := range l1 {\n    \
    \    for _, j := range l2 {\n            if i == j {\n                r = append(r,\
    \ i)\n            }\n        }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpni166a09_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpni166a09_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpni166a09_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    ret := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            ret = append(ret, v)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphq_01rol_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphq_01rol_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphq_01rol_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    map1 := make(map[int]bool)\n    map2 := make(map[int]bool)\n\
    \    map3 := make(map[int]bool)\n    var ret []int\n    for _, n := range l1 {\n\
    \        map1[n] = true\n    }\n    for _, n := range l2 {\n        map2[n] =\
    \ true\n    }\n    for k, _ := range map1 {\n        if map2[k] {\n          \
    \  map3[k] = true\n        }\n    }\n    for k, _ := range map3 {\n        ret\
    \ = append(ret, k)\n    }\n    return ret\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpq2xhgsql_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpq2xhgsql_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpq2xhgsql_test.go:51: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    output := []int{}\n    longer, shorter := l1,\
    \ l2\n    if len(l1) < len(l2) {\n        longer, shorter = l2, l1\n    }\n  \
    \  sortedLonger := mergeSort(longer)\n    sortedShorter := mergeSort(shorter)\n\
    \    seen := map[int]bool{}\n    for _, v := range sortedShorter {\n        if\
    \ i := binarySearch(sortedLonger, v); i != -1 {\n            if !seen[i] {\n \
    \               output = append(output, sortedLonger[i])\n                seen[i]\
    \ = true\n            }\n        }\n    }\n    return output\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwm2_axeu_test.go:19:21: undefined: mergeSort

    /tmp/tmpwm2_axeu_test.go:20:22: undefined: mergeSort

    /tmp/tmpwm2_axeu_test.go:23:17: undefined: binarySearch

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    m := make(map[int]bool)\n \
    \   for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyjgz1acb_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyjgz1acb_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpyjgz1acb_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    if len(l1) == 1 {\n        if len(l2) == 1 {\n         \
    \   if l1[0] == l2[0] {\n                return l1\n            }\n          \
    \  return []int{}\n        }\n        return common(l2, l1)\n    }\n    if len(l2)\
    \ == 1 {\n        var ret []int\n        for _, i := range l1 {\n            if\
    \ i == l2[0] {\n                ret = append(ret, i)\n            }\n        }\n\
    \        return ret\n    }\n    // len(l1) > 1 && len(l2) > 1\n    if l1[0] ==\
    \ l2[0] {\n        return append([]int{l1[0]}, common(l1[1:], l2[1:])...)\n  \
    \  }\n    if l1[0] < l2[0] {\n        return common(l1[1:], l2)\n    }\n    return\
    \ common(l1, l2[1:])\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpoef4o3bq_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmpoef4o3bq_test.go:61: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpoef4o3bq_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    uniqueList := []int{}\n    for i, _ := range l1\
    \ {\n        for j, _ := range l2 {\n            if l1[i] == l2[j] {\n       \
    \         if !contains(uniqueList, l1[i]) {\n                    uniqueList =\
    \ append(uniqueList, l1[i])\n                }\n            }\n        }\n   \
    \ }\n    return uniqueList\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt09s49ee_test.go:18:21: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l3 := []int{}\n    for _, i := range l1 {\n  \
    \      if is_in(i, l2) {\n            l3 = append(l3, i)\n        }\n    }\n \
    \   return l3\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5kyg60tw_test.go:16:12: undefined: is_in

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common []int\n    var l2_map = make(map[int]int)\n\
    \    for _, e := range l2 {\n        l2_map[e] = e\n    }\n    for _, e := range\
    \ l1 {\n        if l2_map[e] > 0 {\n            common = append(common, e)\n \
    \       }\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpb355wbky_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpb355wbky_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpb355wbky_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // TODO: Implementation.\n    // return []int{}\n\
    \    return common2(l1, l2)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdarb0eo9_test.go:16:12: undefined: common2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // first sort both lists in increasing order\n\
    \    SortInts(l1)\n    SortInts(l2)\n    // result list\n    var r []int\n   \
    \ // pointers\n    i1 := 0\n    i2 := 0\n    // loop through both lists\n    for\
    \ (i1 < len(l1)) && (i2 < len(l2)) {\n        n1 := l1[i1]\n        n2 := l2[i2]\n\
    \        // if n1 is smaller add n1 to the result\n        if n1 < n2 {\n    \
    \        i1++\n        } else if n1 > n2 {\n            i2++\n        } else {\n\
    \            // add common element to the result\n            r = append(r, n1)\n\
    \            // move both pointers\n            i1++\n            i2++\n     \
    \   }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafnddn_w_test.go:15:5: undefined: SortInts

    /tmp/tmpafnddn_w_test.go:16:5: undefined: SortInts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // your code here\n    return []int{}\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp6gf5_sc0_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp6gf5_sc0_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp6gf5_sc0_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var intersection []int\n    var m = make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        if m[v] > 0 {\n            intersection = append(intersection, v)\n \
    \           m[v] = 0\n        }\n    }\n    return intersection\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmplsnnp58e_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmplsnnp58e_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmplsnnp58e_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    h := make(map[int]int)\n \
    \   for _, val := range l1 {\n        h[val]++\n    }\n    for _, val := range\
    \ l2 {\n        if _, ok := h[val]; ok {\n            res = append(res, val)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfrqqwcdm_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpfrqqwcdm_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpfrqqwcdm_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    res := make([]int, 0)\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3gojq449_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp3gojq449_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp3gojq449_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // return []int{}\n    return []int{}\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3d41xc1m_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp3d41xc1m_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp3d41xc1m_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) < len(l2) {\n        return common(l2,\
    \ l1)\n    }\n    // Map for quick look up for common elements.\n    // Python:\
    \ {key:value for value in l2}\n    m := make(map[int]bool)\n    for _, v := range\
    \ l2 {\n        m[v] = true\n    }\n    // List for sorting.\n    r := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        if m[v] {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjv70haf4_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjv70haf4_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjv70haf4_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]bool)\n    r := make([]int,\
    \ 0)\n    for _, i := range l1 {\n        s[i] = true\n    }\n    for _, i :=\
    \ range l2 {\n        if s[i] {\n            r = append(r, i)\n        }\n   \
    \ }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpvt1otbqn_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpvt1otbqn_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpvt1otbqn_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    for _, v1 := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v1 == v2 {\n                res\
    \ = append(res, v1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpojhk3a98_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpojhk3a98_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpojhk3a98_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    m := map[int]int{}\n    for\
    \ _, n := range l1 {\n        m[n]++\n    }\n    for _, n := range l2 {\n    \
    \    if m[n] > 0 {\n            res = append(res, n)\n            m[n] = 0\n \
    \       }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpdps6kli__test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpdps6kli__test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpdps6kli__test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        m[v] =\
    \ true\n    }\n    r := make([]int, 0, len(m))\n    for k, _ := range m {\n  \
    \      r = append(r, k)\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx07dh4zg_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=121) %!s(int=4) %!s(int=3) %!s(int=34) %!s(int=2) %!s(int=5) %!s(int=9)\
    \ %!s(int=1) %!s(int=653) %!s(int=7)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpx07dh4zg_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpx07dh4zg_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpx07dh4zg_test.go:44: expected '[]', got '[%!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073672
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    var res []int\n    for k, v := range m {\n        if v > 1 {\n     \
    \       res = append(res, k)\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmplc8hc3d8_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmplc8hc3d8_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmplc8hc3d8_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make([]int, 0)\n    set := make(map[int]bool)\n\
    \    for _, num := range l1 {\n        set[num] = true\n    }\n    for _, num\
    \ := range l2 {\n        if set[num] {\n            l = append(l, num)\n     \
    \   }\n    }\n    return l\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpv1pgvfs0_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpv1pgvfs0_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpv1pgvfs0_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, n := range l1 {\n        m[n]++\n    }\n    for _, n := range\
    \ l2 {\n        if v, ok := m[n]; ok && v > 0 {\n            result = append(result,\
    \ n)\n            m[n]--\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj6fp98wt_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpj6fp98wt_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpj6fp98wt_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n\n    for _, n1 := range l1 {\n\
    \        for _, n2 := range l2 {\n            if n1 == n2 {\n                ret\
    \ = append(ret, n1)\n            }\n        }\n    }\n\n    return ret\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpy9f44q9r_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpy9f44q9r_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpy9f44q9r_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set1 := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7pxlq3l6_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    ret := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range\
    \ l2 {\n        if c, ok := m[v]; ok && c > 0 {\n            ret = append(ret,\
    \ v)\n            m[v]--\n        }\n    }\n    return ret\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpf7xlurla_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpf7xlurla_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpf7xlurla_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l3 := []int{}\n    for i := 0; i < len(l1); i++\
    \ {\n        for j := 0; j < len(l2); j++ {\n            if l1[i] == l2[j] {\n\
    \                if l3 == nil {\n                    l3 = append(l3, l1[i])\n\
    \                } else {\n                    exists := false\n             \
    \       for k := 0; k < len(l3); k++ {\n                        if l3[k] == l1[i]\
    \ {\n                            exists = true\n                            break\n\
    \                        }\n                    }\n                    if !exists\
    \ {\n                        l3 = append(l3, l1[i])\n                    }\n \
    \               }\n            }\n        }\n    }\n    return l3\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpy5u6vk2k_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpy5u6vk2k_test.go:54: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpy5u6vk2k_test.go:54: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return []int{}\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps1i4bbx__test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmps1i4bbx__test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps1i4bbx__test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    fmt.Println(l1, l2)\n    return []int{}\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 4 3 34 653 2 5] [5 7 1 5 9 653 121]\n[5 3 2 8] [3 2]\n[4 3 2 8] [3 2\
    \ 4]\n[4 3 2 8] []\n--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0\
    \ (0.00s)\n        tmpb3jq3els_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpb3jq3els_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpb3jq3els_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return []int{}\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps1i4bbx__test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmps1i4bbx__test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps1i4bbx__test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    m := make(map[int]bool)\n\
    \    for _, num := range l1 {\n        m[num] = true\n    }\n    for _, num :=\
    \ range l2 {\n        if m[num] {\n            result = append(result, num)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4ncwj1e9_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4ncwj1e9_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp4ncwj1e9_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    hash := make(map[int]bool)\n\
    \    for _, item := range l1 {\n        hash[item] = true\n    }\n    for _, item\
    \ := range l2 {\n        if hash[item] {\n            result = append(result,\
    \ item)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpocjt1vk9_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpocjt1vk9_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpocjt1vk9_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    common := make([]int,\
    \ 0)\n    for _, n := range l1 {\n        m[n] = true\n    }\n    for _, n :=\
    \ range l2 {\n        if m[n] {\n            common = append(common, n)\n    \
    \    }\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyitjh15h_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyitjh15h_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpyitjh15h_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    lst := make([]int, 0)\n    for i := 0; i < len(l1);\
    \ i++ {\n        for j := 0; j < len(l2); j++ {\n            if l1[i] == l2[j]\
    \ {\n                lst = append(lst, l1[i])\n            }\n        }\n    }\n\
    \    return lst\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpsvr5qfk0_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpsvr5qfk0_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpsvr5qfk0_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    results := []int{}\n    l1_len := len(l1)\n  \
    \  l2_len := len(l2)\n    l1_max := l1_len - 1\n    l2_max := l2_len - 1\n   \
    \ if l1_len == 0 || l2_len == 0 {\n        return results\n    }\n\n    if l1_len\
    \ <= l2_len {\n        l1_max, l2_max = l2_max, l1_max\n        l1, l2 = l2, l1\n\
    \    }\n\n    for i := 0; i <= l1_max; i++ {\n        for j := 0; j <= l2_max;\
    \ j++ {\n            if l1[i] == l2[j] {\n                results = append(results,\
    \ l1[i])\n                break\n            }\n        }\n    }\n    return results\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpochzvp4g_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpochzvp4g_test.go:55: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpochzvp4g_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var m = make(map[int]int)\n    var result []int\n\
    \    for _, val := range l1 {\n        if val == 0 {\n            continue\n \
    \       }\n        m[val]++\n    }\n    for _, val := range l2 {\n        if val\
    \ == 0 {\n            continue\n        }\n        m[val]++\n    }\n    for key,\
    \ val := range m {\n        if val == 2 {\n            result = append(result,\
    \ key)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5h1xumj5_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmp5h1xumj5_test.go:52: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp5h1xumj5_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    lmap := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, val := range l1 {\n        lmap[val] = 1\n    }\n    for _, val\
    \ := range l2 {\n        if lmap[val] == 1 {\n            result = append(result,\
    \ val)\n            lmap[val] = 2\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5xbm205i_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp5xbm205i_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp5xbm205i_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort.Ints(l1)\n    sort.Ints(l2)\n    i := 0\n\
    \    j := 0\n    var result []int\n    for i < len(l1) && j < len(l2) {\n    \
    \    if l1[i] == l2[j] {\n            result = append(result, l1[i])\n       \
    \     i += 1\n            j += 1\n        } else if l1[i] < l2[j] {\n        \
    \    i += 1\n        } else {\n            j += 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhklazw7_test.go:14:5: undefined: sort

    /tmp/tmpjhklazw7_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    seen := make(map[int]bool)\n\
    \    for _, l := range l1 {\n        seen[l] = true\n    }\n    for _, l := range\
    \ l2 {\n        if seen[l] {\n            result = append(result, l)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5a7fgw6u_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp5a7fgw6u_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp5a7fgw6u_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    uniques := make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcgio4ed__test.go:14:29: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    result := make([]int, 0)\n    for k, v := range m {\n        if v >\
    \ 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp0pokvidm_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp0pokvidm_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp0pokvidm_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var i, j int\n    var r []int\n    for i < len(l1)\
    \ && j < len(l2) {\n        if l1[i] < l2[j] {\n            i++\n        } else\
    \ if l1[i] > l2[j] {\n            j++\n        } else {\n            if len(r)\
    \ == 0 || r[len(r)-1] != l1[i] {\n                r = append(r, l1[i])\n     \
    \       }\n            i++\n            j++\n        }\n    }\n    return r\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2eg5hqm2_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmp2eg5hqm2_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmp2eg5hqm2_test.go:48: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    res := make([]int,\
    \ 0)\n\n    // O(N)\n    for _, n := range l1 {\n        m[n] = true\n    }\n\n\
    \    // O(N)\n    for _, n := range l2 {\n        if _, ok := m[n]; ok {\n   \
    \         res = append(res, n)\n        }\n    }\n\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2naflj2k_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp2naflj2k_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp2naflj2k_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    var m = make(map[int]\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyygs1j7g_test.go:15:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073673
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var results []int\n    i, j := 0, 0\n    for ;\
    \ i < len(l1) && j < len(l2); {\n        if l1[i] == l2[j] {\n            if len(results)\
    \ == 0 || results[len(results)-1] != l1[i] {\n                results = append(results,\
    \ l1[i])\n            }\n            i++\n            j++\n        } else if l1[i]\
    \ < l2[j] {\n            i++\n        } else {\n            j++\n        }\n \
    \   }\n    return results\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3gx41sty_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmp3gx41sty_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmp3gx41sty_test.go:48: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) > len(l2) {\n        return common(l2,\
    \ l1)\n    }\n    var result []int\n    for _, i := range l1 {\n        for _,\
    \ j := range l2 {\n            if i == j {\n                result = append(result,\
    \ i)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpooojjq0s_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpooojjq0s_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpooojjq0s_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var ret []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            ret = append(ret, v)\n        }\n    }\n \
    \   return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8doewl_o_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8doewl_o_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8doewl_o_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var u = make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfo4wu_fr_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073674
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    ch := make(chan int)\n    go func() {\n      \
    \  for _, v := range l1 {\n            ch <- v\n        }\n        close(ch)\n\
    \    }()\n    mp := make(map[int]bool)\n    for _, v := range l2 {\n        mp[v]\
    \ = true\n    }\n    ret := make([]int, 0)\n    for v := range ch {\n        if\
    \ mp[v] {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphczv7wwh_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphczv7wwh_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphczv7wwh_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    values := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        values[v] = true\n    }\n    result := make([]int, 0)\n\
    \    for _, v := range l2 {\n        if values[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjge0z8fw_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjge0z8fw_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjge0z8fw_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    if l1 == nil || l2 == nil\
    \ {\n        return res\n    }\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpd_nn40jk_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpd_nn40jk_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpd_nn40jk_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var l []int\n    for _, v1 := range l1 {\n   \
    \     for _, v2 := range l2 {\n            if v1 == v2 {\n                l =\
    \ append(l, v1)\n            }\n        }\n    }\n    return l\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpxrul0c8d_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpxrul0c8d_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpxrul0c8d_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var nums []int\n    m := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        m[x] = true\n    }\n    for _, x := range\
    \ l2 {\n        if m[x] {\n            nums = append(nums, x)\n        }\n   \
    \ }\n    return nums\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpfek0bk9h_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpfek0bk9h_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpfek0bk9h_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var m map[int]int\n    m = make(map[int]int)\n\
    \    var res []int\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        if m[v] != 0 {\n            res = append(res, v)\n\
    \            m[v] = 0\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp40207j0l_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp40207j0l_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp40207j0l_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073675
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Create a map of the first slice.\n    m :=\
    \ make(map[int]int)\n    for _, v := range l1 {\n        m[v] = 1\n    }\n\n \
    \   // Store the common elements in a set.\n    var out = make(map[int]int)\n\
    \    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            out[v]\
    \ = 1\n        }\n    }\n\n    // Sort the unique elements and return the slice.\n\
    \    var keys []int\n    for k := range out {\n        keys = append(keys, k)\n\
    \    }\n    // TODO: sort.\n    return keys\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwezdoz3e_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwezdoz3e_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwezdoz3e_test.go:53: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    m := make(map[int]int)\n  \
    \  for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n\
    \        if m[v] == 1 {\n            res = append(res, v)\n            m[v]++\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqg37nfnz_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpqg37nfnz_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpqg37nfnz_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Collect counters for each element in the first\
    \ list.\n    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]\
    \ += 1\n    }\n\n    // Collect common elements from the second list.\n    var\
    \ result []int\n    for _, v := range l2 {\n        if m[v] > 0 {\n          \
    \  result = append(result, v)\n            m[v] -= 1\n        }\n    }\n\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwk_n0963_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwk_n0963_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwk_n0963_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        if val, ok := m[v]; ok && val == 1 {\n            result = append(result,\
    \ v)\n            m[v] = m[v] + 1\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp67kyq633_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp67kyq633_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp67kyq633_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common []int\n    for _, i := range l1 {\n\
    \        for _, j := range l2 {\n            if i == j {\n                common\
    \ = append(common, i)\n            }\n        }\n    }\n    return common\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp91mm0zy__test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp91mm0zy__test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp91mm0zy__test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpd4dtzsfy_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpd4dtzsfy_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpd4dtzsfy_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Fill the solution slice\n    m := make(map[int]int)\n\
    \    for _, val := range l1 {\n        m[val] = 1\n    }\n    for _, val := range\
    \ l2 {\n        if _, ok := m[val]; ok {\n            m[val] = 2\n        }\n\
    \    }\n    res := make([]int, 0)\n    for key, val := range m {\n        if val\
    \ == 2 {\n            res = append(res, key)\n        }\n    }\n    return res\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpgh17yrvl_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpgh17yrvl_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpgh17yrvl_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                res\
    \ = append(res, v1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpcbd3cb1h_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpcbd3cb1h_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpcbd3cb1h_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var m map[int]int\n    var res []int\n    m =\
    \ make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n    for\
    \ _, v := range l2 {\n        if m[v] > 0 {\n            res = append(res, v)\n\
    \            m[v] = 0\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpzo26l9ly_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpzo26l9ly_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpzo26l9ly_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        m[v] =\
    \ true\n    }\n    var r []int\n    for k, _ := range m {\n        r = append(r,\
    \ k)\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpee67559j_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=34) %!s(int=653) %!s(int=7) %!s(int=9) %!s(int=3)\
    \ %!s(int=2) %!s(int=5) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpee67559j_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpee67559j_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpee67559j_test.go:44: expected '[]', got '[%!s(int=8) %!s(int=4)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Using an empty map as an unordered set.\n \
    \   m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    common := make([]int, 0)\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            common = append(common, v)\n        }\n    }\n    return common\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp0tuv4znr_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp0tuv4znr_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp0tuv4znr_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return []int{}\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmps1i4bbx__test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmps1i4bbx__test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmps1i4bbx__test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var m = make(map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_lcdz06g_test.go:14:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073675
- exit_code: 0
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // sort lists\n    for i := 0; i < len(l1); i++\
    \ {\n        for j := i + 1; j < len(l1); j++ {\n            if l1[i] > l1[j]\
    \ {\n                l1[i], l1[j] = l1[j], l1[i]\n            }\n        }\n \
    \   }\n    for i := 0; i < len(l2); i++ {\n        for j := i + 1; j < len(l2);\
    \ j++ {\n            if l2[i] > l2[j] {\n                l2[i], l2[j] = l2[j],\
    \ l2[i]\n            }\n        }\n    }\n    // find common elements\n    var\
    \ res []int\n    i, j := 0, 0\n    for i < len(l1) && j < len(l2) {\n        if\
    \ l1[i] == l2[j] {\n            res = append(res, l1[i])\n            i, j = i\
    \ + 1, j + 1\n        } else if l1[i] < l2[j] {\n            i++\n        } else\
    \ {\n            j++\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpr90j5d_s_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpr90j5d_s_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpr90j5d_s_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Optimize code by reducing size of l1 to size\
    \ of l2\n    if len(l1) > len(l2) {\n        l1, l2 = l2, l1\n    }\n    // Sort\
    \ l1 and l2 in ascending order\n    sort(l1)\n    sort(l2)\n    // Process l1\n\
    \    // 1. Find the number of times each element repeats in l1\n    elementCount\
    \ := map[int]int{}\n    for _, element := range l1 {\n        elementCount[element]++\n\
    \    }\n    // Process l2\n    // 2. Find the elements that are common in l1 and\
    \ l2\n    commonElements := map[int]int{}\n    for _, element := range l2 {\n\
    \        if elementCount[element] > 0 {\n            commonElements[element]++\n\
    \        }\n    }\n    // 3. Sort elements of the list\n    commonElementList\
    \ := make([]int, len(commonElements))\n    i := 0\n    for element := range commonElements\
    \ {\n        commonElementList[i] = element\n        i++\n    }\n    sort(commonElementList)\n\
    \    return commonElementList\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn14focwi_test.go:19:5: undefined: sort

    /tmp/tmpn14focwi_test.go:20:5: undefined: sort

    /tmp/tmpn14focwi_test.go:42:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l3 := make([]int, 0)\n    for _, v1 := range l1\
    \ {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n            \
    \    l3 = append(l3, v1)\n            }\n        }\n    }\n    return l3\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpgmx1tlaf_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpgmx1tlaf_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpgmx1tlaf_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    var i, j int\n    var elem int\n    var result []int\n \
    \   for i < len(l1) && j < len(l2) {\n        if l1[i] < l2[j] {\n           \
    \ i++\n        } else if l1[i] > l2[j] {\n            j++\n        } else {\n\
    \            elem = l1[i]\n            result = append(result, elem)\n       \
    \     i++\n            j++\n            for i < len(l1) && l1[i] == elem {\n \
    \               i++\n            }\n            for j < len(l2) && l2[j] == elem\
    \ {\n                j++\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp988q4j4p_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmp988q4j4p_test.go:57: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmp988q4j4p_test.go:57: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := make(map[int]bool)\n    for _, e := range\
    \ l1 {\n        s[e] = true\n    }\n    var ret []int\n    for _, e := range l2\
    \ {\n        if s[e] {\n            ret = append(ret, e)\n        }\n    }\n \
    \   return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpnxfzq_v9_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpnxfzq_v9_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpnxfzq_v9_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    commonSet := make(map[int]int)\n    result :=\
    \ make([]int, 0)\n    for _, v := range l1 {\n        commonSet[v] = 1\n    }\n\
    \    for _, v := range l2 {\n        if _, ok := commonSet[v]; ok {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4y50krjx_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4y50krjx_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp4y50krjx_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                if\
    \ !exists(result, v1) {\n                    result = append(result, v1)\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjb5ksx__test.go:18:21: undefined: exists

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // O(1) space, O(n) time\n    m := make(map[int]bool)\n\
    \    result := make([]int, 0)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n            m[v] = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpnulzepu1_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpnulzepu1_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpnulzepu1_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var c []int\n    for _, v1 := range l1 {\n   \
    \     for _, v2 := range l2 {\n            if v1 == v2 {\n                c =\
    \ append(c, v1)\n            }\n        }\n    }\n    return c\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp039uamz__test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp039uamz__test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp039uamz__test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    dict := make(map[int]bool)\n\
    \    for _, n := range l1 {\n        dict[n] = true\n    }\n    for _, n := range\
    \ l2 {\n        if dict[n] {\n            result = append(result, n)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwpevb56s_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwpevb56s_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwpevb56s_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    c := []int{}\n    if len(l1) < len(l2) {\n   \
    \     l1, l2 = l2, l1\n    }\n    for _, v := range l1 {\n        if !index(l2,\
    \ v) {\n            continue\n        }\n        if !index(c, v) {\n         \
    \   c = append(c, v)\n        }\n    }\n    return c\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp537gqcij_test.go:19:13: undefined: index

    /tmp/tmp537gqcij_test.go:22:13: undefined: index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // TODO: Replace this implementation with a correct\
    \ one.\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmppnljy0bb_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmppnljy0bb_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmppnljy0bb_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    l1_m := make(map[int]bool)\n\
    \    l2_m := make(map[int]bool)\n    for _, v := range l1 {\n        l1_m[v] =\
    \ true\n    }\n    for _, v := range l2 {\n        l2_m[v] = true\n    }\n   \
    \ for k, _ := range l1_m {\n        if l2_m[k] {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2lry9up__test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp2lry9up__test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    var m = make(map[int]bool)\n\
    \    for _, i := range l1 {\n        m[i] = true\n    }\n    for _, i := range\
    \ l2 {\n        if m[i] {\n            res = append(res, i)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpjjh7xf_t_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpjjh7xf_t_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpjjh7xf_t_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    // write code here\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_1g7tt_v_test.go:35: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp_1g7tt_v_test.go:35:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp_1g7tt_v_test.go:35: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, elem := range l1 {\n        set[elem] = true\n    }\n    for\
    \ _, elem := range l2 {\n        if set[elem] {\n            result = append(result,\
    \ elem)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpb2ydghfs_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpb2ydghfs_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpb2ydghfs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073677
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    r := []int{}\n    // TODO: return unique common\
    \ elements.\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpck_n590b_test.go:35: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpck_n590b_test.go:35:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpck_n590b_test.go:35: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l3 := []int{}\n    for _, v1 := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v1 == v2 {\n                l3\
    \ = append(l3, v1)\n            }\n        }\n    }\n    return l3\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpwxnrajfa_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpwxnrajfa_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpwxnrajfa_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // sort both lists\n    // create empty map (container\
    \ of any type)\n    // iterate over the sorted lists and\n    // store in map\
    \ only the values that are not already present\n    // finally return all keys\
    \ in the map\n    return nil\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpbd2zz4se_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpbd2zz4se_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpbd2zz4se_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // declare a map to store values of l1\n    l1Map\
    \ := make(map[int]bool)\n    for _, v := range l1 {\n        l1Map[v] = true\n\
    \    }\n\n    var common []int\n    for _, v := range l2 {\n        if l1Map[v]\
    \ {\n            common = append(common, v)\n        }\n    }\n\n    return common\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpihq5858o_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpihq5858o_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpihq5858o_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var a = make([]int, 0)\n    var b = make([]int,\
    \ 0)\n    for _, v := range l1 {\n        a = append(a, v)\n    }\n    for _,\
    \ v := range l2 {\n        b = append(b, v)\n    }\n    a = RemoveDuplicates(a)\n\
    \    b = RemoveDuplicates(b)\n    var res = make([]int, 0)\n    for _, v := range\
    \ a {\n        for _, w := range b {\n            if v == w {\n              \
    \  res = append(res, v)\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjygsh0jz_test.go:22:9: undefined: RemoveDuplicates

    /tmp/tmpjygsh0jz_test.go:23:9: undefined: RemoveDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // insert your code here\n    return nil\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc58vzj5l_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpc58vzj5l_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpc58vzj5l_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    l1 = sort(l1)\n    l2 = sort(l2)\n    count := 0\n    for\
    \ i, j := 0, 0; i < len(l1) && j < len(l2); {\n        if l1[i] == l2[j] {\n \
    \           count++\n            i++\n            j++\n        } else if l1[i]\
    \ < l2[j] {\n            i++\n        } else {\n            j++\n        }\n \
    \   }\n    result := make([]int, count)\n    for i, j := 0, 0; i < len(l1) &&\
    \ j < len(l2); {\n        if l1[i] == l2[j] {\n            result[i+j] = l1[i]\n\
    \            i++\n            j++\n        } else if l1[i] < l2[j] {\n       \
    \     i++\n        } else {\n            j++\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdsmp4is0_test.go:17:10: undefined: sort

    /tmp/tmpdsmp4is0_test.go:18:10: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    result := []int{}\n    for _, v1 := range l1 {\n       \
    \ for _, v2 := range l2 {\n            if v1 == v2 {\n                result =\
    \ append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp08mclsh5_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp08mclsh5_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp08mclsh5_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        m[v] = v\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; ok {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3d0j5ema_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp3d0j5ema_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp3d0j5ema_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    uniqs := []int{}\n    for _, value := range l1\
    \ {\n        for _, value2 := range l2 {\n            if value == value2 {\n \
    \               uniqs = append(uniqs, value)\n            }\n        }\n    }\n\
    \    //fmt.Println(uniqs)\n    return removeDuplicates(uniqs)\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrddhc_t_test.go:23:12: undefined: removeDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    var list []int\n \
    \   for _, i := range l1 {\n        m[i]++\n    }\n    for _, i := range l2 {\n\
    \        m[i]++\n    }\n    for k, v := range m {\n        if v > 1 {\n      \
    \      list = append(list, k)\n        }\n    }\n    return list\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp32nmdn8f_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp32nmdn8f_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp32nmdn8f_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var ret []int\n    var smaller []int\n    var\
    \ larger []int\n    if len(l1) <= len(l2) {\n        smaller = l1\n        larger\
    \ = l2\n    } else {\n        smaller = l2\n        larger = l1\n    }\n    m\
    \ := make(map[int]int)\n    for _, value := range smaller {\n        m[value]\
    \ = 0\n    }\n    for _, value := range larger {\n        if m[value] > 0 {\n\
    \            m[value] += 1\n        }\n    }\n    for key, value := range m {\n\
    \        if value > 0 {\n            ret = append(ret, key)\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1r9_y4qn_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp1r9_y4qn_test.go:57:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp1r9_y4qn_test.go:57: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    num_map := make(map[int]int)\n    for _, v :=\
    \ range l1 {\n        num_map[v] = 1\n    }\n    for _, v := range l2 {\n    \
    \    num_map[v] = num_map[v] + 1\n    }\n    result := make([]int, 0)\n    for\
    \ k, v := range num_map {\n        if v > 1 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7e8mefal_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp7e8mefal_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    dict := make(map[int]int)\n    for _, val := range\
    \ l1 {\n        dict[val]++\n    }\n    common_list := make([]int, 0)\n    for\
    \ _, val := range l2 {\n        if dict[val] != 0 {\n            common_list =\
    \ append(common_list, val)\n            dict[val] = 0\n        }\n    }\n    return\
    \ common_list\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprcehpqwe_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmprcehpqwe_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmprcehpqwe_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073678
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    r := []int{}\n    m := map[int]int{}\n    for\
    \ _, i := range l1 {\n        m[i] = 1\n    }\n    for _, i := range l2 {\n  \
    \      m[i] = m[i] + 1\n    }\n    for k, v := range m {\n        if v > 1 {\n\
    \            r = append(r, k)\n        }\n    }\n    return r\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8imugs39_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8imugs39_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp8imugs39_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, e := range l1 {\n        if _, ok := m[e]; !ok {\n          \
    \  m[e] = 1\n        } else {\n            m[e]++\n        }\n    }\n    for _,\
    \ e := range l2 {\n        if v, ok := m[e]; ok {\n            if v == 1 {\n \
    \               delete(m, e)\n            } else {\n                m[e]--\n \
    \           }\n            result = append(result, e)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpb8ojkosv_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpb8ojkosv_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpb8ojkosv_test.go:52: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    m := map[int]bool{}\n    for\
    \ _, n := range l1 {\n        m[n] = true\n    }\n    for _, n := range l2 {\n\
    \        if m[n] {\n            res = append(res, n)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpmbegdqtn_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpmbegdqtn_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpmbegdqtn_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    i, j := 0, 0\n    unique := []int{}\n    for {\n       \
    \ if l1[i] == l2[j] {\n            unique = append(unique, l1[i])\n          \
    \  for i < len(l1) && l1[i] == l1[i+1] {\n                i++\n            }\n\
    \            for j < len(l2) && l2[j] == l2[j+1] {\n                j++\n    \
    \        }\n            i++\n            j++\n        } else if l1[i] < l2[j]\
    \ {\n            i++\n        } else {\n            j++\n        }\n        if\
    \ i == len(l1) || j == len(l2) {\n            break\n        }\n    }\n    return\
    \ unique\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common({0xc0000c4608, 0x4, 0x203000?}, {0xc0000c45b0,\
    \ 0x3, 0x0?})\n\t/tmp/tmpzzqqu6xx_test.go:25 +0x186\ncommand-line-arguments_test.TestCommon(0x0?)\n\
    \t/tmp/tmpzzqqu6xx_test.go:51 +0x2a8\ntesting.tRunner(0xc0001a01a0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // YOUR CODE HERE\n    return []int{}\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp2orqb7yp_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp2orqb7yp_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp2orqb7yp_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    s := make([]int,\
    \ 0)\n    for _, n := range l1 {\n        m[n] = true\n    }\n    for _, n :=\
    \ range l2 {\n        if m[n] {\n            s = append(s, n)\n        }\n   \
    \ }\n    return s\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1ox1w3tq_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp1ox1w3tq_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1ox1w3tq_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, i := range l1 {\n\
    \        for _, j := range l2 {\n            if i == j {\n                result\
    \ = append(result, i)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpgaexey88_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpgaexey88_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpgaexey88_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    s := map[int]bool{}\n    for _, v := range l1\
    \ {\n        s[v] = true\n    }\n    res := []int{}\n    for _, v := range l2\
    \ {\n        if s[v] {\n            res = append(res, v)\n        }\n    }\n \
    \   quickSort(res)\n    return unique(res)\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mt_3uw7_test.go:24:5: undefined: quickSort

    /tmp/tmp9mt_3uw7_test.go:25:12: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    for _, v1 := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v1 == v2 {\n                res\
    \ = append(res, v1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpojhk3a98_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpojhk3a98_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpojhk3a98_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Use maps for sorting\n    dict := make(map[int]int)\n\
    \    for _, v := range l1 {\n        dict[v] = 0\n    }\n    for _, v := range\
    \ l2 {\n        dict[v] = 0\n    }\n    // Sort values\n    values := make([]int,\
    \ len(dict))\n    i := 0\n    for k := range dict {\n        values[i] = k\n \
    \       i++\n    }\n    sort(values)\n    // Retrieve unique common elements\n\
    \    unique := make([]int, 0)\n    isUnique := true\n    for _, v := range values\
    \ {\n        if isUnique {\n            unique = append(unique, v)\n        }\n\
    \        isUnique = true\n        for _, u := range unique {\n            if v\
    \ == u {\n                isUnique = false\n                break\n          \
    \  }\n        }\n    }\n    return unique\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmepenyzu_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    uniques := map[int]\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvrt1xlxb_test.go:14:24: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073679
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    sort(l1)\n    sort(l2)\n    c := make([]int, 0)\n\
    \    i, j := 0, 0\n    for i < len(l1) && j < len(l2) {\n        if l1[i] == l2[j]\
    \ {\n            c = append(c, l1[i])\n            i += 1\n            j += 1\n\
    \        } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n   \
    \         j += 1\n        }\n    }\n    return c\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbw6tmytf_test.go:14:5: undefined: sort

    /tmp/tmpbw6tmytf_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    s1 := 0\n    s2 := 0\n    // sort.Ints(l1)\n    // sort.Ints(l2)\n\
    \    result := []int{}\n    for {\n        if l1[s1] == l2[s2] {\n           \
    \ result = append(result, l1[s1])\n            s1 += 1\n            s2 += 1\n\
    \        } else if l1[s1] < l2[s2] {\n            s1 += 1\n        } else {\n\
    \            s2 += 1\n        }\n        if s1 >= len(l1) || s2 >= len(l2) {\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp6vbupojy_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmp6vbupojy_test.go:55: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmp6vbupojy_test.go:55: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var comm []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                comm\
    \ = append(comm, v1)\n            }\n        }\n    }\n    fmt.Println(comm)\n\
    \    return comm\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 653 5 5]\n[3 2]\n[4 3 2]\n[]\n--- FAIL: TestCommon (0.00s)\n    ---\
    \ FAIL: TestCommon/test_num__0 (0.00s)\n        tmpozy2dhsr_test.go:42: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=653)]', got '[%!s(int=1) %!s(int=653) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpozy2dhsr_test.go:42:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestCommon/test_num__2 (0.00s)\n        tmpozy2dhsr_test.go:42: expected '[%!s(int=2)\
    \ %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var common []int\n    for _, val1 := range l1\
    \ {\n        for _, val2 := range l2 {\n            if val1 == val2 {\n      \
    \          if !contains(common, val1) {\n                    common = append(common,\
    \ val1)\n                }\n            }\n        }\n    }\n    return common\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqb7xxwri_test.go:18:21: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // TODO: Write your code here\n    return []int{}\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpa60moare_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpa60moare_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpa60moare_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    unique := map[int]bool{}\n    var c []int\n  \
    \  for _, value := range l1 {\n        unique[value] = true\n    }\n    for _,\
    \ value := range l2 {\n        if unique[value] {\n            c = append(c, value)\n\
    \        }\n    }\n    return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpg9i598_5_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpg9i598_5_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpg9i598_5_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var r []int\n    var l = make(map[int]int)\n \
    \   for _, v := range l1 {\n        l[v] = 0\n    }\n    for _, v := range l2\
    \ {\n        if _, ok := l[v]; ok {\n            l[v]++\n        }\n    }\n  \
    \  for k, v := range l {\n        if v == 0 {\n            r = append(r, k)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpev8jqjcg_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=34) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpev8jqjcg_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpev8jqjcg_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmpev8jqjcg_test.go:48:\
    \ expected '[]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1 = unique(l1)\n    l2 = unique(l2)\n    l1Set\
    \ := make(map[int]bool)\n    for _, n := range l1 {\n        l1Set[n] = true\n\
    \    }\n    res := make([]int, 0)\n    for _, n := range l2 {\n        if l1Set[n]\
    \ {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpud61ymrb_test.go:14:10: undefined: unique

    /tmp/tmpud61ymrb_test.go:15:10: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    list := make([]int, 0)\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            list = append(list, v)\n        }\n\
    \    }\n    return list\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp6gdn8xot_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp6gdn8xot_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp6gdn8xot_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    var out []int\n    for k, v := range m {\n        if v == 2 {\n    \
    \        out = append(out, k)\n        }\n    }\n    return out\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpv8unrmaq_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpv8unrmaq_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmpv8unrmaq_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        set[v] = 0\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := set[v]; ok {\n            set[v]++\n        }\n    }\n    // convert set\
    \ to sorted list\n    var list []int\n    for k, _ := range set {\n        list\
    \ = append(list, k)\n    }\n    l := len(list)\n    for i := 0; i < l; i++ {\n\
    \        for j := i+1; j < l; j++ {\n            if list[i] > list[j] {\n    \
    \            list[i], list[j] = list[j], list[i]\n            }\n        }\n \
    \   }\n    return list\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1qfs3_5m_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=34) %!s(int=653)]'\n\
    \    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp1qfs3_5m_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n\
    \    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp1qfs3_5m_test.go:55:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3 (0.00s)\n        tmp1qfs3_5m_test.go:55:\
    \ expected '[]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=8)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    ret := []int{}\n    m := map[int]bool{}\n    for\
    \ _, e := range l1 {\n        m[e] = true\n    }\n    for _, e := range l2 {\n\
    \        if m[e] {\n            ret = append(ret, e)\n        }\n    }\n    ret\
    \ = uniq(ret)\n    return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaz6_4b7a_test.go:24:11: undefined: uniq

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073680
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    var result []int\n\
    \    for _, i := range l1 {\n        set[i] = true\n    }\n    for _, i := range\
    \ l2 {\n        if set[i] {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_ysie6uf_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp_ysie6uf_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp_ysie6uf_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    len_l1 := len(l1)\n    len_l2 := len(l2)\n   \
    \ len_max := len_l1\n    if len_l2 > len_l1 {\n        len_max = len_l2\n    }\n\
    \    result := make([]int, 0, len_max)\n    if len_l1 == 0 || len_l2 == 0 {\n\
    \        return result\n    }\n    if len_l1 == 1 && len_l2 == 1 {\n        if\
    \ l1[0] == l2[0] {\n            result = append(result, l1[0])\n        }\n  \
    \      return result\n    }\n    c1 := l1[len_l1 / 2]\n    c2 := l2[len_l2 / 2]\n\
    \    if c1 == c2 {\n        result = append(result, c1)\n    }\n    if c1 <= c2\
    \ {\n        result = append(result, common(l1[len_l1 / 2:], l2[:len_l2 / 2])...)\n\
    \    } else {\n        result = append(result, common(l1[:len_l1 / 2], l2[len_l2\
    \ / 2:])...)\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4dawuu7i_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmp4dawuu7i_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp4dawuu7i_test.go:59: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var t = make(map[int]int)\n    var r = make([]int,\
    \ 0)\n    for _, v := range l1 {\n        t[v] = v\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := t[v]; ok {\n            r = append(r, v)\n       \
    \ }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpnbk6tu6e_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpnbk6tu6e_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpnbk6tu6e_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    res := make([]int,\
    \ 0)\n    for _, i := range l1 {\n        set[i] = true\n    }\n    for _, i :=\
    \ range l2 {\n        if set[i] {\n            res = append(res, i)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp7uzyums7_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp7uzyums7_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp7uzyums7_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    for _,v := range l1 {\n        for k,vv := range\
    \ l2 {\n            if v == vv {\n                l2 = append(l2[:k], l2[k+1:]...)\n\
    \            }\n        }\n    }\n    return l2\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp8nm2qohu_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=7) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp8nm2qohu_test.go:40: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmp8nm2qohu_test.go:40:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    for _, value := range l1\
    \ {\n        for _, value2 := range l2 {\n            if value == value2 {\n \
    \               result = append(result, value)\n            }\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp48u_javd_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp48u_javd_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp48u_javd_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var l []int\n    x := 0\n    y := 0\n    for x\
    \ < len(l1) && y < len(l2) {\n        if l1[x] == l2[y] {\n            l = append(l,\
    \ l1[x])\n            x++\n            y++\n        } else if l1[x] < l2[y] {\n\
    \            x++\n        } else {\n            y++\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpi7dv30jl_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmpi7dv30jl_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmpi7dv30jl_test.go:47: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    var result []int\n    i := 0\n    j := 0\n    for i < len(l1)\
    \ && j < len(l2) {\n        if l1[i] == l2[j] {\n            result = append(result,\
    \ l1[i])\n            i++\n            j++\n        } else if l1[i] < l2[j] {\n\
    \            i++\n        } else {\n            j++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpbrgd3uxp_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmpbrgd3uxp_test.go:50: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmpbrgd3uxp_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    res := make([]int, 0)\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3gojq449_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp3gojq449_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp3gojq449_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    if len(l1) > len(l2) {\n        l1, l2 = l2, l1\n    }\n\
    \    m := make(map[int]bool)\n    c := make([]int, 0)\n    for _, e := range l1\
    \ {\n        m[e] = true\n    }\n    for _, e := range l2 {\n        if m[e] {\n\
    \            c = append(c, e)\n            m[e] = false\n        }\n    }\n  \
    \  return c\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp3x2c_3wg_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp3x2c_3wg_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp3x2c_3wg_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) > len(l2) {\n        l1, l2 = l2, l1\n\
    \    }\n    uniq := make(map[int]\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfhhol8gg_test.go:17:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073681
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    m := map[int]int{}\n    for\
    \ _,v := range l1 {\n        m[v] = 0\n    }\n    for _,v := range l2 {\n    \
    \    if _,ok := m[v]; ok {\n            m[v]++\n        }\n    }\n    for k,v\
    \ := range m {\n        if v != 0 {\n            res = append(res, k)\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx0w8u8u7_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx0w8u8u7_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpx0w8u8u7_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmprw8oga4u_test.go:34: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmprw8oga4u_test.go:34:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmprw8oga4u_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    //  Iterate list 1 and store unique elements into a map\n    for _,\
    \ v := range l1 {\n        m[v] = true\n    }\n    //  Iterate list 2 and verify\
    \ if elements are in the map.\n    //  Store common elements into result list.\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp53kk0mp2_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp53kk0mp2_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp53kk0mp2_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    r := []int{}\n    mp := make(map[int]bool)\n \
    \   for _, e := range l1 {\n        mp[e] = true\n    }\n    for _, e := range\
    \ l2 {\n        if mp[e] {\n            r = append(r, e)\n        }\n    }\n \
    \   return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk8td497q_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk8td497q_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpk8td497q_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, n := range\
    \ l1 {\n        m[n]++\n    }\n    for _, n := range l2 {\n        m[n]++\n  \
    \  }\n    res := make([]int, 0)\n    for k, v := range m {\n        if v == 2\
    \ {\n            res = append(res, k)\n        }\n    }\n    return res\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmparr4_q7a_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmparr4_q7a_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n        tmparr4_q7a_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    slice := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        if _, ok := m[v]; !ok {\n          \
    \  m[v] = v\n        }\n    }\n    for _, v := range l2 {\n        if _, ok :=\
    \ m[v]; ok {\n            slice = append(slice, v)\n        }\n    }\n    return\
    \ slice\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpsrluzo44_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpsrluzo44_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpsrluzo44_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    l := make([]int, 0)\n    for k, v := range m {\n        if v == 2 {\n\
    \            l = append(l, k)\n        }\n    }\n    return l\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5ep77bsd_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp5ep77bsd_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    if len(l1) == 0 || len(l2)\
    \ == 0 {\n        return res\n    }\n    maxLen := len(l1)\n    var i = 0\n  \
    \  var j = 0\n    if len(l2) > maxLen {\n        maxLen = len(l2)\n    }\n   \
    \ for i < maxLen && j < maxLen {\n        for j < maxLen && l1[i] < l2[j] {\n\
    \            j++\n        }\n        if j < maxLen && l1[i] == l2[j] {\n     \
    \       res = append(res, l1[i])\n            j++\n        }\n        i++\n  \
    \  }\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.common({0xc0000c45c8, 0x4, 0x203000?}, {0xc0000c45a0,\
    \ 0x2, 0x0?})\n\t/tmp/tmpaj0kkas0_test.go:25 +0x1a8\ncommand-line-arguments_test.TestCommon(0x0?)\n\
    \t/tmp/tmpaj0kkas0_test.go:45 +0x1ed\ntesting.tRunner(0xc0001124e0, 0x529000)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                res\
    \ = append(res, v1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpcbd3cb1h_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpcbd3cb1h_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpcbd3cb1h_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073676
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    // XXX finish this\n   \
    \ return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqe1etyjg_test.go:35: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpqe1etyjg_test.go:35:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpqe1etyjg_test.go:35: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    ll1 := len(l1)\n    ll2 := len(l2)\n    if ll1 > ll2 {\n\
    \        l1, l2 = l2, l1\n        ll1, ll2 = ll2, ll1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    var result []int\n   \
    \ for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            m[v]++\n\
    \            if m[v] == 2 {\n                result = append(result, v)\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_h0jcxvl_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp_h0jcxvl_test.go:55: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp_h0jcxvl_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073682
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1 = unique(l1)\n    l2 = unique(l2)\n    var\
    \ answer []int\n    for _, e1 := range l1 {\n        for _, e2 := range l2 {\n\
    \            if e1 == e2 {\n                answer = append(answer, e1)\n    \
    \        }\n        }\n    }\n    return answer\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxl0u0ez_test.go:14:10: undefined: unique

    /tmp/tmpwxl0u0ez_test.go:15:10: undefined: unique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ nil\n    }\n    l1 = sortList(l1)\n    l2 = sortList(l2)\n    if l1[0] > l2[len(l2)-1]\
    \ || l2[0] > l1[len(l1)-1] {\n        return nil\n    }\n    var result []int\n\
    \    var j int\n    for i, v := range l1 {\n        if i != 0 && v == l1[i-1]\
    \ {\n            continue\n        }\n        for j < len(l2) && l2[j] < v {\n\
    \            j++\n        }\n        if j < len(l2) && l2[j] == v {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0g6gxgeq_test.go:17:10: undefined: sortList

    /tmp/tmp0g6gxgeq_test.go:18:10: undefined: sortList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073682
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    r := make([]int, 0)\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpigekffvw_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpigekffvw_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpigekffvw_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    uniq := make(map[int]int)\n    for _, i := range\
    \ l1 {\n        uniq[i] = i\n    }\n    for _, i := range l2 {\n        uniq[i]\
    \ = i\n    }\n    res := make([]int, 0, len(uniq))\n    for _, i := range uniq\
    \ {\n        res = append(res, i)\n    }\n    return res\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4y26wlxp_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=121) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=34) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4y26wlxp_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp4y26wlxp_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=8) %!s(int=4) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmp4y26wlxp_test.go:44: expected '[]', got '[%!s(int=2) %!s(int=8)\
    \ %!s(int=4) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 0
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Make 2 lookup maps of the values.\n    m1 :=\
    \ make(map[int]bool)\n    m2 := make(map[int]bool)\n    for _, val := range l1\
    \ {\n        m1[val] = true\n    }\n    for _, val := range l2 {\n        m2[val]\
    \ = true\n    }\n\n    // Make a slice of the keys that are in both maps.\n  \
    \  var common []int\n    for k := range m1 {\n        if m2[k] {\n           \
    \ common = append(common, k)\n        }\n    }\n\n    // Sort the slice (optional).\n\
    \    for i := 0; i < len(common); i++ {\n        for j := i + 1; j < len(common);\
    \ j++ {\n            if common[i] > common[j] {\n                temp := common[i]\n\
    \                common[i] = common[j]\n                common[j] = temp\n   \
    \         }\n        }\n    }\n\n    return common\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var (\n        ll1 = len(l1)\n        ll2 = len(l2)\n\
    \        res = make([]int, 0)\n    )\n    if ll1 <= 0 || ll2 <= 0 {\n        return\
    \ res\n    }\n    if ll1 > ll2 {\n        l1, l2 = l2, l1\n        ll1, ll2 =\
    \ ll2, ll1\n    }\n    for i := 0; i < ll1; i++ {\n        for j := 0; j < ll2;\
    \ j++ {\n            if l1[i] == l2[j] {\n                res = append(res, l1[i])\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyjgh1zr4_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyjgh1zr4_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpyjgh1zr4_test.go:53: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1m := map[int]bool{}\n    l2m := map[int]bool{}\n\
    \    for _, v := range l1 {\n        l1m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        l2m[v] = true\n    }\n    var res []int\n    for v := range l1m\
    \ {\n        if l2m[v] {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp_z_b8nmf_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp_z_b8nmf_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp_z_b8nmf_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var list1, list2 []int\n    if len(l1) > len(l2)\
    \ {\n        list1 = l1\n        list2 = l2\n    } else {\n        list1 = l2\n\
    \        list2 = l1\n    }\n    var result []int\n    m := make(map[int]bool)\n\
    \    for _, val := range list1 {\n        m[val] = true\n    }\n    for _, val\
    \ := range list2 {\n        if m[val] {\n            result = append(result, val)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n \
    \ candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp6tkozonz_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp6tkozonz_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp6tkozonz_test.go:51: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    return nil\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpj2km8avz_test.go:33: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpj2km8avz_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpj2km8avz_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    // Iterate over the\
    \ l1 in reverse and build a map of integers:true\n    for i := len(l1) - 1; i\
    \ >= 0; i-- {\n        m[l1[i]] = true\n    }\n    // Iterate over the l2 and\
    \ collect the elements which exist in the map\n    var result []int\n    for i\
    \ := 0; i < len(l2); i++ {\n        if m[l2[i]] {\n            result = append(result,\
    \ l2[i])\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpv_h08owe_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpv_h08owe_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpv_h08owe_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    res := []int{}\n    for _, e1 := range l1 {\n\
    \        for _, e2 := range l2 {\n            if e1 == e2 {\n                res\
    \ = append(res, e1)\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpk826k7zp_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpk826k7zp_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpk826k7zp_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    var set map[int]bool = make(map[int]bool)\n    var i, j\
    \ int = 0, 0\n    var slice []int = []int{}\n    for i < len(l1) && j < len(l2)\
    \ {\n        if l1[i] == l2[j] {\n            if _, ok := set[l1[i]]; !ok {\n\
    \                slice = append(slice, l1[i])\n                set[l1[i]] = true\n\
    \            }\n            i++\n            j++\n        } else if l1[i] < l2[j]\
    \ {\n            i++\n        } else {\n            j++\n        }\n    }\n  \
    \  return slice\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpv3yuj45o_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmpv3yuj45o_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmpv3yuj45o_test.go:53: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1_map := make(map[int]bool)\n    for _, n :=\
    \ range l1 {\n        l1_map[n] = true\n    }\n    l2_map := make(map[int]bool)\n\
    \    for _, n := range l2 {\n        l2_map[n] = true\n    }\n    result := make([]int,\
    \ 0)\n    for i, _ := range l1_map {\n        if l2_map[i] {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpi9eu1bbu_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpi9eu1bbu_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    //In the case that l1 is\
    \ empty, the below code will not be executed\n    //In the case that l2 is empty,\
    \ the below code will not be executed\n    if (len(l1) > 0) && (len(l2) > 0) {\n\
    \        for _, a := range l1 {\n            for _, b := range l2 {\n        \
    \        if a == b {\n                    result = append(result, a)\n       \
    \         }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp4axe5mem_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp4axe5mem_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp4axe5mem_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, v := range l1 {\n        if _, ok := m[v]; !ok {\n          \
    \  m[v] = 1\n        }\n    }\n    for _, v := range l2 {\n        if _, ok :=\
    \ m[v]; ok {\n            m[v] = m[v] + 1\n        }\n    }\n    for k, v := range\
    \ m {\n        if v > 1 {\n            result = append(result, k)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpc3wlbhi2_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpc3wlbhi2_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpc3wlbhi2_test.go:50: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073683
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // length of both lists\n    m := len(l1)\n  \
    \  n := len(l2)\n\n    l := make([]int, m)\n    p := 0\n\n    // we don't want\
    \ to sort in place,\n    // as we need to return the original lists\n    c1 :=\
    \ make([]int, m)\n    copy(c1, l1)\n    sort(c1)\n\n    c2 := make([]int, n)\n\
    \    copy(c2, l2)\n    sort(c2)\n\n    i := 0\n    j := 0\n    for i < m && j\
    \ < n {\n        if c1[i] == c2[j] {\n            l[p] = c1[i]\n            p++\n\
    \            i++\n            j++\n        } else if c1[i] < c2[j] {\n       \
    \     i++\n        } else {\n            j++\n        }\n    }\n\n    return l[:p]\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe8_mievs_test.go:25:5: undefined: sort

    /tmp/tmpe8_mievs_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n  \
    \  }\n    var r []int\n    for k, v := range m {\n        if v > 1 {\n       \
    \     r = append(r, k)\n        }\n    }\n    return r\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp5oven3wc_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=653) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmp5oven3wc_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]int)\n    for _, i := range\
    \ l1 {\n        m[i] = 1\n    }\n    for _, i := range l2 {\n        if m[i] ==\
    \ 1 {\n            m[i] = 2\n        }\n    }\n    common := make([]int, 0)\n\
    \    for i, j := range m {\n        if j == 2 {\n            common = append(common,\
    \ i)\n        }\n    }\n    return common\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp9bcl3fji_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp9bcl3fji_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp9bcl3fji_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    ll := make([]int, 0)\n    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        if _, ok := m[v]; !ok {\n            m[v]\
    \ = 1\n        }\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ ok {\n            ll = append(ll, v)\n        }\n    }\n    return ll\n}\n\n\
    func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmptv9_jk18_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmptv9_jk18_test.go:45: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmptv9_jk18_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l := make([]int, 0)\n    for _, n1 := range l1\
    \ {\n        for _, n2 := range l2 {\n            if n1 == n2 {\n            \
    \    l = append(l, n1)\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpu7e0ztkp_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpu7e0ztkp_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpu7e0ztkp_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    cache := make(map[int]int)\n    result := make([]int,\
    \ 0)\n    for _, val := range l1 {\n        cache[val]++\n    }\n    for _, val\
    \ := range l2 {\n        if count, ok := cache[val]; ok && count > 0 {\n     \
    \       result = append(result, val)\n            cache[val]--\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp90pxm9uu_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp90pxm9uu_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp90pxm9uu_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // create a map with all elements of l1\n    unique\
    \ := make(map[int]\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcwsnlp_e_test.go:15:28: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073683
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    r := make([]int, 0)\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpigekffvw_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpigekffvw_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpigekffvw_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var commonList []int\n    for _, e1 := range l1\
    \ {\n        for _, e2 := range l2 {\n            if e1 == e2 {\n            \
    \    commonList = append(commonList, e1)\n            }\n        }\n    }\n  \
    \  return commonList\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp48nm1xvr_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp48nm1xvr_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp48nm1xvr_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    res := make([]int,\
    \ 0)\n    for _, val := range l1 {\n        set[val] = true\n    }\n    for _,\
    \ val := range l2 {\n        if set[val] {\n            res = append(res, val)\n\
    \        }\n    }\n    for i := 0; i < len(res); i++ {\n        for j := i + 1;\
    \ j < len(res); j++ {\n            if res[i] > res[j] {\n                tmp :=\
    \ res[i]\n                res[i] = res[j]\n                res[j] = tmp\n    \
    \        }\n        }\n    }\n    return res\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpqxx7je0a_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=5) %!s(int=653)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var r []int\n    m := make(map[int]int)\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    if m[v] > 0 {\n            r = append(r, v)\n            m[v] = 0\n     \
    \   }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpohfaf56t_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpohfaf56t_test.go:44: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpohfaf56t_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpr90j5d_s_test.go:41: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpr90j5d_s_test.go:41: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpr90j5d_s_test.go:41: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    res := make([]int,\
    \ 0)\n\n    for _, v := range l1 {\n        m[v] = true\n    }\n\n    for _, v\
    \ := range l2 {\n        if _, ok := m[v]; ok {\n            res = append(res,\
    \ v)\n        }\n    }\n\n    return res\n}\n\nfunc TestCommon(t *testing.T) {\n\
    \  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4,\
    \ 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653}\
    \ },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2,\
    \ 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected:\
    \ []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpxpicyyz__test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpxpicyyz__test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpxpicyyz__test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) > len(l2) {\n        l1, l2 = l2, l1\n\
    \    }\n    ret := make([]int, 0, len(l1))\n    for _, n := range l1 {\n     \
    \   if find(l2, n) {\n            ret = append(ret, n)\n        }\n    }\n   \
    \ return ret\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2nr6uvi_test.go:19:12: undefined: find

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    m := make(map[int]bool)\n\
    \    for _, e := range l1 {\n        m[e] = true\n    }\n    for _, e := range\
    \ l2 {\n        if m[e] {\n            result = append(result, e)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpeet8ubwa_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpeet8ubwa_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpeet8ubwa_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    i1 := 0\n    i2 := 0\n    r := []int{}\n    for\
    \ i1 < len(l1) && i2 < len(l2) {\n        v1 := l1[i1]\n        v2 := l2[i2]\n\
    \        if v1 == v2 {\n            r = append(r, v1)\n            i1++\n    \
    \        i2++\n        } else if v1 < v2 {\n            i1++\n        } else {\n\
    \            i2++\n        }\n    }\n    return r\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmptx5u6wps_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n       \
    \ tmptx5u6wps_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    ---\
    \ FAIL: TestCommon/test_num__2 (0.00s)\n        tmptx5u6wps_test.go:49: expected\
    \ '[%!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    m := make(map[int]bool)\n \
    \   for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpyjgz1acb_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpyjgz1acb_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpyjgz1acb_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073606
- exit_code: 2
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) == 0 || len(l2) == 0 {\n        return\
    \ []int{}\n    }\n    set1 := set(l1)\n    set2 := set(l2)\n    if len(set1) <\
    \ len(set2) {\n        return commonUnique(set1, set2)\n    }\n    return commonUnique(set2,\
    \ set1)\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tc3epsq_test.go:17:13: undefined: set

    /tmp/tmp4tc3epsq_test.go:18:13: undefined: set

    /tmp/tmp4tc3epsq_test.go:20:16: undefined: commonUnique

    /tmp/tmp4tc3epsq_test.go:22:12: undefined: commonUnique

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073684
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var res []int\n    if len(l1) == 0 || len(l2)\
    \ == 0 {\n        return res\n    }\n    m := make(map[int]int)\n    for _, v\
    \ := range l1 {\n        m[v] = v\n    }\n    for _, v := range l2 {\n       \
    \ if _, ok := m[v]; ok {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5},\
    \ []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmphoh5fubg_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmphoh5fubg_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmphoh5fubg_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if l1 == nil || l2 == nil {\n        return nil\n\
    \    }\n    short, long := l1, l2\n    if len(l1) > len(l2) {\n        short,\
    \ long = l2, l1\n    }\n    var result []int\n    hashMap := make(map[int]bool)\n\
    \    for _, v := range short {\n        hashMap[v] = true\n    }\n    for _, v\
    \ := range long {\n        if hashMap[v] {\n            result = append(result,\
    \ v)\n            hashMap[v] = false\n        }\n    }\n    return result\n}\n\
    \nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpw96oo0zd_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpw96oo0zd_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpw96oo0zd_test.go:51: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // from list 1, build a map of values\n    m :=\
    \ make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n    }\n\
    \n    // build output list of common elements\n    o := make([]int, 0)\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            o = append(o, v)\n      \
    \  }\n    }\n\n    return o\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate\
    \ := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpx5dbz1cd_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpx5dbz1cd_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpx5dbz1cd_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    // Implement your solution here\n\n    return\
    \ []int{}\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpovaa93gf_test.go:35: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n        tmpovaa93gf_test.go:35:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestCommon/test_num__2\
    \ (0.00s)\n        tmpovaa93gf_test.go:35: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    if len(l1) > len(l2) {\n        l1, l2 = l2, l1\n\
    \    }\n    s := make([]int, 0, len(l1))\n    c := make(map[int]int)\n    for\
    \ _, v := range l1 {\n        c[v]++\n    }\n    for _, v := range l2 {\n    \
    \    c[v]++\n    }\n    for k, v := range c {\n        if v > 1 {\n          \
    \  s = append(s, k)\n        }\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpr6d9jq2k_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=1) %!s(int=653) %!s(int=5)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpr6d9jq2k_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpr6d9jq2k_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5,\
    \ 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpuw2zxkpw_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpuw2zxkpw_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpuw2zxkpw_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073540
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    result := []int{}\n    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        m[v] += 1\n    }\n    for k, v := range m {\n        if v > 1 {\n\
    \            result = append(result, k)\n        }\n    }\n    return result\n\
    }\n\nfunc TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9,\
    \ 653, 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5,\
    \ 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpf2t3suyz_test.go:46: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpf2t3suyz_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpf2t3suyz_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    l1Map := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        l1Map[v] = 1\n    }\n    l2Map := make(map[int]int)\n    for _,\
    \ v := range l2 {\n        l2Map[v] = 1\n    }\n    result := make([]int, 0)\n\
    \    for k, _ := range l1Map {\n        if _, ok := l2Map[k]; ok {\n         \
    \   result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
    \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
    \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
    \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpzm7r88gv_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=653) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpzm7r88gv_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpzm7r88gv_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    uniqL1 := make(map[int]bool)\n\
    \    uniqL2 := make(map[int]bool)\n    for _, v := range l1 {\n        uniqL1[v]\
    \ = true\n    }\n    for _, v := range l2 {\n        uniqL2[v] = true\n    }\n\
    \    for k, _ := range uniqL1 {\n        if uniqL2[k] {\n            result =\
    \ append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t\
    \ *testing.T) {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmp1c50u575_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmp1c50u575_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmp1c50u575_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    var result []int\n    m := make(map[int]bool)\n\
    \    for _, n := range l1 {\n        m[n] = true\n    }\n    for _, n := range\
    \ l2 {\n        if m[n] {\n            result = append(result, n)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpm2m2xexe_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpm2m2xexe_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpm2m2xexe_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    m := make(map[int]bool)\n    for _, x := range\
    \ l1 {\n        m[x] = true\n    }\n    for _, x := range l2 {\n        m[x] =\
    \ true\n    }\n    s := make([]int, 0, len(m))\n    for k, _ := range m {\n  \
    \      s = append(s, k)\n    }\n    return s\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpngs__x8l_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=34) %!s(int=653) %!s(int=2) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=4)\
    \ %!s(int=3) %!s(int=9) %!s(int=121)]'\n    --- FAIL: TestCommon/test_num__1 (0.00s)\n\
    \        tmpngs__x8l_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpngs__x8l_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestCommon/test_num__3\
    \ (0.00s)\n        tmpngs__x8l_test.go:44: expected '[]', got '[%!s(int=8) %!s(int=4)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    common := []int{}\n    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            common = append(common, v)\n        }\n\
    \    }\n    return common\n}\n\nfunc TestCommon(t *testing.T) {\n  candidate :=\
    \ common\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 34, 653, 2,\
    \ 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5, 653} },\n     { actual:\
    \ candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected: []int{2, 3} },\n     {\
    \ actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3,\
    \ 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpbw6oy82x_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpbw6oy82x_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpbw6oy82x_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073685
- exit_code: 1
  program: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique common elements for two lists.\n// >>> common([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n\
    // >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1\
    \ []int, l2 []int) []int {\n    set := make(map[int]bool)\n    for _, item :=\
    \ range l1 {\n        set[item] = true\n    }\n    result := make([]int, 0)\n\
    \    for _, item := range l2 {\n        if set[item] {\n            result = append(result,\
    \ item)\n        }\n    }\n    return result\n}\n\nfunc TestCommon(t *testing.T)\
    \ {\n  candidate := common\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121}), expected: []int{1, 5,\
    \ 653} },\n     { actual: candidate([]int{5, 3, 2, 8}, []int{3, 2}), expected:\
    \ []int{2, 3} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{3, 2, 4}),\
    \ expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4, 3, 2, 8}, []int{}),\
    \ expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCommon (0.00s)\n    --- FAIL: TestCommon/test_num__0 (0.00s)\n\
    \        tmpf_wi0vk9_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=653)]',\
    \ got '[%!s(int=5) %!s(int=1) %!s(int=5) %!s(int=653)]'\n    --- FAIL: TestCommon/test_num__1\
    \ (0.00s)\n        tmpf_wi0vk9_test.go:43: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestCommon/test_num__2 (0.00s)\n\
    \        tmpf_wi0vk9_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073685
