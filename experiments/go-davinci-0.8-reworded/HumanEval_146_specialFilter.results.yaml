language: go_test.go
name: HumanEval_146_specialFilter
results:
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    res :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num / 10) &&\
    \ isOdd(num % 10) {\n            res++\n        }\n    }\n    return res\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5k5sjhom_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    var l, r int\n    for _, v := range nums {\n        l = v\n      \
    \  r = v\n        if l < 0 {\n            l = -l\n        }\n        if l > 10\
    \ {\n            for r > 10 {\n                r = r % 10\n            }\n   \
    \         if l % 2 != 0 && r % 2 != 0 {\n                count += 1\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_5v_oy26_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_5v_oy26_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_5v_oy26_test.go:56: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_5v_oy26_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, n := range nums {\n        if abs(n) >= 10 && isFirstAndLastDigitOdd(n)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsjvukx9_test.go:19:12: undefined: abs

    /tmp/tmpqsjvukx9_test.go:19:28: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num % 10)\
    \ && isOdd(num / int(pow(10, int(log10(float64(num)))))) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqi_1va3_test.go:19:24: undefined: isOdd

    /tmp/tmpoqi_1va3_test.go:19:59: undefined: pow

    /tmp/tmpoqi_1va3_test.go:19:71: undefined: log10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num % 2 == 0 {\n            continue\n        }\n     \
    \   if num < 0 {\n            num = -num\n        }\n        if num % 10 % 2 ==\
    \ 0 {\n            continue\n        }\n        count += 1\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpcqboqv35_test.go:55: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpcqboqv35_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpcqboqv35_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && (n % 10 % 2 != 0) &&\
    \ (n / 10 % 2 != 0) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpfzf5dp35_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpfzf5dp35_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var f,\
    \ l int\n    var count int\n    for _, v := range nums {\n        if v > 10 {\n\
    \            f = v / 10\n            for f >= 10 {\n                f = f / 10\n\
    \            }\n            l = v % 10\n            if f % 2 != 0 && l % 2 !=\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp827dptgg_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, x := range nums {\n        if x < 10 {\n            continue\n\
    \        }\n\n        num := x\n        last := x % 10\n        first := x\n\n\
    \        for first > 10 {\n            first /= 10\n        }\n\n        if first\
    \ % 2 == 1 && last % 2 == 1 {\n            count++\n        }\n    }\n\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3j4hdogk_test.go:23:9: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, v := range nums {\n        if v > 10 && isFirstLastDigitOdd(v)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpna1mse_test.go:19:22: undefined: isFirstLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if abs(num) > 10 && abs(num) %\
    \ 10 % 2 != 0 && abs(num) / 10 % 10 % 2 != 0 {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuqllcww_test.go:19:12: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    /*for\
    \ _, value := range nums {\n        fmt.Println(value)\n    }*/\n    return 0\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpe8xw7qca_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpe8xw7qca_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpe8xw7qca_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpe8xw7qca_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if abs(num) > 10 && isOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zq0i_le_test.go:19:12: undefined: abs

    /tmp/tmp3zq0i_le_test.go:19:29: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var m\
    \ int\n    for _, v := range nums {\n        if v > 10 && (v/10)%2 != 0 && v%2\
    \ != 0 {\n            m++\n        }\n    }\n    return m\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpa98fg57u_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpa98fg57u_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    // loop over input\n    for _, num := range nums {\n        // check\
    \ if the number is greater than 10\n        if num > 10 {\n            // get\
    \ the first and last digits\n            firstDigit := num / 10\n            lastDigit\
    \ := num % 10\n            // check if both are odd\n            if firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0 {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpzhdxqd_4_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpzhdxqd_4_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Write\
    \ your code here\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc39qmwo__test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, n := range nums {\n        if n > 10 && firstDigit(n) % 2 !=\
    \ 0 && lastDigit(n) % 2 != 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp78rt_kml_test.go:19:22: undefined: firstDigit

    /tmp/tmp78rt_kml_test.go:19:48: undefined: lastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var sum\
    \ int\n    for _, num := range nums {\n        if (num > 10) && (num/10%2 != 0)\
    \ && (num%10%2 != 0) {\n            sum++\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpmldu3jfb_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpmldu3jfb_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && (num/10)%2 != 0 &&\
    \ num%2 != 0 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpaeze2kxx_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpaeze2kxx_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && (v % 10 == 1 || v %\
    \ 10 == 3 || v % 10 == 5 || v % 10 == 7 || v % 10 == 9) {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpon4sbkxh_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpon4sbkxh_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpon4sbkxh_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // check\
    \ if first and last digits are odd.\n    // Find the first and last digits of\
    \ the number\n    // check if odd\n    // if odd, add to count\n    count := 0\n\
    \    for _, num := range nums {\n        if num > 10 {\n            if (num %\
    \ 10) % 2 != 0 && num / 10 % 2 != 0 {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp0vojxbgv_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0vojxbgv_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    //\n    for _, num := range nums {\n        if isGreaterThan10(num)\
    \ && isFirstLastDigitOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ilx3l99_test.go:20:12: undefined: isGreaterThan10

    /tmp/tmp_ilx3l99_test.go:20:36: undefined: isFirstLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var greaterThan10\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            str\
    \ := fmt.Sprintf(\"%d\", num)\n            if str[0] % 2 != 0 && str[len(str)\
    \ - 1] % 2 != 0 {\n                greaterThan10++\n            }\n        }\n\
    \    }\n    return greaterThan10\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074844
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n\n        // check the first digit\n        first_digit := num\n \
    \       for first_digit >= 10 {\n            first_digit /= 10\n        }\n  \
    \      if first_digit % 2 == 0 {\n            continue\n        }\n\n        //\
    \ check the last digit\n        last_digit := num % 10\n        if last_digit\
    \ % 2 == 0 {\n            continue\n        }\n\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && isOdd(num) {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjcj4wma__test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    n :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            n++\n        }\n    }\n    return n\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkmkkbdhw_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && checkFirstLast(v) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ztkdj_b_test.go:19:22: undefined: checkFirstLast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // TODO:\
    \ Implement this function\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_9u4vs75_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_9u4vs75_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_9u4vs75_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_9u4vs75_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 {\n\
    \            fmt.Println(num)\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "15\n33\n45\n21\n109\n43\n93\n125\n121\n109\n71\n75\n21\n19\n--- FAIL: TestSpecialfilter\
    \ (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpion1380s_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpion1380s_test.go:46: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpion1380s_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, value := range nums {\n        if value > 10 && isFirstLastDigitOdd(value)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97cqse_q_test.go:19:26: undefined: isFirstLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // write\
    \ your code here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp04h5r183_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp04h5r183_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp04h5r183_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp04h5r183_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // your\
    \ code goes here\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfug29dl_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074843
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 &&\
    \ num / 10 % 2 == 1 {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpkimuebas_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpkimuebas_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, v := range nums {\n        if v < 10 {\n            continue\n\
    \        }\n        digits := []int{}\n        for v > 0 {\n            digits\
    \ = append(digits, v % 10)\n            v /= 10\n        }\n        if len(digits)\
    \ == 1 {\n            continue\n        }\n        if digits[0] % 2 == 1 && digits[len(digits)\
    \ - 1] % 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && num/10%2 != 0 &&\
    \ num%10%2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpr4udbb5y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpr4udbb5y_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n < 10 {\n            continue\n\
    \        }\n        if n % 2 == 0 {\n            continue\n        }\n       \
    \ f, l := n / 10, n % 10\n        if f % 2 == 0 || l % 2 == 0 {\n            continue\n\
    \        }\n        count++\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp9811_mfo_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp9811_mfo_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tcount :=\
    \ 0\n\tfor _, num := range nums {\n\t\tif num > 10 && hasOddDigits(num) {\n\t\t\
    \tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8iwn0wzr_test.go:19:18: undefined: hasOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    filtered\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && isOdd(n) {\n      \
    \      filtered++\n        }\n    }\n    return filtered\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbn72ck_e_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ []int\n    for _, num := range nums {\n        if num > 10 && (num % 10 == 1\
    \ || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9) {\n   \
    \         result = append(result, num)\n        }\n    }\n    return len(result)\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpi7p57l6c_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpi7p57l6c_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpi7p57l6c_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    counter\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstLastOdd(num)\
    \ {\n            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7idsbdt6_test.go:19:24: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    m :=\
    \ make(map[int]bool)\n    for _, num := range nums {\n        if num >= 10 {\n\
    \            tens, units := num / 10, num % 10\n            if tens % 2 != 0 &&\
    \ units % 2 != 0 {\n                m[num] = true\n            }\n        }\n\
    \    }\n    return len(m)\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpwfi_adws_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpwfi_adws_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    result\
    \ := 0\n    for _, value := range nums {\n        if value > 10 && isFirstAndLastOdd(value)\
    \ {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcoubn3f1_test.go:19:26: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int\n    for _, n := range nums {\n        // TODO: implement me!\n    }\n \
    \   return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_d2ho_p_test.go:18:12: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        num := n\n        if n < 0 {\n \
    \           num = -n\n        }\n        if num > 10 && num%2 == 1 {\n       \
    \     // check first and last digit\n            lastDigit := num % 10\n     \
    \       firstDigit := num\n            for ; firstDigit >= 10; firstDigit /= 10\
    \ {\n            }\n            if firstDigit%2 == 1 && lastDigit%2 == 1 {\n \
    \               count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp38ifa3kx_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp38ifa3kx_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo6jv0k6_test.go:19:24: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var final,\
    \ count int\n    for i := 0; i < len(nums); i++ {\n        final = nums[i]\n \
    \       if nums[i] < 10 {\n            continue\n        } else {\n          \
    \  for final > 0 {\n                if final%10%2 == 0 {\n                   \
    \ count = 0\n                    break\n                } else {\n           \
    \         count++\n                    final /= 10\n                }\n      \
    \      }\n        }\n        if count > 1 {\n            final = 1\n        }\
    \ else {\n            final = 0\n        }\n    }\n    return final\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmpennl8odt_test.go:61: expected '%!s(int=0)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmpennl8odt_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=-15)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpennl8odt_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpennl8odt_test.go:61:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpennl8odt_test.go:61: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__5 (0.00s)\n        tmpennl8odt_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    if len(nums) == 0 {\n        return count\n    }\n    for _, n :=\
    \ range nums {\n        if n > 10 && n % 2 == 1 {\n            sn := fmt.Sprintf(\"\
    %d\", n)\n            if sn[0] % 2 == 1 && sn[len(sn) - 1] % 2 == 1 {\n      \
    \          count += 1\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int = 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 {\n\
    \            num2 := num\n            num1 := num\n            for num1 > 10 {\n\
    \                num1 /= 10\n            }\n            for num2 > 10 {\n    \
    \            num2 %= 10\n            }\n            if num1 == num2 {\n      \
    \          count++\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp2p893cfh_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp2p893cfh_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp2p893cfh_test.go:55: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp2p893cfh_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && \n           num%2\
    \ == 1 && \n           (num/10)%2 == 1 && \n           num%10 == 1 || num%10 ==\
    \ 3 || num%10 == 5 || num%10 == 7 || num%10 == 9 {\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmpwjozjmv5_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwjozjmv5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    //counting\
    \ the numbers in nums that are > 10\n    //and the first digit and last digit\
    \ are both odd\n    count := 0\n    for _, num := range nums {\n        // a number\
    \ is > 10\n        if num > 10 {\n            //we separate out digits\n     \
    \       lastDigit := num % 10\n            firstDigit := num\n            for\
    \ firstDigit >= 10 {\n                firstDigit = firstDigit / 10\n         \
    \   }\n            //we check if they are odd\n            if (lastDigit % 2 !=\
    \ 0) && (firstDigit % 2 != 0) {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, v := range nums {\n        if v < 10 {\n            continue\n\
    \        }\n        if v % 2 == 0 {\n            continue\n        }\n       \
    \ if v % 2 == 0 {\n            continue\n        }\n        if (v % 10) % 2 ==\
    \ 0 {\n            continue\n        }\n        cnt++\n    }\n    return cnt\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp6c7tyc5w_test.go:55: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp6c7tyc5w_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp6c7tyc5w_test.go:55: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && isOdd(n) {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdudo5r9m_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && checkIfOddEnds(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpapqumako_test.go:19:24: undefined: checkIfOddEnds

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 && isOdd(num) {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjcj4wma__test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int = 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2a0mn0q_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var tmpInts\
    \ []int\n    for _, num := range nums {\n        if num > 10 && (num % 10 % 2\
    \ != 0) && (num / 10 % 2 != 0) {\n            tmpInts = append(tmpInts, num)\n\
    \        }\n    }\n    return len(tmpInts)\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmptbevvb6c_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmptbevvb6c_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, val := range nums {\n        if (val > 10) && (val % 2 == 1) {\n\
    \            tmp := val\n            for val > 0 {\n                val /= 10\n\
    \            }\n            if (tmp % 10 == 1) || (tmp % 10 == 3) || (tmp % 10\
    \ == 5) || (tmp % 10 == 7) || (tmp % 10 == 9) {\n                cnt++\n     \
    \       }\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4bd0n59__test.go:51: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4bd0n59__test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp4bd0n59__test.go:51: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ -1\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmppajsqneg_test.go:39: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmppajsqneg_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmppajsqneg_test.go:39: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmppajsqneg_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmppajsqneg_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__5 (0.00s)\n        tmppajsqneg_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSpecialfilter/test_num__6\
    \ (0.00s)\n        tmppajsqneg_test.go:39: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num < 0 {\n            num = -num\n        }\n        //\
    \ check first and last digits are odd\n        firstDigit := num / 10\n      \
    \  lastDigit := num % 10\n        if firstDigit % 2 == 0 || lastDigit % 2 == 0\
    \ {\n            continue\n        }\n        cnt++\n    }\n    return cnt\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp796ffyne_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp796ffyne_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _,v := range nums {\n        if v > 10 && oddFirstAndLast(v) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8jimwo73_test.go:19:22: undefined: oddFirstAndLast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tcount :=\
    \ 0\n\tfor _, num := range nums {\n\t\tif num > 10 && checkNum(num) {\n\t\t\t\
    count++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tj_a2f1_test.go:19:18: undefined: checkNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, n := range nums {\n        if n > 10 && isOdd(n) && isOdd(firstDigit(n))\
    \ && isOdd(lastDigit(n)) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg0_ds82x_test.go:19:22: undefined: isOdd

    /tmp/tmpg0_ds82x_test.go:19:40: undefined: firstDigit

    /tmp/tmpg0_ds82x_test.go:19:58: undefined: isOdd

    /tmp/tmpg0_ds82x_test.go:19:64: undefined: lastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    r :=\
    \ 0\n    for _, v := range nums {\n        if v > 10 && v % 2 == 1 {\n       \
    \     o, e := v, 0\n            for o > 0 {\n                o /= 10\n       \
    \         e += 1\n            }\n            if v / (1e(e-1)) % 2 == 1 {\n   \
    \             r += 1\n            }\n        }\n    }\n    return r\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg6psa3q8_test.go:25:23: exponent has no digits

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ int\n    for _, v := range nums {\n        if v > 10 && isOdd(v) {\n       \
    \     result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrh4406g_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v >= 10 && isOdd(v % 10) && isOdd(v\
    \ / 10) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7yhcc7d_test.go:19:23: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && (num/10)%2 != 0\
    \ && num%2 != 0 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp781kvuuf_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp781kvuuf_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    num_digits_greater_than_10\
    \ := 0\n    for _, number := range nums {\n        if number > 10 {\n        \
    \    if isNumberSpecial(number) {\n                num_digits_greater_than_10++\n\
    \            }\n        }\n    }\n    return num_digits_greater_than_10\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xyjxine_test.go:20:16: undefined: isNumberSpecial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpvcr40f14_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvcr40f14_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpvcr40f14_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, n := range nums {\n        if n < 10 {\n            continue\n\
    \        }\n        ld := n % 10 //last digit\n        if ld % 2 == 0 {\n    \
    \        continue\n        }\n        fd := n\n        for fd > 10 {\n       \
    \     fd /= 10\n        }\n        if fd % 2 == 0 {\n            continue\n  \
    \      }\n        cnt++\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpsg0f0ujv_test.go:57: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpsg0f0ujv_test.go:57:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tcount :=\
    \ 0\n\tfor _, num := range nums {\n\t\tif num > 10 && (num / 10) % 2 != 0 && num\
    \ % 2 != 0 {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp3_n0mfq2_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp3_n0mfq2_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 {\n\
    \            if num / 10 % 2 == 1 && num % 10 % 2 == 1 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp64dx11vi_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp64dx11vi_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074847
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Your\
    \ code here\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk3td4kb3_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074846
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    num :=\
    \ 0\n    for _, value := range nums {\n        if value > 10 && isFirstAndLastOdd(value)\
    \ {\n            num++\n        }\n    }\n    return num\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnmv47sv1_test.go:19:26: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074847
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Implement\
    \ here\n    var num, dig_1, dig_2 int\n    var cnt int\n    for _, num = range\
    \ nums {\n        dig_1 = num / 10\n        dig_2 = num % 10\n        if num >\
    \ 10 && dig_1 % 2 != 0 && dig_2 % 2 != 0 {\n            cnt++\n        }\n   \
    \ }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpg8fx4rfy_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpg8fx4rfy_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ int\n    for _, num := range nums {\n        if num > 10 && (num/10)%2 != 0\
    \ && num%2 != 0 {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpgv31slf9_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpgv31slf9_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, v := range nums {\n        if v <= 10 {\n            continue\n\
    \        }\n        n := v\n        a, b := n % 10, 0\n        for n > 0 {\n \
    \           b = n % 10\n            n /= 10\n        }\n        if a % 2 == 1\
    \ && b % 2 == 1 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var rv\
    \ int\n    for _, v := range nums {\n        if (v > 10) && isFirstAndLastDigitOdd(v)\
    \ {\n            rv++\n        }\n    }\n    return rv\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wbnb7a5_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ int\n    for _, n := range nums {\n        if n > 10 && ((n%10)%2 != 0) && ((n/10)%2\
    \ != 0) {\n            result++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdy0xtawf_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdy0xtawf_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    c :=\
    \ 0\n    for _, n := range nums {\n        if abs(n) > 10 && isOdd(n) && isOdd(n/10)\
    \ {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo49doca_test.go:19:12: undefined: abs

    /tmp/tmpoo49doca_test.go:19:27: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && isFirstAndLastDigitOdd(n)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77l18mmx_test.go:19:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Write\
    \ your code here\n    res := 0\n    for _,n := range nums {\n        if n>10 &&\
    \ isSpecial(n) {\n            res += 1\n        }\n    }\n    return res\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfkbnyiwn_test.go:20:20: undefined: isSpecial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // implementation\
    \ here\n    var cnt int\n    for _, v := range nums {\n        if v > 10 && v\
    \ % 2 == 1 {\n            s := fmt.Sprintf(\"%d\", v)\n            if int(s[0])\
    \ % 2 == 1 && int(s[len(s)-1]) % 2 == 1 {\n                cnt++\n           \
    \ }\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, n := range nums {\n        if n > 10 && n % 2 == 1 && (n / 10)\
    \ % 2 == 1 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpfased3bo_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpfased3bo_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && (num % 10 % 2 ==\
    \ 1 && num / 10 % 2 == 1) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpig1o3qx2_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpig1o3qx2_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074848
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, n := range nums {\n        if n <= 10 {\n            continue\n\
    \        }\n        if n < 0 {\n            n = -n\n        }\n        if n %\
    \ 2 == 0 {\n            continue\n        }\n        for {\n            if n <\
    \ 10 {\n                break\n            }\n            n /= 10\n        }\n\
    \        if n % 2 == 0 {\n            continue\n        }\n        cnt++\n   \
    \ }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074848
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && (v%10)%2 != 0 && v/10%2\
    \ != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpkeodk4jk_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpkeodk4jk_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var f,\
    \ l, count int\n    for _, value := range nums {\n        if value > 10 {\n  \
    \          f = value / 10\n            l = value % 10\n            if f % 2 !=\
    \ 0 && l % 2 != 0 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpa9mapvnv_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpa9mapvnv_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, i := range nums {\n        if i > 10 && isOddDigit(i) {\n  \
    \          count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppz3m8t0j_test.go:19:22: undefined: isOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num / 10)\
    \ && isOdd(num % 10) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphbun2lor_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num > 0 {\n   \
    \         if num % 10 % 2 != 0 && num / 10 % 10 % 2 != 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpqyv5umd7_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpqyv5umd7_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    res :=\
    \ 0\n    for _, n := range nums {\n        if n <= 10 {\n            continue\n\
    \        }\n        ld := n % 10\n        if ld % 2 == 0 {\n            continue\n\
    \        }\n        fd := n\n        for fd >= 10 {\n            fd /= 10\n  \
    \      }\n        if fd % 2 == 0 {\n            continue\n        }\n        res++\n\
    \    }\n    return res\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isOddDigit(num) {\n\
    \            cnt += 1\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwbgal85l_test.go:19:24: undefined: isOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074848
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // \u5947\
    \u6570\u7684\u4E2A\u6570\n    oddCount := 0\n    for _, value := range nums {\n\
    \        if value < 10 {\n            continue\n        }\n\n        digits :=\
    \ 0\n        tmp := value\n        for tmp > 0 {\n            tmp /= 10\n    \
    \        digits++\n        }\n\n        head := value / getPow10(digits - 1)\n\
    \        tail := value % 10\n        if head % 2 == 1 && tail % 2 == 1 {\n   \
    \         oddCount++\n        }\n    }\n\n    return oddCount\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdoklxcf_test.go:31:25: undefined: getPow10

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && (num / 10) % 2 !=\
    \ 0 && num % 2 != 0 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmphf1hadlg_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphf1hadlg_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if (num > 10) && (num % 2 != 0)\
    \ && ((num / 10) % 2 != 0) && (num % 10 != 0) {\n            count++\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp0rmnpt6y_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp0rmnpt6y_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074849
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var ret,\
    \ num int\n    for _, num = range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            ret++\n        }\n    }\n    return ret\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjtn1blq_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074849
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num % 2 == 0 {\n            continue\n        }\n     \
    \   first := num % 10\n        if first % 2 == 0 {\n            continue\n   \
    \     }\n        last := 0\n        for num > 0 {\n            last = num % 10\n\
    \            num /= 10\n        }\n        if last % 2 == 0 {\n            continue\n\
    \        }\n        count++\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074849
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Write\
    \ your code here\n    var count = 0\n    for _, value := range nums {\n      \
    \  if value > 10 {\n            if value < 100 {\n                if value%2 ==\
    \ 1 {\n                    count += 1\n                }\n            } else {\n\
    \                for value > 0 {\n                    if value%10%2 == 1 {\n \
    \                       if value < 10 {\n                            count +=\
    \ 1\n                        }\n                    } else {\n               \
    \         break\n                    }\n                    value /= 10\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmphxwnqssa_test.go:61: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphxwnqssa_test.go:61:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmphxwnqssa_test.go:61: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, v := range nums {\n        if v > 10 && v%2 == 1 && firstDigit(v)%2\
    \ == 1 && lastDigit(v)%2 == 1 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgedbg5kz_test.go:19:34: undefined: firstDigit

    /tmp/tmpgedbg5kz_test.go:19:58: undefined: lastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // replace\
    \ the code below with your solution\n    return 0\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpo3ao8fri_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpo3ao8fri_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpo3ao8fri_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpo3ao8fri_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n >= 10 && n % 2 == 1 && n %\
    \ 10 % 2 == 1 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpmpmat2_7_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpmpmat2_7_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpmpmat2_7_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var c\
    \ int = 0\n    for _, n := range nums {\n        if n > 10 && isFirstAndLastOdd(n)\
    \ {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jsc9nl7_test.go:19:22: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    if len(nums)\
    \ == 0 {\n        return 0\n    }\n    count := 0\n    for _,v := range nums {\n\
    \        if v > 10 && isFirstOdd(v) && isLastOdd(v) {\n            count++\n \
    \       }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxde334ei_test.go:22:22: undefined: isFirstOdd

    /tmp/tmpxde334ei_test.go:22:39: undefined: isLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    res :=\
    \ 0\n    for _, n := range nums {\n        var isFirst, isLast bool\n        _,\
    \ isFirst = getFirst(n)\n        _, isLast = getLast(n)\n        if isFirst &&\
    \ isLast && n > 10 {\n            res += 1\n        }\n    }\n    return res\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjn20ffp_test.go:20:22: undefined: getFirst

    /tmp/tmpcjn20ffp_test.go:21:21: undefined: getLast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    size\
    \ := len(nums)\n    total := 0\n    for i := 0; i < size; i++ {\n        if nums[i]\
    \ > 10 {\n            // get the first and last digit of nums[i]\n           \
    \ first := nums[i] / 10\n            last := nums[i] % 10\n            if (first\
    \ % 2 != 0) && (last % 2 != 0) {\n                total += 1\n            }\n\
    \        }\n    }\n    return total\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpajdi4rd9_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpajdi4rd9_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // return\
    \ 0\n    var result = 0\n    for _, v := range nums {\n        if v > 10 {\n \
    \           // fmt.Println(v)\n            var isSpecial = false\n           \
    \ vv := v\n            for vv >= 10 {\n                vv /= 10\n            }\n\
    \            if vv%2 == 1 {\n                vv = v\n                for vv <\
    \ 10 {\n                    vv *= 10\n                }\n                if vv%10%2\
    \ == 1 {\n                    isSpecial = true\n                }\n          \
    \  }\n            if isSpecial {\n                // fmt.Println(v)\n        \
    \        result += 1\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num >= 10 && num % 2 == 1 {\n\
    \            digits := countDigits(num)\n            if digits[0] % 2 == 1 &&\
    \ digits[len(digits) - 1] % 2 == 1 {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcb_b6mda_test.go:20:23: undefined: countDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num <= 10 {\n            continue\n\
    \        }\n        if num % 2 == 0 {\n            continue\n        }\n     \
    \   if num / 10 % 2 == 0 {\n            continue\n        }\n        cnt++\n \
    \   }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp86v1cf5v_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp86v1cf5v_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ len(nums)\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmph6mssxj2_test.go:39: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmph6mssxj2_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmph6mssxj2_test.go:39: expected '%!s(int=2)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmph6mssxj2_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmph6mssxj2_test.go:39: expected '%!s(int=3)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__5 (0.00s)\n        tmph6mssxj2_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        if n > 10 && isOdd(n%10) && isOdd(n/10)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvyg7qk1_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    ret :=\
    \ 0\n    for _, e := range nums {\n        if e > 10 && isOdd(e) {\n         \
    \   ret++\n        }\n    }\n    return ret\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeafvka84_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074850
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, n := range nums {\n        first := n / 10\n        last :=\
    \ n % 10\n        if n > 10 && first%2 == 1 && last%2 == 1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpc7ljesu2_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpc7ljesu2_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num%2 != 0 && firstDigit(num)%2\
    \ != 0 && lastDigit(num)%2 != 0 {\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw8cgxmzn_test.go:19:38: undefined: firstDigit

    /tmp/tmpw8cgxmzn_test.go:19:64: undefined: lastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    res :=\
    \ 0\n    for _, n := range nums {\n        if n > 10 && isOdd(n) {\n         \
    \   res++\n        }\n    }\n    return res\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmso69bg1_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && num > 0 {\n   \
    \         if (num / 10) % 2 == 1 && num % 2 == 1 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp68ljh56y_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp68ljh56y_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int = 0\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1\
    \ {\n            unit := num % 10\n            num /= 10\n            div := num\
    \ % 10\n            if div % 2 == 1 && unit % 2 == 1 {\n                cnt++\n\
    \            }\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpvo012lxb_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvo012lxb_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _,num := range nums {\n        if num > 10 && isOddDigit(num) {\n\
    \            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjaynfmuu_test.go:19:24: undefined: isOddDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var v\
    \ int\n    count := 0\n    for _, n := range nums {\n        // If abs value of\
    \ number is greater than 10 and its first and last\n        // digits are odd,\
    \ increase count by 1\n        if (abs(n) > 10) && (abs(n)%10%2 == 1) && (n/abs(n)\
    \ == (n/abs(n)/10)*10) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm1u4mn9e_test.go:17:9: v declared but not used

    /tmp/tmpm1u4mn9e_test.go:22:13: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, v := range nums {\n        if v > 10 && (v/10)%2 != 0 && v%2\
    \ != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpov4i3sl0_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpov4i3sl0_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tcount :=\
    \ 0\n\tfor _, n := range nums {\n\t\t// check all conditions\n\t\tif (n > 10)\
    \ && (isFirstDigitOdd(n)) && (isLastDigitOdd(n)) {\n\t\t\tcount++\n\t\t}\n\t}\n\
    \treturn count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfgu7yl0o_test.go:20:19: undefined: isFirstDigitOdd

    /tmp/tmpfgu7yl0o_test.go:20:43: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    n :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num) {\n   \
    \         n++\n        }\n    }\n    return n\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lgo9ehx_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // YOUR\
    \ CODE HERE\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpt3ifsqx0_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpt3ifsqx0_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpt3ifsqx0_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpt3ifsqx0_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074852
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ int\n    for _, num := range nums {\n        if num > 10 && (num / 10) % 2 !=\
    \ 0 && num % 2 != 0 {\n            result++\n        }\n    }\n    return result\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdgucr5fh_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdgucr5fh_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074852
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // your\
    \ code here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpsr4ks6mk_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpsr4ks6mk_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpsr4ks6mk_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpsr4ks6mk_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // write\
    \ your code here\n    sum := 0\n    for _, i := range nums {\n        if i > 10\
    \ && isFirstAndLastOdd(i) {\n            sum++\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplrae8ekh_test.go:20:22: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    res :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && firstLastDigitOdd(num)\
    \ {\n            res += 1\n        }\n    }\n    return res\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuktqs970_test.go:19:24: undefined: firstLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsnxkp3s_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        if num%2 == 0 {\n            continue\n        }\n       \
    \ if num/10%2 == 0 {\n            continue\n        }\n        if num%10%2 ==\
    \ 0 {\n            continue\n        }\n        cnt++\n    }\n    return cnt\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpvfrtsq_d_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpvfrtsq_d_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var total\
    \ int\n    for _,v := range nums {\n        if v > 10 && isFirstLastOdd(v) {\n\
    \            total++\n        }\n    }\n    return total\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5x_gbx4w_test.go:19:22: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ len(filter(nums, func(num int) bool {\n        return (num > 10) && (firstAndLastDigitsAreOdd(num))\n\
    \    }))\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvxi11g7_test.go:17:16: undefined: filter

    /tmp/tmpgvxi11g7_test.go:18:31: undefined: firstAndLastDigitsAreOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdp4f8x5t_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int\n    for _, n := range nums {\n        if n < 10 {\n            continue\n\
    \        }\n        fn := n % 10\n        n = n / 10\n        ln := n % 10\n \
    \       if fn % 2 == 1 && ln % 2 == 1 {\n            cnt += 1\n        }\n   \
    \ }\n    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpf3k1bse2_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpf3k1bse2_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Implement\
    \ your solution here\n    count := 0\n    for _, v := range nums {\n        if\
    \ v > 10 && isFirstAndLastOdd(v) {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7b5hrkta_test.go:20:22: undefined: isFirstAndLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var result\
    \ int\n    for _, num := range nums {\n        if num > 10 && isEven(num) {\n\
    \            result++\n        }\n    }\n    return result\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb4hrrhvf_test.go:19:24: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && num%2 == 1 {\n   \
    \         rev := 0\n            for num > 0 {\n                rev = rev*10 +\
    \ num%10\n                num /= 10\n            }\n            if rev%2 == 1\
    \ {\n                cnt++\n            }\n        }\n    }\n    return cnt\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        firstDigit := num / 10\n     \
    \   lastDigit := num % 10\n        if num > 10 && firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmppy7gfw9k_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmppy7gfw9k_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // This\
    \ is your job. :)\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpv1ezo2bj_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpv1ezo2bj_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpv1ezo2bj_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpv1ezo2bj_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && (firstDigit(v) % 2\
    \ != 0) && (lastDigit(v) % 2 != 0) {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptf_5cw8h_test.go:19:23: undefined: firstDigit

    /tmp/tmptf_5cw8h_test.go:19:51: undefined: lastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // Write\
    \ your code here\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc39qmwo__test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tres :=\
    \ 0\n\tfor _, val := range nums {\n\t\tif val > 10 && val % 2 == 1 {\n\t\t\tif\
    \ val / 10 % 2 == 1 && val % 10 % 2 == 1 {\n\t\t\t\tres++\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn res\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmptjkuza8l_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmptjkuza8l_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    length\
    \ := len(nums)\n    var count int = 0\n    for i := 0; i < length; i++ {\n   \
    \     var num int = nums[i]\n        if num < 10 {\n            continue\n   \
    \     }\n        if num % 2 == 0 {\n            continue\n        }\n        if\
    \ nums[i] % 10 % 2 == 0 {\n            continue\n        }\n        count += 1\n\
    \    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp5u9sfd52_test.go:54: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp5u9sfd52_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp5u9sfd52_test.go:54: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var num\
    \ int\n    for _, v := range nums {\n        if v > 10 && isOdd(v % 10) && isOdd(v\
    \ / 10) {\n            num += 1\n        }\n    }\n    return num\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt17kqwa3_test.go:19:22: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, i := range nums {\n        if i > 10 && isFirstAndLastDigitOdd(i)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpim4mskb8_test.go:19:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num/10) &&\
    \ isOdd(num%10) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8d80wzt1_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOddFirstDigit(num)\
    \ && isOddLastDigit(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw4jqll1g_test.go:19:24: undefined: isOddFirstDigit

    /tmp/tmpw4jqll1g_test.go:19:48: undefined: isOddLastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int = 0\n    for _,num := range nums {\n        if num > 10 && isFirstDigitOdd(num)\
    \ && isLastDigitOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24xafiqh_test.go:19:24: undefined: isFirstDigitOdd

    /tmp/tmp24xafiqh_test.go:19:48: undefined: isLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074853
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n\tif len(nums)\
    \ == 0 {\n\t\treturn 0\n\t}\n\tcount := 0\n\tfor _, num := range nums {\n\t\t\
    if num < 10 {\n\t\t\tcontinue\n\t\t}\n\t\tlast := num % 10\n\t\tfirst := num\n\
    \t\tfor first >= 10 {\n\t\t\tfirst /= 10\n\t\t}\n\t\tif first % 2 == 1 && last\
    \ % 2 == 1 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074854
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int = 0\n    for _, v := range nums {\n        if v > 10 && abs(v%10)%2 == 1\
    \ && abs(v/10)%2 == 1 {\n            cnt++\n        }\n    }\n    return cnt\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u9kln0q_test.go:19:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074854
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && (num % 10 % 2 !=\
    \ 0) && num / 10 % 2 != 0 {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmph21yp5d8_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmph21yp5d8_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, v := range nums {\n        if v > 10 && firstDigitIsOdd(v) &&\
    \ lastDigitIsOdd(v) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpqul7q0_test.go:19:22: undefined: firstDigitIsOdd

    /tmp/tmpzpqul7q0_test.go:19:44: undefined: lastDigitIsOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074854
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num >= 10 && isFirstLastOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_zb_srt_test.go:19:25: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074854
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // write\
    \ your code here\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp04h5r183_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp04h5r183_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp04h5r183_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp04h5r183_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num < 10 {\n            continue\n\
    \        }\n        first := num % 10\n        last := num / 10 % 10\n       \
    \ if first % 2 == 1 && last % 2 == 1 {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmprj7fjn15_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmprj7fjn15_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    counter\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(first(num))\
    \ && isOdd(last(num)) {\n            counter++\n        }\n    }\n    return counter\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq_hfnel_test.go:19:24: undefined: isOdd

    /tmp/tmplq_hfnel_test.go:19:30: undefined: first

    /tmp/tmplq_hfnel_test.go:19:45: undefined: isOdd

    /tmp/tmplq_hfnel_test.go:19:51: undefined: last

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074854
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && ((num % 10 == 1)\
    \ || (num % 10 == 3) || (num % 10 == 5) || (num % 10 == 7) || (num % 10 == 9))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_wnu01n6_test.go:45: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_wnu01n6_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_wnu01n6_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int = 0\n    for _,n := range nums {\n        if (n >= 10) && (n/10)%2 == 1\
    \ && n%10 == 1 || n%10 == 3 || n%10 == 5 || n%10 == 7 || n%10 == 9 {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmptj4q6r0g_test.go:45: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmptj4q6r0g_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94tvy10y_test.go:19:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int\n    var n int\n    for _, i := range nums {\n        n = i\n        if\
    \ i < 0 {\n            n = -i\n        }\n        if i > 10 &&\n            (n%10)%2\
    \ != 0 &&\n            (n/10)%2 != 0 {\n            cnt++\n        }\n    }\n\
    \    return cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp4qkuaoxx_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp4qkuaoxx_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    n :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isOdd(getFirstDigit(num))\
    \ && isOdd(getLastDigit(num)) {\n            n++\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vb1ozi4_test.go:19:24: undefined: isOdd

    /tmp/tmp0vb1ozi4_test.go:19:30: undefined: getFirstDigit

    /tmp/tmp0vb1ozi4_test.go:19:53: undefined: isOdd

    /tmp/tmp0vb1ozi4_test.go:19:59: undefined: getLastDigit

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    l :=\
    \ len(nums)\n    c := 0\n    for i := 0; i < l; i++ {\n        n := nums[i]\n\
    \        if n < 10 {\n            continue\n        }\n        first := n % 10\n\
    \        last := n / 10\n        if first % 2 == 1 && last % 2 == 1 {\n      \
    \      c++\n        }\n    }\n    return c\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpf9xqyv5w_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpf9xqyv5w_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ \n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1j5g6oq3_test.go:17:5:\
    \ not enough return values\n\thave ()\n\twant (int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isLastDigitOdd(num)\
    \ && isFirstDigitOdd(num) {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpls1gwk4t_test.go:19:24: undefined: isLastDigitOdd

    /tmp/tmpls1gwk4t_test.go:19:47: undefined: isFirstDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstLastOdd(num)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppypgth3r_test.go:19:24: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var c\
    \ int\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zyg4vcb_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp827dptgg_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074841
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var cnt\
    \ int\n    for _, v := range nums {\n        if v > 10 && (v/10)%2 == 1 && v%2\
    \ == 1 {\n            cnt++\n        }\n    }\n    return cnt\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpszegs9y1_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpszegs9y1_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        num = int(num)\n        a := num/10\n\
    \        b := num%10\n        if a%2 != 0 && b%2 != 0 && num > 10 {\n        \
    \    count++\n        }\n    }\n    return count\n}\n\n//\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpxau4o8vv_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpxau4o8vv_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // TODO\n\
    \    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwssj3plw_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwssj3plw_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwssj3plw_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwssj3plw_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    nums\
    \ = append(nums, 0)\n    total := 0\n    for i, v := range nums {\n        for\
    \ {\n            if (v % 10) % 2 == 0 {\n                break\n            }\n\
    \            v /= 10\n            if v == 0 {\n                break\n       \
    \     }\n        }\n        if v != 0 {\n            continue\n        }\n   \
    \     if nums[i] > 10 {\n            total++\n        }\n    }\n    return total\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8kyfh6g9_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8kyfh6g9_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074855
- exit_code: 0
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    cnt :=\
    \ 0\n    for _, v := range nums {\n        if v <= 10 {\n            continue\n\
    \        }\n        if v % 2 == 0 {\n            continue\n        }\n       \
    \ tmp := v\n        if tmp % 10 % 2 == 0 {\n            continue\n        }\n\
    \        for tmp / 10 != 0 {\n            tmp /= 10\n        }\n        if tmp\
    \ % 2 == 0 {\n            continue\n        }\n        cnt++\n    }\n    return\
    \ cnt\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, val := range nums {\n        if val > 10 && isOdd(val/10) &&\
    \ isOdd(val%10) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyybr75t8_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isOdd(num) {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsnxkp3s_test.go:19:24: undefined: isOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    num :=\
    \ 0\n    for _, i := range nums {\n        if i > 10 && isFirstLastOdd(i) {\n\
    \            num += 1\n        }\n    }\n    return num\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2xlg2ewq_test.go:19:22: undefined: isFirstLastOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, v := range nums {\n        if v > 10 && isFirstAndLastDigitOdd(v)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9dek4ja_test.go:19:22: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    numFiltered\
    \ := 0\n    for _, num := range nums {\n        if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n            numFiltered += 1\n        }\n    }\n    return numFiltered\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfdhgvfx1_test.go:19:24: undefined: isFirstAndLastDigitOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // TODO\
    \ implement me\n    return 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate\
    \ := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3ggd6n84_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3ggd6n84_test.go:40:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3ggd6n84_test.go:40: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3ggd6n84_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    // TODO\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpgcla1azz_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpgcla1azz_test.go:41:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpgcla1azz_test.go:41: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpgcla1azz_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // write\
    \ your code in Go 1.4\n    var count int\n    for _, num := range nums {\n   \
    \     if num >= 10 && (num / 10) % 2 != 0 && num % 10 != 0 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp4aw6x6xi_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp4aw6x6xi_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp4aw6x6xi_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, i := range nums {\n        a := i / 10\n        b := i % 10\n\
    \        if a % 2 != 0 && b % 2 != 0 && i > 10 {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n \
    \ candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpqp7r0ehp_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpqp7r0ehp_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    // count\
    \ = 0\n    // for each number in nums:\n    //    if number is greater than 10\
    \ and number's first and last digits are odd:\n    //         count = count +\
    \ 1\n    // return count\n    count := 0\n    for _, num := range nums {\n   \
    \     if num > 10 && num%2 == 1 && (num/10)%2 == 1 {\n            count = count\
    \ + 1\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp2x0mgcb1_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp2x0mgcb1_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 0\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpskz1n5mz_test.go:39: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpskz1n5mz_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074842
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    return\
    \ 1\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmpy_u246p4_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpy_u246p4_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpy_u246p4_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpy_u246p4_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestSpecialfilter/test_num__5\
    \ (0.00s)\n        tmpy_u246p4_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__6 (0.00s)\n        tmpy_u246p4_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a list of numbers as input and returns \n\
    // the number of elements in the list that are greater than 10 and both \n// first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
    \ specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var ret\
    \ int\n    for _, v := range nums {\n        if v > 10 && v/10%2 != 0 && v%10%2\
    \ != 0 {\n            ret++\n        }\n    }\n    return ret\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp9ax22zcf_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp9ax22zcf_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074856
