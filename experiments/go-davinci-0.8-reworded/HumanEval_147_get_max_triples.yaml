name: HumanEval_147_get_max_triples
language: go_test.go
prompt: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a positive integer n. You have to create an integer list a\
  \ of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i -\
  \ i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n\
  // 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1,\
  \ 7, 13).\nfunc get_max_triples(n int) int {\n"
tests: "func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
  \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
  \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // Write your code here\n    return 0\n}\n", "    // Write your\
    \ code here\n    return 0\n}\n", "    total_triples := 0\n    // fmt.Println(n)\n\
    \    for index, _ := range make([]int, n) {\n        // fmt.Println(index)\n \
    \       if (index + 1) * (index + 1) - (index + 1) + 1 == index + 1 {\n      \
    \      fmt.Println(index)\n            continue\n        }\n        for second_index,\
    \ _ := range make([]int, n) {\n            if second_index <= index {\n      \
    \          continue\n            }\n            if (second_index + 1) * (second_index\
    \ + 1) - (second_index + 1) + 1 == second_index + 1 {\n                fmt.Println(second_index)\n\
    \                continue\n            }\n            for third_index, _ := range\
    \ make([]int, n) {\n                if third_index <= second_index {\n       \
    \             continue\n                }\n                if (third_index + 1)\
    \ * (third_index + 1) - (third_index + 1) + 1 == third_index + 1 {\n         \
    \           fmt.Println(third_index)\n                    continue\n         \
    \       }\n                triple_sum := (index + 1) * (index + 1) - (index +\
    \ 1) + 1 + (second_index + 1) * (second_index + 1) - (second_index + 1) + 1 +\
    \ (third_index + 1) * (third_index + 1) - (third_index + 1) + 1\n            \
    \    if triple_sum % 3 == 0 {\n                    total_triples++\n         \
    \       }\n            }\n        }\n    }\n    return total_triples\n}\n", " \
    \   // your code here\n    a := make([]int, n)\n    for i:=0; i<n; i++ {\n   \
    \     a[i] = i*i - i + 1\n    }\n    cnt := 0\n    for i:=0; i<n-2; i++ {\n  \
    \      for j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n     \
    \           }\n            }\n        }\n    }\n    return cnt\n}\n", "    if\
    \ n <= 3 {\n        return 0\n    }\n    c := n - 2\n    return c * (c + 1) /\
    \ 2\n}\n", "    c := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                  \
    \  c++\n                }\n            }\n        }\n    }\n    return c\n}\n",
  "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    triples := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples++\n     \
    \           }\n            }\n        }\n    }\n    return triples\n}\n", "  \
    \  if n <= 2 {\n        return 0\n    }\n    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n    m := make(map[int]int)\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            m[a[i] + a[j]] += 1\n        }\n    }\n    count := 0\n    for i\
    \ := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += m[a[k]]\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    arr := make([]int, n)\n    for i:=0; i<n; i++ {\n        arr[i]\
    \ = i*i - i + 1\n    }\n    return get_max_triples_inner(arr, 0, len(arr))\n}\n",
  "    if n <= 0 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    cnt := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    cnt++\n                }\n            }\n    \
    \    }\n    }\n    return cnt\n}\n", "    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n \
    \   count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    var res int\n    var cnt\
    \ [3]int\n    cnt[0] = 1\n    for i := 1; i < n; i++ {\n        v := i * i - i\
    \ + 1\n        if v % 3 == 0 {\n            res += cnt[0]\n        }\n       \
    \ cnt[v % 3]++\n    }\n    return res\n}\n", "    ans := 0\n    for i := 1; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0 {\n                    ans += 1\n                }\n         \
    \   }\n        }\n    }\n    return ans\n}\n", "    var max_triples int = 0\n\
    \    var a = make([]int, n)\n    // set a\n    for i := 1; i <= n; i++ {\n   \
    \     a[i-1] = i * i - i + 1\n    }\n    // judge a\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    max_triples++\n                }\n            }\n        }\n    }\n    return\
    \ max_triples\n}\n", "    c := make([]int, 4)\n    for i := 1; i <= n; i++ {\n\
    \        a := i * i - i + 1\n        c[a % 3]++\n    }\n    var result int\n \
    \   for i := 0; i < 3; i++ {\n        result += c[i] * (c[i] - 1) / 2\n    }\n\
    \    return result\n}\n", "    if n < 3 {\n        return 0\n    }\n    res :=\
    \ 0\n    // \u524D\u7F00\u548C\n    sum := make([]int, n)\n    sum[0] = 1\n  \
    \  for i := 1; i < n; i++ {\n        sum[i] = sum[i-1] + i*i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n          \
    \  if (sum[j] - sum[i]) % 3 == 0 {\n                for k := j+1; k < n; k++ {\n\
    \                    if (sum[k] - sum[j]) % 3 == 0 {\n                       \
    \ res += 1\n                    }\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if n < 3 {\n        return 0\n    }\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    var result int\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result++\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n", " \
    \   // Write your code here\n    return 0\n}\n", "    triples := 0\n    for i\
    \ := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k <= n; k++ {\n                if ((i * i - i + 1) + (j * j - j\
    \ + 1) + (k * k - k + 1)) % 3 == 0 {\n                    triples++\n        \
    \        }\n            }\n        }\n    }\n    return triples\n}\n", "    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   m := make(map[int]int)\n    for i := 1; i <= n; i++ {\n        m[i * i - i\
    \ + 1] = i\n    }\n    cnt := 0\n    for i := 1; i <= n; i++ {\n        for j\
    \ := i + 1; j <= n; j++ {\n            r := m[i * i - i + 1] + m[j * j - j + 1]\n\
    \            r %= 3\n            if r == 0 {\n                r = 3\n        \
    \    }\n            if _, ok := m[r]; ok {\n                cnt++\n          \
    \  }\n        }\n    }\n    return cnt\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    // for i := 1; i <= n; i++ {\n    //     fmt.Printf(\"\
    %d \", a[i-1])\n    // }\n    // fmt.Println()\n    ret := 0\n    for i := 0;\
    \ i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1;\
    \ k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n         \
    \           ret++\n                }\n            }\n        }\n    }\n    return\
    \ ret\n}\n", "    return n * (n - 1) * (n - 2) / 6\n}\n", "    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   cnt := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++\
    \ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    cnt++\n                }\n           \
    \ }\n        }\n    }\n    return cnt\n}\n", "    // create the list a\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n", "    list := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        list[i-1] = i * i - i + 1\n    }\n\
    \    fmt.Println(list)\n    count := 0\n    for i := 0; i < n; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if (list[i] + list[j] + list[k]) % 3 == 0 {\n                  \
    \  count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    cnt := 0\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n \
    \       a[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n    \
    \            }\n            }\n        }\n    }\n    return cnt\n}\n", "    var\
    \ result int = 0\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n    \
    \    a[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if a[i] + a[j] + a[k] % 3 == 0 {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n", "   \
    \ // Write your code here\n    return 0\n}\n", "    m := n / 3\n    if m > 0 {\n\
    \        return m * (m + 1) / 2\n    } else {\n        return 0\n    }\n}\n",
  "    if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    cnt, sum\
    \ := 0, 0\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n   \
    \     sum += a[i-1]\n        if i >= 3 {\n            if sum % 3 == 0 {\n    \
    \            cnt++\n            }\n            sum -= a[i-3]\n        }\n    }\n\
    \    return cnt\n}\n", "    // Your code here\n    if n < 3 {\n        return\
    \ 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    res := 0\n    for i := 0; i < n-2; i++ {\n     \
    \   for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n   \
    \             // fmt.Println(a[i], a[j], a[k])\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    res += 1\n                }\n      \
    \      }\n        }\n    }\n    return res\n}\n", "    sum_cache := make(map[int]int)\n\
    \    sum_cache[0] = 1\n    count := 0\n    sum := 0\n    for i := 1; i <= n; i++\
    \ {\n        sum += i * i - i + 1\n        if sum % 3 == 0 {\n            if times,\
    \ ok := sum_cache[sum / 3]; ok {\n                count += times\n           \
    \ }\n        }\n        sum_cache[sum]++\n    }\n    return count\n}\n", "   \
    \ count := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count +=\
    \ 1\n                }\n            }\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var count int\n    a := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n\
    \        a[i] = i * i - i + 1\n    }\n    for i := 1; i <= n; i++ {\n        for\
    \ j := i+1; j <= n; j++ {\n            for k := j+1; k <= n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n", "   \
    \ a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    var cnt int\n    for i := 0; i < n - 2; i++ {\n        for j\
    \ := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n  \
    \              }\n            }\n        }\n    }\n    return cnt\n}\n", "   \
    \ if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n", "    sum, count := 0, 0\n    for i :=\
    \ 1; i <= n; i++ {\n        sum += i * i - i + 1\n        if sum % 3 == 0 {\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    a := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var\
    \ result int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    result++\n                }\n      \
    \      }\n        }\n    }\n    return result\n}\n", "    var count int\n    for\
    \ i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n", "    return n\
    \ * (n - 1) * (n - 2) / 6;\n}\n", "    // The number of all triples (a[i], a[j],\
    \ a[k]) is n * (n - 1) * (n - 2) / 6.\n    var result int\n    if n > 3 {\n  \
    \      result = n * (n - 1) * (n - 2) / 6\n    }\n    return result\n}\n", " \
    \   a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i -\
    \ i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for\
    \ j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var count int\n    var sum int\n    for i := 1; i < n - 1; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n  \
    \              sum = i*i - i + 1 + j*j - j + 1 + k*k - k + 1\n               \
    \ if sum % 3 == 0 {\n                    count++\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n", "    a := make([]int, n)\n \
    \   for i:=1; i<=n; i++ {\n        a[i-1] = i*i - i + 1\n    }\n    fmt.Println(a)\n\
    \    cnt := 0\n    for i:=0; i<n-2; i++ {\n        for j:=i+1; j<n-1; j++ {\n\
    \            for k:=j+1; k<n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    cnt++\n                }\n            }\n    \
    \    }\n    }\n    return cnt\n}\n", "    count := 0\n    for i := 1; i < n -\
    \ 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if (i * i - i +\
    \ 1 + j * j - j + 1) % 3 == 0 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    var a []int\n    var count int\n \
    \   a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i\
    \ - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n     \
    \   result[i] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n -\
    \ 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if result[i] + result[j] + result[k] % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n", "    if n < 3 {\n        return 0\n    }\n\
    \    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i -\
    \ i + 1\n    }\n    cnt := 0\n    for i := 0; i < n - 2; i++ {\n        for j\
    \ := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n  \
    \              }\n            }\n        }\n    }\n    return cnt\n}\n", "   \
    \ // Create a list\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n  \
    \      a[i] = i * i - i + 1\n    }\n    var sum int\n    var count int\n    //\
    \ Calculate the number of possible triplets\n    for i := 0; i < n - 2; i++ {\n\
    \        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                sum = a[i] + a[j] + a[k]\n                if sum % 3\
    \ == 0 {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i\
    \ <= n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n    cnt := 0\n   \
    \ for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n   \
    \         for k := j + 1; k < n; k++ {\n                sum := a[i] + a[j] + a[k]\n\
    \                if sum % 3 == 0 {\n                    cnt++\n              \
    \  }\n            }\n        }\n    }\n    return cnt\n}\n", "    // Initialize\
    \ the list a with length n.\n    a := make([]int, n)\n    count := 0\n    // Calculate\
    \ the value of a[i]\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    // For each triple, check if it satisfies the condition.\n \
    \   for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n", "    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n \
    \   count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    a := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    triple\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                    triple += 1\n                }\n           \
    \ }\n        }\n    }\n    return triple\n}\n", "    res := 0\n    for i := 1;\
    \ i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if ((i *\
    \ i - i + 1) + (j * j - j + 1)) % 3 == 0 {\n                res++\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    result := 0\n    for i := 1;\
    \ i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1)\
    \ % 3 == 0 {\n                    result++\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    // check for edge cases\n   \
    \ if n <= 2 {\n        return 0\n    }\n\n    count := 0\n    for i := 0; i <\
    \ n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k :=\
    \ j + 1; k < n; k++ {\n                if ((i * i - i + 1) + (j * j - j + 1) +\
    \ (k * k - k + 1)) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    cnt := 0\n    //\
    \ use 3 pointers\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                  \
    \  cnt++\n                }\n            }\n        }\n    }\n    return cnt\n\
    }\n", "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i\
    \ * i - i + 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n    \
    \            }\n            }\n        }\n    }\n    return cnt\n}\n", "    const\
    \ max_len = 1000000\n    count := 0\n    var a [max_len]int\n    for i := 1; i\
    \ <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i := 1; i <= n - 2;\
    \ i++ {\n        for j := i + 1; j <= n - 1; j++ {\n            for k := j + 1;\
    \ k <= n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n        \
    \            count++\n                }\n            }\n        }\n    }\n   \
    \ return count\n}\n", "    res := 0\n    for i := 0; i < n - 2; i++ {\n      \
    \  for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    res++\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n", "    //a[i] = (i - 1) * (i - 1) + (i - 1) + 1 = i * i -\
    \ i + 1\n    cnt := 0\n    for j := 2; j < n; j++ {\n        for k := j + 1; k\
    \ <= n; k++ {\n            if (j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n   \
    \             cnt++\n            }\n        }\n    }\n    return cnt\n}\n", " \
    \   var a, max int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            a = i * i - i + 1 + j * j - j + 1\n            for\
    \ k := j + 1; k <= n; k++ {\n                if (a + k * k - k + 1) % 3 == 0 {\n\
    \                    max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    triples := 0\n    var i, j, k int\n    for i = 1;\
    \ i < n - 1; i++ {\n        ai := i * i - i + 1\n        for j = i + 1; j < n;\
    \ j++ {\n            aj := j * j - j + 1\n            for k = j + 1; k <= n; k++\
    \ {\n                ak := k * k - k + 1\n                if ai + aj + ak == 0\
    \ {\n                    triples++\n                }\n            }\n       \
    \ }\n    }\n    return triples\n}\n", "    i := 1\n    j := 2\n    k := 3\n  \
    \  a := []int{}\n    result := 0\n    for i <= n {\n        a = append(a, i *\
    \ i - i + 1)\n        i++\n    }\n    fmt.Println(a)\n    for i, v := range a\
    \ {\n        for j, w := range a {\n            if j > i {\n                for\
    \ k, x := range a {\n                    if k > j {\n                        if\
    \ v + w + x % 3 == 0 {\n                            result++\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n", "    arr := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        arr[i-1] = i * i - i + 1\n    }\n    fmt.Println(arr)\n\
    \    num := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (arr[i] +\
    \ arr[j] + arr[k]) % 3 == 0 {\n                    num++\n                }\n\
    \            }\n        }\n    }\n    return num\n}\n", "    a := make([]int,\
    \ n)\n    result := 0\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    result++\n                }\n      \
    \      }\n        }\n    }\n    return result\n}\n", "    //1 \u2264 n \u2264\
    \ 5*10^5\n    if n > 500000 {\n        return 0\n    }\n    a := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    res\
    \ := 0\n    m := make(map[int]int)\n    for i := 1; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            k := a[i] + a[j]\n            if k % 3\
    \ == 0 {\n                k /= 3\n                if v, ok := m[k]; ok {\n   \
    \                 res += v\n                }\n            }\n        }\n    \
    \    for j := 0; j < i; j++ {\n            m[a[i] + a[j]]++\n        }\n    }\n\
    \    return res\n}\n", "    // Write your code here\n    return 0\n}\n", "   \
    \ m := make(map[int]int)\n    m[0] = 0\n    m[1] = 0\n    m[2] = 0\n    for i\
    \ := 3; i <= n; i++ {\n        //get one\n        if (i % 3 == 0) {\n        \
    \    m[i] = m[i - 1] + 1\n        } else {\n            m[i] = m[i - 1]\n    \
    \    }\n        // get more\n        for j := i - 1; j >= 0; j-- {\n         \
    \   if ((i * i - i + 1) % 3 != 0) {\n                continue\n            }\n\
    \            for k := j - 1; k >= 0; k-- {\n                if ((i * i - i + 1)\
    \ % 3 != 0) {\n                    continue\n                }\n             \
    \   if ((j * j - j + 1) % 3 != 0) {\n                    continue\n          \
    \      }\n                if ((k * k - k + 1) % 3 != 0) {\n                  \
    \  continue\n                }\n                if ((i * i - i + 1) + (j * j -\
    \ j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    m[i] += 1\n      \
    \          }\n            }\n        }\n    }\n    fmt.Println(m)\n    return\
    \ m[n]\n}\n", "    if n < 3 {\n        return 0\n    }\n    count := 0\n    nums\
    \ := make([]int, n)\n    var sum int\n    for i := 0; i < n; i++ {\n        nums[i]\
    \ = i * i - i + 1\n        sum += nums[i]\n    }\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            if (sum - nums[i] - nums[j])\
    \ % 3 == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    cnt := 0\n    for i := 1; i < n - 1; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n        \
    \        s := i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n                if\
    \ s % 3 == 0 {\n                    cnt++\n                }\n            }\n\
    \        }\n    }\n    return cnt\n}\n", "    max_triples := 0\n    for i := 1;\
    \ i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for k :=\
    \ j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0 {\n                    max_triples++\n               \
    \ }\n            }\n        }\n    }\n    return max_triples\n}\n", "    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    a := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    result\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    result := 0\n    for i :=\
    \ 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k :=\
    \ j + 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0 {\n                    result++\n                }\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    return 0\n}\n", " \
    \   list := make([]int, n)\n    for i := 1; i <= n; i++ {\n        list[i-1] =\
    \ i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n     \
    \   for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n   \
    \             if (list[i] + list[j] + list[k]) % 3 == 0 {\n                  \
    \  count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    if n < 3 {\n        return 0\n    }\n    // a = [1, 3, 7, 13, 21] =>\
    \ a[i] = i*i - i + 1\n    // => a[i] = 2*i*i - i + 1 = (2*i-1)*i + 1\n    // =>\
    \ a[i] + a[j] + a[k] = (2*i-1)*i + 1 + (2*j-1)*j + 1 + (2*k-1)*k + 1\n    // =>\
    \ a[i] + a[j] + a[k] = 6*i*j*k - i*j - i*k - j*k + i + j + k\n    // => a[i] +\
    \ a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i]\
    \ + a[j] + a[k] = 6*i*j*k - 3*(i*j", "    return n*(n-1)*(n-2)/6\n}\n", "    return\
    \ 0\n}\n", "    var i, j, k, count int = 0, 0, 0, 0\n    var a = make([]int, n,\
    \ n)\n    for i = 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for\
    \ i = 0; i < n - 2; i++ {\n        for j = i + 1; j < n - 1; j++ {\n         \
    \   for k = j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n", "    // Method 1: Time Limit Exceeded\n  \
    \  // sum := 0\n    // count := 0\n    // for i := 1; i < n - 1; i++ {\n    //\
    \     for j := i + 1; j < n; j++ {\n    //         for k := j + 1; k <= n; k++\
    \ {\n    //             sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n\
    \    //             if sum % 3 == 0 {\n    //                 count++\n    //\
    \             }\n    //         }\n    //     }\n    // }\n    // return count\n\
    \n    // Method 2: see https://quizlet.com/302827456/cs-hackerrank-get-max-triples-flash-cards/\n\
    \    // TODO:\n\n    // Method 3:\n    count := 0\n    for i := 1; i < n - 1;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            sum := (i * i - i +\
    \ 1) + (j * j - j + 1)\n            if sum % 3 == 0 {\n                count +=\
    \ n - j\n            }\n        }\n    }\n    return count\n}\n", "    // Write\
    \ your code here\n    count := 0\n    if n <= 2 {\n        return count\n    }\n\
    \    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i -\
    \ i + 1\n    }\n    fmt.Println(a)\n    for k := 2; k < n; k++ {\n        for\
    \ j := 1; j < k; j++ {\n            for i := 0; i < j; i++ {\n               \
    \ if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n", "    var triples\
    \ int\n    var a []int\n    var i, j, k int\n    var sum int\n    for i=1; i<=n;\
    \ i++ {\n        a = append(a, i*i-i+1)\n    }\n    for i=0; i<n-2; i++ {\n  \
    \      for j=i+1; j<n-1; j++ {\n            for k=j+1; k<n; k++ {\n          \
    \      sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n         \
    \           triples++\n                }\n            }\n        }\n    }\n  \
    \  return triples\n}\n", "    var result = 0\n    // a = [1, 3, 7, 13, 21]\n \
    \   if n >= 3 {\n        result = n - 2\n    }\n    return result\n}\n", "   \
    \ if n < 2 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    if n <= 2 {\n    \
    \    return 0\n    }\n    maxTriples := 0\n    for i := 0; i < n-2; i++ {\n  \
    \      for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] % 3 == 0 {\n                    maxTriples++\n\
    \                }\n            }\n        }\n    }\n    return maxTriples\n}\n",
  "    if n < 3 {\n        return 0\n    }\n    var triples int\n    start, end :=\
    \ 0, n-1\n    if n%3 == 0 {\n        start = 1\n    }\n    for i := start; i <\
    \ end-1; i++ {\n        triples += (end - i - 1)\n    }\n    return triples\n\
    }\n", "    if n < 2 {\n        return 0\n    }\n    // t[i] stands for the number\
    \ of elements in a[1:i] that is a[j] (1 \u2264 j \u2264 i)\n    // and a[j] %\
    \ 3 = 0, so sum of a[j] is a multiple of 3.\n    t := make([]int, n + 1)\n   \
    \ // f[i] stands for the number of elements in a[1:i] that is a[j] (1 \u2264 j\
    \ \u2264 i)\n    // and a[j] % 3 = 1, so sum of a[j] is a multiple of 3.\n   \
    \ f := make([]int, n + 1)\n    // s[i] stands for the number of elements in a[1:i]\
    \ that is a[j] (1 \u2264 j \u2264 i)\n    // and a[j] % 3 = 2, so sum of a[j]\
    \ is a multiple of 3.\n    s := make([]int, n + 1)\n    ans := 0\n    // T[i]\
    \ stands for the number of triples among a[1:i] that a[i] can join.\n    T :=\
    \ make([]int, n + 1)\n    for i := 1; i <= n; i++ {\n        // Calculate a[i]\n\
    \        ai := i * i - i + 1\n        // Calculate the sum of a[i] with all numbers\
    \ in a[1:i-1]\n        t[i] = t[i - 1]\n        f[i] = f[i - 1]\n        s[i]\
    \ = s[i - 1]\n        if ai % 3 == 0 {\n            t[i]++\n        } else if\
    \ ai % 3 == 1 {\n            f[i]++\n        } else {\n            s[i]++\n  \
    \      }\n        // Calculate T[i]\n        T[i] = (t[i] - 1) * (t[i] - 2) /\
    \ 2 +\n               t[i] * (f[i] + s[i]) +\n               (f[i] - 1) * (f[i]\
    \ - 2) / 2 +\n               f[i] * s[i", "    // your code here\n    return 0\n\
    }\n", "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i\
    \ * i - i + 1\n    }\n    // fmt.Println(a)\n    cnt := 0\n    for i := 0; i <\
    \ n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k :=\
    \ j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n  \
    \                  cnt++\n                }\n            }\n        }\n    }\n\
    \    return cnt\n}\n", "    a := make([]int, n)\n    var res int\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n         \
    \           res++\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    var i, j, k, count int\n    for i = 1; i < n; i++ {\n      \
    \  for j = i + 1; j < n; j++ {\n            for k = j + 1; k < n; k++ {\n    \
    \            if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n \
    \                   count++\n                }\n            }\n        }\n   \
    \ }\n    return count\n}\n", "    count := 0\n    for i := 1; i < n - 1; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++\
    \ {\n                if i + j + k % 3 == 0 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   count := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   num_triples := 0\n    a := make([]int, n)\n    // init a[]\n    for i := 0;\
    \ i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i := 0; i < n - 2;\
    \ i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n           \
    \         num_triples++\n                }\n            }\n        }\n    }\n\
    \    return num_triples\n}\n", "    triples := 0\n    a := make([]int, n)\n  \
    \  for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    triples += 1\n                }\n            }\n        }\n\
    \    }\n    return triples\n}\n", "    s := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        s[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (s[i] + s[j] + s[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n", "    var a = make([]int, n)\n    for i := 1; i <=\
    \ n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    var sum3 = 0\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    sum3 += 1\n                }\n            }\n        }\n\
    \    }\n    return sum3\n}\n", "    var count = 0\n    for i := 1; i < n - 1;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <=\
    \ n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return 0\n\
    \    }\n    maxTriples := 0\n    var a [1000000]int\n    for i := 1; i <= n; i++\
    \ {\n        a[i] = i * i - i + 1\n    }\n    for i := 1; i <= n; i++ {\n    \
    \    for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    maxTriples++\n\
    \                }\n            }\n        }\n    }\n    return maxTriples\n}\n",
  "    var a = make([]int, n)\n    var result = 0\n    for i := 1; i <= n; i++ {\n\
    \        a[i-1] = i * i - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n     \
    \   for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result +=\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n",
  "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    return get_max_triples_of_array(a)\n}\n", "    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   return (n - 1) * (n - 2) / 2\n}\n", "    // return n / 3\n    // sum of 1\
    \ 2 ... n equals n(n+1)/2\n    // sum of 1 3 5 ... 2n-1 is (n/2)(2n-1), n = even\n\
    \    // sum of 1 3 5 ... 2n-2 is (n/2)(2n-1), n = odd\n    // sum of 1 4 7 ...\
    \ 3n-3 is (n/3)(3n-2), n = 3a\n    // sum of 1 4 7 ... 3n-2 is (n/3)(3n-2), n\
    \ = 3a+1\n    // sum of 1 4 7 ... 3n-1 is (n/3)(3n-2), n = 3a+2\n    return (n\
    \ / 3) * (n - 1)\n}\n", "    var a []int = make([]int, n)\n    //1 \u2264 n \u2264\
    \ 100\n    if n < 1 || n > 100 {\n        return 0\n    }\n    // initialize a[]\n\
    \    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    fmt.Println(a)\n\
    \    count := 0\n    // loop\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n", "    // Note:\
    \ only 1, 4, 7, 13, 16, 19 is a multiple of 3,\n    // so, we count the number\
    \ of a[i] to these number,\n    // and count the number of a[i]+a[j] to be multiple\
    \ of 3.\n    cnt_i := 0\n    cnt_ij := 0\n    for i := 1; i <= n; i++ {\n    \
    \    if i * i - i + 1 % 3 == 0 {\n            cnt_i++\n        }\n        for\
    \ j := i + 1; j <= n; j++ {\n            if (i * i - i + 1 + j * j - j + 1) %\
    \ 3 == 0 {\n                cnt_ij++\n            }\n        }\n    }\n    return\
    \ cnt_i * cnt_ij\n}\n", "    count := 0\n    for i := 1; i < n; i++ {\n      \
    \  for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n  \
    \              sum := i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        \
    \        if sum % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    a := []int{}\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n\
    \    fmt.Println(a)\n    cnt := 0\n    for i := 0; i < len(a); i++ {\n       \
    \ for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt\
    \ += 1\n                }\n            }\n        }\n    }\n    return cnt\n}\n",
  "    a := make([]int, n)\n    count := 0\n    for i := 1; i <= n; i++ {\n      \
    \  a[i-1] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n", "    var\
    \ out int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            k := j + 1\n            if k >= n {\n                break\n    \
    \        }\n            if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0 {\n                out += 1\n            }\n        }\n    }\n    return\
    \ out\n}\n", "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    num := 0\n    for i := 0; i < n - 2; i++ {\n   \
    \     for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    num\
    \ += 1\n                }\n            }\n        }\n    }\n    return num\n}\n",
  "    a := make([]int, n)\n    count := 0\n    for i := 0; i < n; i++ {\n       \
    \ a[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n", "    //\
    \ Initialize a to the list of length n.\n    a := make([]int, n)\n    a[0] = 1\n\
    \n    // Generate the value of a[i]\n    for i := 1; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n\n    // Calculate the result\n    var result int\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    result++\n                }\n            }\n   \
    \     }\n    }\n\n    return result\n}\n", "    // Write your code here\n    res\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n   \
    \             }\n            }\n        }\n    }\n    return res\n}\n", "    var\
    \ a []int = make([]int, n)\n    // create list a\n    for i := 1; i <= n; i++\
    \ {\n        a[i-1] = i * i - i + 1\n    }\n    // calculate number of triples\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n", "    return 0\n}\n",
  "    maxTriples := 0\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n \
    \       a[i-1] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    maxTriples++\n\
    \                }\n            }\n        }\n    }\n    return maxTriples\n}\n",
  "    // Write your code here\n    a := make([]int, n)\n    for i := 1; i <= n; i++\
    \ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n         \
    \           count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    // Make a\n    a := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        a[i-1] = i * i - i + 1\n    }\n    // For each triple, do a[i]\
    \ + a[j] + a[k] % 3 == 0\n    count := 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i+1; j < n; j++ {\n            for k := j+1; k < n; k++ {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   a := make([]int, n)\n    cnt := 0\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    cnt++\n                }\n   \
    \         }\n        }\n    }\n    return cnt\n}\n", "    l := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        l[i-1] = i * i - i + 1\n    }\n    counter\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (l[i] + l[j] + l[k])\
    \ % 3 == 0 {\n                    counter++\n                }\n            }\n\
    \        }\n    }\n    return counter\n}\n", "    return n * (n - 1) * (n - 2)\
    \ / 6\n}\n", "    var l []int\n    for i := 1; i <= n; i++ {\n        l = append(l,\
    \ i * i - i + 1)\n    }\n    m := 0\n    for i := 0; i < len(l); i++ {\n     \
    \   for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l);\
    \ k++ {\n                if (l[i] + l[j] + l[k]) % 3 == 0 {\n                \
    \    m++\n                }\n            }\n        }\n    }\n    return m\n}\n",
  "    var counter int = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n               \
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n            \
    \        counter++\n                }\n            }\n        }\n    }\n    return\
    \ counter\n}\n", "    var a = make([]int, n)\n    for i:=1; i<=n; i++ {\n    \
    \    a[i-1] = i*i - i + 1\n    }\n    count := 0\n    for i:=0; i<n-2; i++ {\n\
    \        for j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n; k++ {\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   // Your code here\n    return 0\n}\n", "    a := make([]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    count := 0\n  \
    \  for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    var result int\n    for i := 0;\
    \ i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0 {\n                    result += 1\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    cnt := 0\n    for\
    \ i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    cnt++\n               \
    \ }\n            }\n        }\n    }\n    return cnt\n}\n", "    answer := 0\n\
    \    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    answer++\n    \
    \            }\n            }\n        }\n    }\n    return answer\n}\n", "  \
    \  if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n  \
    \  for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    // Write your code here\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    fmt.Println(a)\n    cnt := 0\n    for i := 0; i < n-2; i++ {\n\
    \        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n\
    \                }\n            }\n        }\n    }\n    return cnt\n}\n", " \
    \   a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i -\
    \ i + 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n - 2;\
    \ i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    // a = []int{}\n    // for i := 1; i <= n; i++ {\n    // \
    \    a = append(a, i * i - i + 1)\n    // }\n    // fmt.Println(a)\n    // max\
    \ := 0\n    // for i := 0; i < n - 2; i++ {\n    //     for j := i + 1; j < n\
    \ - 1; j++ {\n    //         for k := j + 1; k < n; k++ {\n    //            \
    \ if (a[i] + a[j] + a[k]) % 3 == 0 {\n    //                 max++\n    //   \
    \          }\n    //         }\n    //     }\n    // }\n    // return max\n  \
    \  // \u4E0A\u8FF0\u8D85\u65F6\n    // \u53C2\u8003\uFF1Ahttps://www.codewars.com/kata/5b5a9b5f1e08e76c61000018/solutions/csharp\n\
    \    max := 0\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    max++\n\
    \                }\n            }\n        }\n    }\n    return max\n}\n", " \
    \   a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i\
    \ - i + 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n         \
    \       }\n            }\n        }\n    }\n    return cnt\n}\n", "    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   var c int\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    c++\n                }\n           \
    \ }\n        }\n    }\n    return c\n}\n", "    arr := []int{1}\n    for i :=\
    \ 1; i < n; i++ {\n        arr = append(arr, i * i - i + 1)\n    }\n    fmt.Println(arr)\n\
    \    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k < n; k++ {\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n", "    var res int\n\
    \    a := []int{}\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i\
    \ - i + 1)\n    }\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j\
    \ < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res++\n               \
    \ }\n            }\n        }\n    }\n    return res\n}\n", "    return n / 3\n\
    }\n", "    if n < 3 {\n        return 0\n    }\n    // a[i] = i * i - i + 1\n\
    \    left, right := 1, 3\n    result := 0\n    for left < n - 2 {\n        for\
    \ right < n && (right * right - right + 1) - (left * left - left + 1) < 3 {\n\
    \            right++\n        }\n        if right < n {\n            result +=\
    \ (right - left - 1)\n        }\n        left++\n    }\n    return result\n}\n",
  "    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i\
    \ - i + 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var max int = 0\n    // i < j < k\n    for i := 1; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n    \
    \                max++\n                }\n            }\n        }\n    }\n \
    \   return max\n}\n", "    var res int\n    return res\n}\n", "    a := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    fmt.Println(a)\n\
    \    // 1. get all possible pairs\n    pairs := make([][2]int, 0)\n    for i :=\
    \ 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            pairs = append(pairs,\
    \ [2]int{i, j})\n        }\n    }\n    fmt.Println(pairs)\n    // 2. check all\
    \ possible combinations\n    res := 0\n    for _, pair := range pairs {\n    \
    \    if (a[pair[0]] + a[pair[1]]) % 3 == 0 {\n            for k := pair[1] + 1;\
    \ k < n; k++ {\n                if (a[pair[0]] + a[pair[1]] + a[k]) % 3 == 0 {\n\
    \                    res++\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n", "    var result, count int\n    a := make([]int, n)\n \
    \   for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    for\
    \ j := 1; j < n-1; j++ {\n        for k := j+1; k < n; k++ {\n            if (a[j-1]\
    \ + a[k-1]) % 3 == 0 {\n                result = a[j-1] + a[k-1]\n           \
    \     for i := 0; i < j; i++ {\n                    if (a[i] + result) % 3 ==\
    \ 0 {\n                        count++\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return count\n}\n", "    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    a := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count\
    \ := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n\
    \            for k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    var a [1000]int\n    // calculate\
    \ a\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n    cnt\
    \ := 0\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    cnt++\n                }\n           \
    \ }\n        }\n    }\n    return cnt\n}\n", "    a := make([]int, n)\n    for\
    \ i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    cnt := 0\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    cnt += 1\n                }\n            }\n   \
    \     }\n    }\n    return cnt\n}\n", "    var a [3]int\n    var count int\n \
    \   for i := 1; i <= n; i++ {\n        a[i % 3] = i * i - i + 1\n        if i\
    \ > 2 && (a[i % 3] + a[(i - 1) % 3] + a[(i - 2) % 3]) % 3 == 0 {\n           \
    \ count++\n        }\n    }\n    return count\n}\n", "    max := 0\n    for i\
    \ := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0 {\n                    max++\n                }\n  \
    \          }\n        }\n    }\n    return max\n}\n", "    if n < 3 {\n      \
    \  return 0\n    }\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n  \
    \      a[i] = i * i - i + 1\n    }\n    var count int\n    for i := 0; i < n -\
    \ 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n      \
    \              count++\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n", "    triple := make([]int, n, n)\n    for i := 1; i <=\
    \ n; i++ {\n        triple[i-1] = i * i - i + 1\n    }\n    fmt.Println(triple)\n\
    \    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (triple[i]\
    \ + triple[j] + triple[k]) % 3 == 0 {\n                    count++\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n", "    var cnt\
    \ int\n    arr := make([]int, n)\n    for i := 1; i <= n; i++ {\n        arr[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 {\n                    cnt++\n                }\n\
    \            }\n        }\n    }\n    return cnt\n}\n", "    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   max := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++\
    \ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    max++\n                }\n           \
    \ }\n        }\n    }\n    return max\n}\n", "    a := make([]int, n)\n    for\
    \ i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    triples :=\
    \ 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n  \
    \          for k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    triples++\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n", "    sum := 0\n    for i := 1; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if (k * k - k + 1 + j * j - j + 1 + i * i - i\
    \ + 1) % 3 == 0 {\n                    sum += 1\n                }\n         \
    \   }\n        }\n    }\n    return sum\n}\n", "    count := 0\n    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count++\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    count := 0\n    arr := make([]int,\
    \ n)\n    for i:=0; i<n; i++ {\n        arr[i] = i*i - i + 1\n    }\n    for i:=0;\
    \ i<n-2; i++ {\n        for j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n;\
    \ k++ {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var total int = 0\n    for i := 1; i < n - 1; i++ {\n    \
    \    for j := i + 1; j < n; j++ {\n            sum := (i * i - i + 1) + (j * j\
    \ - j + 1)\n            if (sum % 3 == 0) {\n                fmt.Println(\"Sum\
    \ of 1 \", i, \" and \", j, \" is divisible by 3\")\n                total++\n\
    \            }\n        }\n    }\n    return total\n}\n", "    arr := make([]int,\
    \ n)\n    var i int\n    for i = 0; i < n; i++ {\n        arr[i] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i = 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n", "    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n", "  \
    \  count := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    return get_max_triples_helper(1, 1, n)\n}\n", "    var count int\n\
    \    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if ai, aj, ak := i * i - i\
    \ + 1, j * j - j + 1, k * k - k + 1; (ai + aj + ak) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    if n < 3 {\n        return 0\n    }\n    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   // fmt.Println(a)\n    counter := 0\n    for i := 0; i < n-2; i++ {\n    \
    \    for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    return counter\n\
    }\n", "    count := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n               \
    \ if ((i*i-i+1) + (j*j-j+1) + (k*k-k+1)) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   // Write your code here\n    return 0\n}\n", "    a := make([]int, n, n)\n\
    \    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n\
    \    ans := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    ans++\n                }\n         \
    \   }\n        }\n    }\n    return ans\n}\n", "    var a = make([]int, n)\n \
    \   for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n\
    \    var ans int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0 {\n                    ans++\n                }\n    \
    \        }\n        }\n    }\n    return ans\n}\n", "    var count int\n    for\
    \ i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k <= n; k++ {\n                a := i * i - i + 1\n        \
    \        b := j * j - j + 1\n                c := k * k - k + 1\n            \
    \    if (a + b + c) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    res := 0\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0 {\n                    res++\n                }\n\
    \            }\n        }\n    }\n    return res\n}\n", "    return (n-1)*(n-2)*(n-3)/6\n\
    }\n", "    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    fmt.Println(a)\n    return get_triples(a)\n}\n",
  "    if n <= 2 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    sum := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    sum++\n                }\n            }\n        }\n    }\n\
    \    return sum\n}\n", "    // 1. Generate the list.\n    a := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    //\
    \ 2. Get all the combinations of i, j, k.\n    var triples [][]int\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    triples = append(triples, []int{a[i], a[j], a[k]})\n    \
    \            }\n            }\n        }\n    }\n    // 3. Count the number of\
    \ triples with maximum sums.\n    var max int\n    for _, t := range triples {\n\
    \        sum := t[0] + t[1] + t[2]\n        if sum > max {\n            max =\
    \ sum\n        }\n    }\n    var count int\n    for _, t := range triples {\n\
    \        sum := t[0] + t[1] + t[2]\n        if sum == max {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    triples := 0\n    s := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        s[i-1] = i * i - i + 1\n    }\n \
    \   for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if s[i] + s[j] + s[k] % 3 ==\
    \ 0 {\n                    triples++\n                }\n            }\n     \
    \   }\n    }\n    return triples\n}\n", "    // Write your code here\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i -\
    \ i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for\
    \ j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             sum := a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n \
    \                   count++\n                }\n            }\n        }\n   \
    \ }\n    return count\n}\n", "    a := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        a[i-1] = i * i - i + 1\n    }\n    cnt := 0\n    for i := 0;\
    \ i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n      \
    \              cnt++\n                }\n            }\n        }\n    }\n   \
    \ return cnt\n}\n", "    count := 0\n    if n < 3 {\n        return count\n  \
    \  }\n    a := make([]int, n)\n    a[0] = 1\n    for i := 1; i < n; i++ {\n  \
    \      a[i] = a[i-1] + 2*i\n    }\n    for i := 0; i < n; i++ {\n        for j\
    \ := i+1; j < n; j++ {\n            for k := j+1; k < n; k++ {\n             \
    \   if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n", "    a := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var\
    \ count int\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n -\
    \ 1; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n", "    count := 0\n   \
    \ for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k < n; k++ {\n                sum := i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1\n                if sum % 3 == 0 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    // Your code here\n    var triples [][]int\n    for i := 1; i <= n;\
    \ i++ {\n        for j := i+1; j <= n; j++ {\n            for k := j+1; k <= n;\
    \ k++ {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 {\n       \
    \             triples = append(triples, []int{i, j, k})\n                }\n \
    \           }\n        }\n    }\n    return len(triples)\n}\n", "    var count\
    \ int = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k <= n; k++ {\n                if ((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    var triples int\n    if n < 3 {\n        return 0\n    }\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    triples++\n                }\n            }\n  \
    \      }\n    }\n    return triples\n}\n", "    // Write your code here\n    return\
    \ -1\n}\n", "    count := 0\n    for i := 1; i < n - 1; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n           \
    \     val := i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n                if\
    \ val % 3 == 0 {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n", "    // Write your code here\n\
    \    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i *\
    \ i - i + 1\n    }\n    res := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res++\n      \
    \          }\n            }\n        }\n    }\n    return res\n}\n", "    if n\
    \ < 3 {\n        return 0\n    }\n    var cnt, sum int\n    for i := 1; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                sum = (i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1)\n                if sum % 3 == 0 {\n                    cnt++\n     \
    \           }\n            }\n        }\n    }\n    return cnt\n}\n", "    var\
    \ tripleCount int = 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if ((i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n             \
    \       tripleCount += 1\n                }\n            }\n        }\n    }\n\
    \    return tripleCount\n}\n", "    if n < 3 {\n        return 0\n    }\n    var\
    \ a [1000]int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n \
    \   }\n    var count int\n    for i := 1; i <= n - 2; i++ {\n        for j :=\
    \ i + 1; j <= n - 1; j++ {\n            for k := j + 1; k <= n; k++ {\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var nums = make([]int, n)\n    for i := 1; i <= n; i++ {\n        nums[i-1]\
    \ = i * i - i + 1\n    }\n    fmt.Println(nums)\n    var cnt int\n    for i :=\
    \ 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k :=\
    \ j+1; k < n; k++ {\n                if (nums[i] + nums[j] + nums[k]) % 3 == 0\
    \ {\n                    cnt++\n                }\n            }\n        }\n\
    \    }\n    return cnt\n}\n", "    triples := 0\n    for i := 1; i < n - 1; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n;\
    \ k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0 {\n                    triples++\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n", "    // TODO\n    return 0\n}\n",
  "    c := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    c++\n \
    \               }\n            }\n        }\n    }\n    return c\n}\n", "    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    triple := 0\n    i :=\
    \ 0\n    j := 1\n    k := 2\n    for ; k < n; k++ {\n        if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n            triple++\n        }\n        if k == n - 1 {\n\
    \            if j == n - 2 {\n                i++\n                j = i + 1\n\
    \                k = j + 1\n            } else {\n                j++\n      \
    \          k = j + 1\n            }\n        }\n    }\n    return triple\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
