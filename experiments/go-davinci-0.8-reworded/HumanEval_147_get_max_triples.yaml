name: HumanEval_147_get_max_triples
language: go_test.go
prompt: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a positive integer n. You have to create an integer list a\
  \ of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i -\
  \ i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n\
  // 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1,\
  \ 7, 13).\nfunc get_max_triples(n int) int {\n"
tests: "func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
  \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
  \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // Write your code here\n    return 0\n}\n", "    // Write your\
    \ code here\n    return 0\n}\n", "    total_triples := 0\n    // fmt.Println(n)\n\
    \    for index, _ := range make([]int, n) {\n        // fmt.Println(index)\n \
    \       if (index + 1) * (index + 1) - (index + 1) + 1 == index + 1 {\n      \
    \      fmt.Println(index)\n            continue\n        }\n        for second_index,\
    \ _ := range make([]int, n) {\n            if second_index <= index {\n      \
    \          continue\n            }\n            if (second_index + 1) * (second_index\
    \ + 1) - (second_index + 1) + 1 == second_index + 1 {\n                fmt.Println(second_index)\n\
    \                continue\n            }\n            for third_index, _ := range\
    \ make([]int, n) {\n                if third_index <= second_index {\n       \
    \             continue\n                }\n                if (third_index + 1)\
    \ * (third_index + 1) - (third_index + 1) + 1 == third_index + 1 {\n         \
    \           fmt.Println(third_index)\n                    continue\n         \
    \       }\n                triple_sum := (index + 1) * (index + 1) - (index +\
    \ 1) + 1 + (second_index + 1) * (second_index + 1) - (second_index + 1) + 1 +\
    \ (third_index + 1) * (third_index + 1) - (third_index + 1) + 1\n            \
    \    if triple_sum % 3 == 0 {\n                    total_triples++\n         \
    \       }\n            }\n        }\n    }\n    return total_triples\n}\n", " \
    \   // your code here\n    a := make([]int, n)\n    for i:=0; i<n; i++ {\n   \
    \     a[i] = i*i - i + 1\n    }\n    cnt := 0\n    for i:=0; i<n-2; i++ {\n  \
    \      for j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n     \
    \           }\n            }\n        }\n    }\n    return cnt\n}\n", "    if\
    \ n <= 3 {\n        return 0\n    }\n    c := n - 2\n    return c * (c + 1) /\
    \ 2\n}\n", "    c := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                  \
    \  c++\n                }\n            }\n        }\n    }\n    return c\n}\n",
  "    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    triples := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples++\n     \
    \           }\n            }\n        }\n    }\n    return triples\n}\n", "  \
    \  if n <= 2 {\n        return 0\n    }\n    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n    m := make(map[int]int)\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            m[a[i] + a[j]] += 1\n        }\n    }\n    count := 0\n    for i\
    \ := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += m[a[k]]\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    arr := make([]int, n)\n    for i:=0; i<n; i++ {\n        arr[i]\
    \ = i*i - i + 1\n    }\n    return get_max_triples_inner(arr, 0, len(arr))\n}\n",
  "    if n <= 0 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    cnt := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    cnt++\n                }\n            }\n    \
    \    }\n    }\n    return cnt\n}\n", "    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n \
    \   count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    var res int\n    var cnt\
    \ [3]int\n    cnt[0] = 1\n    for i := 1; i < n; i++ {\n        v := i * i - i\
    \ + 1\n        if v % 3 == 0 {\n            res += cnt[0]\n        }\n       \
    \ cnt[v % 3]++\n    }\n    return res\n}\n", "    ans := 0\n    for i := 1; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0 {\n                    ans += 1\n                }\n         \
    \   }\n        }\n    }\n    return ans\n}\n", "    var max_triples int = 0\n\
    \    var a = make([]int, n)\n    // set a\n    for i := 1; i <= n; i++ {\n   \
    \     a[i-1] = i * i - i + 1\n    }\n    // judge a\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    max_triples++\n                }\n            }\n        }\n    }\n    return\
    \ max_triples\n}\n", "    c := make([]int, 4)\n    for i := 1; i <= n; i++ {\n\
    \        a := i * i - i + 1\n        c[a % 3]++\n    }\n    var result int\n \
    \   for i := 0; i < 3; i++ {\n        result += c[i] * (c[i] - 1) / 2\n    }\n\
    \    return result\n}\n", "    if n < 3 {\n        return 0\n    }\n    res :=\
    \ 0\n    // \u524D\u7F00\u548C\n    sum := make([]int, n)\n    sum[0] = 1\n  \
    \  for i := 1; i < n; i++ {\n        sum[i] = sum[i-1] + i*i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n          \
    \  if (sum[j] - sum[i]) % 3 == 0 {\n                for k := j+1; k < n; k++ {\n\
    \                    if (sum[k] - sum[j]) % 3 == 0 {\n                       \
    \ res += 1\n                    }\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if n < 3 {\n        return 0\n    }\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    var result int\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result++\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n", " \
    \   // Write your code here\n    return 0\n}\n", "    triples := 0\n    for i\
    \ := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k <= n; k++ {\n                if ((i * i - i + 1) + (j * j - j\
    \ + 1) + (k * k - k + 1)) % 3 == 0 {\n                    triples++\n        \
    \        }\n            }\n        }\n    }\n    return triples\n}\n", "    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
