language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement the algorithm here...\n    return\
    \ 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpb9a1zyx4_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpb9a1zyx4_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpb9a1zyx4_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpb9a1zyx4_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpb9a1zyx4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpb9a1zyx4_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpb9a1zyx4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpb9a1zyx4_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpb9a1zyx4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // func test() {\n    //     fmt.Println(triangle_area(3,\
    \ 4, 5))\n    //     fmt.Println(triangle_area(1, 2, 10))\n    // }\n    // test()\n\
    \    var (\n        p = float64(a + b + c) / 2\n        s = p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n    )\n    if s > 0 {\n        return\
    \ s * 0.5\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmphw4nzacz_test.go:55: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmphw4nzacz_test.go:55:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmphw4nzacz_test.go:55: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmphw4nzacz_test.go:55:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmphw4nzacz_test.go:55: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // YOUR CODE HERE\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpie9qsbxt_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpie9qsbxt_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpie9qsbxt_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpie9qsbxt_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpie9qsbxt_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpie9qsbxt_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpie9qsbxt_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpie9qsbxt_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpie9qsbxt_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    a64 := float64(a)\n    b64 := float64(b)\n    c64\
    \ := float64(c)\n    var res float64 = -1.0\n    if a64 < b64 + c64 && b64 < a64\
    \ + c64 && c64 < a64 + b64 {\n        p := (a64 + b64 + c64) / 2\n        s :=\
    \ p * (p - a64) * (p - b64) * (p - c64)\n        res = s\n    }\n    return res\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2ca3p_yw_test.go:52: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp2ca3p_yw_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp2ca3p_yw_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2ca3p_yw_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp2ca3p_yw_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    } else {\n        return (float64(area)\
    \ * 100).Round(2) / 100\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0pz6v3fh_test.go:24:38: (float64(area) * 100).Round undefined (type float64
    has no field or method Round)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return fmt.Sprintf(\"%.2f\", (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))**0.5)\n\
    \    }\n    return -1\n}\n\n//\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_98v3fr_test.go:21:16: cannot use fmt.Sprintf("%.2f", (p * (p - float64(a))
    * (p - float64(b)) * (p - float64(c))) * *0.5) (value of type string) as type
    float64 in return statement

    /tmp/tmp8_98v3fr_test.go:21:86: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\
    \ * 0.5\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_vl5i2ox_test.go:47: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_vl5i2ox_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_vl5i2ox_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_vl5i2ox_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_vl5i2ox_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    area := s * (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c))\n    return area\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp4izvnu9r_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp4izvnu9r_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp4izvnu9r_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp4izvnu9r_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp4izvnu9r_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tif a <= 0 || b <= 0 || c <= 0 {\n\t\treturn -1\n\t\
    }\n\n\t// Check if a valid triangle\n\tif !(a + b > c && a + c > b && b + c >\
    \ a) {\n\t\treturn -1\n\t}\n\n\tp := float64(a + b + c) / 2\n\tarea := math.Sqrt(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\treturn math.Round(area\
    \ * 100) / 100\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2zmfhgl_test.go:29:10: undefined: math

    /tmp/tmpr2zmfhgl_test.go:30:9: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // a, b, c must be positive\n    if a <= 0 || b\
    \ <= 0 || c <= 0 {\n        return -1\n    }\n    // two sides must be greater\
    \ than the third side\n    if a + b <= c || a + c <= b || b + c <= a {\n     \
    \   return -1\n    }\n    // all three sides must be less than or equal to the\
    \ perimeter\n    if a + b + c < a || a + b + c < b || a + b + c < c {\n      \
    \  return -1\n    }\n    return heron_formula(a, b, c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp479t4qqd_test.go:31:12: undefined: heron_formula

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me\n    // Checks if a triangle\
    \ is valid\n    if (a+b > c) && (a+c > b) && (b+c > a) {\n        // Calculates\
    \ semi-perimeter\n        s := (a+b+c)/2\n        // Uses Heron's formula to calculate\
    \ area\n        area := s*(s-a)*(s-b)*(s-c)\n        // Returns float rounded\
    \ to 2 decimal points\n        return float64(area)\n    }\n    // If the triangle\
    \ is not valid, return -1\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp66n0jl_l_test.go:54: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp66n0jl_l_test.go:54:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp66n0jl_l_test.go:54: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp66n0jl_l_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp66n0jl_l_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\ts := (a + b + c) / 2\n\td := (s - a) * (s - b) *\
    \ (s - c)\n\tif d < 0 {\n\t\treturn -1\n\t}\n\tx := float64(s) * float64(d)\n\t\
    return x\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwv37yloy_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwv37yloy_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwv37yloy_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpwv37yloy_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpwv37yloy_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpwv37yloy_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64\n    if a < b+c && b < a+c && c <\
    \ a+b {\n        s = float64(a+b+c) / 2\n        return (s-float64(a))*(s-float64(b))*(s-float64(c))*s\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpk27jerel_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpk27jerel_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpk27jerel_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpk27jerel_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpk27jerel_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p = (a + b + c) / 2.0\n    var area = math.Sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n    if area <= 0 {\n        return -1\n    }\n\
    \    return math.Round(area * 100) / 100\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbet7l_ks_test.go:20:16: undefined: math

    /tmp/tmpbet7l_ks_test.go:24:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    sum := float64(a + b + c)\n    if sum <= 0 {\n\
    \        return -1\n    }\n    s := sum / 2\n    area := (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    if area < 0 {\n        return -1\n\
    \    }\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnhhv2aex_test.go:52: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnhhv2aex_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnhhv2aex_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpnhhv2aex_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpnhhv2aex_test.go:52: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpnhhv2aex_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var A float64 = 0.5 * float64(a) * float64(b)\n\
    \    var B float64 = 0.5 * float64(a) * float64(c)\n    var C float64 = 0.5 *\
    \ float64(b) * float64(c)\n    if (A == B) && (B == C) {\n        return A\n \
    \   } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpeu3x79w9_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpeu3x79w9_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpeu3x79w9_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpeu3x79w9_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpeu3x79w9_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    area := (s * (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c))) \n    area = area * area\n\
    \    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfbszodqv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=1296)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfbszodqv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=4480.62890625)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__3 (0.00s)\n        tmpfbszodqv_test.go:49: expected\
    \ '%!s(float64=1.73)', got '%!s(float64=9)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpfbszodqv_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=69696)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n\
    \        tmpfbszodqv_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.03515625)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))**0.5\n\
    \    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpse1qd9vb_test.go:21:66: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var sides = []int{a, b, c}\n    fmt.Println(sides)\n\
    \    for i, _ := range sides {\n        for j, _ := range sides {\n          \
    \  if i != j && sides[i] + sides[j] <= sides[len(sides) - 1 - i - j] {\n     \
    \           return -1\n            }\n        }\n    }\n    s := float64(a + b\
    \ + c) / 2\n    return (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\
    \ ** 0.5\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpftzrv6bg_test.go:29:76: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz9zywwpg_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz9zywwpg_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // write your code here\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp01vmwxv3_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp01vmwxv3_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp01vmwxv3_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp01vmwxv3_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp01vmwxv3_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tvar area float64 = -1.0\n\tif a + b > c && a + c\
    \ > b && b + c > a {\n\t\tarea = float64(a) * float64(b) * 0.5\n\t}\n\treturn\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp65_w2pcl_test.go:47: expected '%!s(float64=8.18)', got '%!s(float64=16)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp65_w2pcl_test.go:47:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp65_w2pcl_test.go:47: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=25)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp65_w2pcl_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // heron's formula for triangle area\n        s := float64(a + b + c) / 2.0\n\
    \        return 2.0 * (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    }\n    return -1.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpiebkb4dd_test.go:48: expected '%!s(float64=6)', got '%!s(float64=72)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpiebkb4dd_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=133.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpiebkb4dd_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpiebkb4dd_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=528)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpiebkb4dd_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    var p = float64(a + b + c) / 2\n        var A = p * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c))\n        if A < 0 {\n            A = -A\n \
    \       }\n        return float64(2) * A / p\n    }\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwdh8jleu_test.go:51: expected '%!s(float64=6)', got '%!s(float64=12)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwdh8jleu_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=15.75)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwdh8jleu_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwdh8jleu_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=48)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwdh8jleu_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075213
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return 2 * p - float64(a) - float64(b)\
    \ - float64(c)\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmphz6i_w_4_test.go:47: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmphz6i_w_4_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmphz6i_w_4_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmphz6i_w_4_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmphz6i_w_4_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b <= c) || (a + c <= b) || (b + c <= a)\
    \ {\n        return -1\n    }\n\n    s := float64(a + b + c) / 2\n    area :=\
    \ (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpin_8uszn_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpin_8uszn_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpin_8uszn_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpin_8uszn_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpin_8uszn_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me!\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkc_ql5xa_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkc_ql5xa_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if (a+b>c) && (a+c>b) &&\
    \ (b+c>a) {\n        var s float64 = (float64(a) + float64(b) + float64(c)) /\
    \ 2\n        area = float64(s * (s-float64(a)) * (s-float64(b)) * (s-float64(c)))\n\
    \        area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpasrce9uk_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpasrce9uk_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpasrce9uk_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpasrce9uk_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpasrce9uk_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n\n    s := float64(a + b + c) / 2\n    return (s * (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmphgg8y648_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmphgg8y648_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmphgg8y648_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmphgg8y648_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmphgg8y648_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    // good luck!\n    return\
    \ 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy3zi88hj_test.go:45: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpy3zi88hj_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpy3zi88hj_test.go:45: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpy3zi88hj_test.go:45:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpy3zi88hj_test.go:45: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy3zi88hj_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpy3zi88hj_test.go:45: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpy3zi88hj_test.go:45:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpy3zi88hj_test.go:45: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        // Heron's formula: area of a triangle with sides a, b, c\n        p\
    \ := float64(a + b + c) / 2.0\n        return math.Sqrt(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfzwuz6hg_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p = float64(a + b + c) / 2\n    var result\
    \ = p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n    if result\
    \ < 0 {\n        return -1\n    }\n    return (float64(result) * 2) ** 0.5\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthycrz2l_test.go:24:37: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    x := float64(a)\n    y := float64(b)\n    z :=\
    \ float64(c)\n    var area float64\n    //fmt.Println(x + y + z)\n    if x + y\
    \ > z && x + z > y && y + z > x {\n        p := (x + y + z) / 2\n        area\
    \ = float64(p * (p - x) * (p - y) * (p - z))\n        area = area * 0.5\n    \
    \    fmt.Println(area)\n        area = area * 100\n        area = area + 0.5\n\
    \        fmt.Println(area)\n        area = float64(int(area))\n        fmt.Println(area)\n\
    \        area = area / 100\n        fmt.Println(area)\n        return area\n \
    \   } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "18\n1800.5\n1800\n18\n33.46875\n3347.375\n3347\n33.47\n1.5\n150.5\n150\n\
    1.5\n132\n13200.5\n13200\n132\n0.09375\n9.875\n9\n0.09\n--- FAIL: TestTriangle_Area\
    \ (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0 (0.00s)\n        tmpxy7ap5v3_test.go:63:\
    \ expected '%!s(float64=6)', got '%!s(float64=18)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpxy7ap5v3_test.go:63: expected '%!s(float64=8.18)', got '%!s(float64=33.47)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpxy7ap5v3_test.go:63:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpxy7ap5v3_test.go:63: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpxy7ap5v3_test.go:63: expected '%!s(float64=0.43)', got '%!s(float64=0.09)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        area = float64(a + b + c) * float64(a + b - c) * float64(a\
    \ - b + c) * float64(-a + b + c)\n        area = area / 4\n        area = area\
    \ / float64(a + b + c)\n    } else {\n        area = -1\n    }\n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpaerjfp59_test.go:51: expected '%!s(float64=6)', got '%!s(float64=12)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpaerjfp59_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=15.75)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpaerjfp59_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpaerjfp59_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=48)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpaerjfp59_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    fmt.Printf(\"a: %d, b: %d, c: %d\\n\", a, b, c)\n\
    \    // \n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n   \
    \ //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\
    \    //\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwzxyji9t_test.go:181:6: expected ''('', found TestTriangle_Area

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Area of a triangle is half the base times the height\n        // The height\
    \ is equal to the length of a line drawn from the vertex of the\n        // angle\
    \ of interest to the opposite side, and then dropped perpendicular to\n      \
    \  // that side.\n        // For simplicity, we'll use the 3, 4, 5 triangle as\
    \ an example.\n        // The height for this triangle would be the length of\
    \ a line drawn from the\n        // vertex of the right angle to the opposite\
    \ side (3)\n        // Then dropped perpendicular to that side.\n        // 3\
    \ x 4 = 12 / 2 = 6\n        return float64(a * b) / 2\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpg__wkukd_test.go:56: expected '%!s(float64=8.18)', got '%!s(float64=16)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpg__wkukd_test.go:56:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpg__wkukd_test.go:56: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=25)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpg__wkukd_test.go:56: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    perim := a + b + c\n    if\
    \ a+b > c && a+c > b && b+c > a {\n        area = perim * (perim - float64(a))\
    \ * (perim - float64(b)) * (perim - float64(c))\n        return area\n    } else\
    \ {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjr0gqbu_test.go:22:25: invalid operation: perim - float64(a) (mismatched
    types int and float64)

    /tmp/tmpdjr0gqbu_test.go:22:48: invalid operation: perim - float64(b) (mismatched
    types int and float64)

    /tmp/tmpdjr0gqbu_test.go:22:71: invalid operation: perim - float64(c) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := (a + b + c) / 2.0\n\n    if a + b <= c ||\
    \ a + c <= b || b + c <= a {\n        return -1\n    }\n\n    return float64(a\
    \ * b * c) / float64(4 * int(s))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg9bg_yme_test.go:49: expected '%!s(float64=6)', got '%!s(float64=2.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg9bg_yme_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=5)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg9bg_yme_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=0.6666666666666666)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg9bg_yme_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=7.954545454545454)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpg9bg_yme_test.go:49:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0.25)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b <= c) || (a + c <= b) || (b + c <= a)\
    \ {\n        return -1\n    }\n    // valid triangle\n    p := float64(a + b +\
    \ c) / 2.0\n    return p*(p-float64(a))*(p-float64(b))*(p-float64(c))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmurps1zt_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmurps1zt_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmurps1zt_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpmurps1zt_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpmurps1zt_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return (s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c))) / 2\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz507i75b_test.go:48: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz507i75b_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz507i75b_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz507i75b_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz507i75b_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ res float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n \
    \   if res <= 0 {\n        return -1\n    } else {\n        return  float64(a)\
    \ * float64(b) * float64(c) / (4 * res)\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcfb_kftv_test.go:49: expected '%!s(float64=6)', got '%!s(float64=0.4166666666666667)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcfb_kftv_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0.5975723622782446)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpcfb_kftv_test.go:49:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.6666666666666666)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcfb_kftv_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0.3314393939393939)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpcfb_kftv_test.go:49:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=1.3333333333333333)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    max := a\n    if max < b {\n        max = b\n \
    \   }\n    if max < c {\n        max = c\n    }\n    if a + b + c - max > max\
    \ {\n        return float64(a + b + c - max) * float64(a + b + c - max - max)\
    \ / 4\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcaflwtys_test.go:53: expected '%!s(float64=6)', got '%!s(float64=3.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcaflwtys_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=2.25)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcaflwtys_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcaflwtys_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcaflwtys_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b <= c || a+c <= b || b+c <= a {\n       \
    \ return -1\n    }\n    p := float64(a+b+c) / 2\n    s := p * (p-float64(a)) *\
    \ (p-float64(b)) * (p-float64(c))\n    return round(2, math.Sqrt(s))\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5p13unie_test.go:24:12: undefined: round

    /tmp/tmp5p13unie_test.go:24:21: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tif a + b <= c || a + c <= b || b + c <= a {\n\t\t\
    return -1\n\t}\n\ts := float64(a + b + c) / 2\n\tarea := float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n\treturn round2(area)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprl4p1epp_test.go:24:9: undefined: round2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        s := p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n\
    \        return s\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpbhd4im6d_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpbhd4im6d_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpbhd4im6d_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpbhd4im6d_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpbhd4im6d_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    area := -1.0\n    var ar, br, cr float64\n    ar\
    \ = float64(a)\n    br = float64(b)\n    cr = float64(c)\n    p := (ar + br +\
    \ cr) / 2.0\n    if (ar + br > cr) && (ar + cr > br) && (br + cr > ar) {\n   \
    \     area = p * (p - ar) * (p - br) * (p - cr)\n        area = area * 0.5\n \
    \   }\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnuu0vsjz_test.go:53: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnuu0vsjz_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnuu0vsjz_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnuu0vsjz_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnuu0vsjz_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a+b > c) && (a+c > b) && (b+c > a) {\n    \
    \    return float64(a+b+c)/2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp3xeio6l2_test.go:46: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp3xeio6l2_test.go:46:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp3xeio6l2_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp3xeio6l2_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075216
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // write your code here\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmppfsj5j48_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmppfsj5j48_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmppfsj5j48_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmppfsj5j48_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmppfsj5j48_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmppfsj5j48_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmppfsj5j48_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmppfsj5j48_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmppfsj5j48_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        return 2 * area\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdx40d8p5_test.go:49: expected '%!s(float64=6)', got '%!s(float64=72)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdx40d8p5_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=133.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdx40d8p5_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdx40d8p5_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=528)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdx40d8p5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    p := (a + b + c) / 2\n    if (p - a) * (p - b)\
    \ * (p - c) <= 0 {\n        return -1\n    }\n    return float64(p * (p - a) *\
    \ (p - b) * (p - c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpm_820yoh_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpm_820yoh_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpm_820yoh_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpm_820yoh_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpm_820yoh_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tvar length []int\n\tlength = append(length, a)\n\t\
    length = append(length, b)\n\tlength = append(length, c)\n\tfor i := 0; i < len(length)-1;\
    \ i++ {\n\t\tfor j := i+1; j < len(length); j++ {\n\t\t\tif length[i] > length[j]\
    \ {\n\t\t\t\ttemp := length[i]\n\t\t\t\tlength[i] = length[j]\n\t\t\t\tlength[j]\
    \ = temp\n\t\t\t}\n\t\t}\n\t}\n\tif length[0] + length[1] <= length[2] {\n\t\t\
    return -1\n\t}\n\tvar s float64\n\ts = float64(length[0] + length[1] + length[2])\
    \ / 2\n\ttriangleArea := (s * (s - float64(length[0])) * (s - float64(length[1]))\
    \ * (s - float64(length[2])))\n\treturn triangleArea\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwrzotnrk_test.go:62: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwrzotnrk_test.go:62:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwrzotnrk_test.go:62: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwrzotnrk_test.go:62:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwrzotnrk_test.go:62: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b) <= c || (a + c) <= b || (b + c) <= a\
    \ {\n        return -1\n    }\n\n    p := (a + b + c) / 2\n    area := float64(p\
    \ * (p - a) * (p - b) * (p - c))\n    area = area * math.Pow(area, 0.5)\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqz5adb5c_test.go:25:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        // Heron's formula\n        s := float64(a + b + c)\
    \ / 2\n        area = math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s -\
    \ float64(c)))\n    } else {\n        area = -1\n    }\n    return area\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyvusmc_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    area := -1.0\n    if (a + b > c) && (a + c > b)\
    \ && (b + c > a) {\n        s := float64(a + b + c) / 2.0\n        area = (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        area = area * s\n\
    \        area = area ** 0.5\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphb062_1j_test.go:24:24: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64 = -1.0\n    if a + b > c && a\
    \ + c > b && b + c > a {\n        p := float64(a + b + c) / 2.0\n        area\
    \ = p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        area =\
    \ area * area\n        area = float64(int(area * 100)) / 100.0\n    }\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqgdiwa1o_test.go:50: expected '%!s(float64=6)', got '%!s(float64=1296)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpqgdiwa1o_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=4480.62)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpqgdiwa1o_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=9)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpqgdiwa1o_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=69696)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpqgdiwa1o_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.03)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        return (p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n\
    \    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmptli2wfm5_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmptli2wfm5_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmptli2wfm5_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmptli2wfm5_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmptli2wfm5_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = float64(s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c)))\n    if area > 0 {\n        area = area * 0.5\n    } else\
    \ {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcmcftwi1_test.go:50: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcmcftwi1_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcmcftwi1_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcmcftwi1_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcmcftwi1_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if ((a + b) > c) && ((a +\
    \ c) > b) && ((b + c) > a) {\n        s := (a + b + c) / 2\n        area = float64(s\
    \ * (s - a) * (s - b) * (s - c))\n        area = float64(area)\n        area =\
    \ area * 0.5\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmppgqq7h_u_test.go:52: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmppgqq7h_u_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmppgqq7h_u_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmppgqq7h_u_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmppgqq7h_u_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return math.Sqrt(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvgpyi8oo_test.go:21:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075217
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // YOUR CODE HERE\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3mlklex0_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3mlklex0_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3mlklex0_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3mlklex0_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3mlklex0_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a+b+c) / 2\n    var a_float\
    \ float64 = float64(a)\n    var b_float float64 = float64(b)\n    var c_float\
    \ float64 = float64(c)\n    if s < a_float || s < b_float || s < c_float {\n \
    \       return -1\n    }\n    area := s * (s - a_float) * (s - b_float) * (s -\
    \ c_float)\n    area = area * 0.5\n    area = float64(int(area * 100)) / 100\n\
    \    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkya1f2m9_test.go:53: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkya1f2m9_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkya1f2m9_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpkya1f2m9_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpkya1f2m9_test.go:53: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpkya1f2m9_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=0.09)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\t// Your code here\n\treturn 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmt5rpip9_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpmt5rpip9_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpmt5rpip9_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpmt5rpip9_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpmt5rpip9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpmt5rpip9_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpmt5rpip9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpmt5rpip9_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpmt5rpip9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        area := s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c))\n        return float64(area)\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwfcnwn4l_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwfcnwn4l_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwfcnwn4l_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwfcnwn4l_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwfcnwn4l_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        // http://www.mathopenref.com/heronsformula.html\n\
    \        p := float64(a + b + c) / 2\n        s := p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))\n        area := math.Sqrt(s)\n        return\
    \ math.Round(area * 100) / 100\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp047ebr6v_test.go:24:17: undefined: math

    /tmp/tmp047ebr6v_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var longest int\n    var sum_of_others int\n  \
    \  if a >= b && a >= c {\n        longest = a\n        sum_of_others = b + c\n\
    \    } else if b >= a && b >= c {\n        longest = b\n        sum_of_others\
    \ = a + c\n    } else {\n        longest = c\n        sum_of_others = a + b\n\
    \    }\n    if longest >= sum_of_others {\n        return -1\n    }\n    var p\
    \ float64 = (float64(a) + float64(b) + float64(c)) / 2\n    var area float64 =\
    \ math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n    return\
    \ math.Round(area * 100) / 100\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0q42dtjy_test.go:35:24: undefined: math

    /tmp/tmp0q42dtjy_test.go:36:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    p := (a + b + c) / 2\n    s := float64(p * (p -\
    \ a) * (p - b) * (p - c))\n    return s\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpeo1x93zt_test.go:45: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpeo1x93zt_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(float64=-480)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpeo1x93zt_test.go:45: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpeo1x93zt_test.go:45:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpeo1x93zt_test.go:45: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpeo1x93zt_test.go:45:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpeo1x93zt_test.go:45: expected '%!s(int=-1)', got '%!s(float64=-30)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpeo1x93zt_test.go:45:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpeo1x93zt_test.go:45: expected '%!s(int=-1)', got '%!s(float64=-525)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpow550hu2_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpow550hu2_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    return float64(a + b + c) / 2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpuq0a6jaw_test.go:46: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpuq0a6jaw_test.go:46:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpuq0a6jaw_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpuq0a6jaw_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2.0\n    area := s *\
    \ (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if area <= 0 {\n\
    \        return -1\n    }\n    return area * 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp16xk0iym_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp16xk0iym_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a <= 0 || b <= 0 || c\
    \ <= 0 {\n        return -1\n    }\n    // The formula for the area of a triangle\
    \ given the lengths of the three sides is:\n    // area = sqrt(s(s-a)(s-b)(s-c))\n\
    \    // where s = (a+b+c)/2\n    s := (a + b + c) / 2\n    area = math.Sqrt(float64(s*(s-a)*(s-b)*(s-c)))\n\
    \    return math.Round(area*100)/100\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3a52b9l0_test.go:27:12: undefined: math

    /tmp/tmp3a52b9l0_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if (a + b > c) && (a + c\
    \ > b) && (b + c > a) {\n        area = float64(a) + float64(b) + float64(c)\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp4mddr1n9_test.go:49: expected '%!s(float64=6)', got '%!s(float64=12)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp4mddr1n9_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=17)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp4mddr1n9_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp4mddr1n9_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=22)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp4mddr1n9_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        var s float64 = float64(a + b + c) / 2\n        return float64(s * (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else {\n       \
    \ return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdr69_0fj_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdr69_0fj_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdr69_0fj_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdr69_0fj_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdr69_0fj_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b>c && a+c>b && b+c>a {\n        p := float64(a+b+c)/2\n\
    \        area := float64(p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n   \
    \     return area\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp3t7x1mnm_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp3t7x1mnm_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp3t7x1mnm_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp3t7x1mnm_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp3t7x1mnm_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // a + b > c && a + c > b && b + c > a\n    if\
    \ a + b > c && a + c > b && b + c > a {\n        s := float64(a + b + c) / 2\n\
    \        return (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))) **\
    \ (1/2)\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73qa6xmg_test.go:22:80: invalid operation: cannot indirect (1 / 2) (untyped
    int constant 0)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // p is half the perimeter\n        p := float64(a + b + c) / 2.0\n     \
    \   // Heron's formula\n        return 2 * math.Sqrt(p * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6sc2f60t_test.go:23:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p\
    \ - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1p8wrdf9_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp1p8wrdf9_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp1p8wrdf9_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp1p8wrdf9_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp1p8wrdf9_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tvar s = float64(a + b + c) / 2\n\tvar area = math.Sqrt(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\tif area < 0 {\n\
    \t\treturn -1\n\t}\n\treturn math.Round(area * 100) / 100\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilp4qgqd_test.go:20:13: undefined: math

    /tmp/tmpilp4qgqd_test.go:24:9: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        return float64(a + b + c) * float64(a + b - c) * float64(a - b + c) *\
    \ float64(-a + b + c)\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpuhyx0uor_test.go:47: expected '%!s(float64=6)', got '%!s(float64=576)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpuhyx0uor_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=1071)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpuhyx0uor_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=48)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpuhyx0uor_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=4224)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpuhyx0uor_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075219
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO Implement!\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8fp50zdl_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp8fp50zdl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp8fp50zdl_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp8fp50zdl_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp8fp50zdl_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8fp50zdl_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp8fp50zdl_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp8fp50zdl_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp8fp50zdl_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s\
    \ - float64(b)) * (s - float64(c))) ** 0.5\n    } else {\n        return -1\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdz4ihm_f_test.go:21:80: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2.0\n    if (float64(a) + float64(b) > float64(c)) && (float64(a) + float64(c)\
    \ > float64(b)) && (float64(b) + float64(c) > float64(a)) {\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else {\n  \
    \      return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpd7a18ewo_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpd7a18ewo_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpd7a18ewo_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpd7a18ewo_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpd7a18ewo_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    fmt.Printf(\"a: %d, b: %d, c: %d\\n\", a, b, c)\n\
    \    if !is_valid_triangle(a, b, c) {\n        return -1\n    }\n    p := (a +\
    \ b + c) / 2.0\n    area := math.Sqrt(p * (p - a) * (p - b) * (p - c))\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprggde770_test.go:20:9: undefined: is_valid_triangle

    /tmp/tmprggde770_test.go:24:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        s := p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))\n        return float64(s)\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1u5nkvco_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp1u5nkvco_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp1u5nkvco_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp1u5nkvco_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp1u5nkvco_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2.0\n    area := s *\
    \ (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if area <= 0 {\n\
    \        return -1\n    }\n    return area * 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp16xk0iym_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp16xk0iym_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp16xk0iym_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // if a + b > c {\n    //     fmt.Println(\"a+b:\"\
    , a+b, \"c:\", c)\n    //     fmt.Println(\"a+b > c\")\n    // } else {\n    //\
    \     fmt.Println(\"a+b:\", a+b, \"c:\", c)\n    //     fmt.Println(\"a+b < c\"\
    )\n    // }\n    if a + b > c && a + c > b && b + c > a {\n        p := float64(a\
    \ + b + c) / 2\n        area := p * (p - float64(a)) * (p - float64(b)) * (p -\
    \ float64(c))\n        return area\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnw7jmu9m_test.go:56: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnw7jmu9m_test.go:56:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnw7jmu9m_test.go:56: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnw7jmu9m_test.go:56:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnw7jmu9m_test.go:56: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075220
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if !is_valid_triangle(a, b, c) {\n        return\
    \ -1\n    }\n\n    // Calculate using Heron's formula for area of a triangle\n\
    \    p := (a + b + c) / 2.0\n\n    return sqrt(p * (p - a) * (p - b) * (p - c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1nzptfhk_test.go:19:9: undefined: is_valid_triangle

    /tmp/tmp1nzptfhk_test.go:26:12: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a < 1 || b < 1 || c < 1 {\n        return -1\n\
    \    }\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n \
    \   }\n    p := float64(a + b + c) / 2\n    return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg_wxwqwx_test.go:50: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg_wxwqwx_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg_wxwqwx_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg_wxwqwx_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg_wxwqwx_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\tvar s = float64(a + b + c) / 2\n\tvar area = s *\
    \ (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\treturn area < 0.0\
    \ ? -1.0 : area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qu2v6hv_test.go:21:20: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075219
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n\n    if a == b && b == c {\n        return float64(a)\
    \ * float64(a) * math.Sqrt(3) / 4\n    }\n\n    p := float64(a + b + c) / 2\n\
    \    return math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzd0v0_uh_test.go:24:42: undefined: math

    /tmp/tmpzd0v0_uh_test.go:28:12: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    } else {\n        return float64(int(area\
    \ * 100)) / 100\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp95ozz6ev_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp95ozz6ev_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.93)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp95ozz6ev_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp95ozz6ev_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp95ozz6ev_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n        return float64(area)\n\
    \    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzo3pyalv_test.go:50: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzo3pyalv_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzo3pyalv_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzo3pyalv_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpzo3pyalv_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64\n    var area float64\n    s = float64(a\
    \ + b + c) / 2\n    area = (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    if area <= 0 {\n        return -1\n    }\n    area = float64(area)\n    area\
    \ = area ** 0.5\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9seawfd_test.go:27:20: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075220
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a < b + c && b < a + c && c < a + b {\n    \
    \    s := float64(a + b + c) / 2\n        area := s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c))\n        return float64(area)\n    } else {\n\
    \        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2cxdf0fl_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp2cxdf0fl_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp2cxdf0fl_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2cxdf0fl_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp2cxdf0fl_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p float64 = float64(a+b+c) / 2.0\n    var area\
    \ float64 = p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n    if area\
    \ <= 0 {\n        return -1\n    }\n    return area * 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_xrgu_x6_test.go:48: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_xrgu_x6_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_xrgu_x6_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_xrgu_x6_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_xrgu_x6_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        area = 0.5 * float64(a * b)\n    } else {\n        area\
    \ = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpume0xrs5_test.go:49: expected '%!s(float64=8.18)', got '%!s(float64=16)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpume0xrs5_test.go:49:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpume0xrs5_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=25)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpume0xrs5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpow550hu2_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpow550hu2_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpow550hu2_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // === YOUR CODE HERE ===\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5m1n41at_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp5m1n41at_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp5m1n41at_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp5m1n41at_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp5m1n41at_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5m1n41at_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp5m1n41at_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp5m1n41at_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp5m1n41at_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64\n    s = float64(a + b + c) / 2\n\
    \    area := float64(s*(s-float64(a))*(s-float64(b))*(s-float64(c)))\n    if area\
    \ < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmprf27wna7_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmprf27wna7_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmprf27wna7_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmprf27wna7_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmprf27wna7_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmprf27wna7_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var p float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if p < 0 {\n        return -1\n    } else {\n        return float64(p)\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpiwlct52e_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpiwlct52e_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpiwlct52e_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpiwlct52e_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpiwlct52e_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpiwlct52e_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var arr []int = []int{a, b, c}\n    fmt.Println(arr)\n\
    \    var count, i int\n    for i = 0; i < 3; i++ {\n        if arr[i] == max(arr)\
    \ {\n            count++\n        }\n    }\n    if count != 1 {\n        return\
    \ -1\n    }\n    p := float64(a + b + c) / 2\n    s := p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c))\n    var res float64\n    if s > 0 {\n \
    \       res = (s) ** 0.5\n    } else {\n        res = -1\n    }\n    return res\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx413tval_test.go:23:22: undefined: max

    /tmp/tmpx413tval_test.go:34:22: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2.0\n    area := (s *\
    \ (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    if area < 0 {\n\
    \        return -1\n    } else {\n        return (float64(area) * 2.0).Sqrt()\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpva2noxwl_test.go:24:38: (float64(area) * 2.0).Sqrt undefined (type float64
    has no field or method Sqrt)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var result float64\n    if (a+b>c) && (a+c>b) &&\
    \ (b+c>a) {\n        // https://en.wikipedia.org/wiki/Heron%27s_formula\n    \
    \    p := float64(a+b+c) / 2.0\n        s := p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c))\n        result = 2 * s\n    } else {\n        result = -1\n\
    \    }\n    return result\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkf2gxn23_test.go:52: expected '%!s(float64=6)', got '%!s(float64=72)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkf2gxn23_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=133.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkf2gxn23_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkf2gxn23_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=528)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkf2gxn23_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: your code here\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpf3alzicz_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpf3alzicz_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpf3alzicz_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpf3alzicz_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpf3alzicz_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpf3alzicz_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpf3alzicz_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpf3alzicz_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpf3alzicz_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64\n    s = float64(a+b+c) / 2\n   \
    \ return s\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__1\
    \ (0.00s)\n        tmpuz1n8b_b_test.go:45: expected '%!s(int=-1)', got '%!s(float64=6.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpuz1n8b_b_test.go:45:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpuz1n8b_b_test.go:45: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpuz1n8b_b_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpuz1n8b_b_test.go:45: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__6 (0.00s)\n   \
    \     tmpuz1n8b_b_test.go:45: expected '%!s(int=-1)', got '%!s(float64=5.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpuz1n8b_b_test.go:45:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpuz1n8b_b_test.go:45: expected '%!s(int=-1)', got '%!s(float64=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    if p-float64(a) > 0 && p-float64(b) > 0 && p-float64(c) > 0 {\n   \
    \     s := p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n        return\
    \ 2 * s\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpewq273pp_test.go:48: expected '%!s(float64=6)', got '%!s(float64=72)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpewq273pp_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=133.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpewq273pp_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpewq273pp_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=528)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpewq273pp_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    return float64(0.5 * (a * b + b * c + a * c))\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfp7w37ax_test.go:20:24: 0.5 (untyped float constant) truncated to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var t float64\n    if a < b + c && b < a + c &&\
    \ c < a + b {\n        s := float64(a + b + c) / 2\n        t = (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n        if t < 0 {\n            t =\
    \ -1\n        } else {\n            t = t * 2\n        }\n    } else {\n     \
    \   t = -1\n    }\n    return t\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpcsfwfci9_test.go:55: expected '%!s(float64=6)', got '%!s(float64=72)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcsfwfci9_test.go:55:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=133.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcsfwfci9_test.go:55: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpcsfwfci9_test.go:55:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=528)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpcsfwfci9_test.go:55: expected '%!s(float64=0.43)', got '%!s(float64=0.375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a+b) <= c || (a+c) <= b || (b+c) <= a {\n \
    \       return -1\n    }\n    s := float64(a+b+c) / 2\n    area := s * (s-float64(a))\
    \ * (s-float64(b)) * (s-float64(c))\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmwjx3sdc_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmwjx3sdc_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmwjx3sdc_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpmwjx3sdc_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpmwjx3sdc_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b < c || a+c < b || b+c < a {\n        return\
    \ -1\n    }\n\n    s := float64(a+b+c) / 2\n    return (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamp3m4w6_test.go:24:62: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2.0\n    return -1.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqp50b8r1_test.go:19:5: s declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64 = -1\n    var longest, rest int\n\
    \    var tmp float64\n    if a > b {\n        if a > c {\n            longest\
    \ = a\n            rest = b + c\n        } else {\n            longest = c\n \
    \           rest = a + b\n        }\n    } else {\n        if b > c {\n      \
    \      longest = b\n            rest = a + c\n        } else {\n            longest\
    \ = c\n            rest = a + b\n        }\n    }\n    if rest > longest {\n \
    \       tmp = float64(a)\n        s := float64(rest + longest)\n        area =\
    \ (s * (s - tmp) * (s - float64(b)) * (s - float64(c)))\n        area = area *\
    \ 0.5\n    }\n    return area\n}\n\ntype TestData \nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphr_quu_d_test.go:48:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075221
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5qq4g6sv_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5qq4g6sv_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2\n    x := s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n    if x <= 0 {\n       \
    \ return -1\n    }\n    return round(math.Sqrt(x), .5, 2)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp735da75z_test.go:24:12: undefined: round

    /tmp/tmp735da75z_test.go:24:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075222
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n\n    s := float64(a + b + c) / 2.0\n    a = int(s *\
    \ (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    return float64(a)\
    \ / 4.0\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwv1kzynu_test.go:49: expected '%!s(float64=6)', got '%!s(float64=9)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwv1kzynu_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=16.5)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwv1kzynu_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=0.75)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwv1kzynu_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=66)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwv1kzynu_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075223
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    p := (a + b + c) / 2.0\n    s := p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c))\n    if s <= 0 {\n        return -1\n\
    \    }\n    return float64(s)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmfxqm1jo_test.go:20:15: invalid operation: p - float64(a) (mismatched
    types int and float64)

    /tmp/tmpmfxqm1jo_test.go:20:34: invalid operation: p - float64(b) (mismatched
    types int and float64)

    /tmp/tmpmfxqm1jo_test.go:20:53: invalid operation: p - float64(c) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075223
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here.\n    if(a+b>c && a+c>b\
    \ && b+c>a){\n        s := float64(a+b+c)/2\n        return (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n\
    \    }else{\n        return -1\n    }\n}\n\n//TODO: test cases\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8vccqflc_test.go:22:66: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075223
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6xw209jv_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6xw209jv_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075218
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a < 0 || b < 0 || c < 0) {\n        return\
    \ -1\n    }\n    if (a + b > c && a + c > b && b + c > a) {\n        p := float64(a\
    \ + b + c) / 2\n        s := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n\
    \        return 2 * s / p\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsmreghue_test.go:51: expected '%!s(float64=6)', got '%!s(float64=12)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsmreghue_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=15.75)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsmreghue_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsmreghue_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=48)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsmreghue_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075223
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    area := float64(a + b + c) * 0.5\n        return area\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmppubdng59_test.go:47: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmppubdng59_test.go:47:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmppubdng59_test.go:47: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmppubdng59_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075223
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return\
    \ -1\n    }\n    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return\
    \ -1\n    }\n    // area = (a + b + c) / 2\n    s := float64(a + b + c) / 2\n\
    \    // area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return (s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c))) * 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6nrltyth_test.go:52: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6nrltyth_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6nrltyth_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6nrltyth_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6nrltyth_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075223
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var max int\n    if a > b {\n        max = a\n\
    \    } else {\n        max = b\n    }\n    if c > max {\n        max = c\n   \
    \ }\n    if a + b + c - max > max {\n        p := float64(a + b + c) / 2\n   \
    \     return math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7yodoj8_test.go:30:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\treturn 6.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__1\
    \ (0.00s)\n        tmpmph5t0ko_test.go:43: expected '%!s(int=-1)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmph5t0ko_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmph5t0ko_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=6)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpmph5t0ko_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpmph5t0ko_test.go:43: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__6 (0.00s)\n    \
    \    tmpmph5t0ko_test.go:43: expected '%!s(int=-1)', got '%!s(float64=6)'\n  \
    \  --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpmph5t0ko_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpmph5t0ko_test.go:43: expected '%!s(int=-1)', got '%!s(float64=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075224
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a+b) > c && (a+c) > b && (b+c) > a {\n    \
    \    p := (a+b+c)/2\n        S := float64(p*(p-a)*(p-b)*(p-c))\n        return\
    \ (S)**0.5\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpye5g2h60_test.go:22:21: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmerwepgd_test.go:47: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpmerwepgd_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(float64=-563.0625)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpmerwepgd_test.go:47: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpmerwepgd_test.go:47:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpmerwepgd_test.go:47: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpmerwepgd_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpmerwepgd_test.go:47: expected '%!s(int=-1)', got '%!s(float64=-24.0625)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpmerwepgd_test.go:47:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpmerwepgd_test.go:47: expected '%!s(int=-1)', got '%!s(float64=-525)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Write your solution here\n    return 0.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpjfix4dhv_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpjfix4dhv_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpjfix4dhv_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpjfix4dhv_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpjfix4dhv_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpjfix4dhv_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpjfix4dhv_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpjfix4dhv_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpjfix4dhv_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\t// TODO: Implement Me\n\treturn -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpx9ph8njv_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpx9ph8njv_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpx9ph8njv_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpx9ph8njv_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpx9ph8njv_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075224
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // handle the special case of negative numbers.\n\
    \    if a < 0 || b < 0 || c < 0 {\n        return -1\n    }\n    if (a + b) >\
    \ c && (a + c) > b && (b + c) > a {\n        p := (a + b + c) / 2.0\n        s\
    \ := p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        if s\
    \ > 0 {\n            return 2 * s\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwx7inalt_test.go:25:19: invalid operation: p - float64(a) (mismatched
    types int and float64)

    /tmp/tmpwx7inalt_test.go:25:38: invalid operation: p - float64(b) (mismatched
    types int and float64)

    /tmp/tmpwx7inalt_test.go:25:57: invalid operation: p - float64(c) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Fill this in.\n    var result float64 = -1\n\
    \    if a > 0 && b > 0 && c > 0 {\n        if (a + b > c) && (a + c > b) && (b\
    \ + c > a) {\n            s := (a + b + c) / 2\n            result = float64(s\
    \ * (s - a) * (s - b) * (s - c))\n            if result > 0 {\n              \
    \  result = result * 0.5\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmplats9a3u_test.go:54: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmplats9a3u_test.go:54:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmplats9a3u_test.go:54: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmplats9a3u_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmplats9a3u_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a+b+c) / 2.0\n    var res\
    \ float64 = (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))\n    if res < 0 {\n\
    \        return -1\n    }\n    return res\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpvfpwlq_y_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpvfpwlq_y_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpvfpwlq_y_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpvfpwlq_y_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpvfpwlq_y_test.go:48: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpvfpwlq_y_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b>c && a+c>b && b+c>a {\n        s := float64(a+b+c)/2\n\
    \        area := (s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n     \
    \   return area\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp01rkmx6o_test.go:21:67: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var r float64 = -1\n    if (a + b > c) && (a +\
    \ c > b) && (b + c > a) {\n        s := float64(a + b + c) / 2\n        r = (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c))\n        r = r * r\n   \
    \     r = r / s\n    }\n    return r\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpd0slmatp_test.go:50: expected '%!s(float64=8.18)', got '%!s(float64=7.295955882352941)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpd0slmatp_test.go:50:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.3333333333333333)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpd0slmatp_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=52.36363636363637)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpd0slmatp_test.go:50:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0.010416666666666666)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var perimeter float64 = float64(a + b + c)\n  \
    \  var halfPerimeter float64 = perimeter / 2\n    var area float64 = (halfPerimeter\
    \ * (halfPerimeter - float64(a)) * (halfPerimeter - float64(b)) * (halfPerimeter\
    \ - float64(c)))\n    var sqrt float64 = (area / halfPerimeter)\n    return sqrt\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__1\
    \ (0.00s)\n        tmpcdtw5836_test.go:47: expected '%!s(int=-1)', got '%!s(float64=-86.625)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpcdtw5836_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=7.875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpcdtw5836_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpcdtw5836_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpcdtw5836_test.go:47: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=24)'\n    --- FAIL: TestTriangle_Area/test_num__6 (0.00s)\n   \
    \     tmpcdtw5836_test.go:47: expected '%!s(int=-1)', got '%!s(float64=-4.375)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpcdtw5836_test.go:47:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0.125)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpcdtw5836_test.go:47: expected '%!s(int=-1)', got '%!s(float64=-75)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    p := float64(a + b + c) / 2.0\n\n    if p <= float64(a)\
    \ || p <= float64(b) || p <= float64(c) {\n        return -1\n    }\n\n    return\
    \ p * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmphnongh2t_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmphnongh2t_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmphnongh2t_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmphnongh2t_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmphnongh2t_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64\n    if a+b>c && a+c>b && b+c>a {\n\
    \        s = float64(a+b+c)/2\n        return float64(a+b+c)/2\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqg4vlnb6_test.go:19:9: s declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075224
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return 2 * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c)) / p\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp9ylzplc4_test.go:47: expected '%!s(float64=6)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp9ylzplc4_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=1.8529411764705883)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp9ylzplc4_test.go:47:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0.6666666666666666)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp9ylzplc4_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=4.363636363636363)'\n    ---\
    \ FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp9ylzplc4_test.go:47:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0.16666666666666666)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a+b < c) || (a+c < b) || (b+c < a) {\n    \
    \    return -1\n    }\n\n    // Heron's formula:\n    // A = Sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    // where s = 1/2 * (a+b+c)\n    // (I actually was not aware of this formula\
    \ and found it on the net.)\n    s := float64(a+b+c) / 2\n    area := s * (s-float64(a))\
    \ * (s-float64(b)) * (s-float64(c))\n    if area < 0 {\n        area = -area\n\
    \    }\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzduv6u1x_test.go:56: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpzduv6u1x_test.go:56:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpzduv6u1x_test.go:56: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpzduv6u1x_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpzduv6u1x_test.go:56: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpzduv6u1x_test.go:56: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s*(s-float64(a))*(s-float64(b))*(s-float64(c)))**0.5\n\
    \    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vtc3nwd_test.go:22:73: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    sum := a + b + c\n    if sum - a < a || sum - b\
    \ < b || sum - c < c {\n        return -1\n    }\n    p := float64(sum) / 2\n\
    \    area := p*(p-float64(a))*(p-float64(b))*(p-float64(c))\n    return float64(int(area*100))\
    \ / 100\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpx6fc7io9_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpx6fc7io9_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.93)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpx6fc7io9_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpx6fc7io9_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpx6fc7io9_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpx6fc7io9_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.18)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if (a < b + c) && (b < a\
    \ + c) && (c < a + b) {\n        s := float64(a + b + c) / 2\n        area = (s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n        area = area\
    \ * 0.5\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_rom_toz_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_rom_toz_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_rom_toz_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_rom_toz_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_rom_toz_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var res float64 = -1\n    if a + b > c && a + c\
    \ > b && b + c > a {\n        res = float64(a) * float64(b) / 2\n    }\n    return\
    \ res\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpj2872ztn_test.go:47: expected '%!s(float64=8.18)', got '%!s(float64=16)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpj2872ztn_test.go:47:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpj2872ztn_test.go:47: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=25)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpj2872ztn_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075225
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var t float64 = -1\n    if (a + b > c) && (a +\
    \ c > b) && (b + c > a) {\n        s := float64(a + b + c) / 2\n        t = s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n        t = t * 0.5\n\
    \    }\n    return t\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkq8_ag9i_test.go:49: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkq8_ag9i_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkq8_ag9i_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkq8_ag9i_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkq8_ag9i_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075226
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b <= c) || (a + c <= b) || (b + c <= a)\
    \ {\n        return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c))) ** (1.0 / 2.0)\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbmfnew25_test.go:23:76: invalid operation: cannot indirect (1.0 / 2.0)
    (untyped float constant 0.5)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075226
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    s := float64(a + b + c) / 2\n    area := s * (s\
    \ - float64(a)) * (s - float64(b)) * (s - float64(c))\n    if area < 0 {\n   \
    \     return -1\n    }\n    return fmt.Sprintf(\"%.2f\", math.Sqrt(area))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpysfw7f7__test.go:24:12: cannot use fmt.Sprintf("%.2f", math.Sqrt(area))
    (value of type string) as type float64 in return statement

    /tmp/tmpysfw7f7__test.go:24:32: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075226
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    switch {\n    case (a + b <= c) || (a + c <= b)\
    \ || (b + c <= a):\n        return -1\n    default:\n        s := float64(a +\
    \ b + c) / 2\n        return s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp4pvf7gvh_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp4pvf7gvh_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp4pvf7gvh_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp4pvf7gvh_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp4pvf7gvh_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075226
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var side_len = []int{a, b, c}\n    var valid_triangle\
    \ = true\n    var area = -1.0\n    if len(side_len) == 3 {\n        // check if\
    \ valid triangle\n        for i := 0; i < 3; i++ {\n            side1 := side_len[i]\n\
    \            side2 := side_len[(i+1)%3]\n            side3 := side_len[(i+2)%3]\n\
    \            if side1 + side2 <= side3 {\n                valid_triangle = false\n\
    \                break\n            }\n        }\n        if valid_triangle {\n\
    \            area = float64(a+b+c) / 2.0\n        }\n    }\n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp3h_pbang_test.go:61: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp3h_pbang_test.go:61:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp3h_pbang_test.go:61: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp3h_pbang_test.go:61: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075226
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        s := float64(p*(p-float64(a))*(p-float64(b))*(p-float64(c)))\n\
    \        return s\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp763j6fm2_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp763j6fm2_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp763j6fm2_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp763j6fm2_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp763j6fm2_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = (s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8zxjxeps_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp8zxjxeps_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp8zxjxeps_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8zxjxeps_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp8zxjxeps_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpnv__7e98_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpnv__7e98_test.go:43: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    sides := []int{a, b, c}\n    sort.Ints(sides)\n\
    \    switch sides[0] + sides[1] > sides[2] {\n    case true:\n        s := float64(sides[0]\
    \ + sides[1] + sides[2]) / 2\n        return math.Sqrt(s * (s - float64(sides[0]))\
    \ * (s - float64(sides[1])) * (s - float64(sides[2])))\n    default:\n       \
    \ return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphd2m9mja_test.go:20:5: undefined: sort

    /tmp/tmphd2m9mja_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075226
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a+b>c) && (a+c>b) && (b+c>a) {\n        p :=\
    \ float64(a+b+c) / 2\n        area := p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n\
    \        area = area ** (1.0/2.0)\n        return float64(area)\n    } else {\n\
    \        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkhmo0r85_test.go:22:24: invalid operation: cannot indirect (1.0 / 2.0)
    (untyped float constant 0.5)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075226
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var p float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    area := math.Sqrt(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    \    fmt.Println(math.Trunc(area * 100) / 100)\n    if area > 0 {\n        return\
    \ area\n    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu8a8098__test.go:20:13: undefined: math

    /tmp/tmpu8a8098__test.go:21:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075226
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement the function\n    return float64(a\
    \ * b / 2)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__1\
    \ (0.00s)\n        tmponsq_oot_test.go:44: expected '%!s(int=-1)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmponsq_oot_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=16)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmponsq_oot_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=2)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmponsq_oot_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmponsq_oot_test.go:44: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=25)'\n    --- FAIL: TestTriangle_Area/test_num__6 (0.00s)\n   \
    \     tmponsq_oot_test.go:44: expected '%!s(int=-1)', got '%!s(float64=6)'\n \
    \   --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmponsq_oot_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmponsq_oot_test.go:44: expected '%!s(int=-1)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n\t// Return the area of the triangle\n    var s float64\
    \ = float64(a + b + c) / 2.0\n    if s - float64(a) < 0 || s - float64(b) < 0\
    \ || s - float64(c) < 0 {\n        return -1\n    } else {\n        var area float64\
    \ = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n        return\
    \ area\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkdsnuh5j_test.go:50: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkdsnuh5j_test.go:50:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkdsnuh5j_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpkdsnuh5j_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpkdsnuh5j_test.go:50: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpkdsnuh5j_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64 = -1.0\n    var sideSum float64\
    \ = float64(a) + float64(b) + float64(c)\n    if sideSum >= float64(a) && sideSum\
    \ >= float64(b) && sideSum >= float64(c) {\n        var p float64 = sideSum /\
    \ 2.0\n        area = float64(p * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n\
    \        area = area * 0.5\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdg53iw8h_test.go:50: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpdg53iw8h_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=-281.53125)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpdg53iw8h_test.go:50: expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpdg53iw8h_test.go:50:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpdg53iw8h_test.go:50: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdg53iw8h_test.go:50:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpdg53iw8h_test.go:50: expected '%!s(int=-1)', got '%!s(float64=-12.03125)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpdg53iw8h_test.go:50:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpdg53iw8h_test.go:50: expected '%!s(int=-1)', got '%!s(float64=-262.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var side_sums []int\n    side_sums = append(side_sums,\
    \ a + b)\n    side_sums = append(side_sums, a + c)\n    side_sums = append(side_sums,\
    \ b + c)\n    for _, x := range side_sums {\n        if x < c {\n            return\
    \ -1\n        }\n    }\n    s := (a + b + c) / 2\n    area := (s * (s - a) * (s\
    \ - b) * (s - c)) ** (1/2)\n    fmt.Println(area)\n    return float64(int(area\
    \ * 100 + 0.5)) / 100\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvk1x70u_test.go:29:50: invalid operation: cannot indirect (1 / 2) (untyped
    int constant 0)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    return 0.0\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzdz1ews9_test.go:43:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzdz1ews9_test.go:43: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075215
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // if we can't make a triangle, return -1\n   \
    \ if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n    }\n    //\
    \ find the largest side\n    if a > b && a > c {\n        // side a is the largest\n\
    \        return float64(b*c) / 2\n    } else if b > a && b > c {\n        // side\
    \ b is the largest\n        return float64(a*c) / 2\n    } else {\n        //\
    \ side c is the largest\n        return float64(a*b) / 2\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp8ucuiu8a_test.go:57: expected '%!s(float64=8.18)', got '%!s(float64=10)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp8ucuiu8a_test.go:57:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=2)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp8ucuiu8a_test.go:57: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=17.5)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n \
    \       tmp8ucuiu8a_test.go:57: expected '%!s(float64=0.43)', got '%!s(float64=0.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    sum := float64(a + b + c)\n    if sum < 3 {\n \
    \       return -1\n    }\n    // Heron's formula\n    s := sum / 2\n    area :=\
    \ s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n    area = area\
    \ ** 0.5\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_4ijaosx_test.go:26:20: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    max_side := a\n    if b > max_side {\n        max_side\
    \ = b\n    }\n    if c > max_side {\n        max_side = c\n    }\n    if a + b\
    \ + c - max_side <= max_side {\n        return -1\n    }\n    // Heron's formula\n\
    \    s := float64(a + b + c) / 2\n    area := s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c))\n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpj4qjao0h_test.go:56: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpj4qjao0h_test.go:56:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpj4qjao0h_test.go:56: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpj4qjao0h_test.go:56:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpj4qjao0h_test.go:56: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p\
    \ - float64(a)) * (p - float64(b)) * (p - float64(c))) ** 0.5\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvde8y4v7_test.go:23:76: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_aoe3t86_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp_aoe3t86_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp_aoe3t86_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp_aoe3t86_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp_aoe3t86_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_aoe3t86_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp_aoe3t86_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp_aoe3t86_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp_aoe3t86_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p\
    \ - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var r float64 = -1\n    if a + b > c && a + c >\
    \ b && b + c > a {\n        s := float64(a + b + c) / 2\n        r = math.Sqrt(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ r\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb26e8gfr_test.go:22:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))) ** 0.5\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6omvhz3_test.go:21:80: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)) * s\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5xfa1eq1_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5xfa1eq1_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5xfa1eq1_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5xfa1eq1_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5xfa1eq1_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64 = 0\n    // calculate semi-perimeter\n\
    \    s := (a + b + c) / 2\n    if (s > a && s > b && s > c) {\n        // using\
    \ Heron's formula\n        area = float64(s * (s - a) * (s - b) * (s - c))\n \
    \       area = area * 0.5\n    } else {\n        area = -1\n    }\n    return\
    \ area\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp0vd_g0_7_test.go:53: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp0vd_g0_7_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp0vd_g0_7_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp0vd_g0_7_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp0vd_g0_7_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075227
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qkcmuoe_test.go:20:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        area := p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))\n        return float64(area)\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkz1s5esn_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkz1s5esn_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkz1s5esn_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkz1s5esn_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkz1s5esn_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var result float64 = -1\n    var sides = [3]int{a,\
    \ b, c}\n    // your code here\n    if (a < 0 || b < 0 || c < 0) {\n        return\
    \ result\n    }\n\n    max := sides[0]\n    if (sides[1] > max) {\n        max\
    \ = sides[1]\n    }\n    if (sides[2] > max) {\n        max = sides[2]\n    }\n\
    \n    if (sides[0] + sides[1] + sides[2] - max > max) {\n        p := float64(a\
    \ + b + c) / 2\n        result = float64(2) * math.Sqrt(p * (p - float64(a)) *\
    \ (p - float64(b)) * (p - float64(c)))\n    }\n\n    return result\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyt8p_uqy_test.go:36:31: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075227
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b <= c || a+c <= b || b+c <= a {\n       \
    \ return -1\n    }\n    p := float64(a+b+c) / 2\n    a = int(p * (p-float64(a))\
    \ * (p-float64(b)) * (p-float64(c)))\n    return float64(a)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1j1gn_p8_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp1j1gn_p8_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp1j1gn_p8_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp1j1gn_p8_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp1j1gn_p8_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a < 1 || b < 1 || c < 1 {\n        return -1\n\
    \    }\n\n    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n\
    \    }\n\n    s := float64(a + b + c) / 2\n    area := s * (s - float64(a)) *\
    \ (s - float64(b)) * (s - float64(c))\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn9ljpkkg_test.go:53: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn9ljpkkg_test.go:53:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn9ljpkkg_test.go:53: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn9ljpkkg_test.go:53:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn9ljpkkg_test.go:53: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s :=\
    \ float64(a+b+c) / 2\n        return float64(s * (s-float64(a)) * (s-float64(b))\
    \ * (s-float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_zpyy9l7_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_zpyy9l7_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_zpyy9l7_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_zpyy9l7_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_zpyy9l7_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    f := float64(0)\n    if a+b > c && a+c > b && b+c\
    \ > a {\n        f = (float64(a) + float64(b) + float64(c)) / 2\n        return\
    \ (f * (f - float64(a)) * (f - float64(b)) * (f - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5sqk9i6c_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5sqk9i6c_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5sqk9i6c_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5sqk9i6c_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5sqk9i6c_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    side := []int{a, b, c}\n    if(side[0] + side[1]\
    \ <= side[2] || side[0] + side[2] <= side[1] || side[1] + side[2] <= side[0])\
    \ {\n        return -1.0\n    }\n    x := (float64(side[0]) + float64(side[1])\
    \ + float64(side[2])) / 2.0\n    area := x\n    for i := 0; i < 3; i++ {\n   \
    \     area *= x - float64(side[i])\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpwk2u40gg_test.go:52: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpwk2u40gg_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpwk2u40gg_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpwk2u40gg_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpwk2u40gg_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var sum int\n    sum = a + b + c\n    if a + b\
    \ > c && a + c > b && b + c > a {\n        return float64(sum) * 0.5\n    } else\
    \ {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpp8lm_ngi_test.go:49: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp8lm_ngi_test.go:49:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpp8lm_ngi_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpp8lm_ngi_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b>c && a+c>b && b+c>a {\n        return float64(a+b+c)\
    \ / 2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp1nipt8i9_test.go:46: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp1nipt8i9_test.go:46:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp1nipt8i9_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp1nipt8i9_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075228
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    float_a := float64(a)\n        float_b := float64(b)\n        float_c :=\
    \ float64(c)\n        p := (float_a + float_b + float_c) / 2\n        area :=\
    \ math.Sqrt(p * (p - float_a) * (p - float_b) * (p - float_c))\n        return\
    \ math.Round(area * 100) / 100\n    } else {\n        return -1\n    }\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_qggz36_test.go:24:17: undefined: math

    /tmp/tmpf_qggz36_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075228
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b <= c) || (a + c <= b) || (b + c <= a)\
    \ {\n        return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(math.Sqrt(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c))))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp30bayvy1_test.go:23:20: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075228
