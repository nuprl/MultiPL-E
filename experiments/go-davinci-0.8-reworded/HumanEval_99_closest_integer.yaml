name: HumanEval_99_closest_integer
language: go_test.go
prompt: "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunc closest_integer(value string) int {\n"
tests: "func TestClosest_Integer(t *testing.T) {\n  candidate := closest_integer\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"10\"), expected: 10 },\n     {\
  \ actual: candidate(\"14.5\"), expected: 15 },\n     { actual: candidate(\"-15.5\"\
  ), expected: -16 },\n     { actual: candidate(\"15.3\"), expected: 15 },\n     {\
  \ actual: candidate(\"0\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sign := 1\n    if value[0] == '-' {\n        sign = -1\n      \
    \  value = value[1:]\n    }\n    s := \"\"\n    for _, v := range value {\n  \
    \      if v == '.' {\n            break\n        }\n        s += string(v)\n \
    \   }\n    v, _ := atoi(s)\n    i := v\n    s += \".\"\n    t := 0\n    for i\
    \ := len(s); i < len(value); i++ {\n        if value[i] == '.' {\n           \
    \ continue\n        }\n        t = t * 10 + int(value[i] - '0')\n    }\n    if\
    \ t >= 5 {\n        v += 1\n    }\n    return v * sign\n}\n", "    var num float64\
    \ = 0\n    fmt.Sscanf(value, \"%f\", &num)\n    return int(num + 0.5)\n}\n", " \
    \   return 0\n}\n", "    // create a function that takes a value (string) representing\
    \ a number\n    // and returns the closest integer to it.\n    // If the number\
    \ is equidistant from two integers, round it away from zero.\n    f, err := strconv.ParseFloat(value,\
    \ 64)\n    if err != nil {\n        fmt.Println(err)\n    }\n    // The round\
    \ package implements accurate roundings to the nearest integer\n    // and arbitrary\
    \ precision division.\n    return round.AwayFromZero(f)\n}\n", "    var result\
    \ float64\n    fmt.Sscanf(value, \"%f\", &result)\n    if result > 0 {\n     \
    \   if result - float64(int(result)) >= 0.5 {\n            return int(result)\
    \ + 1\n        } else {\n            return int(result)\n        }\n    } else\
    \ {\n        if float64(int(result)) - result >= 0.5 {\n            return int(result)\
    \ - 1\n        } else {\n            return int(result)\n        }\n    }\n}\n",
  "    return int(0)\n}\n", "    // Write the code here\n    return 0\n}\n", "   \
    \ // PENDING\n    return 0\n}\n", "    return 0\n}\n", "    var (\n        i float64\n\
    \        r int\n    )\n    fmt.Sscanf(value, \"%f\", &i)\n    if (i - float64(int(i)))\
    \ > 0.5 {\n        r = int(i) + 1\n    } else {\n        r = int(i)\n    }\n \
    \   return r\n}\n", "    var output int\n    var remainder float64\n\n    fmt.Sscanf(value,\
    \ \"%d.%f\", &output, &remainder)\n\n    if remainder > 0.5 {\n        output++\n\
    \    }\n\n    return output\n}\n", "    // find decimal place, if > 0 round up/down\
    \ based on number behind decimal\n    // if < 0 round up/down based on number\
    \ behind decimal\n    // if = 0 return the number\n    // split the number into\
    \ int and float parts\n    // iterate through string to find decimal point\n \
    \   // once found, convert each digit of float to int and add to float_sum\n \
    \   // if float_sum > 5 round up, if < 5 round down\n    if value[0] == 45 { //\
    \ if negative value\n        return (0 - closest_integer(value[1:]))\n    }\n\
    \    if value[0] == 43 { // if positive value\n        return closest_integer(value[1:])\n\
    \    }\n    var decimal int\n    decimal = 0\n    var decimal_len int\n    decimal_len\
    \ = 0\n    var int_sum int\n    int_sum = 0\n    var float_sum int\n    float_sum\
    \ = 0\n    var i int\n    i = 0\n    for i < len(value) {\n        if value[i]\
    \ == 46 {\n            decimal = i\n            break\n        }\n        i++\n\
    \    }\n    if decimal == 0 {\n        i = 0\n        for i < len(value) {\n \
    \           int_sum = int_sum * 10 + int(value[i]) - 48\n            i++\n   \
    \     }\n        return int_sum\n    }\n    decimal_len = len(value) - decimal\
    \ - 1\n    if decimal_len > 5 {\n        i = 0\n        for i < decimal {\n  \
    \          int_sum = int_sum * 10 + int(value[i]) - 48\n            i++\n    \
    \    }\n        return int_sum\n    }\n    i = decimal + 1\n    for i < len(value)\
    \ {\n        float_sum = float_sum * 10 + int(value[i]) - 48\n        i++\n  \
    \  }\n    if float_sum > 5000 {\n        i = 0\n        for i < decimal {\n  \
    \          int_sum = int_sum * 10 + int(value[i]) - 48\n            i++\n    \
    \    }\n        return int_sum + 1\n    }\n    i = 0\n    for i < decimal {\n\
    \        int_sum =", "    num, _ := strconv.ParseFloat(value, 64)\n    return\
    \ int(num + 0.5)\n}\n", "    // Converting string to int\n    // Need to use float64\
    \ to maintain floating point numbers\n    n, _ := strconv.ParseFloat(value, 64)\n\
    \    up := math.Ceil(n)\n    down := math.Floor(n)\n    if n - down >= up - n\
    \ {\n        return int(up)\n    }\n    return int(down)\n}\n", "\tf := 0.0\n\t\
    _, err := fmt.Sscanf(value, \"%f\", &f)\n\tif err != nil {\n\t\tpanic(err)\n\t\
    }\n\tif f < 0 {\n\t\tf = f - 0.5\n\t} else {\n\t\tf = f + 0.5\n\t}\n\treturn int(f)\n\
    }\n", "    return 0\n}\n", "    // Write your code here\n    return 0\n}\n", " \
    \   number, _ := strconv.ParseFloat(value, 64)\n    return int(number)\n}\n",
  "    return 0\n}\n", "    fvalue, _ := strconv.ParseFloat(value, 64)\n    return\
    \ int(math.Round(fvalue))\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   var integer int\n    var closest float64\n    var x float64\n\n    fmt.Sscanf(value,\
    \ \"%f\", &x)\n    closest = x - float64(int(x))\n    if closest >= 0.5 {\n  \
    \      integer = int(x) + 1\n    } else {\n        integer = int(x)\n    }\n \
    \   return integer\n}\n", "    var result int\n    pos, _ := fmt.Sscanf(value,\
    \ \"%d\", &result)\n    fmt.Println(pos)\n    fmt.Println(result)\n    return\
    \ result\n}\n", "    return 0\n}\n", "    // Convert the value to a float\n  \
    \  if value == \"\" {\n        fmt.Println(\"Value is nil\")\n        return -1\n\
    \    }\n    // Convert the value to a float64\n    var result float64\n    result,\
    \ err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        fmt.Println(\"\
    Value is not a float\")\n        return -1\n    }\n    // Find the closest integer\n\
    \    x := math.Ceil(result)\n    y := math.Floor(result)\n    if math.Abs(x-result)\
    \ < math.Abs(y-result) {\n        return int(x)\n    }\n    return int(y)\n}\n",
  "    return 0\n}\n", "    return 0\n}\n", "    var i int\n    _, err := fmt.Sscanf(value,\
    \ \"%d\", &i)\n    if err == nil {\n        return i\n    }\n    var f float64\n\
    \    _, err = fmt.Sscanf(value, \"%f\", &f)\n    if err == nil {\n        return\
    \ int(f)\n    }\n    return 0\n}\n", "    var valueFloat float64 = 0.0\n    var\
    \ v1, v2 float64 = 0.0, 0.0\n    var i int = 0\n    var v1Int, v2Int int = 0,\
    \ 0\n    var ret int = 0\n\n    fmt.Sscanf(value, \"%f\", &valueFloat)\n    v1\
    \ = valueFloat\n    v2 = valueFloat\n\n    for (v1 > 1) {\n        v1 = v1 / 10\n\
    \        i++\n    }\n\n    fmt.Sscanf(fmt.Sprintf(\"%.0f\", v1), \"%d\", &v1Int)\n\
    \    v2Int = v1Int + 1\n\n    if ((valueFloat - float64(v1Int)) > (float64(v2Int)\
    \ - valueFloat)) {\n        ret = v2Int\n    } else {\n        ret = v1Int\n \
    \   }\n\n    return ret\n}\n", "    var result int\n    if value[0] == '-' {\n\
    \        result = -1\n    } else {\n        result = 1\n    }\n    for _, v :=\
    \ range value {\n        if v == '.' {\n            break\n        }\n       \
    \ result *= int(v - '0')\n    }\n    return result\n}\n", "    var result float64\n\
    \    if _, err := fmt.Sscanf(value, \"%f\", &result); err != nil {\n        panic(err)\n\
    \    }\n    if result < 0 {\n        result = -1 * result\n    }\n    r := int(result)\n\
    \    if result - float64(r) >= 0.5 {\n        return r + 1\n    }\n    return\
    \ r\n}\n", "    return -1\n}\n", "    return 0\n}\n", "    return 0\n}\n", " \
    \   return 0\n}\n", "    float_value, _ := strconv.ParseFloat(value, 64)\n   \
    \ if float_value < 0 {\n        float_value -= 0.5\n    } else {\n        float_value\
    \ += 0.5\n    }\n    return int(float_value)\n}\n", "    return 0\n}\n", "   \
    \ var str string = value\n    var number float64 = 0.0\n    var length int = len(str)\n\
    \    var result int = 0\n    var flag int = 0\n    var int_str string = \"\"\n\
    \    var decimal_str string = \"\"\n    var decimal_str_length int = 0\n    var\
    \ point_index int = 0\n    var i int = 0\n    // find point index\n    for i=0;\
    \ i<length; i++ {\n        if str[i] == '.' {\n            point_index = i\n \
    \           break\n        }\n    }\n    // find integer string\n    if point_index\
    \ == 0 {\n        int_str = str\n    } else {\n        int_str = str[0:point_index]\n\
    \    }\n    // find decimal string\n    if point_index == 0 {\n        decimal_str\
    \ = \"\"\n    } else {\n        decimal_str = str[point_index+1:length]\n    }\n\
    \    decimal_str_length = len(decimal_str)\n    // integer string to int\n   \
    \ for i=0; i<len(int_str); i++ {\n        number = 10 * number + float64(int_str[i]\
    \ - '0')\n    }\n    // decimal string to float\n    for i=0; i<decimal_str_length;\
    \ i++ {\n        number = number + float64(decimal_str[i] - '0') * float64(0.1\
    \ * float64(i+1))\n    }\n    // float to int\n    result = int(number)\n    //\
    \ flag > 0 => number > result\n    // flag < 0 => number < result\n    // flag\
    \ = 0 => number = result\n    if number - float64(result) > 0 {\n        flag\
    \ = 1\n    } else if number - float64(result) < 0 {\n        flag = -1\n    }\
    \ else {\n        flag = 0\n    }\n    // math round\n    if flag > 0 {\n    \
    \    if flag == 1 && decimal_str_length > 0 {\n            result = result + 1\n\
    \        }\n    } else if flag < 0 {\n        if flag == -1 && decimal_str_length\
    \ > 0 {\n            result", "    var res float64\n    fmt.Sscanf(value, \"%f\"\
    , &res)\n    return int(res + 0.5)\n}\n", "    var result float64\n    fmt.Sscanf(value,\
    \ \"%f\", &result)\n    return int(result + 0.5)\n}\n", "    // Since we are rounding\
    \ away from zero, no need to take the absolute\n    // value of the number.\n\
    \    v, _ := strconv.ParseFloat(value, 64)\n    // Now round the number and return\
    \ the result as an integer.\n    return int(math.Round(v))\n}\n", "    var result\
    \ float64\n    fmt.Sscanf(value, \"%f\", &result)\n    return int(result)\n}\n",
  "\tdot  := 0\n\tnums := 0\n\tfor i := 0; i < len(value); i++ {\n\t\tswitch string(value[i])\
    \ {\n\t\tcase \".\":\n\t\t\tdot++\n\t\tcase \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\":\n\t\t\tnums++\n\t\t}\n\t}\n\tif nums == 0\
    \ || dot > 1 {\n\t\treturn 0\n\t}\n\tnum, _ := strconv.Atoi(value)\n\tif dot ==\
    \ 0 {\n\t\treturn num\n\t}\n\tif len(value) - dot - 1 > 2 {\n\t\tvalue = value[:dot+3]\n\
    \t}\n\tdigit, _ := strconv.Atoi(value[dot+1:])\n\tif digit < 5 {\n\t\treturn num\n\
    \t}\n\treturn num + 1\n}\n", "    var result int\n    fmt.Sscanf(value, \"%d\"\
    , &result)\n    return result\n}\n", "    return 0\n}\n", "    var (\n       \
    \ v = value\n        m = make(map[int]int)\n    )\n    for i := 0; i < len(v);\
    \ i++ {\n        switch v[i] {\n        case '.':\n            return m[0]\n \
    \       default:\n            m[int(v[i] - '0')] = int(v[i] - '0')\n        }\n\
    \    }\n    return m[0]\n}\n", "    var temp float64\n    _, err := fmt.Sscanf(value,\
    \ \"%f\", &temp)\n    if err != nil {\n        return 0\n    }\n    // return\
    \ int(temp)\n    return int(temp + 0.5)\n}\n", "    // TODO: Write your solution\
    \ here\n    return 0\n}\n", "    var val float64\n    fmt.Sscanf(value, \"%f\"\
    , &val)\n    if val > 0 {\n        val = val + 0.5\n    } else {\n        val\
    \ = val - 0.5\n    }\n    return int(val)\n}\n", "    return 0\n}\n", "    return\
    \ 1\n}\n", "    // TODO\n    var i float64\n    fmt.Sscanf(value, \"%f\", &i)\n\
    \    i = i + 0.5\n    return int(i)\n}\n", "    var a int\n    return a\n}\n",
  "    var ret int = 0\n    if value[0] == '-' {\n        ret = -1\n    } else {\n\
    \        ret = 1\n    }\n    var is_neg bool = false\n    var err error\n    if\
    \ value[0] == '-' {\n        is_neg = true\n        value = value[1:]\n    }\n\
    \    //fmt.Println(value)\n    var res float64 = 0\n    res, err = strconv.ParseFloat(value,\
    \ 64)\n    //fmt.Println(res)\n    if err != nil {\n        fmt.Println(err)\n\
    \    }\n\n    var dec_point int = strings.Index(value, \".\")\n    //fmt.Println(dec_point)\n\
    \    if dec_point > 0 {\n        if is_neg {\n            ret = -1\n        }\
    \ else {\n            ret = 1\n        }\n        //fmt.Println(res*10)\n    \
    \    ret = ret * int(res * 10)\n    } else {\n        ret = int(res)\n    }\n\
    \    //fmt.Println(ret)\n    return ret\n}\n", "    var result int\n    fmt.Sscanf(value,\
    \ \"%d\", &result)\n    return result\n}\n", "    floatvalue, _ := ParseFloat(value,\
    \ 64)\n    //or use float64\n    integer := int(floatvalue)\n    if floatvalue\
    \ - float64(integer) < 0.5 {\n        return integer\n    } else {\n        return\
    \ integer + 1\n    }\n}\n", "    return 0\n}\n", "    return 1\n}\n", "    return\
    \ 0\n}\n", "    //\n    // your code\n    //\n    var v float64\n    if _, err\
    \ := fmt.Sscanf(value, \"%f\", &v); err != nil {\n        panic(err)\n    }\n\
    \    if v > 0 {\n        return int(v+0.5)\n    }\n    return int(v-0.5)\n}\n",
  "    return 0\n}\n", "    f, _ := strconv.ParseFloat(value, 64)\n    r := math.Round(f)\n\
    \    c := math.Ceil(f)\n    if math.Abs(r-f) > math.Abs(c-f) {\n        return\
    \ int(c)\n    }\n    return int(r)\n}\n", "    var decimal = 0.0\n    var integer\
    \ = 0\n    fmt.Sscanf(value, \"%d.%f\", &integer, &decimal)\n    if decimal >=\
    \ 0.5 {\n        integer++\n    }\n    return integer\n}\n", "    return int(Round(float64(value)))\n\
    }\n", "    // Implement this function\n    return 1\n}\n", "    d := 0.0\n   \
    \ fmt.Sscanf(value, \"%f\", &d)\n    return int(d)\n}\n", "    number, err :=\
    \ strconv.ParseFloat(value, 64)\n    if err != nil {\n        fmt.Println(err)\n\
    \        return 0\n    }\n    if number < 0 {\n        number--\n    } else {\n\
    \        number++\n    }\n    return int(number)\n}\n", "    // slice the last\
    \ char from string\n    val := value[:len(value)-1]\n    //convert string to int\n\
    \    i, err := strconv.Atoi(val)\n    if err != nil {\n        fmt.Println(err)\n\
    \    }\n    if string(value[len(value)-1]) == \"5\" {\n        if i > 0 {\n  \
    \          return i + 1\n        } else {\n            return i - 1\n        }\n\
    \    }\n    return i\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    i, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        return i\n    }\n    f, err := strconv.ParseFloat(value,\
    \ 64)\n    if err != nil {\n        return i\n    }\n    if f - float64(i) > 0.5\
    \ {\n        return i + 1\n    }\n    return i\n}\n", "    return 0\n}\n", " \
    \   // write your code here\n    return 0\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    return 1\n}\n", "    var num int\n    var result int\n\
    \    num, _ = strconv.Atoi(value)\n    if int(num) - num > 0.5 {\n        result\
    \ = int(num) - 1\n    } else {\n        result = int(num)\n    }\n    return result\n\
    }\n", "    number, _ := strconv.ParseFloat(value, 64)\n    if number > 0 {\n \
    \       return int(number) + 1\n    }\n    return int(number)\n}\n", "    value_flt,\
    \ err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        return 0\n\
    \    }\n    if math.Abs(value_flt - math.Floor(value_flt)) < 0.5 {\n        return\
    \ int(math.Floor(value_flt))\n    }\n    return int(math.Ceil(value_flt))\n}\n",
  "    return 0\n}\n", "    s := []rune(value)\n    var sign rune\n    if s[0] ==\
    \ '-' {\n        sign = '-'\n        s = s[1:]\n    } else {\n        sign = '+'\n\
    \    }\n    i := 0\n    for i = 0; i < len(s); i++ {\n        if s[i] == '.' {\n\
    \            break\n        }\n    }\n    j := 0\n    for j = i+1; j < len(s);\
    \ j++ {\n        if s[j] != '0' {\n            break\n        }\n    }\n    r\
    \ := []rune(fmt.Sprintf(\"%s%s\", string(sign), string(s[:i])))\n    if j < len(s)\
    \ {\n        r = []rune(fmt.Sprintf(\"%s%s\", string(r), string(s[j])))\n    }\n\
    \    return int(r[0])\n}\n", "    var i int\n    var frac float64\n    _, err\
    \ := fmt.Sscanf(value, \"%d.%d\", &i, &frac)\n    if err != nil {\n        fmt.Sscanf(value,\
    \ \"%d\", &i)\n    }\n    if frac > .5 {\n        i++\n    }\n    return i\n}\n",
  "    return 2\n}\n", "    if len(value) < 1 {\n        return 0\n    }\n    for\
    \ _, s := range value {\n        switch s {\n        case '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9':\n            continue\n        default:\n    \
    \        return 0\n        }\n    }\n    return 0\n}\n", "    var result int\n\
    \    var compare, offset float64\n    var i int\n    // We are going to convert\
    \ the string to a float64 value and then\n    // use the modulus operation to\
    \ determine the decimal places, which\n    // will be compared against the decimal\
    \ value of .5\n    // If the compare value is less than .5 then we will round\
    \ down to\n    // the next whole number, otherwise we will round up.\n    // However,\
    \ before we do that we need to determine whether the value\n    // is positive\
    \ or negative. If negative, we need to set the offset\n    // to 1, to compensate\
    \ for the negative sign.\n    if string(value[0]) == \"-\" {\n        offset =\
    \ 1\n    }\n    compare = float64(fmt.Sprintf(\"%.1f\", value)) % float64(10)\n\
    \    if compare < float64(5) {\n        result = int(float64(value) - offset)\n\
    \    } else {\n        result = int(float64(value) + float64(10) - offset)\n \
    \   }\n    // return an integer\n    return result\n}\n", "    for value[len(value)-1]\
    \ == '0' {\n        value = value[:len(value)-1]\n    }\n    if value[len(value)-1]\
    \ == '.' {\n        value = value[:len(value)-1]\n    }\n    var i int\n    var\
    \ f float64\n    fmt.Sscanf(value, \"%d.%f\", &i, &f)\n    if f < 0.5 {\n    \
    \    return i\n    }\n    return i + 1\n}\n", "\treturn 0\n}\n", "    //fmt.Println(value)\n\
    \    var ret int\n    var floatVal float64\n    var err error\n    if floatVal,\
    \ err = strconv.ParseFloat(value, 64); err != nil {\n        fmt.Println(err)\n\
    \        os.Exit(2)\n    }\n    if floatVal > 0 {\n        ret = int(floatVal)\n\
    \        if floatVal - float64(ret) > 0.5 {\n            ret += 1\n        }\n\
    \    } else {\n        ret = int(floatVal)\n        if float64(ret) - floatVal\
    \ > 0.5 {\n            ret -= 1\n        }\n    }\n    return ret\n}\n", "   \
    \ var result int\n    var offset float64\n    offset = 0.5\n\n    var number,\
    \ _ = strconv.ParseFloat(value, 64)\n    if number < 0 {\n        offset = -0.5\n\
    \    }\n\n    number += offset\n    result = int(number)\n\n    return result\n\
    }\n", "    intValue, _ := strconv.Atoi(value)\n    decimal := float64(intValue)\n\
    \    if value == strconv.Itoa(intValue) {\n        return intValue\n    } else\
    \ {\n        return int(math.Round(decimal))\n    }\n}\n", "    var number float64\n\
    \    _, err := fmt.Sscanf(value, \"%f\", &number)\n    if err != nil {\n     \
    \   return -1\n    }\n    if number > 0 {\n        number += 0.5\n    } else {\n\
    \        number -= 0.5\n    }\n    return int(number)\n}\n", "    var floatvalue\
    \ float64\n    var number int\n    fmt.Sscanf(value, \"%f\", &floatvalue)\n  \
    \  if floatvalue < 0 {\n        floatvalue = floatvalue * -1\n    }\n    if floatvalue\
    \ - float64(int(floatvalue)) < 0.5 {\n        number = int(floatvalue)\n    }\
    \ else {\n        number = int(floatvalue) + 1\n    }\n    if value[0] == '-'\
    \ {\n        number = number * -1\n    }\n    return number\n}\n", "    var number\
    \ float64\n    fmt.Sscanf(value, \"%f\", &number)\n    if number > 0 {\n     \
    \   return int(number + 0.5)\n    } else {\n        return int(number - 0.5)\n\
    \    }\n}\n", "    // floatValue := float64(value)\n    return 1\n}\n", "    f,\
    \ err := strconv.ParseFloat(value, 64)\n    if err != nil {\n        panic(err)\n\
    \    }\n    return int(f)\n}\n", "    var result int\n    if len(value) == 1 {\n\
    \        result = int(value[0] - '0')\n    } else {\n        result = int(value[len(value)\
    \ - 1] - '0')\n        for i := len(value) - 2; i >= 0; i-- {\n            result\
    \ += int(value[i] - '0') * int(10 ^ (len(value) - i - 1))\n        }\n    }\n\
    \    return result\n}\n", "    return 0\n}\n", "    return 0\n}\n", "    var flt\
    \ float64\n    _, err := fmt.Sscanf(value, \"%f\", &flt)\n    if err != nil {\n\
    \        panic(err)\n    }\n    return int(flt + 0.5)\n}\n", "    switch value[len(value)-1]\
    \ {\n    case '0', '1', '2', '3', '4':\n        return closest_integer_int(value)\
    \ - 1\n    case '5', '6', '7', '8', '9':\n        return closest_integer_int(value)\
    \ + 1\n    }\n    return closest_integer_int(value)\n}\n", "    var integer_value\
    \ int\n    integer_value = int(value)\n    return integer_value\n}\n", "    str\
    \ := []rune(value)\n    res := make([]rune, 0)\n    foundDot := false\n    for\
    \ i, v := range str {\n        if v == '.' {\n            foundDot = true\n  \
    \          continue\n        }\n        if i == len(str) - 1 {\n            res\
    \ = append(res, v)\n            break\n        }\n        res = append(res, v)\n\
    \        if v != '0' {\n            next_val := str[i+1]\n            if next_val\
    \ == '.' {\n                next_val = str[i+2]\n            }\n            if\
    \ v > next_val {\n                break\n            }\n            if v < next_val\
    \ {\n                res[i] = str[i] + 1\n                if foundDot {\n    \
    \                for i := len(res) - 1; i > 0; i-- {\n                       \
    \ if res[i] == '0' {\n                            res = res[:i]\n            \
    \            } else {\n                            break\n                   \
    \     }\n                    }\n                }\n                break\n   \
    \         }\n        }\n    }\n    if value[0] == '-' {\n        res = append([]rune{'-'},\
    \ res...)\n    }\n    return parseInt(string(res))\n}\n", "    var sign = 1\n\
    \    var i = 0\n    if value[0] == '-' {\n        sign = -1\n        i = 1\n \
    \   }\n    var result = 0\n    for i < len(value) {\n        var c = value[i]\n\
    \        var digit = int(c - '0')\n        if digit >= 0 && digit <= 9 {\n   \
    \         result = result * 10 + digit\n        } else {\n            if c ==\
    \ '.' {\n                result *= 10\n            }\n            break\n    \
    \    }\n        i++\n    }\n    var a = i + 1\n    for a < len(value) {\n    \
    \    var c = value[a]\n        var digit = int(c - '0')\n        if digit >= 0\
    \ && digit <= 9 {\n            result += digit\n            result *= 10\n   \
    \     } else {\n            break\n        }\n        a++\n    }\n    if a < len(value)\
    \ {\n        if value[a] > '5' {\n            result += 1\n        }\n    }\n\
    \    return result * sign\n}\n", "    var number float64\n    fmt.Sscanf(value,\
    \ \"%f\", &number)\n    return int(number + 0.5)\n}\n", "    // 15.3\n    // 15,\
    \ 16\n\n    return 1\n}\n", "    var result int\n\n    fmt.Sscanf(value, \"%d\"\
    , &result)\n\n    fmt.Println(value, result)\n\n    return result\n}\n", "   \
    \ var d float64\n    var i int\n    fmt.Sscanf(value, \"%f\", &d)\n    if d <\
    \ 0 {\n        i = int(d - 0.5)\n    } else {\n        i = int(d + 0.5)\n    }\n\
    \    return i\n}\n", "    var res float64\n    fmt.Sscanf(value, \"%f\", &res)\n\
    \    return int(res + 0.5)\n}\n", "    var tmp_float float64\n    var tmp_int\
    \ int\n    var result int\n    fmt.Sscanf(value, \"%f\", &tmp_float)\n    if tmp_float\
    \ >= 0 {\n        tmp_int = int(tmp_float)\n        if tmp_float - float64(tmp_int)\
    \ >= 0.5 {\n            result = tmp_int + 1\n        } else {\n            result\
    \ = tmp_int\n        }\n    } else {\n        tmp_int = int(tmp_float)\n     \
    \   if float64(tmp_int) - tmp_float >= 0.5 {\n            result = tmp_int - 1\n\
    \        } else {\n            result = tmp_int\n        }\n    }\n    return\
    \ result\n}\n", "    var result int\n    // I'm having a hard time converting\
    \ string to float\n    // I can't use strconv.ParseFloat because I need to round\n\
    \    // the values first\n    //fmt.Println(strconv.ParseFloat(value, 64))\n \
    \   // I need to convert to int then add 0.5 then convert back to int\n    return\
    \ result\n}\n", "    var result int\n    if _, err := fmt.Sscanf(value, \"%d\"\
    , &result); err != nil {\n        _, err := fmt.Sscanf(value, \"%f\", &result)\n\
    \        if err != nil {\n            return result\n        }\n    }\n    return\
    \ result\n}\n", "    return 0\n}\n", "\t// Write your code here\n\t// To print\
    \ results to the standard output you can use fmt.Println()\n\t// Example: fmt.Println(\"\
    Hello world!\")\n    return 0\n}\n", "    return 0\n}\n", "    var flt, int1,\
    \ int2 float64\n    var err error\n    if flt, err = strconv.ParseFloat(value,\
    \ 64); err != nil {\n        return 0\n    }\n    if int1 = math.Floor(flt); int1\
    \ == flt {\n        return int(int1)\n    }\n    if int2 = math.Ceil(flt); int2\
    \ == flt {\n        return int(int2)\n    }\n    if flt - int1 > int2 - flt {\n\
    \        return int(int2)\n    }\n    return int(int1)\n}\n", "    if value[0]\
    \ == '-' {\n        return -1 * closest_integer(value[1:])\n    }\n\n    l :=\
    \ len(value)\n    decimal := 0\n    for i := 0; i < l; i++ {\n        if value[i]\
    \ == '.' {\n            decimal = l - i - 1\n            break\n        }\n  \
    \  }\n\n    base := 1\n    for i := 0; i < decimal; i++ {\n        base *= 10\n\
    \    }\n\n    value_int := 0\n    for i := 0; i < l; i++ {\n        if value[i]\
    \ == '.' {\n            continue\n        }\n        value_int *= 10\n       \
    \ value_int += int(value[i] - '0')\n    }\n\n    value_float := float64(value_int)\
    \ / float64(base)\n    value_int = int(value_float)\n    if value_float - float64(value_int)\
    \ >= 0.5 {\n        value_int += 1\n    }\n\n    return value_int\n}\n", "   \
    \ return 42\n}\n", "    var floatValue float64 = 0\n    //fmt.Println(len(value))\n\
    \    fmt.Sscanf(value, \"%f\", &floatValue)\n    //fmt.Println(floatValue)\n \
    \   var result int = int(floatValue)\n    if floatValue - float64(result) >= 0.5\
    \ {\n        result += 1\n    }\n    return result\n}\n", "    if value[0] ==\
    \ '-' {\n        length := len(value)\n        for i := 0; i < length; i++ {\n\
    \            if value[i] == '.' {\n                value = value[:i]\n       \
    \         break\n            }\n        }\n        return -1 * atoi(value)\n \
    \   } else {\n        length := len(value)\n        for i := 0; i < length; i++\
    \ {\n            if value[i] == '.' {\n                value = value[:i]\n   \
    \             break\n            }\n        }\n        return atoi(value)\n  \
    \  }\n}\n", "    return 0\n}\n", "    f, _ := strconv.ParseFloat(value, 32)\n\
    \    return int(f + math.Copysign(0.5, f))\n}\n", "    return 0\n}\n", "    //\
    \ start by splitting the input string in to two sections,\n    // the integer\
    \ portion and the decimal portion\n    // the decimal portion will be used for\
    \ rounding\n    // the integer portion will be used for the final result\n   \
    \ var decimal, err = decimal_portion(value)\n    if err != nil {\n        fmt.Println(err)\n\
    \        return 0\n    }\n    var integer, err2 = integer_portion(value)\n   \
    \ if err2 != nil {\n        fmt.Println(err2)\n        return 0\n    }\n    //\
    \ now round the decimal portion\n    // if it's less than half, it will be rounded\
    \ down\n    // if it's more than half, it will be rounded up\n    var rounded,\
    \ err3 = round_decimal(decimal)\n    if err3 != nil {\n        fmt.Println(err3)\n\
    \        return 0\n    }\n    // now add the rounded value to the integer portion\n\
    \    var result = integer + rounded\n    return result\n}\n", "    valueFloat64,\
    \ _ := strconv.ParseFloat(value, 64)\n    var valueInt int = int(valueFloat64)\n\
    \    var diff float64 = valueFloat64 - float64(valueInt)\n    if diff >= 0.5 {\n\
    \        valueInt += 1\n    }\n    return valueInt\n}\n", "    var v float64\n\
    \    fmt.Sscanf(value, \"%f\", &v)\n    return int(v + 0.5)\n}\n", "    var num,\
    \ frac float64\n    n, _ := fmt.Sscanf(value, \"%f.%f\", &num, &frac)\n    switch\
    \ n {\n    case 1:\n        return int(num)\n    case 2:\n        if frac < 0.5\
    \ {\n            return int(num)\n        } else {\n            if num < 0 {\n\
    \                return int(num-1)\n            } else {\n                return\
    \ int(num+1)\n            }\n        }\n    default:\n        return 0\n    }\n\
    }\n", "    var floatValue float64\n    fmt.Sscanf(value, \"%f\", &floatValue)\n\
    \    if floatValue < 0 {\n        return int(floatValue) - 1\n    }\n    return\
    \ int(floatValue)\n}\n", "    return 0\n}\n", "    fmt.Println(value)\n    var\
    \ number float64\n    fmt.Sscanf(value, \"%f\", &number)\n    if number < 0 {\n\
    \        number = -number\n    }\n    integer := int(number)\n    if number -\
    \ float64(integer) > 0.5 {\n        integer++\n    }\n    return integer\n}\n",
  "    var f float64\n    fmt.Sscanf(value, \"%f\", &f)\n    return int(f)\n}\n",
  "    return 0\n}\n", "    // create an array of the numbers from 0 to 10\n    numbers\
    \ := [11]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    // convert the numbers string\
    \ to an int\n    as_int, _ := convert_to_int(value)\n    // convert the int to\
    \ a float\n    as_float := float64(as_int)\n    // set a float variable to the\
    \ float value of the first number in the array\n    // set a float variable to\
    \ the float value of the last number in the array\n    // set a float variable\
    \ to zero\n    // set a string variable to the value\n    // set a boolean variable\
    \ to false\n    var first_number, last_number, distance float64\n    var first_number_string,\
    \ last_number_string string\n    var is_equidistant bool\n    // for each number\
    \ in the array of numbers\n    for _, number := range numbers {\n        // if\
    \ the number is the first number in the array\n        if number == numbers[0]\
    \ {\n            // skip this number\n            continue\n        }\n      \
    \  // if the difference between the number and the value is less than the difference\n\
    \        // between the first number and the value\n        if number - as_float\
    \ < first_number - as_float {\n            // set the first number to the number\n\
    \            first_number = float64(number)\n            // set the first number\
    \ string to the number string\n            first_number_string = fmt.Sprintf(\"\
    %d\", number)\n        }\n        // if the difference between the number and\
    \ the value is greater than the difference\n        // between the last number\
    \ and the value\n        if number - as_float > last_number - as_float {\n   \
    \         // set the last number to the number\n            last_number = float64(number)\n\
    \            // set the last number string to the number string\n            last_number_string\
    \ = fmt.Sprintf(\"%d\", number)\n        }\n    }\n    // if the difference between\
    \ the last number and the value is the same as the difference\n    // between\
    \ the first number and the value\n    if last_number - as_float == first_number\
    \ - as_float {\n        // set the boolean variable to true\n        is_equid",
  "\tfmt.Println(value)\n\treturn 0\n}\n", "    var result int\n    return result\n\
    }\n", "    return 0\n}\n", "    fmt.Println(value)\n    // TODO: implement\n \
    \   return 42\n}\n", "    floatValue, _ := strconv.ParseFloat(value, 64)\n   \
    \ intValue := int(floatValue)\n    return intValue\n}\n", "    //Convert the string\
    \ to a float\n    var float_value float64\n    var return_value int\n    fmt.Sscanf(value,\
    \ \"%f\", &float_value)\n    //If the float is equidistant from two integers return\
    \ the integer\n    //that is farther from zero\n    if (float_value - float64(int(float_value)))\
    \ == 0.5 {\n        if float_value > 0 {\n            return_value = int(float_value)\
    \ + 1\n        } else {\n            return_value = int(float_value) - 1\n   \
    \     }\n    } else {\n        return_value = int(float_value)\n    }\n    return\
    \ return_value\n}\n", "    return int(value[len(value)-1])\n}\n", "    x, _ :=\
    \ strconv.ParseFloat(value, 64)\n    return int(x)\n}\n", "    return 0\n}\n",
  "    var f float64\n    var err error\n    if f, err = strconv.ParseFloat(value,\
    \ 64); err != nil {\n        panic(err)\n    }\n    return int(f + 0.5)\n}\n",
  "    return 0\n}\n", "    var integer int\n    _, err := fmt.Sscanf(value, \"%d\"\
    , &integer)\n    if err == nil {\n        return integer\n    }\n    f, err :=\
    \ fmt.Sscanf(value, \"%f\", &f)\n    if err == nil {\n        return integer\n\
    \    }\n    return -1\n}\n", "    var sign byte\n    var integer int\n    var\
    \ decimal float64\n    s := 0\n    n := 0\n    for n, sign = range value {\n \
    \       if sign != '-' && sign != '+' {\n            break\n        }\n    }\n\
    \    f := 0\n    for f, sign = range value[n:] {\n        if sign == '.' {\n \
    \           integer, _ = strconv.Atoi(value[n:n+f])\n            break\n     \
    \   }\n    }\n    for f < len(value) {\n        sign = value[n+f]\n        if\
    \ sign == '0' {\n            s++\n        } else {\n            break\n      \
    \  }\n        f++\n    }\n    _, err := fmt.Sscanf(value[n+f:], \"%f\", &decimal)\n\
    \    if err != nil {\n        panic(err)\n    }\n    if decimal >= 0.5 {\n   \
    \     if sign == '-' {\n            integer--\n        } else {\n            integer++\n\
    \        }\n    }\n    return integer\n}\n", "    var floatvalue float64 = 0\n\
    \    var intvalue int = 0\n    var fracpart float64 = 0\n    var divisor float64\
    \ = 1\n    var result int = 0\n    var integer bool = true\n    var negative bool\
    \ = false\n    var first bool = true\n    var second bool = true\n    fmt.Println(\"\
    Input: \", value)\n    if (value[0] == '-') {\n        negative = true\n    }\n\
    \    for _, char := range value {\n        if (char == '.') {\n            integer\
    \ = false\n        } else if (char == '-') {\n            continue\n        }\
    \ else {\n            intchar := int(char - '0')\n            if (integer) {\n\
    \                intvalue = intvalue * 10 + intchar\n            } else {\n  \
    \              fracpart = fracpart + float64(intchar) / divisor\n            \
    \    divisor = divisor * 10\n            }\n        }\n    }\n    fmt.Println(\"\
    Integer part: \", intvalue)\n    fmt.Println(\"Fractional part: \", fracpart)\n\
    \    floatvalue = float64(intvalue) + fracpart\n    fmt.Println(\"Float value:\
    \ \", floatvalue)\n    if (negative) {\n        floatvalue = -floatvalue\n   \
    \ }\n    result = int(floatvalue)\n    if (fracpart >= 0.5) {\n        result\
    \ = result + 1\n    }\n    return result\n}\n", "    f, err := strconv.ParseFloat(value,\
    \ 64)\n    if err != nil { panic(err) }\n    r := int(f)\n    if math.Abs(float64(r)\
    \ - f) >= 0.5 {\n        if f < 0 {\n            r--\n        } else {\n     \
    \       r++\n        }\n    }\n    return r\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    var number float64\n    fmt.Sscanf(value, \"%f\", &number)\n\
    \    if number > 0 {\n        return int(number + 0.5)\n    } else {\n       \
    \ return int(number - 0.5)\n    }\n}\n", "    // floating point number\n    if\
    \ value[0] == '-' {\n        value = value[1:]\n    }\n    point_index := 0\n\
    \    for i := 0; i < len(value); i++ {\n        if value[i] == '.' {\n       \
    \     point_index = i\n            break\n        }\n    }\n    if point_index\
    \ == 0 {\n        return 0\n    }\n    if point_index == 1 {\n        return 1\n\
    \    }\n    // get the point number\n    point_number := value[point_index + 1:]\n\
    \    result, _ := strconv.Atoi(point_number)\n    // Check if the number is equidistant\n\
    \    if result == 0 {\n        return 0\n    } else if result > 0 && result <=\
    \ 5 {\n        return 1\n    } else if result > 5 && result <= 9 {\n        return\
    \ 1\n    }\n    return 0\n}\n", "    // Get the length of value as integer type\n\
    \    length := len(value)\n    // Divide the length by 2 to find the midpoint\n\
    \    midpoint := length / 2\n    // Get the first half of the value from 0 to\
    \ midpoint as a string\n    first := value[:midpoint]\n    // Get the second half\
    \ of the value from midpoint to length as a string\n    second := value[midpoint:]\n\
    \    // Convert the first half of the value to integer\n    first_to_int, _ :=\
    \ strconv.Atoi(first)\n    // Convert the second half of the value to integer\n\
    \    second_to_int, _ := strconv.Atoi(second)\n    // If first half is equal to\
    \ second half, then return the first half\n    if first_to_int == second_to_int\
    \ {\n        return first_to_int\n    }\n    // If the first half is smaller than\
    \ the second half, return the first half\n    if first_to_int < second_to_int\
    \ {\n        return first_to_int\n    }\n    // If the first half is larger than\
    \ the second half, return the second half\n    if first_to_int > second_to_int\
    \ {\n        return second_to_int\n    }\n    // If nothing is returned, return\
    \ zero\n    return 0\n}\n", "    for i, _ := range value {\n        if value[i]\
    \ == '.' {\n            if i+1 < len(value) {\n                fraction := value[i+1:]\n\
    \                if fraction == \"5\" {\n                    if i == 0 {\n   \
    \                     // i==0 ==> \"14.5\"\n                        return 15\n\
    \                    } else {\n                        // i>0 ==> \"-14.5\"\n\
    \                        return -15\n                    }\n                }\n\
    \            }\n            integer := value[:i]\n            n, _ := fmt.Sscanf(integer,\
    \ \"%d\", &n)\n            return n\n        }\n    }\n    return 0\n}\n", " \
    \   f, _ := strconv.ParseFloat(value, 64)\n    return int(f)\n}\n", "    var floatValue\
    \ float64\n    var result float64\n    var remainder float64\n    _, err := fmt.Sscanf(value,\
    \ \"%f\", &floatValue)\n    if err != nil {\n        return 0\n    }\n    // get\
    \ remainder after division\n    result = floatValue / 1\n    remainder = floatValue\
    \ - result\n    if remainder > 0.5 {\n        result += 1\n    } else if remainder\
    \ < -0.5 {\n        result -= 1\n    }\n    return int(result)\n}\n", "    num\
    \ := 0.0\n    fmt.Sscanf(value, \"%f\", &num)\n    return int(num + 0.5)\n}\n",
  "    // Try converting to float64\n    num, err := strconv.ParseFloat(value, 64)\n\
    \    if err != nil {\n        return 0\n    }\n    // Round the number\n    rounded\
    \ := math.Round(num)\n    // Convert back to int\n    return int(rounded)\n}\n",
  "    n := 0\n    f := 0.0\n    fmt.Sscanf(value, \"%d.%d\", &n, &f)\n    f = float64(f)\
    \ / 100\n    if f > 0.5 {\n        n += 1\n    }\n    return n\n}\n", "    //\
    \ parse the float, if possible\n    float_value, err := parse_float(value)\n \
    \   if err != nil {\n        // we can't parse a float, return the integer\n \
    \       return parse_int(value)\n    }\n    // cast the float to an int\n    int_value\
    \ := int(float_value)\n    // is it too close to the next int?\n    if float_value\
    \ - float64(int_value) >= 0.5 {\n        return int_value + 1\n    }\n    // otherwise\
    \ return the current int\n    return int_value\n}\n", "    // Convert the value\
    \ to a float number\n    flt, _ := strconv.ParseFloat(value, 64)\n    // Add 0.5\
    \ to the float number\n    // Then convert it to int and return it\n    return\
    \ int(flt + 0.5)\n}\n", "    //...\n    return 0\n}\n", "    // parseInt(value)\
    \ is float64\n    // type cast to float32\n    var r float32 = float32(parseInt(value))\n\
    \    var left int = int(r)\n    var right int = left + 1\n    var l float32 =\
    \ float32(left)\n    var r float32 = float32(right)\n    var fr float32 = r -\
    \ r\n    if fr < lr {\n        return right\n    } else {\n        return left\n\
    \    }\n}\n", "    return 0\n}\n", "    // Write your code here\n    return 0\n\
    }\n", "    var total int\n    for _, ch := range value {\n        if ch >= '0'\
    \ && ch <= '9' {\n            total = total * 10 + int(ch - '0')\n        }\n\
    \    }\n    return total\n}\n", "    var (\n        i float64\n        s string\n\
    \    )\n    fmt.Sscanf(value, \"%f\", &i)\n    fmt.Sprintf(s, \"%d\", int(i))\n\
    \    if i >= 0 {\n        return int(i)\n    } else {\n        return int(i)\n\
    \    }\n}\n", "    if value[0] == '-' {\n        value = value[1:]\n        min\
    \ := -int(value[0] - '0')\n        for i := 1; i < len(value); i++ {\n       \
    \     min -= int(value[i] - '0') * 9 * int(10 * (1 << (uint(i) - 1)))\n      \
    \  }\n        return min\n    } else {\n        min := int(value[0] - '0')\n \
    \       for i := 1; i < len(value); i++ {\n            min += int(value[i] - '0')\
    \ * 9 * int(10 * (1 << (uint(i) - 1)))\n        }\n        return min\n    }\n\
    }\n", "    if value[0] == '-' {\n        return closest_integer_neg(value)\n \
    \   } else {\n        return closest_integer_pos(value)\n    }\n}\n", "    var\
    \ result int\n    return result\n}\n", "    var result int\n    var err error\n\
    \    var number float64\n    if number, err = \n        string_to_float(value);\
    \ err != nil {\n        panic(err)\n    }\n    if result = int(number); number\
    \ - float64(result) >= 0.5 {\n        result++\n    }\n    return result\n}\n",
  "    // convert value to float64 type\n    float_val, _ := convert_to_float(value)\n\
    \    // fmt.Println(float_val)\n    // find the closest integer\n    return find_closest_integer(float_val)\n\
    }\n", "    // Your code here\n    return 0\n}\n", "\t// Find decimal point\n\t\
    var decimal int\n\tfor i, c := range value {\n\t\tif c == '.' {\n\t\t\tdecimal\
    \ = i\n\t\t\tbreak\n\t\t}\n\t}\n\t// If there is no decimal, the number is an\
    \ integer\n\tif decimal == 0 {\n\t\treturn string_to_int(value)\n\t}\n\t// If\
    \ it ends in a 5 or 0, then it is already an integer\n\tif value[len(value)-1]\
    \ == '5' || value[len(value)-1] == '0' {\n\t\treturn string_to_int(value)\n\t\
    }\n\t// Split the value into the integer and decimal strings\n\tnum_int := value[:decimal]\n\
    \tnum_dec := value[decimal+1:]\n\t// If the first decimal is a 5 or greater, then\
    \ round up\n\tif num_dec[0] >= '5' {\n\t\tnum_int = string_to_int(num_int) + 1\n\
    \t\treturn num_int\n\t}\n\t// Otherwise round down\n\treturn string_to_int(num_int)\n\
    }\n", "    var i float64\n    fmt.Sscanf(value, \"%f\", &i)\n    if i < 0 {\n\
    \        return int(i - 0.5)\n    }\n    return int(i + 0.5)\n}\n", "    var (\n\
    \        i int\n        f float64\n        err error\n    )\n    if f, err = strconv.ParseFloat(value,\
    \ 64); err != nil {\n        panic(err)\n    }\n    if f < 0 {\n        f -= 0.5\n\
    \    } else {\n        f += 0.5\n    }\n    i = int(f)\n    return i\n}\n", " \
    \   return 0\n}\n", "    return 0\n}\n", "    var result int\n    //var number\
    \ float64\n    fmt.Sscanf(value, \"%f\", &result)\n    return result\n}\n", " \
    \   return 0\n}\n", "    var sign float64 = 1\n    if value[0] == '-' {\n    \
    \    sign = -1\n        value = value[1:]\n    }\n    var num float64\n    fmt.Sscanf(value,\
    \ \"%f\", &num)\n    num *= sign\n    num += 0.5\n    num /= 1\n    return int(num)\n\
    }\n", "    return -1\n}\n", "    n, _ := strconv.ParseFloat(value, 64)\n    return\
    \ int(math.Floor(n + 0.5))\n}\n", "    return int(value[0])\n}\n", "    return\
    \ 0\n}\n", "    var integer int\n    fmt.Sscanf(value, \"%d\", &integer)\n   \
    \ return integer\n}\n", "    number, err := strconv.ParseFloat(value, 64)\n  \
    \  if err != nil {\n        fmt.Println(err)\n        return 0\n    }\n    return\
    \ int(math.Round(number))\n}\n", "    var tmp float64\n    if _, err := fmt.Sscanf(value,\
    \ \"%f\", &tmp); err != nil {\n        return 0\n    }\n    if tmp < 0 {\n   \
    \     tmp -= 0.5\n    } else {\n        tmp += 0.5\n    }\n    return int(tmp)\n\
    }\n", "    d, _ := strconv.ParseFloat(value, 64)\n    if d < 0 {\n        d =\
    \ -d\n    }\n    if d - float64(int(d)) < 0.5 {\n        return int(d)\n    }\n\
    \    return int(d) + 1\n}\n", "    var i int\n    fmt.Sscanf(value, \"%d\", &i)\n\
    \    return i\n}\n", "    res, err := fmt.Sscanf(value, \"%f\", &value)\n    if\
    \ err != nil {\n        panic(err)\n    }\n    fmt.Println(res)\n    return 0\n\
    }\n", "    switch value[len(value)-1] {\n    case '0', '5':\n        return int(value[0]\
    \ - '0')\n    case '1', '2', '3', '4':\n        return int(value[0] - '0') + 1\n\
    \    case '6', '7', '8', '9':\n        return int(value[0] - '0') - 1\n    }\n\
    \    return 0\n}\n", "    var result float64 = 0\n    fmt.Sscanf(value, \"%f\"\
    , &result)\n    if result - float64(int(result)) >= 0.5 {\n        return int(result)\
    \ + 1\n    }\n    return int(result)\n}\n", "    // return the closest int value\
    \ to the given string,\n    // representing a float value\n    return 0\n}\n",
  "    return 0\n}\n", "    var f float64\n    var e error\n    var round_dir int\n\
    \    if f, e = strconv.ParseFloat(value, 64); e != nil {\n        panic(e)\n \
    \   }\n    if f >= 0 {\n        round_dir = 1\n    } else {\n        round_dir\
    \ = -1\n    }\n    return int(math.Round(f / float64(round_dir))) * round_dir\n\
    }\n", "    return 0\n}\n", "    if value[0] == '-' {\n        return -closest_integer(value[1:])\n\
    \    }\n    for i := 0; i < len(value); i++ {\n        if value[i] == '.' {\n\
    \            if i + 1 < len(value) && value[i + 1] >= '5' {\n                return\
    \ closest_integer(value[:i]) + 1\n            }\n            return closest_integer(value[:i])\n\
    \        }\n    }\n    return string_to_integer(value)\n}\n", "    return 0\n\
    }\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
