language: go_test.go
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    res := 1\n    for i := n; i > 0; i-- {\n        res *= i\n    }\n\
    \    for i := n-1; i > 0; i-- {\n        res *= i\n    }\n    return res\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmppg6ucpso_test.go:49: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmppg6ucpso_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmppg6ucpso_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: null
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    for n > 1 {\n        n *= special_factorial(n-1)\n    }\n    return n\n}\n\
    \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073664
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7oilsvzu_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7oilsvzu_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n    }\n    for\
    \ i := n-1; i > 0; i-- {\n        fact *= i\n    }\n    return fact\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1xjhkml3_test.go:43: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1xjhkml3_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1xjhkml3_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n < 2 {\n        return 1\n\
    \    }\n    sf := 1\n    for i := n; i > 0; i-- {\n        sf *= factorial(i)\n\
    \    }\n    return sf\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4jgbydb_test.go:25:15: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 1\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4c7k4_zh_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n    }\n    return\
    \ fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpamwfb4sc_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpamwfb4sc_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpamwfb4sc_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var i, factorial_prev, factorial int = 0, 1, 1\n    for i < n {\n       \
    \ factorial_prev *= i\n        factorial *= factorial_prev\n        i++\n    }\n\
    \    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp9p5dgk44_test.go:42: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp9p5dgk44_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp9p5dgk44_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp9p5dgk44_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    f := 1\n    for i := 1; i <=\
    \ n; i++ {\n        f *= i\n    }\n\n    return f * special_factorial(n-1)\n}\n\
    \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo_q7i3l2_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo_q7i3l2_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo_q7i3l2_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    var i int\n    for i = 1; i <= n; i++ {\n       \
    \ var j int\n        for j = 1; j <= i; j++ {\n            result *= j\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073652
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    p := 1\n    if n == 0 {\n        return 1\n    }\n    for i := 1; i <= n;\
    \ i++ {\n        p *= i\n    }\n    return p * special_factorial(n-1)\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var total int = 1\n\n    for i := n; i > 0; i-- {\n        total *= i\n \
    \   }\n\n    return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3j_weq5s_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3j_weq5s_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3j_weq5s_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    fact := 1\n    if n > 0 {\n        for i := 1; i <=\
    \ n; i++ {\n            for j := 1; j <= i; j++ {\n                fact *= j\n\
    \            }\n        }\n    }\n    return fact\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpu1cdc3rf_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpu1cdc3rf_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpu1cdc3rf_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpu1cdc3rf_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return special_factorial_recursive(n, 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ppequx3_test.go:17:12: undefined: special_factorial_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var nums []int\n    total := 1\n    if n == 0 {\n        return 1\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    for i := 1; i <= n; i++ {\n   \
    \     nums = append(nums, i)\n    }\n    for _, v := range nums {\n        total\
    \ *= v\n    }\n    return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwivystzg_test.go:50: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwivystzg_test.go:50:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwivystzg_test.go:50: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factor := 1\n    for i := n; i > 0; i-- {\n        factor *= i\n    }\n \
    \   return factor\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp79atzdqf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp79atzdqf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp79atzdqf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    var result int = 1\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpmm8b0tox_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpmm8b0tox_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpmm8b0tox_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var r int\n    if n > 0 {\n        r = 1\n        for i := 1; i <= n; i++\
    \ {\n            r *= i\n        }\n        for i := 1; i < n; i++ {\n       \
    \     r *= i\n        }\n    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5zsm6sbw_test.go:46: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5zsm6sbw_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5zsm6sbw_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpq0t17mbj_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpq0t17mbj_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpq0t17mbj_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    return special_factorial(n-1) * special_factorial(n-2) * n\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmprvntesmz_test.go:42: expected '%!s(int=288)', got '%!s(int=48)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmprvntesmz_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=1440)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmprvntesmz_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=4180377600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n \
    \   }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0j766yjf_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0j766yjf_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // TODO: Define this function\n    return 0\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpd7pkhn36_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpd7pkhn36_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpd7pkhn36_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpd7pkhn36_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := n; i > 0; i-- {\n        factorial *= i\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpngj3v3lo_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7oilsvzu_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7oilsvzu_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here!\n    var total int\n    var _n int\n    total = n\n\n\
    \    for n>1 {\n        n = n-1\n        _n = n\n        for _n>1 {\n        \
    \    _n = _n-1\n            total = total * _n\n        }\n    }\n    return total\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7sr9txxf_test.go:49: expected '%!s(int=288)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7sr9txxf_test.go:49:\
    \ expected '%!s(int=34560)', got '%!s(int=60)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7sr9txxf_test.go:49: expected '%!s(int=125411328000)', got\
    \ '%!s(int=241920)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // code here\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxr3ou1q_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n\
    \    }\n\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp8c91p9bi_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp8c91p9bi_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp8c91p9bi_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Check n's validity\n    if n < 1 {\n        panic(\"n must be a positive\
    \ integer\")\n    }\n\n    // Calculate the factorials of n, n-1, n-2, ... , 1\n\
    \    factorials := make([]int, n)\n    factorials[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        factorials[i] = factorials[i-1] * (i+1)\n    }\n\n    // Multiply\
    \ the factorials\n    product := 1\n    for _, factorial := range factorials {\n\
    \        product *= factorial\n    }\n\n    return product\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    answer := 1\n    for i := n; i > 0; i-- {\n        var aux int = 1\n    \
    \    for j := i; j > 0; j-- {\n            aux *= j\n        }\n        answer\
    \ *= aux\n    }\n    return answer\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := n; i > 0; i-- {\n        result *= i\n    }\n \
    \   for i := n - 1; i > 0; i-- {\n        result *= i\n    }\n    return result\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpn0vbeu60_test.go:43: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpn0vbeu60_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpn0vbeu60_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    r := n\n    for i := n-1; i > 0;\
    \ i-- {\n        r *= i\n    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpv1qxd90__test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpv1qxd90__test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpv1qxd90__test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    if n == 0 {\n        return 1\n    }\n    return n\
    \ * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpimxwras8_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpimxwras8_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpimxwras8_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Write your code here!\n    return 0\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5dl84vds_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5dl84vds_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5dl84vds_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp5dl84vds_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpj4k7k2wu_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpj4k7k2wu_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpj4k7k2wu_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    res := 1\n    for i := 1; i <= n;\
    \ i++ {\n        res *= factorial(i)\n    }\n    return res\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfyweh4xw_test.go:22:16: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2ar2lzin_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // write your code here\n    if n == 0 {\n        return 1\n    }\n    return\
    \ n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbw9i89va_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbw9i89va_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbw9i89va_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    r := 1\n    for i := n; i > 0; i-- {\n        for j := i; j > 0; j-- {\n\
    \            r *= j\n        }\n    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    res := 1\n    for i := 1; i <= n; i++ {\n        res *= i\n    }\n    return\
    \ res\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpsamrhjrw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpsamrhjrw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpsamrhjrw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \t// your code here\n\treturn 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1kgu8cwk_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1kgu8cwk_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1kgu8cwk_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1kgu8cwk_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return special_factorial(n-1) *\
    \ n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpvg5bpa97_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpvg5bpa97_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpvg5bpa97_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    output := 1\n    for i := 1; i <= n; i++ {\n        output *= factorial(i)\n\
    \    }\n    return output\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaj_hkzal_test.go:19:19: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    for ; n > 0; n-- {\n        result *= n\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwzdkjgy__test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwzdkjgy__test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwzdkjgy__test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code goes here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpil7qq613_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpil7qq613_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpil7qq613_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpil7qq613_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \treturn 1\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpk0vdgeoj_test.go:36: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpk0vdgeoj_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpk0vdgeoj_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \tif n == 0 {\n\t\treturn 1\n\t}\n\tr := 1\n\tfor i := 1; i <= n; i++ {\n\t\t\
    r *= i\n\t}\n\treturn r\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpd4r0pdfa_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpd4r0pdfa_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpd4r0pdfa_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073656
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    total := 1\n    for n > 0 {\n        total *= factorial(n)\n        n--\n\
    \    }\n    return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7_u9zdq_test.go:19:18: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073656
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return special_factorial(n-1)\
    \ * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpknqbu5xg_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpknqbu5xg_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpknqbu5xg_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := n; i > 0; i-- {\n        factorial *= i\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpngj3v3lo_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    for i := n - 1; i > 0; i-- {\n        n *= i\n    }\n    return n\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpb1hdomd__test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpb1hdomd__test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpb1hdomd__test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := n; i > 0; i-- {\n        fact *= i\n    }\n    return\
    \ fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkuk0uocw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    i := 0\n    for i < n {\n        factorial *= (n - i)\n\
    \        i++\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6whb3ra8_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6whb3ra8_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6whb3ra8_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Fill this in.\n    r := n\n    for i := n-1; i > 0; i-- {\n        r *=\
    \ i\n    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6v714p0w_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6v714p0w_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6v714p0w_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // +++your code here+++\n    return -1\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpnwo96k32_test.go:37: expected '%!s(int=288)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpnwo96k32_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=-1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpnwo96k32_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=-1)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n   \
    \     tmpnwo96k32_test.go:37: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 2\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0hrv0i6p_test.go:36: expected '%!s(int=288)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0hrv0i6p_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=2)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0hrv0i6p_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=2)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp0hrv0i6p_test.go:36: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return special_factorial(n-1)\
    \ * factorial(n)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_iw2ch54_test.go:21:37: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n    }\n    return\
    \ fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpamwfb4sc_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpamwfb4sc_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpamwfb4sc_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    //your code here\n    fmt.Println(n)\n    return 0\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "4\n5\n7\n1\n--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp87ysi_e2_test.go:38: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp87ysi_e2_test.go:38:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp87ysi_e2_test.go:38: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp87ysi_e2_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2ar2lzin_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var f = 1\n    for i := 1; i <= n; i++ {\n        f *= factorial(i)\n   \
    \ }\n    return f\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb84ofoq3_test.go:19:14: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Implement the function here and then modify this comment accordingly\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpr5iqzlk8_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpr5iqzlk8_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpr5iqzlk8_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpr5iqzlk8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    ret := 1\n    for i := n; i > 0;\
    \ i-- {\n        ret *= i\n    }\n    for i := n - 1; i > 0; i-- {\n        ret\
    \ *= i\n    }\n    return ret\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbau380bh_test.go:46: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbau380bh_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbau380bh_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    product := 1\n    for i := n;\
    \ i > 0; i-- {\n        product *= factorial(i)\n    }\n\n    return product\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp80kawyq_test.go:23:20: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here!\n    a := 1\n    for i := 1; i <= n; i++ {\n        a\
    \ *= i\n    }\n    b := 1\n    for i := 1; i < n; i++ {\n        b *= i\n    }\n\
    \    c := 1\n    for i := 1; i < n-1; i++ {\n        c *= i\n    }\n    d := 1\n\
    \    for i := 1; i < n-2; i++ {\n        d *= i\n    }\n    e := 1\n    for i\
    \ := 1; i < n-3; i++ {\n        e *= i\n    }\n    f := 1\n    for i := 1; i <\
    \ n-4; i++ {\n        f *= i\n    }\n    g := 1\n    for i := 1; i < n-5; i++\
    \ {\n        g *= i\n    }\n    h := 1\n    for i := 1; i < n-6; i++ {\n     \
    \   h *= i\n    }\n    i := 1\n    for j := 1; j < n-7; j++ {\n        i *= j\n\
    \    }\n    j := 1\n    for k := 1; k < n-8; k++ {\n        j *= k\n    }\n  \
    \  k := 1\n    for l := 1; l < n-9; l++ {\n        k *= l\n    }\n    l := 1\n\
    \    for m := 1; m < n-10; m++ {\n        l *= m\n    }\n    m := 1\n    for o\
    \ := 1; o < n-11; o++ {\n        m *= o\n    }\n    o := 1\n    for p := 1; p\
    \ < n-12; p++ {\n        o *= p\n    }\n    p := 1\n    for q := 1; q < n-13;\
    \ q++ {\n        p *= q\n    }\n    q := 1\n    for r := 1; r < n-14; r++ {\n\
    \        q *= r\n    }\n    r := 1\n    for s := 1; s < n-15; s++ {\n        r\
    \ *= s\n   \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptradu8n6_test.go:86:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073656
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \tif n == 0 {\n\t\treturn 1\n\t}\n\tif n < 0 {\n\t\treturn 0\n\t}\n\treturn n\
    \ * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpd7fzjr82_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpd7fzjr82_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpd7fzjr82_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpclkmksim_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpclkmksim_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpclkmksim_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpclkmksim_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7oilsvzu_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7oilsvzu_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var f int = 1\n    for i := n; i > 0; i-- {\n        f *= i\n    }\n    return\
    \ f\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbi4kpij__test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbi4kpij__test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbi4kpij__test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    m := 1\n    for i := 1; i <= n; i++ {\n        m *= i\n    }\n    return\
    \ m\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpmd43pccw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpmd43pccw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpmd43pccw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7d_zqxg1_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7d_zqxg1_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7d_zqxg1_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32ry2mnh_test.go:19:19: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073536
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Write your code here\n    // To print results to the standard output you\
    \ can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var\
    \ result int = 1\n    for i := n; i > 0; i-- {\n        for j := i; j > 0; j--\
    \ {\n            result *= j\n        }\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    r := n\n    for i := n-1; i > 0;\
    \ i-- {\n        r *= i\n    }\n    return r\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpv1qxd90__test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpv1qxd90__test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpv1qxd90__test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    r := 1\n    for i := n; i > 0; i-- {\n        r *= i\n    }\n    return r\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpi4kf_aoj_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpi4kf_aoj_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpi4kf_aoj_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := n; i > 0; i-- {\n        fact *= i\n    }\n    return\
    \ fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkuk0uocw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // 1! = 1\n    // 2! = 2\n    // 3! = 6\n    // 4! = 24\n    // 5! = 120\n\
    \    // 6! = 720\n    // 7! = 5040\n    // 8! = 40320\n    // 9! = 362880\n  \
    \  // 10! = 3628800\n    // 11! = 39916800\n    // 12! = 479001600\n    // 13!\
    \ = 6227020800\n    // 14! = 87178291200\n    // 15! = 1307674368000\n    // 16!\
    \ = 20922789888000\n    // 17! = 355687428096000\n    // 18! = 6402373705728000\n\
    \    // 19! = 121645100408832000\n    // 20! = 2432902008176640000\n    if n ==\
    \ 1 {\n        return 1\n    } else {\n        return n * special_factorial(n-1)\n\
    \    }\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpor6alr5p_test.go:60: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpor6alr5p_test.go:60:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpor6alr5p_test.go:60: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073658
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 1\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4c7k4_zh_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \tresult := 1\n\tif n == 0 {\n\t\treturn result\n\t}\n\tfor i := n; i > 0; i--\
    \ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpmdd4ij24_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpmdd4ij24_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpmdd4ij24_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073658
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    // compute factorial\n    fact\
    \ := 1\n    for i := 2; i <= n; i++ {\n        fact *= i\n    }\n    // compute\
    \ brazilian factorial\n    for j := 1; j < n; j++ {\n        fact *= special_factorial(j)\n\
    \    }\n    return fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpz7g752yp_test.go:48: expected '%!s(int=288)', got '%!s(int=576)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpz7g752yp_test.go:48:\
    \ expected '%!s(int=34560)', got '%!s(int=1658880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpz7g752yp_test.go:48: expected '%!s(int=125411328000)', got\
    \ '%!s(int=-7332986093266010112)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    m := n\n    r := 1\n    for i := 1; i <= m; i++ {\n        r *= i\n    }\n\
    \    for i := 1; i < n; i++ {\n        r *= m\n        m--\n    }\n    return\
    \ r\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6h4m_2_v_test.go:45: expected '%!s(int=288)', got '%!s(int=576)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6h4m_2_v_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=14400)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6h4m_2_v_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=25401600)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2ar2lzin_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpy36fq8db_test.go:37: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpy36fq8db_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpy36fq8db_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    var result int = 1\n    for i :=\
    \ n; i > 0; i-- {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgiw6f9fm_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgiw6f9fm_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgiw6f9fm_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var product int = 1\n    for i := n; i > 0; i-- {\n        product *= i\n\
    \    }\n    return product\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpangpevo__test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpangpevo__test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpangpevo__test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n\n    res := 1\n    for i := n; i >\
    \ 0; i-- {\n        res *= i\n    }\n\n    return res\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpt984d6zk_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpt984d6zk_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpt984d6zk_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073659
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    for i := 1; i <= n; i++ {\n        result *= factorial(i)\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpopx05_9z_test.go:19:19: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073659
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 1\n    }\n    ret := 1\n    for i := 1; i <= n;\
    \ i++ {\n        ret *= factorial(i)\n    }\n    return ret\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprknjpd22_test.go:22:16: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var r = 1\n    for i := n; i > 0; i-- {\n        r *= i\n    }\n    return\
    \ r\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmplunc73aj_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmplunc73aj_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmplunc73aj_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    //YOUR CODE HERE\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpv500dmrn_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpv500dmrn_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpv500dmrn_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpv500dmrn_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7oilsvzu_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7oilsvzu_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here!\n    // return 0\n    if n == 1 || n == 0 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpjweskmwo_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpjweskmwo_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpjweskmwo_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmptzl3e5rc_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptzl3e5rc_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmptzl3e5rc_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmptqb_qbtr_test.go:38: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptqb_qbtr_test.go:38:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmptqb_qbtr_test.go:38: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmptqb_qbtr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n    var fac int = 1\n    if n < 0 {\n        return -1\n\
    \    }\n    for i := n; i > 0; i-- {\n        fac *= i\n        result *= fac\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7aiqmycy_test.go:45: expected '%!s(int=288)', got '%!s(int=27648)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7aiqmycy_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=86400000)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7aiqmycy_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3319766398771200000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7oilsvzu_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7oilsvzu_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp7oilsvzu_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result = 1\n    var i = 1\n    for i <= n {\n        result *= i\n  \
    \      i++\n    }\n    i = n - 1\n    for i > 0 {\n        result *= i\n     \
    \   i--\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmptvo_4gmi_test.go:47: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmptvo_4gmi_test.go:47:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmptvo_4gmi_test.go:47: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \tif n == 0 {\n\t\treturn 1\n\t}\n\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\
    \t\tresult *= i\n\t}\n\n\treturn result\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpy9_t2h2b_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpy9_t2h2b_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpy9_t2h2b_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here...\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ai2mmq_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073659
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Assume n is positive\n    facs := make([]int, n)\n    facs[0] = 1\n  \
    \  for i := 1; i < n; i++ {\n        facs[i] = facs[i-1] * (i+1)\n    }\n    res\
    \ := 1\n    for _, fac := range facs {\n        res *= fac\n    }\n    return\
    \ res\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    bf := 1\n    for i := 1; i <=\
    \ n; i++ {\n        bf *= factorial(i)\n    }\n\n    return bf\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz33x_nei_test.go:23:15: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073659
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    // a factorial is a product of integers\n    for i :=\
    \ 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpafy33hez_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpafy33hez_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpafy33hez_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    total := 1\n    if n == 0 {\n        return 1\n  \
    \  }\n    for i := 1; i <= n; i++ {\n        total *= i\n    }\n    return total\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpky3q4l2u_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpky3q4l2u_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpky3q4l2u_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    panic(\"not implemented\")\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\npanic: not implemented [recovered]\n\
    \tpanic: not implemented\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.special_factorial(...)\n\t/tmp/tmpnug7j9pi_test.go:17\n\
    command-line-arguments_test.TestSpecial_Factorial(0x0?)\n\t/tmp/tmpnug7j9pi_test.go:27\
    \ +0x27\ntesting.tRunner(0xc0001964e0, 0x527d50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073660
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Define the base case\n    if n == 1 {\n        return 1\n    }\n    //\
    \ Make the recursive call\n    return n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwf8q6sbh_test.go:41: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwf8q6sbh_test.go:41:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwf8q6sbh_test.go:41: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var factorial int\n    for i := 1; i <= n; i++ {\n        factorial = factorial\
    \ * i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgzdodgg5_test.go:40: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgzdodgg5_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgzdodgg5_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpgzdodgg5_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return -1\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpzp7gp8iv_test.go:36: expected '%!s(int=288)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpzp7gp8iv_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=-1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpzp7gp8iv_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=-1)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n   \
    \     tmpzp7gp8iv_test.go:36: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpclkmksim_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpclkmksim_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    //replace this for solution\n    return 0\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6thhpstf_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6thhpstf_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6thhpstf_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp6thhpstf_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    fact := 1\n    for i := n; i > 0; i-- {\n        fact *= i\n    }\n    return\
    \ fact\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkuk0uocw_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpkuk0uocw_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073657
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    var result = 1\n    for i := n; i > 0; i-- {\n   \
    \     if i == n {\n            result *= factorial(i)\n        } else {\n    \
    \        result *= factorial(i) * i\n        }\n    }\n    return result\n}\n\n\
    func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmbpy5u8_test.go:21:23: undefined: factorial

    /tmp/tmpqmbpy5u8_test.go:23:23: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \t// your code here\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn\
    \ 1\n\t}\n\treturn n * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpnn4ykqko_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpnn4ykqko_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpnn4ykqko_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n\n    facts := make([]int, n)\n    facts[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        facts[i] = facts[i-1] * (i+1)\n \
    \   }\n\n    bf := 1\n    for _, f := range facts {\n        bf *= f\n    }\n\n\
    \    return bf\n}\n\ntype TestCase \nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdcz599w__test.go:35:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073660
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    var subFactorial int\n    for i := n; i > 0; i-- {\n\
    \        subFactorial = 1\n        for j := i; j > 0; j-- {\n            subFactorial\
    \ *= j\n        }\n        factorial *= subFactorial\n    }\n    return factorial\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    total := 1\n    if n == 0 {\n        return total\n    }\n\n    for i :=\
    \ n; i > 0; i-- {\n        total *= i\n    }\n\n    return total\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_sq9l2u0_test.go:45: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_sq9l2u0_test.go:45:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_sq9l2u0_test.go:45: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    total := 1\n    for i := n; i > 0; i-- {\n        total *= factorial(i)\n\
    \    }\n    return total\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplg0gliyd_test.go:19:18: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var result int = 1\n\n    for i := n; i > 0; i-- {\n        result *= factorial(i)\n\
    \    }\n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7p2d2to_test.go:20:19: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \t// Good luck!\n    if n <= 1 {\n        return 1\n    }\n\n    s := n\n\n  \
    \  for i := n-1; i > 0; i-- {\n        s *= i\n    }\n\n    return s\n}\n\nfunc\
    \ TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyca9fqpo_test.go:47: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyca9fqpo_test.go:47:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyca9fqpo_test.go:47: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return 0\n    }\n    var factorial int = 1\n    for i\
    \ := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return factorial\n}\n\
    \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpk_iclkq6_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpk_iclkq6_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpk_iclkq6_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var res int = 1\n    var pro int = 1\n    for i := 1; i <= n; i++ {\n   \
    \     res *= i\n        pro *= res\n    }\n    return pro\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return 0\n    }\n    res := 1\n    for i := 1; i <= n;\
    \ i++ {\n        res *= i\n    }\n    for i := 1; i < n; i++ {\n        res *=\
    \ i\n    }\n    return res\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp62kdnp2v_test.go:46: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp62kdnp2v_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp62kdnp2v_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var factorial int = 1\n    for i := n; i > 0; i-- {\n        factorial *=\
    \ i\n    }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5vo5v2kc_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5vo5v2kc_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5vo5v2kc_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    output := 1\n    if n > 0 {\n        for i := n; i > 0; i-- {\n         \
    \   output *= i\n        }\n    }\n    return output\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6ylgbynv_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6ylgbynv_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6ylgbynv_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var prod int = 1\n    for n > 0 {\n        prod *= factorial(n)\n       \
    \ n--\n    }\n    return prod\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqfmf3tq_test.go:19:17: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    factorial := 1\n    for i := n; i > 0; i-- {\n        factorial *= i\n  \
    \  }\n    return factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpngj3v3lo_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpngj3v3lo_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073654
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 1\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4c7k4_zh_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4c7k4_zh_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Write your solution here\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpidli_g_b_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=288)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2ar2lzin_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=5)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2ar2lzin_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073655
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        panic(\"function does not support negative integers\"\
    )\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp62_148wp_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp62_148wp_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp62_148wp_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpwqddf3hl_test.go:36:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpwqddf3hl_test.go:36: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpwqddf3hl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    res := 1\n    for i := 1; i <= n; i++ {\n        res *= i\n    }\n    for\
    \ i := n-1; i > 0; i-- {\n        res *= i\n    }\n    return res\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpxurgai60_test.go:43: expected '%!s(int=288)', got '%!s(int=144)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpxurgai60_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=2880)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpxurgai60_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=3628800)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073661
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo_q7i3l2_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo_q7i3l2_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo_q7i3l2_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073652
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    return 1\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpxml98clp_test.go:37: expected '%!s(int=288)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpxml98clp_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=1)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpxml98clp_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Your code here\n    if n == 0 {\n        return 1\n    }\n    return n\
    \ * special_factorial(n-1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpqlt1_667_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpqlt1_667_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpqlt1_667_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    factorial := 1\n    for i := 1;\
    \ i <= n; i++ {\n        factorial *= i\n    }\n    return special_factorial(n-1)\
    \ * factorial\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpgrbt1l5e_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpgrbt1l5e_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // Make your code here!\n    var f int\n    f = 1\n    for i := 1; i <= n;\
    \ i++ {\n        f = f * i\n    }\n    return f\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpmkj181_v_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpmkj181_v_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpmkj181_v_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073662
- exit_code: 0
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    var specialFactorial = 1\n    for i := 1; i <= n; i++ {\n        var factorial\
    \ = 1\n        for j := 1; j <= i; j++ {\n            factorial *= j\n       \
    \ }\n        specialFactorial *= factorial\n    }\n    return specialFactorial\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073662
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestSpecial_Factorial(t *testing.T)\
    \ {\n  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpclkmksim_test.go:37:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpclkmksim_test.go:37: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpclkmksim_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp71jr_ai_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp71jr_ai_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 2
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    special_factorial := 1\n    for i := n; i > 0; i-- {\n        special_factorial\
    \ *= factorial(i)\n    }\n    return special_factorial\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfnl71gjg_test.go:19:30: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073662
