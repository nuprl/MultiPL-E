language: go_test.go
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjme55yqg_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpjme55yqg_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpjme55yqg_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpjme55yqg_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, v := range s {\n        switch v {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n\
    \            if s[len(s)-1] == 'y' {\n                count += 1\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpdp2d306f_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpdp2d306f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpdp2d306f_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n\tvowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tc :=\
    \ 0\n\tfor _, letter := range s {\n\t\tif string(letter) == \"y\" && len(s) ==\
    \ 1 {\n\t\t\tc++\n\t\t} else if len(s) > 1 && string(letter) == \"y\" && string(s[len(s)-1])\
    \ != \"y\" {\n\t\t\tcontinue\n\t\t} else if (string(letter) == \"y\" && string(s[len(s)-1])\
    \ == \"y\") || contains(vowels, string(letter)) {\n\t\t\tc++\n\t\t}\n\t}\n\treturn\
    \ c\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmlh7nbik_test.go:25:70: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    var vowel string = \"aeiouy\"\n    var y bool\
    \ = false\n    var o []string\n    o = strings.Split(s, \"\")\n    for _, x :=\
    \ range o {\n        if strings.Contains(vowel, x) {\n            count++\n  \
    \      }\n        if x == \"y\" {\n            y = true\n        }\n    }\n  \
    \  if y {\n        count--\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjp4lb_xl_test.go:22:9: undefined: strings

    /tmp/tmpjp4lb_xl_test.go:24:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    num := 0\n    for i := 0; i < len(s); i++ {\n        if is_vowel(s[i])\
    \ {\n            num += 1\n        }\n    }\n    return num\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ijvxo9t_test.go:20:12: undefined: is_vowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    m := make(map[rune]int)\n    m['a'] = 1\n    m['e'] = 1\n    m['i']\
    \ = 1\n    m['o'] = 1\n    m['u'] = 1\n    m['y'] = 1\n    count := 0\n    y_count\
    \ := 0\n    for _, c := range s {\n        if m[c] == 1 {\n            count +=\
    \ 1\n        }\n        if m[c] == 1 && c == 'y' {\n            y_count += 1\n\
    \        }\n    }\n    if y_count > 0 && count > y_count {\n        count -= 1\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpq6_q47ez_test.go:60: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpq6_q47ez_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpq6_q47ez_test.go:60: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpq6_q47ez_test.go:60:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // To convert a string to lowercase, use\n    // l_s := strings.ToLower(s)\n\
    \    count := 0\n    for _, c := range s {\n        switch c {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            count += 1\n        }\n    }\n    if count\
    \ > 0 && s[len(s)-1] == 'y' {\n        count += 1\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp2hf2amu3_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp2hf2amu3_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp2hf2amu3_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        char_s := string(char)\n       \
    \ if char_s == \"y\" && count > 0 {\n            continue\n        }\n       \
    \ for _, vowel := range vowels {\n            if char_s == vowel {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"\
    Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n\
    \     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpulde3efp_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpulde3efp_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpulde3efp_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpulde3efp_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, char := range s {\n        if is_vowel(char)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknwsox2i_test.go:20:12: undefined: is_vowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n\t// loop through string\n\t// check if rune is a vowel\n\t// convert\
    \ to lowercase\n\t// if count, add one to counter\n\tcount := 0\n\tfor _, r :=\
    \ range s {\n\t\tif r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' ||\
    \ r == 'y' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpmm9wl4lq_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpmm9wl4lq_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpmm9wl4lq_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpmm9wl4lq_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n\t// write your code here\n\treturn 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpd41hs6ab_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpd41hs6ab_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpd41hs6ab_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpd41hs6ab_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpd41hs6ab_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpd41hs6ab_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpd41hs6ab_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n\
    \        if vowels[c - 'a'] != 0 {\n            count++\n        }\n    }\n  \
    \  if s[len(s) - 1] == 'y' {\n        count++\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\npanic: runtime error: index out of\
    \ range [-32] [recovered]\n\tpanic: runtime error: index out of range [-32]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.vowels_count(...)\n\t/tmp/tmpmjics413_test.go:21\n\
    command-line-arguments_test.TestVowels_Count(0x0?)\n\t/tmp/tmpmjics413_test.go:39\
    \ +0x779\ntesting.tRunner(0xc0001a0340, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    word :=\
    \ []rune(s)\n    count := 0\n    for i, letter := range word {\n        if vowels[letter]\
    \ {\n            count++\n        }\n        if i == len(word) - 1 && letter ==\
    \ 'y' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpg5wfv90r_test.go:57: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpg5wfv90r_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpg5wfv90r_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    count := 0\n    for _, r := range s {\n\
    \        r = unicode.ToLower(r)\n        if strings.Contains(vowels, string(r))\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqeh_bunt_test.go:21:13: undefined: unicode

    /tmp/tmpqeh_bunt_test.go:22:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    r := make([]rune, len(s))\n    for i, c := range s {\n        r[i]\
    \ = c\n    }\n    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'y'}\n    count :=\
    \ 0\n    for i, c := range r {\n        if string(c) == \"y\" && i == len(r)-1\
    \ {\n            count += 1\n        } else if contains(vowels, c) {\n       \
    \     count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphc5chben_test.go:27:19: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := 0\n    last := \"\"\n    for _, ch := range s {\n     \
    \   if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n     \
    \       vowels += 1\n        }\n        last = string(ch)\n    }\n    if last\
    \ == \"y\" {\n        vowels += 1\n    }\n    return vowels\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpss30a1pg_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpss30a1pg_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpss30a1pg_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _,c := range s {\n        switch string(c) {\n\
    \        case \"a\", \"e\", \"i\", \"o\", \"u\", \"y\":\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe5sqv90p_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpe5sqv90p_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe5sqv90p_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe5sqv90p_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, char := range s {\n        switch char {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n\
    \            if i == len(s) - 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpngygeh5s_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpngygeh5s_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpngygeh5s_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            n++\n        case 'y':\n \
    \           if i == len(s) - 1 {\n                n++\n            }\n       \
    \ }\n    }\n    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6t_vxl7h_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6t_vxl7h_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6t_vxl7h_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    n := len(s)\n    last := n - 1\n    for i, r := range\
    \ s {\n        switch r {\n        case 'a', 'e', 'i', 'o', 'u':\n           \
    \ count++\n        case 'y':\n            if i == last {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1iebwuec_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1iebwuec_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1iebwuec_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    counter := 0\n    for _, c := range s {\n        if c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            counter\
    \ += 1\n        }\n    }\n    return counter\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpv5upqzb3_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5upqzb3_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5upqzb3_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpv5upqzb3_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var total int\n    for _, char := range s {\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            total++\n\
    \        }\n    }\n    return total\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypg96esb_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpypg96esb_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpypg96esb_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpypg96esb_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n\
    \    for _, v := range s {\n        switch v {\n        case 'a', 'e', 'i', 'o',\
    \ 'u':\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_r8t1sd_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_r8t1sd_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_r8t1sd_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i,v := range s {\n        if v == 'a' || v == 'e'\
    \ || v == 'i' || v == 'o' || v == 'u' || (v == 'y' && i == len(s)-1) {\n     \
    \       n += 1\n        }\n    }\n    return n\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpc2zm7jt2_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpc2zm7jt2_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpc2zm7jt2_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    sum := 0\n    for index, char := range s {\n        if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            sum++\n\
    \        } else if char == 'y' && index == len(s) - 1 {\n            sum++\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmplmbx1hez_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmplmbx1hez_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmplmbx1hez_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    c := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            c++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        c++\n    }\n    return\
    \ c\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpq7bl8i15_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpq7bl8i15_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpq7bl8i15_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i := 0; i < len(s); i++ {\n        switch s[i] {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            n++\n        case 'y':\n \
    \           if i == len(s) - 1 {\n                n++\n            }\n       \
    \ }\n    }\n    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6t_vxl7h_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6t_vxl7h_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6t_vxl7h_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073305
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    var cnt int\n    for i, c := range s {\n        if _, ok := vowels[string(c)];\
    \ ok {\n            cnt++\n        }\n        if string(c) == \"y\" && i != len(s)-1\
    \ {\n            cnt--\n        }\n    }\n    return cnt\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpdpqtdqtf_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpdpqtdqtf_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpdpqtdqtf_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpdpqtdqtf_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpdpqtdqtf_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073307
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    counter := 0\n    var lastChar byte\n    for i := 0; i < len(s);\
    \ i++ {\n        char := s[i]\n        switch char {\n        case 'a', 'e', 'i',\
    \ 'o', 'u':\n            counter++\n        case 'y':\n            if i == len(s)\
    \ - 1 {\n                counter++\n            }\n        }\n        lastChar\
    \ = char\n    }\n    return counter\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyl6j3t4r_test.go:19:9: lastChar declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    switch len(s) {\n    case 0:\n        return 0\n    case 1:\n   \
    \     if s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] == 'u'\
    \ {\n            return 1\n        } else {\n            return 0\n        }\n\
    \    }\n    return vowels_count(s[1:]) + vowels_count(s[:1])\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp7h9iy8y__test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp7h9iy8y__test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp7h9iy8y__test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp7h9iy8y__test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    r := 0\n    for i, c := range s {\n        isEnd := i == len(s) -\
    \ 1\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c\
    \ == 'y' && isEnd)) {\n            r++\n        }\n    }\n    return r\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpoll_chgr_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpoll_chgr_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpoll_chgr_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[rune]\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9w1iblv2_test.go:19:24: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    cnt := 0\n    str := []rune(s)\n    last := len(str) - 1\n    for\
    \ i, v := range str {\n        switch v {\n        case 'a', 'e', 'i', 'o', 'u':\n\
    \            cnt++\n        case 'y':\n            if i == last {\n          \
    \      cnt++\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpd1lac2_t_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpd1lac2_t_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpd1lac2_t_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vcount := 0\n    s = strings.ToLower(s)\n    for _, v := range s\
    \ {\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n \
    \           vcount += 1\n        }\n    }\n    if len(s) > 1 && s[len(s)-1] ==\
    \ 'y' {\n        vcount += 1\n    }\n    return vcount\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_s7b_rfv_test.go:19:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    var last_is_y bool = false\n    for _, c :=\
    \ range s {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n     \
    \       count += 1\n            last_is_y = false\n        case 'y':\n       \
    \     if !last_is_y {\n                count += 1\n                last_is_y =\
    \ true\n            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeuruw3mg_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpeuruw3mg_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpeuruw3mg_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpeuruw3mg_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    total_vowels := 0\n    for idx, ch := range s {\n        if idx ==\
    \ len(s) - 1 && ch == 'y' {\n            total_vowels += 1\n        } else if\
    \ ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n          \
    \  total_vowels += 1\n        }\n    }\n    return total_vowels\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpllol9oua_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpllol9oua_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpllol9oua_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    s = strings.ToLower(s)\n    c := 0\n    l := len(s)\n    for i, r\
    \ := range s {\n        if (r == 'a' || r == 'e' || r == 'i' || r == 'o' || r\
    \ == 'u') {\n            c += 1\n        }\n        if (r == 'y' && i != l-1)\
    \ {\n            c += 1\n        }\n    }\n    return c\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpblf2ght7_test.go:18:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n\
    \        if c == 'y' && len(s) == 1 {\n            count += 1\n        } else\
    \ if c == 'y' && len(s) != 1 {\n            continue\n        }\n        for _,\
    \ v := range vowels {\n            if c == v {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmph1ag8k2c_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmph1ag8k2c_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmph1ag8k2c_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmph1ag8k2c_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    for _, c := range s {\n        _, ok := vowels[strings.ToLower(string(c))]\n\
    \        if ok {\n            count += 1\n        }\n    }\n    if strings.HasSuffix(s,\
    \ \"y\") {\n        count += 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_6k8n5v_test.go:27:25: undefined: strings

    /tmp/tmpl_6k8n5v_test.go:32:8: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n       \
    \     count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppk4c9656_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmppk4c9656_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppk4c9656_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmppk4c9656_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowelCount := 0\n    for _, letter := range s {\n        switch letter\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            vowelCount++\n       \
    \ case 'y':\n            if len(s) == 1 {\n                vowelCount++\n    \
    \        } else if s[1] == 'y' {\n                vowelCount++\n            }\n\
    \        }\n    }\n    return vowelCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpfuc2hxm7_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpfuc2hxm7_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpfuc2hxm7_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpfuc2hxm7_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfuc2hxm7_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := 0\n    if(len(s) > 0) {\n        l := s[len(s)-1:]\n  \
    \      if(l == \"a\" || l == \"e\" || l == \"i\" || l == \"o\" || l == \"u\" ||\
    \ l == \"y\") {\n            vowels++\n        }\n        vowels += vowels_count(s[:len(s)-1])\n\
    \    }\n    return vowels\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkum43elv_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpkum43elv_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpkum43elv_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpkum43elv_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    l := len(s)\n    for i := 0; i < l; i++ {\n  \
    \      if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            count++\n        }\n        if s[i] == 'y' && i < l - 1 {\n\
    \            continue\n        }\n        if s[i] == 'y' && i == l - 1 {\n   \
    \         count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5osp2x45_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5osp2x45_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5osp2x45_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) > 0 && s[len(s)-1] == 'y' {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xu_q3ga_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xu_q3ga_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xu_q3ga_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    num := 0\n    for _, c := range s {\n        switch c {\n       \
    \ case 'a', 'e', 'i', 'o', 'u':\n            num++\n        case 'y':\n      \
    \      if c == s[len(s)-1] {\n                num++\n            }\n        }\n\
    \    }\n    return num\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoi1ap9ru_test.go:24:21: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    sum := 0\n    for i, c := range s {\n        isLastChar := i == len(s)\
    \ - 1\n        if isLastChar && string(c) == \"y\" {\n            sum++\n    \
    \    }\n        if string(c) == \"a\" || string(c) == \"e\" || string(c) == \"\
    i\" || string(c) == \"o\" || string(c) == \"u\" {\n            sum++\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpct3rsdes_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpct3rsdes_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpct3rsdes_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073308
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, vowel := range vowels {\n        count += strings.Count(s,\
    \ vowel)\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppidux1zx_test.go:21:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073307
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return len(regexp.MustCompile(\"[aeiouy]\").FindAllString(s, -1))\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky9nzd2t_test.go:18:16: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073308
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n\
    \        } else if c == 'y' && i == len(s) - 1 {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpcp03wpwc_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpcp03wpwc_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpcp03wpwc_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowel_count := 0\n    for i, ch := range s {\n        if ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n            vowel_count++\n\
    \        }\n        if ch == 'y' && i == len(s)-1 {\n            vowel_count++\n\
    \        }\n    }\n    return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8_aqg1r1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8_aqg1r1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8_aqg1r1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    counter := 0\n    for _, r := range s {\n        switch r {\n   \
    \     case 'a', 'e', 'i', 'o', 'u':\n            counter += 1\n        case 'y':\n\
    \            if r == s[len(s)-1] {\n                counter += 1\n           \
    \ }\n        }\n    }\n    return counter\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bhytb3c_test.go:24:21: invalid operation: r == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    res := 0\n    for i, c := range s {\n        if isVowel(c) {\n  \
    \          res++\n        }\n        if i == len(s) - 1 && c == 'y' {\n      \
    \      res++\n        }\n    }\n    return res\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhpwnyuf_test.go:20:12: undefined: isVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowelCounter := 0\n    for _, char := range s {\n        if char\
    \ == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n     \
    \       vowelCounter++\n        }\n    }\n    return vowelCounter\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpitbty478_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpitbty478_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpitbty478_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpitbty478_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    last_char := s[len(s)-1]\n    if last_char == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpg7l19fl1_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpg7l19fl1_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpg7l19fl1_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n    \
    \    case 'y':\n            if i == len(s) - 1 {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr5n83qhz_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr5n83qhz_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr5n83qhz_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    var i, v_count int = 0, 0\n    var vowels\
    \ [5]byte = [5]byte{'a', 'e', 'i', 'o', 'u'}\n    for i=0; i<len(s); i++ {\n \
    \       if s[i] == 'y' && i != len(s)-1 {\n            continue\n        }\n \
    \       for _, val := range vowels {\n            if s[i] == val {\n         \
    \       v_count++\n                break\n            }\n        }\n    }\n  \
    \  return v_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvi2cmk23_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpvi2cmk23_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpvi2cmk23_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpvi2cmk23_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    l := len(s)\n    if s[l-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgqlew85h_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgqlew85h_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgqlew85h_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, ch := range s {\n        ch := string(ch)\n\
    \        if ch == \"a\" || ch == \"e\" || ch == \"i\" || ch == \"o\" || ch ==\
    \ \"u\" {\n            count++\n        } else if i == len(s) - 1 && ch == \"\
    y\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6pl7i6wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6pl7i6wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6pl7i6wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels []string = []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"}\n    count := 0\n    for _, c := range s {\n        for _, vowel := range\
    \ vowels {\n            if string(c) == vowel {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6yfih7v5_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp6yfih7v5_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp6yfih7v5_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp6yfih7v5_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073309
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    // return 0\n    count := 0\n    char := 0\n\
    \    new_s := []rune(s)\n    for i, v := range s {\n        if i == len(s) - 1\
    \ {\n            char = v\n        }\n        if v == 'a' || v == 'e' || v ==\
    \ 'i' || v == 'o' || v == 'u' {\n            count++\n        }\n    }\n    if\
    \ char == 'y' {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd983eyho_test.go:22:5: new_s declared but not used

    /tmp/tmpd983eyho_test.go:25:20: cannot use v (variable of type rune) as type int
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"\
    i\": 1, \"o\": 1, \"u\": 1, \"y\": 1}\n    for _, c := range s {\n        if _,\
    \ ok := vowels[string(c)]; ok {\n            count += 1\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpk5ye9rll_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpk5ye9rll_test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpk5ye9rll_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpk5ye9rll_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    last := len(s) - 1\n    for i, ch := range s {\n\
    \        if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n\
    \            count++\n        }\n        if ch == 'y' && i == last {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpix6dvfop_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpix6dvfop_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpix6dvfop_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    cnt := 0\n    vowels := map[rune]int {\n        'a': 0,\n       \
    \ 'e': 0,\n        'i': 0,\n        'o': 0,\n        'u': 0,\n        'y': 0,\n\
    \    }\n    for _, r := range s {\n        if _, ok := vowels[r]; ok {\n     \
    \       cnt += 1\n        }\n    }\n    return cnt\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpxr3xxh3k_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpxr3xxh3k_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpxr3xxh3k_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpxr3xxh3k_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) - 1 == int(c) {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp46e74ky3_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp46e74ky3_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp46e74ky3_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp46e74ky3_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowelCount := 0\n    for _, c := range s {\n        lower := string(c)\n\
    \        if c >= 'A' && c <= 'Z' {\n            lower = string(c + 'a' - 'A')\n\
    \        }\n        if lower == \"a\" || lower == \"e\" || lower == \"i\" || lower\
    \ == \"o\" || lower == \"u\" {\n            vowelCount += 1\n        }\n    }\n\
    \    return vowelCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpmw__inue_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpmw__inue_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpmw__inue_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, _ := range s {\n        if s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpxt4gsunh_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpxt4gsunh_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpxt4gsunh_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    c := 0\n    for i, c := range s {\n        if (vowels[string(c)]) {\n\
    \            c++\n        }\n        if (string(c) == \"y\" && i == len(s) - 1)\
    \ {\n            c++\n        }\n    }\n    return c\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpsjiymizc_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpsjiymizc_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpsjiymizc_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpsjiymizc_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpsjiymizc_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpsjiymizc_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpsjiymizc_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    y_flag := false\n    vowels := map[string]bool{\"\
    a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for _, r :=\
    \ range s {\n        switch r {\n        case 'a', 'e', 'i', 'o', 'u':\n     \
    \       count++\n        case 'y':\n            y_flag = true\n        }\n   \
    \ }\n    if y_flag {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8syjtxe_test.go:20:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    fmt.Println(s)\n    v, y := 0, false\n    for _, c := range s {\n\
    \        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            v++\n\
    \        case 'y':\n            y = true\n        }\n    }\n    if y {\n     \
    \   v++\n    }\n    return v\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "abcde\nAlone\nkey\nbye\nkeY\nbYe\nACEDY\n--- FAIL: TestVowels_Count (0.00s)\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpqdqbc01s_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpqdqbc01s_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpqdqbc01s_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpqdqbc01s_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var n int\n    for _, ch := range s {\n        ch = ch | 32\n   \
    \     if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n   \
    \         n++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        n++\n  \
    \  }\n    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpbn_mt1r9_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpbn_mt1r9_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    str := []rune(s)\n    n := len(str)\n    if n == 0 {\n        return\
    \ 0\n    }\n    if str[n-1] == 'y' {\n        n--\n    }\n    v := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    count := 0\n    for i := 0; i < n; i++ {\n        for\
    \ _, v1 := range v {\n            if str[i] == v1 {\n                count++\n\
    \                break\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpi8bkwvld_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpi8bkwvld_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpi8bkwvld_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpi8bkwvld_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073310
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i, _ := range s {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpd8b70fbc_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpd8b70fbc_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpd8b70fbc_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    v := 0\n    i := 0\n    for i < len(s) {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            v++\n\
    \        }\n        i++\n    }\n    if s[len(s)-1] == 'y' {\n        v++\n   \
    \ }\n    return v\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp0pk67fuw_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp0pk67fuw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp0pk67fuw_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, v := range s {\n        switch v {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n\
    \            // y is a vowel at the end of the string\n            if v == s[len(s)-1]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwsh5n9iy_test.go:25:21: invalid operation: v == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    v := 0\n    for i, r := range s {\n        // NOTE: check if the\
    \ character is a vowel.\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o'\
    \ || r == 'u' {\n            v++\n        }\n        // NOTE: check if the character\
    \ is a 'y' and it is the last letter.\n        if r == 'y' && i == len(s)-1 {\n\
    \            v++\n        }\n    }\n    return v\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpo9m_dh9s_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpo9m_dh9s_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpo9m_dh9s_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n\tvar i int\n\tfor _, x := range s {\n\t\tif x == 'a' || x == 'e' ||\
    \ x == 'i' || x == 'o' || x == 'u' || x == 'y' {\n\t\t\ti++\n\t\t}\n\t}\n\treturn\
    \ i\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp43kbamrl_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp43kbamrl_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp43kbamrl_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp43kbamrl_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    counter := 0\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       counter++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        counter++\n\
    \    }\n    return counter\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpuhlkfcar_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpuhlkfcar_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpuhlkfcar_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, v := range s {\n        switch v {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if v == s[len(s)-1] {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpseijtx_h_test.go:24:21: invalid operation: v == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            n++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        n++\n    }\n    return\
    \ n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpksqxpmrl_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpksqxpmrl_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpksqxpmrl_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    c := 0\n    for _, c1 := range s {\n   \
    \     c1 = unicode.ToLower(c1)\n        for _, c2 := range vowels {\n        \
    \    if c1 == c2 {\n                c++\n            }\n        }\n    }\n   \
    \ return c\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ancgqrf_test.go:21:14: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    counts := 0\n    for _, c := range s {\n\
    \        if strings.Index(vowels, strings.ToLower(string(c))) != -1 {\n      \
    \      counts += 1\n        }\n    }\n    return counts\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuj5v2o_3_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073311
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    numVowels\
    \ := 0\n    for _, char := range s {\n        for _, vowel := range vowels {\n\
    \            if string(char) == vowel {\n                numVowels += 1\n    \
    \        }\n        }\n    }\n    return numVowels\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpcsnr9nt7_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpcsnr9nt7_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpcsnr9nt7_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpcsnr9nt7_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    end := false\n    for _, char := range s {\n    \
    \    switch char {\n        case 'a', 'e', 'i', 'o', 'u':\n            count +=\
    \ 1\n        case 'y':\n            if end {\n                count += 1\n   \
    \         }\n        default:\n            end = true\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpn5ahbzs1_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpn5ahbzs1_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpn5ahbzs1_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpn5ahbzs1_test.go:54:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, v := range s {\n        if v == 'a' ||\
    \ v == 'e' || v == 'i' || v == 'o' || v == 'u' || v == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5l5lwhe6_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp5l5lwhe6_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp5l5lwhe6_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp5l5lwhe6_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    sum := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1) {\n \
    \           sum++\n        }\n    }\n    return sum\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpfn472_1x_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpfn472_1x_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfn472_1x_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // return the number of vowels in the string\n    return 0\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpqe33e6ck_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpqe33e6ck_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpqe33e6ck_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpqe33e6ck_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpqe33e6ck_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpqe33e6ck_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpqe33e6ck_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // http://en.wikipedia.org/wiki/Vowel\n    // http://en.wikipedia.org/wiki/Semivowel\n\
    \    var count int = 0\n    for _, char := range s {\n        switch char {\n\
    \        case 'a', 'e', 'i', 'o', 'u', 'y':\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_hgyr2j3_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp_hgyr2j3_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp_hgyr2j3_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp_hgyr2j3_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var v int\n    last := len(s) - 1\n    for i, c := range s {\n  \
    \      if i == last && c == 'y' {\n            v++\n        } else if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            v++\n       \
    \ }\n    }\n    return v\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpj72ivzn6_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpj72ivzn6_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpj72ivzn6_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return -1\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp2b3naf7b_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp2b3naf7b_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp2b3naf7b_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp2b3naf7b_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp2b3naf7b_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp2b3naf7b_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp2b3naf7b_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, letter := range s {\n        switch letter\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n        case\
    \ 'y':\n            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjjtvfpdw_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjjtvfpdw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjjtvfpdw_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            cnt\
    \ += 1\n        }\n    }\n    return cnt\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwdp40jbh_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpwdp40jbh_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpwdp40jbh_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpwdp40jbh_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowls = \"aeiouy\"\n    var cnt = 0\n    var pos = 0\n    for\
    \ _, ch := range s {\n        if pos = strings.Index(vowls, ch); pos == -1 {\n\
    \            continue\n        }\n        cnt++\n    }\n    return cnt\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4rsnmtp5_test.go:22:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    is_vowel := func(c byte) bool {\n        switch c {\n        case\
    \ 'a', 'e', 'i', 'o', 'u', 'y':\n            return true\n        }\n        return\
    \ false\n    }\n\n    s_bytes := []byte(s)\n    total := 0\n    for i, c := range\
    \ s_bytes {\n        if is_vowel(c) {\n            if i == len(s_bytes) - 1 {\n\
    \                total += 1\n            } else if !is_vowel(s_bytes[i + 1]) {\n\
    \                total += 1\n            }\n        }\n    }\n    return total\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbjukdwz_test.go:59: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbjukdwz_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpkbjukdwz_test.go:59: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpkbjukdwz_test.go:59:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // TODO\n    return -1\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpu2x__mlk_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpu2x__mlk_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpu2x__mlk_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpu2x__mlk_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpu2x__mlk_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpu2x__mlk_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpu2x__mlk_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels = \"aeiou\"\n    var count int\n    for _, c := range\
    \ s {\n        if string(c) == \"y\" && count > 0 {\n            count++\n   \
    \     } else if strings.Contains(vowels, string(c)) {\n            count++\n \
    \       }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm_yjncw_test.go:23:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073312
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[rune]bool{'a': true, 'e': true, 'i':\
    \ true, 'o': true, 'u': true}\n    for _, v := range s {\n        if _, ok :=\
    \ vowels[v]; ok {\n            count++\n        }\n    }\n    if s[len(s)-1] ==\
    \ 'y' {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpbyqaield_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpbyqaield_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpbyqaield_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowel_count := 0\n    for i, v := range s {\n        if v == 'a'\
    \ || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            vowel_count++\n\
    \        } else if v == 'y' && i == len(s)-1 {\n            vowel_count++\n  \
    \      }\n    }\n    return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpuk1vkhin_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpuk1vkhin_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpuk1vkhin_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    v := []rune(\"aeiouy\")\n    count := 0\n    for _, r := range s\
    \ {\n        for _, k := range v {\n            if r == k {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpqad0cib2_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpqad0cib2_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpqad0cib2_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpqad0cib2_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var (\n        vowels = map[rune]int{\n            'a': 0,\n    \
    \        'e': 0,\n            'i': 0,\n            'o': 0,\n            'u': 0,\n\
    \            'y': 0,\n        }\n        count int\n    )\n    for _, v := range\
    \ s {\n        if _, ok := vowels[v]; ok {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy6j46_sp_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpy6j46_sp_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpy6j46_sp_test.go:56: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpy6j46_sp_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\"\
    : true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    r := []rune(s)\n    length := len(r)\n    var i int\n    count := 0\n\
    \    for i = 0; i < length; i++ {\n        if _, ok := vowels[string(r[i])]; ok\
    \ {\n            count++\n        }\n    }\n    if string(r[length-1]) == \"y\"\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmps0dl24jo_test.go:59: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmps0dl24jo_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmps0dl24jo_test.go:59: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // YOUR CODE HERE\n    n := 0\n    for i, c := range s {\n      \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n        (c\
    \ == 'y' && i == len(s)-1) {\n            n += 1\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9mfpj_hn_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9mfpj_hn_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9mfpj_hn_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        if (contains(vowels, string(char)))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jntmuj5_test.go:21:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var r int\n    l := len(s)\n    if l < 1 {\n        return 0\n  \
    \  }\n    b := []byte(s)\n    for i, v := range(b) {\n        if i == l - 1 &&\
    \ v == 'y' {\n            r++\n        } else if v == 'a' || v == 'e' || v ==\
    \ 'i' || v == 'o' || v == 'u' {\n            r++\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpaxuy5noo_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpaxuy5noo_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpaxuy5noo_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073313
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, char := range s {\n        if i == len(s)\
    \ - 1 && char == 'y' {\n            count++\n        } else if char == 'a' ||\
    \ char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjygryerb_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjygryerb_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjygryerb_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var sum int\n    for _, c := range s {\n        switch c {\n    \
    \    case 'a', 'e', 'i', 'o', 'u':\n            sum++\n        case 'y':\n   \
    \         if len(s) == 1 || s[1] != 'y' {\n                sum++\n           \
    \ }\n        }\n    }\n    return sum\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpc0vc27qj_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpc0vc27qj_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpc0vc27qj_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    c := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            c\
    \ += 1\n        }\n    }\n    return c\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpqg3ze_0b_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpqg3ze_0b_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpqg3ze_0b_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpqg3ze_0b_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowel_count := 0\n    for _, char := range s {\n        switch {\n\
    \        case char == 'a' || char == 'e' || char == 'i' || char == 'o' || char\
    \ == 'u':\n            vowel_count++\n        case char == 'y' && len(s) > 1 &&\
    \ string(s[len(s)-1]) == \"y\":\n            vowel_count++\n        }\n    }\n\
    \    return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp679lhaay_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp679lhaay_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp679lhaay_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    len := len(s)\n    for i := 0; i < len; i++ {\n\
    \        ch := s[i]\n        if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u' {\n            count += 1\n        } else if ch == 'y' && i ==\
    \ len - 1 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy0nxh10r_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy0nxh10r_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy0nxh10r_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    n := 0\n    for _,v := range s {\n    \
    \    if vowels[v] != 0 {\n            n++\n        }\n    }\n    return n\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\npanic: runtime error: index out of\
    \ range [97] with length 6 [recovered]\n\tpanic: runtime error: index out of range\
    \ [97] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.vowels_count(...)\n\t/tmp/tmpgl0ofs9a_test.go:21\n\
    command-line-arguments_test.TestVowels_Count(0x0?)\n\t/tmp/tmpgl0ofs9a_test.go:35\
    \ +0x766\ntesting.tRunner(0xc0001924e0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    count := 0\n    for _, v := range s {\n\
    \        if (vowels[0] == v || vowels[1] == v || vowels[2] == v || vowels[3] ==\
    \ v || vowels[4] == v || vowels[5] == v) {\n            count++\n        }\n \
    \   }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpamzi3so6_test.go:21:26: invalid operation: vowels[0] == v (mismatched
    types byte and rune)

    /tmp/tmpamzi3so6_test.go:21:44: invalid operation: vowels[1] == v (mismatched
    types byte and rune)

    /tmp/tmpamzi3so6_test.go:21:62: invalid operation: vowels[2] == v (mismatched
    types byte and rune)

    /tmp/tmpamzi3so6_test.go:21:80: invalid operation: vowels[3] == v (mismatched
    types byte and rune)

    /tmp/tmpamzi3so6_test.go:21:98: invalid operation: vowels[4] == v (mismatched
    types byte and rune)

    /tmp/tmpamzi3so6_test.go:21:116: invalid operation: vowels[5] == v (mismatched
    types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    n := len(s)\n    for i, c := range s {\n     \
    \   if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n          \
    \  count++\n        }\n        if c == 'y' && i == n-1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpmz4hhs0z_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpmz4hhs0z_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpmz4hhs0z_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  count++\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp28dixymq_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp28dixymq_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp28dixymq_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp28dixymq_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    ret :=\
    \ 0\n    for _, v := range s {\n        // fmt.Println(v)\n        for _, r :=\
    \ range vowels {\n            if string(v) == r {\n                ret += 1\n\
    \            }\n        }\n    }\n    return ret\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpct15dimw_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpct15dimw_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpct15dimw_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpct15dimw_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    s = strings.ToLower(s)\n    for i, c := range\
    \ s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            count++\n        } else if c == 'y' && i == len(s)-1 {\n        \
    \    count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszv_prmo_test.go:19:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Implement vowels_count\n    return -1\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpdrbqqs2y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpdrbqqs2y_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpdrbqqs2y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpdrbqqs2y_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpdrbqqs2y_test.go:41: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpdrbqqs2y_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpdrbqqs2y_test.go:41: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, r := range s {\n        // ignore case\n \
    \       if r == 'a' || r == 'A' || r == 'e' || r == 'E' || r == 'i' || r == 'I'\
    \ || r == 'o' || r == 'O' || r == 'u' || r == 'U' {\n            if r == 'y' ||\
    \ r == 'Y' {\n                if i == len(s) - 1 {\n                    count\
    \ += 1\n                }\n            } else {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpctlil6y0_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpctlil6y0_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpctlil6y0_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    switch len(s) {\n    case 0:\n        break\n    case\
    \ 1:\n        if s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0]\
    \ == 'u' {\n            n = 1\n        }\n    default:\n        for i, v := range\
    \ s {\n            switch v {\n            case 'a', 'e', 'i', 'o', 'u':\n   \
    \             n++\n            case 'y':\n                if i == len(s)-1 {\n\
    \                    n++\n                }\n            }\n        }\n    }\n\
    \    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpu_xcui8g_test.go:60: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpu_xcui8g_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpu_xcui8g_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var (\n        vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n        count int\n    )\n    for _, x := range s {\n        for _, y := range\
    \ vowels {\n            if x == rune(y[0]) {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppb70z1gj_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmppb70z1gj_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppb70z1gj_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmppb70z1gj_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // YOUR CODE HERE\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmppon3v4kt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppon3v4kt_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073314
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    counter := 0\n    for _, ch := range s\
    \ {\n        for _, v := range vowels {\n            if ch == v {\n          \
    \      counter++\n            }\n        }\n    }\n    return counter\n}\n\nfunc\
    \ TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"\
    Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n\
    \     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmplplznq94_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmplplznq94_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmplplznq94_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmplplznq94_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i := 0; i < len(s); i++ {\n        c := s[i]\n  \
    \      if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'\
    \ && i == len(s)-1 {\n            n += 1\n        }\n    }\n    return n\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmplsju2jtl_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmplsju2jtl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmplsju2jtl_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return -1\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp5va_2e0j_test.go:40: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp5va_2e0j_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp5va_2e0j_test.go:40: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp5va_2e0j_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp5va_2e0j_test.go:40: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp5va_2e0j_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5va_2e0j_test.go:40: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Count the vowels in s.\n    var counter int = 0\n    for _, c\
    \ := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' {\n            counter++\n        }\n    }\n    if len(s) > 1 && s[len(s)-1]\
    \ == 'y' {\n        counter++\n    }\n    return counter\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpa8m8j9md_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpa8m8j9md_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpa8m8j9md_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073315
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i, _ := range s {\n        switch s[i] {\n      \
    \  case 'a', 'e', 'i', 'o', 'u':\n            n++\n        case 'y':\n       \
    \     if i == len(s)-1 {\n                n++\n            }\n        }\n    }\n\
    \    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmplk4y1107_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmplk4y1107_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmplk4y1107_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    result := 0\n    for i, c := range s {\n        if i != len(s) -\
    \ 1 && (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    result++\n        } else if i == len(s) - 1 && (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            result++\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestVowels_Count(t *testing.T) {\n \
    \ candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprv98cprh_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprv98cprh_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprv98cprh_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    num := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            num += 1\n        }\n\
    \    }\n    return num\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_1h3mhhp_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp_1h3mhhp_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp_1h3mhhp_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp_1h3mhhp_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, i := range s {\n        if _, ok := vowels[i]; ok {\n     \
    \       count += 1\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count\
    \ += 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3i9wkxad_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3i9wkxad_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3i9wkxad_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    counter := 0\n    for _, char := range s {\n        lower := char\n\
    \        if (char >= 'A' && char <= 'Z') {\n            lower = char + 32\n  \
    \      }\n        if (lower == 'a' || lower == 'e' || lower == 'i' || lower ==\
    \ 'o' || lower == 'u') {\n            counter++\n        }\n    }\n    if (s[len(s)\
    \ - 1] == 'y') {\n        counter++\n    }\n    return counter\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppykbxfhw_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmppykbxfhw_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowel_count := 0\n    for _, char := range s {\n        switch char\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            vowel_count++\n      \
    \  case 'y':\n            if len(s) == 1 {\n                vowel_count++\n  \
    \          }\n        }\n    }\n    return vowel_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp7asd_mnz_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp7asd_mnz_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp7asd_mnz_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp7asd_mnz_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\
    \    var count int = 0\n    for _,v := range s {\n        if v == 'y' && count\
    \ > 0 {\n            continue\n        }\n        for _, vv := range vowels {\n\
    \            if string(v) == vv {\n                count++\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp0yrtog55_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp0yrtog55_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp0yrtog55_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp0yrtog55_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp0yrtog55_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, v := range s {\n        if i == len(s) - 1\
    \ && v == 'y' {\n            count++\n        } else if v == 'a' || v == 'e' ||\
    \ v == 'i' || v == 'o' || v == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpndqv14am_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpndqv14am_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpndqv14am_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var v map[rune]bool = map[rune]bool{\n        'a': true,\n      \
    \  'e': true,\n        'i': true,\n        'o': true,\n        'u': true,\n  \
    \  }\n    var count int = 0\n    for i, w := range s {\n        if v[w] {\n  \
    \          count += 1\n        }\n        if w == 'y' && i == len(s)-1 {\n   \
    \         count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjfwbhauw_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjfwbhauw_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjfwbhauw_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    ret := 0\n    for i, v := range s {\n        // \u8F93\u5165\u5B57\
    \u7B26\u4E32\u5305\u542B\u5927\u5199\u5B57\u6BCD\n        v = v | 32\n       \
    \ if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            ret++\n\
    \        }\n        // \u5143\u97F3\u5B57\u6BCD\u53EA\u6709\u5728\u5355\u8BCD\u7684\
    \u672B\u5C3E\u624D\u7B97\n        if v == 'y' && i < len(s) - 1 {\n          \
    \  return ret\n        }\n    }\n    return ret\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp3_vu_ca5_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3_vu_ca5_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3_vu_ca5_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp3_vu_ca5_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3_vu_ca5_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    s = s + \" \"\n    vowels := \"aeiouy\"\n    cnt := 0\n    prev :=\
    \ \"\"\n    for _, ch := range s {\n        if prev == \"y\" && vowels_count(\"\
    \" + string(ch)) == 0 {\n            cnt += 1\n        }\n        for _, v :=\
    \ range vowels {\n            if ch == v {\n                cnt += 1\n       \
    \     }\n        }\n        prev = \"\" + string(ch)\n    }\n    return cnt\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8sk4wf4t_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp8sk4wf4t_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp8sk4wf4t_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8sk4wf4t_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8sk4wf4t_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowelSet := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true,\
    \ 'u': true, 'y': true}\n    count := 0\n    for _, v := range s {\n        _,\
    \ ok := vowelSet[v]\n        if ok {\n            count++\n        }\n    }\n\
    \    if len(s) >= 2 && s[len(s)-1] == 'y' && s[len(s)-2] != 'a' && s[len(s)-2]\
    \ != 'e' && s[len(s)-2] != 'i' && s[len(s)-2] != 'o' && s[len(s)-2] != 'u' {\n\
    \        count--\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnac1l3vb_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpnac1l3vb_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpnac1l3vb_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpnac1l3vb_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    count := 0\n    for _, char := range s {\n        if _, ok := vowels[string(char)];\
    \ ok {\n            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n \
    \       count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpv7w4mcns_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpv7w4mcns_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv7w4mcns_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    c := 0\n    l := len(s)\n    for i := 0; i < l; i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            c++\n        }\n        if s[i] == 'y' && i < l - 1 {\n         \
    \   continue\n        }\n        if s[i] == 'y' && i == l - 1 {\n            c++\n\
    \        }\n    }\n    return c\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr618vo2v_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr618vo2v_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr618vo2v_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n\tif len(s) < 1 {\n\t\treturn 0\n\t}\n\tif len(s) < 2 {\n\t\tif s ==\
    \ \"a\" || s == \"e\" || s == \"i\" || s == \"o\" || s == \"u\" {\n\t\t\treturn\
    \ 1\n\t\t}\n\t\treturn 0\n\t}\n\tvar count int\n\tif s[len(s)-1] == 'a' || s[len(s)-1]\
    \ == 'e' || s[len(s)-1] == 'i' || s[len(s)-1] == 'o' || s[len(s)-1] == 'u' {\n\
    \t\tcount++\n\t}\n\tif s[len(s)-2] == 'a' || s[len(s)-2] == 'e' || s[len(s)-2]\
    \ == 'i' || s[len(s)-2] == 'o' || s[len(s)-2] == 'u' {\n\t\tcount++\n\t}\n\treturn\
    \ count + vowels_count(s[:len(s)-1])\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpx61pq0bb_test.go:56: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpx61pq0bb_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073316
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    var vowels map[rune]int = map[rune]int{\n\
    \        'a': 1,\n        'e': 1,\n        'i': 1,\n        'o': 1,\n        'u':\
    \ 1,\n        'y': 1,\n    }\n    for _, ch := range s {\n        count += vowels[ch]\n\
    \    }\n    // In case of y as the last char, it is a vowel only if it is\n  \
    \  // part of the word.\n    if count > 0 && s[len(s)-1] == 'y' {\n        count\
    \ -= 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprvij0xq7_test.go:57: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmprvij0xq7_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmprvij0xq7_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprvij0xq7_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprvij0xq7_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, _ := range s {\n        switch s[i] {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if i == len(s)-1 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpi_ko70y4_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpi_ko70y4_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpi_ko70y4_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vc int = 0\n    var vcount int = 0\n    var letters = [5]string\
    \ {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    if string(s[len(s)-1]) == \"y\" {\n\
    \        vc = 1\n    }\n    for i := 0; i < len(s); i++ {\n        for j := 0;\
    \ j < len(letters); j++ {\n            if string(s[i]) == letters[j] {\n     \
    \           vcount++\n            }\n        }\n    }\n    return vcount + vc\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3bg6u_92_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3bg6u_92_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3bg6u_92_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    s = strings.ToLower(s)\n    count := 0\n    for i, c := range s {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       count++\n        }\n        if i == len(s) - 1 && c == 'y' {\n       \
    \     count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstve4rl6_test.go:18:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, v := range s {\n        v := string(v)\n \
    \       if v == \"a\" || v == \"e\" || v == \"i\" || v == \"o\" || v == \"u\"\
    \ {\n            count++\n        }\n    }\n    if s[len(s)-1:] == \"y\" {\n \
    \       count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpyyzbjzn0_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpyyzbjzn0_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpyyzbjzn0_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    result := 0\n    var vowels = map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    var i int\n    for i = 0; i < len(s); i++ {\n        c\
    \ := string(s[i])\n        if vowels[c] {\n            result++\n        }\n \
    \   }\n    if i > 1 && string(s[i-1]) == \"y\" {\n        result++\n    }\n  \
    \  return result\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpku61e4lu_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpku61e4lu_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpku61e4lu_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073317
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n\
    \        if string(c) == \"y\" && len(s) > 1 && s[len(s)-1] == 'y' {\n       \
    \     count++\n        } else if strings.Contains(vowels, string(c)) {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj440fv3v_test.go:23:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') ||\n      \
    \     (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\
    \ {\n            count++\n        }\n    }\n    if (s[len(s)-1] == 'y' || s[len(s)-1]\
    \ == 'Y') && (s[len(s)-2] != 'a' && s[len(s)-2] != 'e' && s[len(s)-2] != 'i' &&\
    \ s[len(s)-2] != 'o' && s[len(s)-2] != 'u') {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpj8tihkaq_test.go:50: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpj8tihkaq_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    if len(s) > 0 && s[len(s)-1] == 'y'\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xdv_qz8_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xdv_qz8_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xdv_qz8_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    c := 0\n    for i, r := range s {\n        switch r {\n        case\
    \ 'a', 'e', 'i', 'o', 'u':\n            c++\n        case 'y':\n            if\
    \ i < len(s)-1 {\n                c++\n            }\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_tjrlxin_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp_tjrlxin_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp_tjrlxin_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp_tjrlxin_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp_tjrlxin_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    var last rune\n    for _, c := range s {\n   \
    \     switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n\
    \        case 'y':\n            if last == 0 {\n                count++\n    \
    \        }\n        }\n        last = c\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpqee_i6cc_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpqee_i6cc_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpqee_i6cc_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpqee_i6cc_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, v := range s {\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' ||\n            (v == 'y' && i == len(s)-1)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_ve764sh_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp_ve764sh_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp_ve764sh_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    cnt := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            cnt += 1\n        }\n\
    \    }\n    return cnt\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpyw6ocggi_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpyw6ocggi_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpyw6ocggi_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpyw6ocggi_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels, count int = 0, 0\n    for _, r := range s {\n       \
    \ if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            vowels++\n\
    \        }\n        if r == 'y' && count == len(s)-1 {\n            vowels++\n\
    \        }\n        count++\n    }\n    return vowels\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpv66feosq_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpv66feosq_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv66feosq_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n\
    \        \"i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n\
    \    }\n    for _, char := range s {\n        //fmt.Println(string(char))\n  \
    \      if _, ok := vowels[string(char)]; ok {\n            vowels[string(char)]\
    \ += 1\n        }\n    }\n    //fmt.Println(vowels)\n    if vowels[\"y\"] > 0\
    \ && (vowels[\"y\"] == 1 && s[len(s)-1:] == \"y\") {\n        vowels[\"y\"] =\
    \ 0\n    }\n    return vowels[\"a\"] + vowels[\"e\"] + vowels[\"i\"] + vowels[\"\
    o\"] + vowels[\"u\"] + vowels[\"y\"]\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjot2xoef_test.go:58: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpjot2xoef_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpjot2xoef_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjot2xoef_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjot2xoef_test.go:58: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels int\n    vowels_map := map[rune]\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc8j4mhu0_test.go:19:28: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073317
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n\
    \        \"i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n\
    \    }\n    for _, char := range s {\n        if _, ok := vowels[string(char)];\
    \ ok {\n            vowels[string(char)] += 1\n        }\n    }\n    if vowels[\"\
    y\"] > 0 && string(s[len(s)-1]) != \"y\" {\n        vowels[\"y\"] = 0\n    }\n\
    \    count := 0\n    for _, value := range vowels {\n        count += value\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpa5squyz2_test.go:60: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpa5squyz2_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpa5squyz2_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var num int\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    num++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n           \
    \ num++\n        }\n    }\n    return num\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwk_tokei_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwk_tokei_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwk_tokei_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[rune]bool{'a': true, 'e': true, 'i':\
    \ true, 'o': true, 'u': true}\n    last := rune(s[len(s)-1])\n    if vowels[last]\
    \ {\n        count += 1\n    }\n    for _, c := range s {\n        if vowels[c]\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpp31tqply_test.go:51: expected '%!s(int=2)', got '%!s(int=3)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpp31tqply_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpp31tqply_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpp31tqply_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__5\
    \ (0.00s)\n        tmpp31tqply_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpp31tqply_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpidahg9kx_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpidahg9kx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    count = 0\n    for _, c := range s {\n       \
    \ if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count\
    \ += 1\n        }\n    }\n    last := s[len(s)-1]\n    if (last == 'y') {\n  \
    \      count += 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpw0xctcwc_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpw0xctcwc_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpw0xctcwc_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    var last bool = false\n    var is_vowel =\
    \ func(c byte) bool {\n        return c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u'\n    }\n    for i := 0; i < len(s); i++ {\n        if is_vowel(s[i])\
    \ {\n            count++\n            last = true\n        } else {\n        \
    \    last = false\n        }\n    }\n    if !last {\n        count--\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpmm39hhnv_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpmm39hhnv_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpmm39hhnv_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpmm39hhnv_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1) {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjdrqm9fj_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjdrqm9fj_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjdrqm9fj_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073195
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    res := 0\n    for _, value := range s {\n        if \"aeiouyAEIOUY\"\
    \ == fmt.Sprintf(\"%c\", value) {\n            res++\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpazpbyfza_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpazpbyfza_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpazpbyfza_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpazpbyfza_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpazpbyfza_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpazpbyfza_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpazpbyfza_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[string]bool{\n        \"a\": true,\n\
    \        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"\
    u\": true,\n    }\n    for i, c := range s {\n        if v, ok := vowels[string(c)];\
    \ ok && v {\n            count += 1\n        } else if string(c) == \"y\" && i\
    \ == len(s)-1 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm64gf31b_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm64gf31b_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm64gf31b_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    n := 0\n    for i := 0; i < len(s); i++ {\n        if isVowel(s[i])\
    \ {\n            n++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        n++\n\
    \    }\n    return n\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpak6muod5_test.go:20:12: undefined: isVowel

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var num int\n    for _, c := range s {\n        switch c {\n    \
    \    case 'a', 'e', 'i', 'o', 'u':\n            num++\n        case 'y':\n   \
    \         if s[len(s)-1] == 'y' {\n                num++\n            }\n    \
    \    }\n    }\n    return num\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpdn5m63rb_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpdn5m63rb_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpdn5m63rb_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    //return 0\n    var n int\n    f :=\
    \ func(r rune) bool {\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o'\
    \ || r == 'u' {\n            n++\n        }\n        return false\n    }\n   \
    \ n = 0\n    for _, rune := range s {\n        f(rune)\n    }\n    return n\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9umtyncl_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp9umtyncl_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp9umtyncl_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp9umtyncl_test.go:53:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // solution for vowels_count\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpy2qbk13x_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpy2qbk13x_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpy2qbk13x_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpy2qbk13x_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpy2qbk13x_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpy2qbk13x_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy2qbk13x_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, _ := range s {\n        switch s[i] {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count += 1\n        case 'y':\n\
    \            if i == len(s) - 1 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3vjfeng7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3vjfeng7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3vjfeng7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var ret int\n    for _, v := range s {\n        switch v {\n    \
    \    case 'a', 'e', 'i', 'o', 'u':\n            ret++\n        case 'y':\n   \
    \         if len(s) == 1 || len(s) == string(s[1:]).Index(s[0]) + 1 {\n      \
    \          ret++\n            }\n        }\n    }\n    return ret\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nzbsw5b_test.go:24:55: string(s[1:]).Index undefined (type string has
    no field or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073318
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    letters := []rune(s)\n    count := 0\n    for i, c := range letters\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           count += 1\n        } else if c == 'y' && i == len(letters) - 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjkhk581n_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjkhk581n_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjkhk581n_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        v := s[i]\n\
    \        switch v {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n\
    \        case 'y':\n            if i != len(s) - 1 {\n                break\n\
    \            }\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpno_buxw8_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpno_buxw8_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpno_buxw8_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    vowels := map[string]bool{\"a\": true, \"e\": true,\
    \ \"i\": true, \"o\": true, \"u\": true}\n    for i, v := range s {\n        if\
    \ i == len(s) - 1 && string(v) == \"y\" {\n            count++\n        } else\
    \ if vowels[string(v)] {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp39kpxlec_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp39kpxlec_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp39kpxlec_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for\
    \ i, v := range s {\n        if v == 'y' && i != len(s)-1 {\n            continue\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              count++\n            }\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmph2yoldks_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmph2yoldks_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmph2yoldks_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmph2yoldks_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if s[len(s)-1] == 'y' {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpoyozg19f_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpoyozg19f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpoyozg19f_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073319
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, r := range s {\n        // fmt.Println(i,\
    \ string(r))\n        if r == 'a' || r == 'e' || r == 'i' || r == 'o' || r ==\
    \ 'u' {\n            count += 1\n        }\n        if r == 'y' && i == len(s)\
    \ - 1 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"\
    Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n\
    \     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5t_0ih5r_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5t_0ih5r_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5t_0ih5r_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073319
