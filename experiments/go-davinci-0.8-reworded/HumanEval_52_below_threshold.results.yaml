language: go_test.go
name: HumanEval_52_below_threshold
results:
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmpky508582_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmpky508582_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, item := range l {\n        if item >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, val := range l {\n        if val >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ iterate over list l and compare each item with threshold t\n    for _, value\
    \ := range l {\n        if value >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //for\
    \ i, v := range l {\n    //    fmt.Println(i, v)\n    //}\n    for _, v := range\
    \ l {\n        if v >= t {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, val := range l {\n        if val >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, val := range l {\n\t\tif val >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmpky508582_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmpky508582_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if (value >= t) {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, k := range l {\n        if k >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\treturn\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmpbs981rf1_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmpbs981rf1_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmpbs981rf1_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmpbs981rf1_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, num := range l {\n        if num >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 2
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ Fill in the function body\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n \
    \ candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt88cy9rd_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, n := range l {\n\t\tif n >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmpky508582_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmpky508582_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ result bool\n    for _, v := range l {\n        if v > t {\n            result\
    \ = false\n            break\n        } else {\n            result = true\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__5\
    \ (0.00s)\n        tmp88rrcuf6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmpky508582_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmpky508582_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if t <= e {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, n := range l {\n\t\tif n >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if t <= x {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, x := range l {\n\t\tif x >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if t <= n {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, a := range l {\n        if a >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, e := range l {\n\t\tif e >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ below bool\n    below = true\n    for i := 0; i < len(l); i++ {\n        if\
    \ l[i] >= t {\n            below = false\n        }\n    }\n    return below\n\
    }\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    r\
    \ := true\n    for _, i := range l {\n        if i >= t {\n            r = false\n\
    \            break\n        }\n    }\n    return r\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, item := range l {\n        if item >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, num := range l {\n        if num >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmpky508582_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmpky508582_test.go:35:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, a := range l {\n        if a >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    if\
    \ len(l) == 0 {\n        return true\n    }\n    if l[0] < t {\n        return\
    \ below_threshold(l[1:], t)\n    }\n    return false\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ Your code here!\n    return false\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmpqz27yuji_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmpqz27yuji_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmpqz27yuji_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmpqz27yuji_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074154
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, i := range l {\n\t\tif i >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    if\
    \ len(l) == 0 {\n        return true\n    }\n    return l[0] < t && below_threshold(l[1:],\
    \ t)\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if (i >= t) {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n \
    \ candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, elem := range l {\n\t\tif elem >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, val := range l {\n        if val >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, v := range l {\n\t\tif v >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _,v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, elem := range l {\n        if elem >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, item := range l {\n        if item >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if (i >= t) {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n \
    \ candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ threshold_not_exceeded bool = true\n\n    for _, num := range l {\n        if\
    \ num >= t {\n            threshold_not_exceeded = false\n        }\n    }\n\n\
    \    return threshold_not_exceeded\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, item := range l {\n        if item >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tvar\
    \ isBelowThreshold bool\n\tisBelowThreshold = true\n\tfor _, v := range l {\n\t\
    \tif v >= t {\n\t\t\tisBelowThreshold = false\n\t\t}\n\t}\n\treturn isBelowThreshold\n\
    }\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, elem := range l {\n        if elem >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, item := range l {\n        if item >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, elem := range l {\n        if elem >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, x := range l {\n        if x >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, num := range l {\n        if num >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, n := range l {\n\t\tif n >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, elem := range l {\n        if elem >= t {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _,v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, e := range l {\n\t\tif e >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ sum int\n    for _, v := range l {\n        sum += v\n    }\n    return sum\
    \ < t\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__2\
    \ (0.00s)\n        tmp8seui4tq_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__3 (0.00s)\n        tmp8seui4tq_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__4\
    \ (0.00s)\n        tmp8seui4tq_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, val := range l {\n        if val >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if t <= v {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ c int = 0\n    for i := 0; i < len(l); i++ {\n        if l[i] < t {\n      \
    \      c++\n        }\n    }\n    if c == len(l) {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, val := range l {\n        if val >= t {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    fmt.Println(l)\n\
    \    fmt.Println(t)\n    var i int\n    for i = 0; i < len(l); i++ {\n       \
    \ fmt.Println(l[i])\n        if l[i] >= t {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n\
    \  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ res bool\n    for _, n := range l {\n        if n < t {\n            res = true\n\
    \        } else {\n            res = false\n            break\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ found = false\n    for _, n := range l {\n        if n >= t {\n            found\
    \ = true\n            break\n        }\n    }\n    return !found\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    if\
    \ len(l) == 0 {\n        return true\n    } else {\n        return l[0] < t &&\
    \ below_threshold(l[1:], t)\n    }\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ Write your code here\n    return false\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmpuqv5ul_f_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmpuqv5ul_f_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmpuqv5ul_f_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmpuqv5ul_f_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmps429ub3x_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmps429ub3x_test.go:35:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, el := range l {\n        if el >= t {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n \
    \ candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, i := range l {\n\t\tif i >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ ...\n    // YOUR CODE HERE\n    // ...\n    return true\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__1\
    \ (0.00s)\n        tmp9vu6dr5a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__5 (0.00s)\n        tmp9vu6dr5a_test.go:38:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _,v := range l {\n\t\tif v > t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__5\
    \ (0.00s)\n        tmp_lyvu3mb_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, e := range l {\n        if e >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n\tfor\
    \ _, v := range l {\n\t\tif v >= t {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    var\
    \ b bool = true\n    for _, v := range l {\n        if v >= t {\n            b\
    \ = false\n            break\n        }\n    }\n    return b\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, i := range l {\n        if i >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    r\
    \ := true\n    for _, n := range l {\n        if n >= t {\n            r = false\n\
    \            break\n        }\n    }\n    return r\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, n := range l {\n        if n >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ TODO: Fill in the function, then delete this comment\n    return false\n}\n\n\
    func TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected: true\
    \ },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1, 8, 4, 10},\
    \ 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmpte1f241j_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmpte1f241j_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmpte1f241j_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmpte1f241j_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, value := range l {\n        if value >= t {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074152
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ Sum each element in the slice\n    sum := 0\n    for _, v := range l {\n   \
    \     sum += v\n    }\n    if sum < t {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
    \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     {\
    \ actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1,\
    \ 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__2\
    \ (0.00s)\n        tmpird_bj7f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__3 (0.00s)\n        tmpird_bj7f_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__4\
    \ (0.00s)\n        tmpird_bj7f_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    for\
    \ _, v := range l {\n        if v >= t {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestBelow_Threshold(t *testing.T) {\n  candidate\
    \ := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10},\
    \ 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21), expected:\
    \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n     { actual:\
    \ candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074058
- exit_code: 1
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ your code here\n    return false\n}\n\nfunc TestBelow_Threshold(t *testing.T)\
    \ {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4, 10}, 21),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected: true },\n\
    \     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBelow_Threshold (0.00s)\n    --- FAIL: TestBelow_Threshold/test_num__0\
    \ (0.00s)\n        tmpz47sdkac_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__2 (0.00s)\n        tmpz47sdkac_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestBelow_Threshold/test_num__3\
    \ (0.00s)\n        tmpz47sdkac_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestBelow_Threshold/test_num__4 (0.00s)\n        tmpz47sdkac_test.go:36:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074155
- exit_code: 0
  program: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return true if all numbers in the list l are below threshold t.\n//\
    \ >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1,\
    \ 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    //\
    \ YOUR CODE HERE\n    for i := 0; i < len(l); i++ {\n        if l[i] >= t {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestBelow_Threshold(t\
    \ *testing.T) {\n  candidate := below_threshold\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}, 100), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}, 5), expected: false },\n     { actual: candidate([]int{1, 20, 4,\
    \ 10}, 21), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}, 22),\
    \ expected: true },\n     { actual: candidate([]int{1, 8, 4, 10}, 11), expected:\
    \ true },\n     { actual: candidate([]int{1, 8, 4, 10}, 10), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074155
