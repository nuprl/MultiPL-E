language: go_test.go
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        if i > 0 {\n            result += \" \"\
    \n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ans string\n\
    \    for i := 0; i <= n; i++ {\n        ans += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ans\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpmud4xzgm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpmud4xzgm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpmud4xzgm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar ret string\n\t\
    for i := 0; i <= n; i++ {\n\t\tret += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn ret\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpw2f242s2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpw2f242s2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpw2f242s2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkaz7vyez_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkaz7vyez_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpkaz7vyez_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var seq string\n\
    \    for i := 0; i <= n; i++ {\n        seq += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return seq\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpzc46l3uq_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpzc46l3uq_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpzc46l3uq_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ret string\n\
    \    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8txropp3_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8txropp3_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp8txropp3_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO\n    return\
    \ \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp91h1u5ky_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp91h1u5ky_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmp91h1u5ky_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result []string\n\
    \    var i int\n    for i = 0; i <= n; i++ {\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", i))\n    }\n    return fmt.Sprintf(\"%s\", result)\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmphzglz7up_test.go:37: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmphzglz7up_test.go:37: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmphzglz7up_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            result += \"\
    \ \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // your code here\n\
    \    if n == 0 {\n        return \"0\"\n    }\n\n    s := \"\"\n    for i := 0;\
    \ i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpt1khvkmy_test.go:42: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpt1khvkmy_test.go:42:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    a := make([]string,\
    \ n + 1)\n    for i := 0; i <= n; i++ {\n        a[i] = fmt.Sprintf(\"%d\", i)\n\
    \    }\n    return join(a, \" \")\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyyspyu_test.go:18:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073257
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkaz7vyez_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkaz7vyez_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpkaz7vyez_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := \"\"\
    \n    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpjbbfh9oh_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpjbbfh9oh_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpjbbfh9oh_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // BEGIN\n    var\
    \ result []string\n    for i := 0; i <= n; i++ {\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", i))\n    }\n    return s2l(result)\n    // END\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6c5zce3_test.go:19:12: undefined: s2l

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073257
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    n += 1\n    // Initialize a slice of type int\
    \ which will hold n elements.\n    slice := make([]int, n)\n    // fill the slice\
    \ with numbers starting from 0 upto n-1.\n    for i := 0; i < n; i++ {\n     \
    \   slice[i] = i\n    }\n    // Convert the slice to a string using the fmt.Sprint()\
    \ function.\n    s := fmt.Sprint(slice)\n    return s\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmprk1hkpkz_test.go:44: expected '0 1 2 3', got '[0 1 2 3]'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmprk1hkpkz_test.go:44:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := \"\"\
    \n    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpjbbfh9oh_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpjbbfh9oh_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpjbbfh9oh_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result []byte\n\
    \    for i := 0; i <= n; i++ {\n        result = append(result, fmt.Sprintf(\"\
    %d \", i)...)\n    }\n    return string(result)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkwgf5hr5_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkwgf5hr5_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpkwgf5hr5_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    slice := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        slice[i] = fmt.Sprintf(\"%d\",\
    \ i)\n    }\n    return fmt.Sprintf(\"%s\", slice)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp1_2worai_test.go:36: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp1_2worai_test.go:36: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp1_2worai_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var res string\n\
    \    if n <= 0 {\n        return \"0\"\n    } else {\n        for i := 0; i <=\
    \ n; i++ {\n            res += fmt.Sprintf(\"%d \", i)\n        }\n    }\n   \
    \ return res\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpsqh2m0tr_test.go:40: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpsqh2m0tr_test.go:40:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            result += \"\
    \ \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\treturn \"Not Implemented\"\
    \n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpi2yq5va5_test.go:32: expected '0', got 'Not Implemented'\n\
    \    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi2yq5va5_test.go:32:\
    \ expected '0 1 2 3', got 'Not Implemented'\n    --- FAIL: TestString_Sequence/test_num__2\
    \ (0.00s)\n        tmpi2yq5va5_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10',\
    \ got 'Not Implemented'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\n\
    \    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxn_7lfmj_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxn_7lfmj_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpxn_7lfmj_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    output := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        output += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return output\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpwsqn0u98_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpwsqn0u98_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpwsqn0u98_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar output string\n\
    \tfor i := 0; i <= n; i++ {\n\t\toutput += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn\
    \ output\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpy0gyehwm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpy0gyehwm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpy0gyehwm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tstr := \"\"\n\tfor\
    \ i := 0; i <= n; i++ {\n\t\tstr += fmt.Sprintf(\"%d \", i)\n\t}\n\tstr = str[:len(str)-1]\n\
    \treturn str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    ret := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7ua4e561_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7ua4e561_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7ua4e561_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        if i == 0 {\n            s = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            s = fmt.Sprintf(\"%s %d\", s, i)\n   \
    \     }\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     return \"\"\n    }\n\n    var str string\n    for i := 0; i <= n; i++ {\n\
    \        str += fmt.Sprintf(\"%d \", i)\n    }\n\n    return str\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxnkzlbj__test.go:41: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxnkzlbj__test.go:41: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxnkzlbj__test.go:41: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     panic(\"n must be a positive integer\")\n    }\n    ret := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8mhr_80e_test.go:39: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8mhr_80e_test.go:39: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp8mhr_80e_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        s[i] = fmt.Sprintf(\"%d\", i)\n\
    \    }\n    return(fmt.Sprintf(\"%s\", s))\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpbh_wj3kb_test.go:36: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpbh_wj3kb_test.go:36: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpbh_wj3kb_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: replace\
    \ with an actual implementation\n    if n < 0 {\n        return \"\"\n    }\n\
    \    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\"\
    , string_sequence(n-1), n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073261
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        result[i] = fmt.Sprintf(\"%d\"\
    , i)\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3uepytn_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073260
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var numbers []string\n\
    \    for i := 0; i <= n; i++ {\n        numbers = append(numbers, fmt.Sprintf(\"\
    %d\", i))\n    }\n    return fmt.Sprintf(\"%s\", numbers)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp4yh7d8_f_test.go:36: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp4yh7d8_f_test.go:36: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp4yh7d8_f_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     return \"\"\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return\
    \ string_sequence(n-1) + \" \" + fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var output string\n\
    \    for i := 0; i <= n; i++ {\n        output += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return output\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpht6ciy9e_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpht6ciy9e_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpht6ciy9e_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    str := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpafzzmlqc_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpafzzmlqc_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpafzzmlqc_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n \
    \   }\n\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpelrbwkf1_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpelrbwkf1_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpelrbwkf1_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    s := \"\"\n    for i := 0; i <= n; i++ {\n   \
    \     s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmplojqvvvf_test.go:39: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmplojqvvvf_test.go:39:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    ret := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7ua4e561_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7ua4e561_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7ua4e561_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Your code here\n\
    \    var a []string\n    for i := 0; i <= n; i++ {\n        a = append(a, fmt.Sprintf(\"\
    %d\", i))\n    }\n    return fmt.Sprintf(\"%s\", a)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8_1qwitr_test.go:37: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8_1qwitr_test.go:37: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp8_1qwitr_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // YOUR CODE HERE\n\
    \    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return\
    \ \"0 1\"\n    }\n    if n == 2 {\n        return \"0 1 2\"\n    }\n    if n ==\
    \ 3 {\n        return \"0 1 2 3\"\n    }\n    if n == 4 {\n        return \"0\
    \ 1 2 3 4\"\n    }\n    if n == 5 {\n        return \"0 1 2 3 4 5\"\n    }\n \
    \   return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__2\
    \ (0.00s)\n        tmp3fnzj86u_test.go:51: expected '0 1 2 3 4 5 6 7 8 9 10',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar res string\n\t\
    for i := 0; i <= n; i++ {\n\t\tres += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn res\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmprpbg5ntv_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmprpbg5ntv_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmprpbg5ntv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Append each number\
    \ to the array and return the string value\n    numbers := []string{}\n    for\
    \ i := 0; i <= n; i++ {\n        numbers = append(numbers, fmt.Sprintf(\"%d\"\
    , i))\n    }\n    return fmt.Sprintf(\"%s\", numbers)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp67um8b5k_test.go:37: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp67um8b5k_test.go:37: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp67um8b5k_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tif n <= 0 {\n\t\t\
    return \"0\"\n\t}\n\treturn \"0 \" + string_sequence(n-1)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpszphqzgf_test.go:35: expected '0 1 2 3', got '0 0 0 0'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpszphqzgf_test.go:35:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 0 0 0 0 0 0 0 0 0 0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            result += \"\
    \ \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    var str string\n    for i := 0; i <= n; i++ {\n\
    \        str += fmt.Sprintf(\"%d \", i)\n    }\n    return str\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmp1p0axh4t_test.go:39: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp1p0axh4t_test.go:39:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // your code here\n\
    \    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxcwnqpej_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxcwnqpej_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpxcwnqpej_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // this is a stub\n\
    \    s := \"\"\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \"\
    , i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpf2a2oyj6_test.go:37: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpf2a2oyj6_test.go:37: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpf2a2oyj6_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var output string\n\
    \    for i := 0; i <= n; i++ {\n        output += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return output\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpht6ciy9e_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpht6ciy9e_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpht6ciy9e_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     return \"\"\n    }\n    var s string\n    for i := 0; i <= n; i++ {\n  \
    \      s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp9xdcrulx_test.go:39: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp9xdcrulx_test.go:39: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp9xdcrulx_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return string_sequence_recursive(n,\
    \ \"\")\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwza3rx52_test.go:14:12: undefined: string_sequence_recursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Initialize a\
    \ new empty string.\n    s := \"\"\n    // If n >= 0\n    if n >= 0 {\n      \
    \  // For loop, initialize a new counter i and have it iterate until the value\
    \ of i is\n        // greater than n, then increment i by 1.\n        for i :=\
    \ 0; i <= n; i++ {\n            // Append the string of the current value of i\
    \ to the string s.\n            s += fmt.Sprintf(\"%d \", i)\n        }\n    }\n\
    \    // Return the result.\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvsz_bhuy_test.go:44: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvsz_bhuy_test.go:44: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvsz_bhuy_test.go:44: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    fmt.Println(\"n:\
    \ \", n)\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n-1)\
    \ + \" \" + fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073262
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            result += \"\
    \ \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := fmt.Sprintf(\"\
    %d\", n)\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmplbk39elb_test.go:33: expected '0 1 2 3', got '3'\n    ---\
    \ FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmplbk39elb_test.go:33:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073262
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var slice []string\n\
    \    for i := 0; i <= n; i++ {\n        slice = append(slice, fmt.Sprintf(\"%d\"\
    , i))\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(slice, \" \"))\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9o__mqvo_test.go:18:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073262
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var res string\n\
    \    if n < 0 {\n        return res\n    }\n    for i := 0; i <= n; i++ {\n  \
    \      res += fmt.Sprintf(\"%d \", i)\n    }\n    res = res[:len(res)-1] // remove\
    \ the last space\n    return res\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073263
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO replace\
    \ this with your implementation.\n    var result string\n    if n==0 {\n     \
    \   result=\"0\"\n    }else{\n        result=\"0\"\n        for i:=1;i<=n;i++{\n\
    \            result=result+\" \"+fmt.Sprintf(\"%d\",i)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        var sub_seq string = string_sequence(n-1)\n\
    \        return fmt.Sprintf(\"%s %d\", sub_seq, n)\n    }\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var i int\n    var\
    \ s string\n    for i = 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp6a4zccjj_test.go:37: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp6a4zccjj_test.go:37: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp6a4zccjj_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // we can use a\
    \ for-loop to build the string\n    str := \"\"\n\n    for i := 0; i <= n; i++\
    \ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\n    return str\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3i196hr6_test.go:39: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3i196hr6_test.go:39: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp3i196hr6_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    numbers := []string{}\n\
    \    for i := 0; i <= n; i++ {\n        numbers = append(numbers, fmt.Sprintf(\"\
    %d\", i))\n    }\n    return join(numbers, \" \")\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmnvr6f3m_test.go:18:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    if n == 1 {\n        return \"0 1\"\n    }\n \
    \   if n == 2 {\n        return \"0 1 2\"\n    }\n    if n == 3 {\n        return\
    \ \"0 1 2 3\"\n    }\n    if n == 4 {\n        return \"0 1 2 3 4\"\n    }\n \
    \   if n == 5 {\n        return \"0 1 2 3 4 5\"\n    }\n    if n == 6 {\n    \
    \    return \"0 1 2 3 4 5 6\"\n    }\n    if n == 7 {\n        return \"0 1 2\
    \ 3 4 5 6 7\"\n    }\n    if n == 8 {\n        return \"0 1 2 3 4 5 6 7 8\"\n\
    \    }\n    if n == 9 {\n        return \"0 1 2 3 4 5 6 7 8 9\"\n    }\n    if\
    \ n == 10 {\n        return \"0 1 2 3 4 5 6 7 8 9 10\"\n    }\n    if n == 11\
    \ {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\"\n    }\n    if n == 12 {\n \
    \       return \"0 1 2 3 4 5 6 7 8 9 10 11 12\"\n    }\n    if n == 13 {\n   \
    \     return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    }\n    if n == 14 {\n  \
    \      return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    }\n    if n == 15 {\n\
    \        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    }\n    if n ==\
    \ 16 {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    }\n \
    \   if n == 17 {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\
    \n    }\n    if n == 18 {\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18\"\n    }\n    if n == 19 {\n        return \"0 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19\"\n    }\n   \nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa70tcwvp_test.go:75:6: expected ''('', found TestString_Sequence

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073263
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    if n < 0 {\n        n = -n\n    }\n    result\
    \ := \"\"\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \"\
    , i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpzac9y7j5_test.go:42: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpzac9y7j5_test.go:42:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO - Add your\
    \ code here\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpizsmse4e_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpizsmse4e_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpizsmse4e_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    out := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        out += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return out\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmptz1glw05_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmptz1glw05_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmptz1glw05_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ret string =\
    \ \"\"\n    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpu3m1xzad_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpu3m1xzad_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpu3m1xzad_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        result[i] = fmt.Sprintf(\"%d\"\
    , i)\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3uepytn_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073260
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tif n==0 {\n\t\treturn\
    \ \"0\"\n\t}\n\treturn string_sequence(n-1) + \" \" + fmt.Sprintf(\"%d\", n)\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var x string\n \
    \   if n == 0 {\n        x = fmt.Sprintf(\"%d\", n)\n    } else {\n        x =\
    \ fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n    }\n    return x\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpuovwgeld_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpuovwgeld_test.go:38:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var sequence string\n\
    \    for i := 0; i <= n; i++ {\n        if i == 0 {\n            sequence = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            sequence = fmt.Sprintf(\"%s %d\", sequence,\
    \ i)\n        }\n    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\treturn \"\"\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpqj_ydn5w_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpqj_ydn5w_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpqj_ydn5w_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tif n < 0 {\n\t\tpanic(\"\
    Cannot call string_sequence with negative number\")\n\t}\n\treturn string_sequence_recurse(n,\
    \ 0, \"\")\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0iulatw__test.go:17:9: undefined: string_sequence_recurse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%v %v\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var sequence string\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            sequence += \"\
    \ \"\n        }\n        sequence += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // initialize the\
    \ result with the string version of the first value\n    result := fmt.Sprintf(\"\
    %d\", 0)\n    // loop over the rest of the range\n    for i := 1; i <= n; i++\
    \ {\n        // append the string version of the next value, prefixed with a space\n\
    \        result += fmt.Sprintf(\" %d\", i)\n    }\n    return result\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var sequence string\n\
    \    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7xwm51c4_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7xwm51c4_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7xwm51c4_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var a string\n \
    \   for i := 0; i <= n; i++ {\n        a += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return a\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpev2brd6i_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpev2brd6i_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpev2brd6i_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     panic(\"n must be a positive integer\")\n    }\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7nf_7efu_test.go:39: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7nf_7efu_test.go:39: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7nf_7efu_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    seq := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        if len(seq) > 0 {\n            seq += \"\
    \ \"\n        }\n        seq += fmt.Sprintf(\"%d\", i)\n    }\n    return seq\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073265
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ret string\n\
    \    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8txropp3_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8txropp3_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp8txropp3_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Your code here...\n\
    \    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8lc6oxf__test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8lc6oxf__test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmp8lc6oxf__test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073265
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    s := string_sequence(n-1)\n    return fmt.Sprintf(\"\
    %s %d\", s, n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO\n    return\
    \ \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp91h1u5ky_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp91h1u5ky_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmp91h1u5ky_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        sequence[i] = fmt.Sprintf(\"%d\"\
    , i)\n    }\n    return fmt.Sprintf(\"%s\", sequence)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp0ilhm693_test.go:36: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp0ilhm693_test.go:36: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp0ilhm693_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var r string\n \
    \   for i := 0; i <= n; i++ {\n        r += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return r\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmphlwa38x2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmphlwa38x2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmphlwa38x2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := \"\"\
    \n    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpjbbfh9oh_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpjbbfh9oh_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpjbbfh9oh_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        if i > 0 {\n            s += \" \"\n  \
    \      }\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   if n > 0 {\n        s = string_sequence(n-1) + \" \" + fmt.Sprintf(\"%d\"\
    , n)\n    } else {\n        s = fmt.Sprintf(\"%d\", n)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := \"\"\
    \n    for i := 0; i <= n; i++ {\n        if i != 0 {\n            sequence +=\
    \ \" \"\n        }\n        sequence += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   if n == 0 {\n        s = \"0\"\n    } else {\n        for i := 0; i <= n;\
    \ i++ {\n            s += fmt.Sprintf(\"%d \", i)\n        }\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpoe6ht5to_test.go:40: expected '0 1 2 3', got '0 1 2 3 '\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpoe6ht5to_test.go:40:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    var builder strings.Builder\n    for i := 0; i\
    \ <= n; i++ {\n        fmt.Fprintf(&builder, \"%d \", i)\n    }\n    return builder.String()\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmetq7nys_test.go:17:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    m := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        if m != \"\" {\n            m += \" \"\n    \
    \    }\n        m += fmt.Sprintf(\"%d\", i)\n    }\n    return m\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n\n\
    \    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n\n\
    \    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvya2ax7b_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvya2ax7b_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvya2ax7b_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string =\
    \ \"\"\n    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp3ej46jye_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp3ej46jye_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp3ej46jye_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // ret_str := \"\
    \"\n    ret_str := fmt.Sprintf(\"%d\", 0)\n    for i := 1; i <= n; i++ {\n   \
    \     ret_str += fmt.Sprintf(\" %d\", i)\n    }\n    return ret_str\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return \"\"\n}\n\
    \nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpcraw0u_g_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpcraw0u_g_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpcraw0u_g_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var res string =\
    \ fmt.Sprintf(\"%d\", n)\n    return res\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmp5q26hdvs_test.go:33: expected '0 1 2 3', got '3'\n    ---\
    \ FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp5q26hdvs_test.go:33:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    if n > 0 {\n        return fmt.Sprintf(\"%v %v\"\
    , n-1, n)\n    }\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmp7hwyhjv1_test.go:38: expected '0 1 2 3', got '2 3'\n   \
    \ --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp7hwyhjv1_test.go:38:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '9 10'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var b []byte\n \
    \   for i := 0; i <= n; i++ {\n        b = append(b, fmt.Sprintf(\"%d \", i)...)\n\
    \    }\n    return string(b)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpuqi1ghee_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpuqi1ghee_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpuqi1ghee_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    seq := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        if i > 0 {\n            seq += \" \"\n \
    \       }\n        seq += fmt.Sprintf(\"%d\", i)\n    }\n    return seq\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Implementation\
    \ here\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmptkrdcwm8_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmptkrdcwm8_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmptkrdcwm8_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO\n    return\
    \ \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp91h1u5ky_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp91h1u5ky_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmp91h1u5ky_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tret := \"\"\n\tfor\
    \ i := 0; i <= n; i++ {\n\t\tret += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn ret\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp6bx5o5gn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp6bx5o5gn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp6bx5o5gn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n <= 0 {\n  \
    \      return \"0\"\n    }\n\n    var s string = \"0\"\n    for i := 1; i <= n;\
    \ i++ {\n        s += fmt.Sprintf(\" %d\", i)\n    }\n    return s\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        sequence[i] = fmt.Sprintf(\"%d\"\
    , i)\n    }\n    return fmt.Sprintf(\"%s\", sequence)\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp0ilhm693_test.go:36: expected '0', got '[0]'\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp0ilhm693_test.go:36: expected\
    \ '0 1 2 3', got '[0 1 2 3]'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp0ilhm693_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '[0 1\
    \ 2 3 4 5 6 7 8 9 10]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     return \"\"\n    }\n\n    result := \"\"\n    for i := 0; i <= n; i++ {\n\
    \        result += fmt.Sprintf(\"%d \", i)\n    }\n\n    return result\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpnlbzey6m_test.go:41: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpnlbzey6m_test.go:41: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpnlbzey6m_test.go:41: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    ret := \"\"\n  \
    \  for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7ua4e561_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7ua4e561_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7ua4e561_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar s string\n\tfor\
    \ i := 0; i <= n; i++ {\n\t\ts += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn s\n}\n\
    \nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp9_ncozj1_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp9_ncozj1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp9_ncozj1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \n    for i := 0; i <= n; i++ {\n        if i == 0 {\n            result = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            result = fmt.Sprintf(\"%s %d\", result,\
    \ i)\n        }\n    }\n\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar result string\n\
    \tfor i := 0; i <= n; i++ {\n\t\tresult += fmt.Sprintf(\"%d \", i)\n\t}\n\treturn\
    \ result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpe2ko6qkm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpe2ko6qkm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpe2ko6qkm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Your code here\n\
    \    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"\
    %d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp9z6u9b1p_test.go:37: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp9z6u9b1p_test.go:37: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp9z6u9b1p_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // add your code\
    \ here\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6rsa7h1_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var res []string\n\
    \    for i := 0; i <= n; i++ {\n        res = append(res, fmt.Sprintf(\"%d\",\
    \ i))\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(res, \" \"))\n}\n\n\
    func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09nz3tce_test.go:18:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ret string =\
    \ \"\"\n    for i := 0; i <= n; i++ {\n        if len(ret) != 0 {\n          \
    \  ret += \" \"\n        }\n        ret += fmt.Sprintf(\"%d\", i)\n    }\n   \
    \ return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var sequence string\n\
    \    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7xwm51c4_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7xwm51c4_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7xwm51c4_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n   \
    \     return \"\"\n    }\n\n    var s string\n\n    for i := 0; i <= n; i++ {\n\
    \        if i == 0 {\n            s = fmt.Sprintf(\"%d\", i)\n        } else {\n\
    \            s = fmt.Sprintf(\"%s %d\", s, i)\n        }\n    }\n\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    r := fmt.Sprintf(\"%d\", n)\n    for i := n-1;\
    \ i > 0; i-- {\n        r = fmt.Sprintf(\"%s %d\", r, i)\n    }\n    return fmt.Sprintf(\"\
    %s 0\", r)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpg94n09dv_test.go:39: expected '0 1 2 3', got '3 2 1 0'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpg94n09dv_test.go:39:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string = \"\
    \"\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpu5be7mii_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpu5be7mii_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpu5be7mii_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Create the string\
    \ of numbers.\n    numbers := \"\"\n    for i := 0; i <= n; i++ {\n        numbers\
    \ += fmt.Sprintf(\"%d \", i)\n    }\n    return numbers\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpidr7dodz_test.go:37: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpidr7dodz_test.go:37: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpidr7dodz_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var ret string\n\
    \    for i := 0; i <= n; i++ {\n        ret += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return ret\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp8txropp3_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp8txropp3_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp8txropp3_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return \"\"\n}\n\
    \nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpcraw0u_g_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpcraw0u_g_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpcraw0u_g_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        if i > 0 {\n            s += \" \"\n  \
    \      }\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return s\n}\n\nfunc\
    \ TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual:\
    \ candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected:\
    \ \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n \
    \   }\n\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpelrbwkf1_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpelrbwkf1_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpelrbwkf1_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var x []string\n\
    \    for i := 0; i <= n; i++ {\n        x = append(x, fmt.Sprintf(\"%d\", i))\n\
    \    }\n    return string([]byte(strings.Join(x, \" \")))\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbqtm6kzp_test.go:18:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := fmt.Sprintf(\"\
    %d\", n)\n    for i := n - 1; i >= 0; i-- {\n        s = fmt.Sprintf(\"%d %s\"\
    , i, s)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n\tvar result string\n\
    \tfor i := 0; i <= n; i++ {\n\t\tif i == 0 {\n\t\t\tresult = fmt.Sprintf(\"%d\"\
    , i)\n\t\t} else {\n\t\t\tresult = fmt.Sprintf(\"%s %d\", result, i)\n\t\t}\n\t\
    }\n\treturn result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var sequence string\n\
    \    for i := 0; i <= n; i++ {\n        sequence += fmt.Sprintf(\"%d \", i)\n\
    \    }\n    return sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n \
    \ candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp7xwm51c4_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp7xwm51c4_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp7xwm51c4_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Using the %d\
    \ type and fmt.Sprintf to convert an integer to a string, we can store the\n \
    \   // value of a number in a string variable.\n    var my_string string\n   \
    \ for i := 0; i <= n; i++ {\n        // The fmt.Sprintf prints its arguments to\
    \ a string, as does Printf.\n        my_string += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return my_string\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp9dwm75o1_test.go:39: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp9dwm75o1_test.go:39: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp9dwm75o1_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        if i == 0 {\n            result = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            result = fmt.Sprintf(\"%s %d\", result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        if i == 0 {\n            s = fmt.Sprintf(\"\
    %d\", i)\n        } else {\n            s = fmt.Sprintf(\"%s %d\", s, i)\n   \
    \     }\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073258
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    sequence := \"\"\
    \n    for i := 0; i <= n; i++ {\n        if i != 0 {\n            sequence +=\
    \ \" \"\n        }\n        sequence += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ sequence\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := fmt.Sprintf(\"\
    %d\", n)\n    for i := n - 1; i >= 0; i-- {\n        result = fmt.Sprintf(\"%s\
    \ %d\", result, i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpdsiy5o91_test.go:36: expected '0 1 2 3', got '3 2 1 0'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpdsiy5o91_test.go:36:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := make([]string,\
    \ n+1)\n    for i := 0; i <= n; i++ {\n        s[i] = fmt.Sprintf(\"%d\", i)\n\
    \    }\n    return s[0]\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmpo1mc_4xv_test.go:36: expected '0 1 2 3', got '0'\n    ---\
    \ FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpo1mc_4xv_test.go:36:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return \"\"\n}\n\
    \nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpcraw0u_g_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpcraw0u_g_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpcraw0u_g_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    if n >= 0 {\n        result = fmt.Sprintf(\"%d\", n)\n    }\n    for i :=\
    \ n - 1; i >= 0; i-- {\n        result = fmt.Sprintf(\"%s %d\", result, i)\n \
    \   }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1\
    \ (0.00s)\n        tmp3elcy1vl_test.go:39: expected '0 1 2 3', got '3 2 1 0'\n\
    \    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp3elcy1vl_test.go:39:\
    \ expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        if i != 0 {\n            result += \"\
    \ \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073261
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // Do not use strconv.Itoa(index)\
    \ for converting int to string.\n    // That will cause a massive performance\
    \ issue.\n    var buffer []byte\n    for index := 0; index <= n; index++ {\n \
    \       buffer = append(buffer, fmt.Sprintf(\"%d \", index)...)\n    }\n    return\
    \ string(buffer)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpg_jchnw3_test.go:38: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpg_jchnw3_test.go:38: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpg_jchnw3_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%v %v\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
