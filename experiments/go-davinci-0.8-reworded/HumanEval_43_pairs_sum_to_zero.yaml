name: HumanEval_43_pairs_sum_to_zero
language: go_test.go
prompt: "package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true\
  \ if there are two distinct elements in the list that\n// sum to zero, and false\
  \ otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1,\
  \ 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n\
  // >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n\
  // false\nfunc pairs_sum_to_zero(l []int) bool {\n"
tests: "func TestPairs_Sum_To_Zero(t *testing.T) {\n  candidate := pairs_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual: candidate([]int{2,\
  \ 4, -5, 3, 5, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
  \ false },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 30}), expected: true\
  \ },\n     { actual: candidate([]int{-3, 9, -1, 3, 2, 31}), expected: true },\n\
  \     { actual: candidate([]int{-3, 9, -1, 4, 2, 30}), expected: false },\n    \
  \ { actual: candidate([]int{-3, 9, -1, 4, 2, 31}), expected: false },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    seen := make(map[int]bool)\n    for _, num := range l {\n     \
    \   _, ok := seen[-num]\n        if ok {\n            return true\n        }\n\
    \        seen[num] = true\n    }\n    return false\n}\n", "    myset := make(map[int]bool)\n\
    \    for _, val := range l {\n        _, found := myset[val]\n        if found\
    \ {\n            return true\n        }\n        myset[-val] = true\n    }\n \
    \   return false\n}\n", "    if len(l) < 2 {\n        return false\n    }\n  \
    \  // use map to store numbers\n    m := make(map[int]", "    // TODO: Implement\n\
    \    return false\n}\n", "    return false\n}\n", "\tfmt.Println(l)\n\treturn\
    \ false\n}\n", "    if len(l) == 0 {\n        return false\n    }\n\n    for i,\
    \ _ := range l {\n        for j, _ := range l {\n            if i != j && l[i]\
    \ + l[j] == 0 {\n                return true\n            }\n        }\n    }\n\
    \n    return false\n}\n", "\tvar s []int\n\tif len(l) == 0 {\n\t\treturn false\n\
    \t}\n\tfor i := 0; i < len(l); i++ {\n\t\tfor j := i+1; j < len(l); j++ {\n\t\t\
    \ts = append(s, l[i] + l[j])\n\t\t}\n\t}\n\tfor i := 0; i < len(s); i++ {\n\t\t\
    if s[i] == 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", "    // Look\
    \ at each element of the list\n    for _, i := range l {\n        // Look at every\
    \ other element of the list\n        for _, j := range l {\n            // If\
    \ we find two elements that sum to zero,\n            // return true\n       \
    \     if i + j == 0 {\n                return true\n            }\n        }\n\
    \    }\n    // If we haven't found any two elements that sum to zero,\n    //\
    \ return false\n    return false\n}\n", "    // TODO: implement\n    return false\n\
    }\n", "    if len(l) < 2 {\n        return false\n    }\n    // iterate over each\
    \ value in the list\n    for i, e := range l {\n        // starting with the next\
    \ value, iterate to the end of the list\n        for j := i + 1; j < len(l); j++\
    \ {\n            // if the sum of the elements is zero, return true\n        \
    \    if l[j] + e == 0 {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    m := make(map[int]bool)\n    for _, n :=\
    \ range l {\n        if m[-n] {\n            return true\n        }\n        m[n]\
    \ = true\n    }\n    return false\n}\n", "    // TODO: implement this\n    return\
    \ false\n}\n", "    // loop through list,\n    // start a second loop at the next\
    \ index\n    // add the two integers and check if they are 0\n    // if they are,\
    \ return true,\n    // if you get to the end of the list, return false\n    for\
    \ i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n     \
    \       if l[i] + l[j] == 0 {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n", "    for i, _ := range l {\n        for\
    \ j, _ := range l {\n            if i == j {\n                continue\n     \
    \       }\n\n            if l[i] + l[j] == 0 {\n                return true\n\
    \            }\n        }\n    }\n\n    return false\n}\n", "    for i := 0; i\
    \ < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i]\
    \ + l[j] == 0 {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n", "    m := make(map[int]bool)\n    for _, v := range l\
    \ {\n        if _, ok := m[-v]; ok {\n            return true\n        }\n   \
    \     m[v] = true\n    }\n    return false\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        if m[-v] {\n            return true\n    \
    \    }\n        m[v] = true\n    }\n    return false\n}\n", "    return false\n\
    }\n", '    val_set := make(map[int]']
stop_tokens:
- "\nfunc"
- struct
- "\n// "
