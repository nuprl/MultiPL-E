name: HumanEval_63_fibfib
language: go_test.go
prompt: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's\
  \ defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n\
  // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n// >>>\
  \ fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n\
  \ int) int {\n"
tests: "func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
  \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
  \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
  \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a,\
    \ b, c = b, c, a + b + c\n    }\n    return c\n}\n", "    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    first, second, third := 0, 0, 1\n    curr := 0\n\
    \    for i := 3; i <= n; i++ {\n        curr = first + second + third\n      \
    \  first = second\n        second = third\n        third = curr\n    }\n    return\
    \ curr\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    one := 0\n\
    \    two := 0\n    three := 1\n    for i := 2; i < n; i++ {\n        four := one\
    \ + two + three\n        one = two\n        two = three\n        three = four\n\
    \    }\n    return one + two + three\n}\n", "    if n < 2 {\n        return 0\n\
    \    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c\
    \ = b, c, a + b + c\n    }\n    return c\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    // there are many ways to implement a fibbonacci sequnece,\
    \ but since we are dealing with \n    // a 3 number sequence, we can use a custom\
    \ implementation.\n    f1 := 0\n    f2 := 0\n    f3 := 1\n    for i := 2; i <\
    \ n; i++ {\n        f1 = f2\n        f2 = f3\n        f3 = f1 + f2 + f3\n    }\n\
    \    return f3\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    return fibfib_rec(n, 0,\
    \ 0, 1)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 3 {\n        return n - 1\n \
    \   }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c\
    \ = b, c, c + b + a\n    }\n    return c\n}\n", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return 0\n   \
    \ }\n    if n == 2 {\n        return 1\n    }\n    var n2, n1, n0 int\n    n2\
    \ = 0\n    n1 = 0\n    n0 = 1\n    for i := 3; i <= n; i++ {\n        n2, n1,\
    \ n0 = n1, n0, n2 + n1 + n0\n    }\n    return n0\n}\n", "    if n < 0 {\n   \
    \     return 0\n    }\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    if n == 3 {\n        return 1\n    }\n    if\
    \ n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 4\n    }\n\
    \    a, b, c := 1, 1, 2\n    for i := 5; i < n; i++ {\n        c = b + a + c\n\
    \        a = b\n        b = c\n    }\n    return c\n}\n", "    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    //fmt.Println(\"\
    fibfib(\", n, \")\")\n    if n < 0 {\n        return 0\n    } else if n < 2 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      f1 := fibfib(n-1)\n        f2 := fibfib(n-2)\n        f3 := fibfib(n-3)\n\
    \        return f1 + f2 + f3\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    switch\
    \ n {\n    case 0:\n        return 0\n    case 1:\n        return 0\n    case\
    \ 2:\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase\
    \ 2:\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n  \
    \  }\n    var res [3]int\n    res[0] = 0\n    res[1] = 0\n    res[2] = 1\n   \
    \ for i := 4; i <= n; i++ {\n        res[0] = res[1]\n        res[1] = res[2]\n\
    \        res[2] = res[0] + res[1] + res[2]\n    }\n    return res[2]\n}\n", " \
    \   if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n \
    \   }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
