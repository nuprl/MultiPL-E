name: HumanEval_63_fibfib
language: go_test.go
prompt: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's\
  \ defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n\
  // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n// >>>\
  \ fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n\
  \ int) int {\n"
tests: "func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
  \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
  \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
  \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a,\
    \ b, c = b, c, a + b + c\n    }\n    return c\n}\n", "    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    first, second, third := 0, 0, 1\n    curr := 0\n\
    \    for i := 3; i <= n; i++ {\n        curr = first + second + third\n      \
    \  first = second\n        second = third\n        third = curr\n    }\n    return\
    \ curr\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    one := 0\n\
    \    two := 0\n    three := 1\n    for i := 2; i < n; i++ {\n        four := one\
    \ + two + three\n        one = two\n        two = three\n        three = four\n\
    \    }\n    return one + two + three\n}\n", "    if n < 2 {\n        return 0\n\
    \    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c\
    \ = b, c, a + b + c\n    }\n    return c\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    // there are many ways to implement a fibbonacci sequnece,\
    \ but since we are dealing with \n    // a 3 number sequence, we can use a custom\
    \ implementation.\n    f1 := 0\n    f2 := 0\n    f3 := 1\n    for i := 2; i <\
    \ n; i++ {\n        f1 = f2\n        f2 = f3\n        f3 = f1 + f2 + f3\n    }\n\
    \    return f3\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    return fibfib_rec(n, 0,\
    \ 0, 1)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 3 {\n        return n - 1\n \
    \   }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c\
    \ = b, c, c + b + a\n    }\n    return c\n}\n", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return 0\n   \
    \ }\n    if n == 2 {\n        return 1\n    }\n    var n2, n1, n0 int\n    n2\
    \ = 0\n    n1 = 0\n    n0 = 1\n    for i := 3; i <= n; i++ {\n        n2, n1,\
    \ n0 = n1, n0, n2 + n1 + n0\n    }\n    return n0\n}\n", "    if n < 0 {\n   \
    \     return 0\n    }\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    if n == 3 {\n        return 1\n    }\n    if\
    \ n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 4\n    }\n\
    \    a, b, c := 1, 1, 2\n    for i := 5; i < n; i++ {\n        c = b + a + c\n\
    \        a = b\n        b = c\n    }\n    return c\n}\n", "    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    //fmt.Println(\"\
    fibfib(\", n, \")\")\n    if n < 0 {\n        return 0\n    } else if n < 2 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      f1 := fibfib(n-1)\n        f2 := fibfib(n-2)\n        f3 := fibfib(n-3)\n\
    \        return f1 + f2 + f3\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    switch\
    \ n {\n    case 0:\n        return 0\n    case 1:\n        return 0\n    case\
    \ 2:\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\tcase\
    \ 2:\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n  \
    \  }\n    var res [3]int\n    res[0] = 0\n    res[1] = 0\n    res[2] = 1\n   \
    \ for i := 4; i <= n; i++ {\n        res[0] = res[1]\n        res[1] = res[2]\n\
    \        res[2] = res[0] + res[1] + res[2]\n    }\n    return res[2]\n}\n", " \
    \   if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n \
    \   }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 0\
    \ {\n        return 0\n    }\n    if n < 2 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i\
    \ <= n; i++ {\n        d := a + b + c\n        a, b, c = b, c, d\n    }\n    return\
    \ c\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    a := 0\n    b := 0\n    c := 1\n    var d int\n    if n == 0 {\n  \
    \      return a\n    }\n    if n == 1 {\n        return b\n    }\n    if n ==\
    \ 2 {\n        return c\n    }\n    for i := 3; i <= n; i++ {\n        d = a +\
    \ b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n",
  "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    var f0, f1, f2, curr int\n  \
    \  for i := 0; i < n; i++ {\n        curr = f0 + f1 + f2\n        f0 = f1\n  \
    \      f1 = f2\n        f2 = curr\n    }\n    return curr\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    if n < 0 {\n        return 0\n    }\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 2; i < n; i++\
    \ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "    return 0\n}\n", "    switch n {\n    case 0:\n     \
    \   return 0\n    case 1:\n        return 0\n    case 2:\n        return 1\n \
    \   default:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 3 {\n        return n - 1\n   \
    \ }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c =\
    \ b, c, a + b + c\n    }\n    return c\n}\n", "    if n < 3 {\n        return\
    \ n - 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  \
    \  if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    sum := 0\n    a, b, c := 0, 0, 1\n    for i\
    \ := 3; i <= n; i++ {\n        sum = a + b + c\n        a = b\n        b = c\n\
    \        c = sum\n    }\n    return sum\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n\
    \ == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t}\n}\n", "\tif n < 3 {\n\t\treturn n - 1\n\t}\n\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    switch n {\n    case\
    \ 0:\n        return 0\n    case 1:\n        return 0\n    case 2:\n        return\
    \ 1\n    default:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  }\n}\n", "    f0, f1, f2 := 0, 0, 1\n    for i := 0; i < n; i++ {\n       \
    \ f0, f1, f2 = f1, f2, f0 + f1 + f2\n    }\n    return f0\n}\n", "    // return\
    \ fibfibNaive(n)\n    return fibfibFast(n)\n}\n", "    return 0\n}\n", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    return 0\n}\n", " \
    \   switch {\n    case n == 0:\n        return 0\n    case n == 1:\n        return\
    \ 0\n    case n == 2:\n        return 1\n    default:\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  }\n}\n", "    if n < 3 {\n        return n - 1\n    }\n    prevPrev, prev,\
    \ cur := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        prevPrev, prev, cur =\
    \ prev, cur, prev + prevPrev + prev\n    }\n    return cur\n}\n", "    if n <\
    \ 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n   \
    \ if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n  \
    \  }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if\
    \ n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\treturn -1\n}\n",
  "\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2\
    \ {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    a, b, c := 0, 0, 1\n    switch n {\n    case 0:\n\
    \        return a\n    case 1:\n        return b\n    case 2:\n        return\
    \ c\n    }\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n   \
    \ }\n    return c\n}\n", "    var (\n        fn_1, fn_2, fn_3 int\n    )\n   \
    \ switch {\n    case n < 3:\n        return n - 1\n    case n == 3:\n        return\
    \ 2\n    }\n    fn_1, fn_2, fn_3 = 1, 2, 4\n    for i := 4; i <= n; i++ {\n  \
    \      fn_1, fn_2, fn_3 = fn_2, fn_3, fn_1 + fn_2 + fn_3\n    }\n    return fn_3\n\
    }\n", "    f1, f2, f3 := 0, 0, 1\n    for i := 0; i < n; i++ {\n        if i ==\
    \ 0 {\n            f1 = 0\n        } else if i == 1 {\n            f2 = 0\n  \
    \      } else if i == 2 {\n            f3 = 1\n        } else {\n            tmp\
    \ := f1 + f2 + f3\n            f1 = f2\n            f2 = f3\n            f3 =\
    \ tmp\n        }\n    }\n    return f3\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n  \
    \  }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c =\
    \ b, c, a + b + c\n    }\n    return c\n}\n", "    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return\
    \ 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    // dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    dp :=\
    \ make([]int, n+1)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    dp[0]\
    \ = 0\n    dp[1] = 0\n    dp[2] = 1\n    for i := 3; i <= n; i++ {\n        dp[i]\
    \ = dp[i-1] + dp[i-2] + dp[i-3]\n    }\n    return dp[n]\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n < 3 {\n        return n-1\n    }\n\n    var a, b, c int = 0, 0,\
    \ 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n   \
    \ return c\n}\n", "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n\
    \        return 1\n    }\n    f := make([]int, n+1)\n    f[1] = 0\n    f[2] =\
    \ 0\n    f[3] = 1\n    for i := 4; i <= n; i++ {\n        f[i] = f[i-1] + f[i-2]\
    \ + f[i-3]\n    }\n    return f[n]\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n      \
    \  return 2\n    }\n    if n == 5 {\n        return 4\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n <\
    \ 2 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "  \
    \  if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ if n == 3 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    f0,\
    \ f1, f2 := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        f0, f1, f2 = f1, f2,\
    \ f0 + f1 + f2\n    }\n    return f2\n}\n", "    if n < 2 {\n        return 0\n\
    \    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    switch n {\n    case 0:\n   \
    \     return 0\n    case 1:\n        return 0\n    case 2:\n        return 1\n\
    \    default:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    result :=\
    \ 0\n    for i := 3; i <= n; i++ {\n        result = a + b + c\n        a = b\n\
    \        b = c\n        c = result\n    }\n    return result\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n", "    //\
    \ Define a sequence of fibonacci numbers.\n    fibs := []int{0, 1}\n    // Recursively\
    \ compute n-th fibonacci number by summing the previous three numbers.\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  }\n}\n", "    n0, n1, n2 := 0, 0, 1\n    for i := 3; i <= n; i++ {\n      \
    \  n0, n1, n2 = n1, n2, n1 + n2 + n0\n    }\n    return n2\n}\n", "    if n <\
    \ 3 {\n        return n-1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    // FILL IN CODE HERE\n    return\
    \ 0\n}\n", "\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\treturn 0\n\t\
    case 2:\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    n1, n2, n3 := 0, 0, 1\n \
    \   for i := 2; i <= n; i++ {\n        n1, n2, n3 = n2, n3, n2 + n3 + n1\n   \
    \ }\n    return n3\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    // BEGIN\n   \
    \ if n < 3 {\n        return n - 1\n    }\n    // END\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    // base cases\n    if n == 0 {\n   \
    \     return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n < 3 {\n        return n-1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 3 {\n        return 0\n    } else if n == 3\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    return 0\n}\n", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n", "    // TODO: Implement\n    return 0\n}\n", "    fibfib := 0\n\
    \    firstfib := 0\n    secondfib := 0\n    thirdfib := 1\n    for i := 0; i <\
    \ n; i++ {\n        fibfib = firstfib + secondfib + thirdfib\n        firstfib\
    \ = secondfib\n        secondfib = thirdfib\n        thirdfib = fibfib\n    }\n\
    \    return fibfib\n}\n", "\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\t\
    return 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\
    \t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    fibs := []int{0, 0,\
    \ 1}\n    for i := 3; i <= n; i++ {\n        fibs = append(fibs, fibs[i-1]+fibs[i-2]+fibs[i-3])\n\
    \    }\n    return fibs[n]\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    fn2 := 0\n    fn1 := 0\n    fn := 1\n    for i := 3; i <= n; i++ {\n\
    \        fn2 = fn1\n        fn1 = fn\n        fn = fn1 + fn2 + fn2\n    }\n  \
    \  return fn\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    f0, f1, f2 := 0, 0,\
    \ 1\n    sum := 0\n    for i := 3; i <= n; i++ {\n        sum = f0 + f1 + f2\n\
    \        f0, f1, f2 = f1, f2, sum\n    }\n    return sum\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    a, b, c := 0, 0, 1\n    for i := 0; i < n; i++ {\n        a, b, c =\
    \ b, c, a + b + c\n    }\n    return a\n}\n", "    if n < 2 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    }\n    last2, last1, result\
    \ := 0, 1, 0\n    for i := 3; i <= n; i++ {\n        result = last2 + last1 +\
    \ result\n        last2, last1 = last1, result\n    }\n    return result\n}\n",
  "\tif n < 2 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\tfibs := []int{0,\
    \ 0, 1}\n\tfor i := 3; i <= n; i++ {\n\t\tfibs = append(fibs, fibs[i-1]+fibs[i-2]+fibs[i-3])\n\
    \t}\n\treturn fibs[n]\n}\n", "    if n < 2 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    return 0\n}\n", "    if n < 2 {\n        return 0\n    } else if n\
    \ == 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    // If n is less than 3, return the n-th element\
    \ of the Fibonacci sequence\n    if n < 3 {\n        return fibonacci(n)\n   \
    \ }\n\n    // The memoizing algorithm for Fibonacci works for FibFib too.\n  \
    \  var f []int\n    for i := 0; i <= n; i++ {\n        f = append(f, -1)\n   \
    \ }\n    return fibfibMemo(n, f)\n}\n", "    if n == 0 {\n        return 0\n \
    \   } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  }\n}\n", "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n      \
    \  return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i < n; i++ {\n   \
    \     a, b, c = b, c, a + b + c\n    }\n    return c\n}\n", "\tif n < 0 {\n\t\t\
    return 0\n\t}\n\tif n < 2 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t\
    }\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    var i int\n  \
    \  for j, k, l := 0, 0, 1; i < n; i++ {\n        j, k, l = k, l, k + l + j\n \
    \   }\n    return j\n}\n", "    if n < 3 {\n        return n - 1\n    }\n    current,\
    \ next, after := 0, 1, 1\n    for i := 3; i <= n; i++ {\n        current, next,\
    \ after = next, after, current + next + after\n    }\n    return current\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for\
    \ i := 2; i < n; i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n\
    }\n", "    if n < 3 {\n        return n - 1\n    }\n\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    fib := []int{0, 0, 1}\n    for i := 3; i <= n; i++ {\n        fib = append(fib,\
    \ fib[i-1]+fib[i-2]+fib[i-3])\n    }\n    return fib[n]\n}\n", "    var sum1,\
    \ sum2, sum3 int\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n  \
    \      sum1 = 0\n        sum2 = 0\n        sum3 = 1\n        for i := 3; i <=\
    \ n; i++ {\n            sum1, sum2, sum3 = sum2, sum3, sum1 + sum2 + sum3\n  \
    \      }\n        return sum3\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  }\n}\n", "    fib := []int{0, 0, 1}\n    if n < 3 {\n        return fib[n]\n\
    \    }\n    for i := 3; i <= n; i++ {\n        fib = append(fib, fib[i-1]+fib[i-2]+fib[i-3])\n\
    \    }\n    return fib[n]\n}\n", "    switch n {\n    case 0:\n        return\
    \ 0\n    case 1:\n        return 0\n    case 2:\n        return 1\n    default:\n\
    \        // Use memoization to cache FibFibs results\n        var f []int\n  \
    \      f = append(f, 0)\n        f = append(f, 0)\n        f = append(f, 1)\n\
    \        for i := 3; i <= n; i++ {\n            f = append(f, f[i-1]+f[i-2]+f[i-3])\n\
    \        }\n        return f[n]\n    }\n}\n", "    if n < 0 {\n        return\
    \ 0\n    }\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\tif n\
    \ < 3 {\n\t\treturn 0\n\t} else if n == 3 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    a := 0\n    b := 0\n    c :=\
    \ 1\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return\
    \ b\n    }\n    if n == 2 {\n        return c\n    }\n    var i int\n    for i\
    \ = 0; i < n-2; i++ {\n        d := a + b + c\n        a = b\n        b = c\n\
    \        c = d\n    }\n    return c\n}\n", "    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    res := make([]int, n+1)\n    res[0] = 0\n    res[1]\
    \ = 0\n    res[2] = 1\n    for i := 3; i <= n; i++ {\n        res[i] = res[i-1]\
    \ + res[i-2] + res[i-3]\n    }\n    return res[n]\n}\n", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    // Write your code here\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n <\
    \ 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n   \
    \ if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n  \
    \  }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 2\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    if n == 3 {\n        return 1\n    }\n    c := make(chan int)\n\
    \    go fibfibHelper(n-1, c)\n    go fibfibHelper(n-2, c)\n    go fibfibHelper(n-3,\
    \ c)\n    a, b, f := <-c, <-c, <-c\n    return a + b + f\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    a, b, c := 0, 0, 1\n    for i := 0; i < n; i++ {\n        a, b, c =\
    \ b, c, a + b + c\n    }\n    return a\n}\n", "    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n\
    \    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a + b + c\n    }\n   \
    \ return c\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    // TODO: implement me!\n    return 0\n}\n", "    f := make([]int, 0)\n    f\
    \ = append(f, 0)\n    f = append(f, 0)\n    f = append(f, 1)\n    for i := 3;\
    \ i <= n; i++ {\n        f = append(f, f[i-1] + f[i-2] + f[i-3])\n    }\n    return\
    \ f[n]\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\tif n\
    \ == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2\
    \ {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t}\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 1\n    }\n    prev := 0\n    curr := 1\n    for i := 2; i < n; i++ {\n\
    \        last := curr\n        curr = prev + curr + last\n        prev = last\n\
    \    }\n    return curr\n}\n", "    if n < 2 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "    var fib [3]int\n    fib[0] = 0\n    fib[1] = 0\n   \
    \ fib[2] = 1\n    if n == 0 {\n        return fib[0]\n    }\n    if n == 1 {\n\
    \        return fib[1]\n    }\n    if n == 2 {\n        return fib[2]\n    }\n\
    \    for i := 3; i <= n; i++ {\n        fib[0] = fib[1]\n        fib[1] = fib[2]\n\
    \        fib[2] = fib[0] + fib[1] + fib[2]\n    }\n    return fib[2]\n}\n", " \
    \   if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n \
    \   }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\tif n == 0\
    \ {\n\t\treturn 0\n\t} else if n == 1 {\n\t\treturn 0\n\t} else if n == 2 {\n\t\
    \treturn 1\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\t\
    }\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    // TODO: implement the function.\n\
    \    return 0\n}\n", "    p := []int{0, 0, 1}\n    for i := 3; i <= n; i++ {\n\
    \        p = append(p, p[len(p)-1] + p[len(p)-2] + p[len(p)-3])\n    }\n    return\
    \ p[n]\n}\n", "    if n < 2 {\n        return 0\n    } else if n == 2 {\n    \
    \    return 1\n    }\n    // Find the three nearest Fibonacci numbers (Fn-1, Fn-2,\
    \ Fn-3)\n    // F0, F1, F2 and F3 (used as initial values for the algorithm).\n\
    \    fib3 := 0\n    fib2 := 0\n    fib1 := 1\n    result := 0\n    for i := 3;\
    \ i <= n; i++ {\n        result = fib1 + fib2 + fib3\n        fib3 = fib2\n  \
    \      fib2 = fib1\n        fib1 = result\n    }\n    return result\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n   \
    \     return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    n1 := 0\n    n2 := 0\n\
    \    n3 := 1\n    var n4 int\n    for i := 3; i <= n; i++ {\n        n4 = n1 +\
    \ n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n    return\
    \ n4\n}\n", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n     \
    \   return 0\n    } else if n == 2 {\n        return 1\n    } else {\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    a, b, c := 0, 0, 1\n    if n == 0 {\n        return a\n    } else if\
    \ n == 1 {\n        return b\n    } else if n == 2 {\n        return c\n    }\n\
    \    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n    return\
    \ c\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", " \
    \   switch n {\n    case 0:\n        return 0\n    case 1:\n        return 0\n\
    \    case 2:\n        return 1\n    }\n    minusOne := 1\n    minusTwo := 0\n\
    \    minusThree := 0\n    var result int\n    for i := 2; i < n; i++ {\n     \
    \   result = minusOne + minusTwo + minusThree\n        minusThree = minusTwo\n\
    \        minusTwo = minusOne\n        minusOne = result\n    }\n    return result\n\
    }\n", "    return 0\n}\n", "    if n == 0 {\n        return 0\n    } else if n\
    \ == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n\
    \    var memo = make([]int, n+1)\n    memo[0] = 0\n    memo[1] = 0\n    memo[2]\
    \ = 1\n    for i := 3; i <= n; i++ {\n        memo[i] = memo[i-1] + memo[i-2]\
    \ + memo[i-3]\n    }\n    return memo[n]\n}\n", "    // TODO: Implement.\n   \
    \ return 0\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    if n < 2 {\n\
    \        return 0\n    } else if n == 2 {\n        return 1\n    }\n\n    var\
    \ sum int\n    f3 := 0\n    f2 := 0\n    f1 := 1\n    for i := 3; i <= n; i++\
    \ {\n        sum = f1 + f2 + f3\n        f3 = f2\n        f2 = f1\n        f1\
    \ = sum\n    }\n\n    return sum\n}\n", "    if n == 0 {\n        return 0\n \
    \   }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    x, y, z := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        x, y, z = y, z, x + y + z\n    }\n    return z\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 1\n\
    \    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return\
    \ 4\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if\
    \ n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n\
    \    ret := 0\n    for i := 0; i < 3; i++ {\n        ret += fibfib(n-i-1)\n  \
    \  }\n    return ret\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        d := a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return c\n}\n", "    // Base case.\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    // Recursive case.\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "  \
    \  var a, b, c, d int\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        for\
    \ i := 3; i <= n; i++ {\n            a = b\n            b = c\n            c =\
    \ d\n            d = a + b + c\n        }\n        return d\n    }\n}\n", "  \
    \  if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n", "    if n < 3 {\n        return n-1\n\
    \    }\n\n    f0, f1, f2 := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        f0,\
    \ f1, f2 = f1, f2, f1+f2+f0\n    }\n    return f2\n}\n", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    if n < 0 {\n        return -1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n   \
    \     return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    if n < 2 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
