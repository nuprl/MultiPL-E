name: HumanEval_108_count_nums
language: go_test.go
prompt: "package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function count_nums which takes a list of integers and returns\n// the\
  \ number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11,\
  \ -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int)\
  \ int {\n"
tests: "func TestCount_Nums(t *testing.T) {\n  candidate := count_nums\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{-1,\
  \ -2, 0}), expected: 0 },\n     { actual: candidate([]int{1, 1, 2, -2, 3, 4, 5}),\
  \ expected: 6 },\n     { actual: candidate([]int{1, 6, 9, -6, 0, 1, 5}), expected:\
  \ 5 },\n     { actual: candidate([]int{1, 100, 98, -7, 1, -1}), expected: 4 },\n\
  \     { actual: candidate([]int{12, 23, 34, -45, -56, 0}), expected: 5 },\n    \
  \ { actual: candidate([]int{0, 1}), expected: 1 },\n     { actual: candidate([]int{1}),\
  \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sum := 0\n    for _, val := range arr {\n        if val < 0 {\n\
    \            val = -val\n        }\n        for val > 0 {\n            sum +=\
    \ val % 10\n            val /= 10\n        }\n    }\n    return sum\n}\n", " \
    \   m := map[int]bool{}\n    total := 0\n    for _, num := range arr {\n     \
    \   if num < 0 {\n            num = num * -1\n        }\n        if num < 10 {\n\
    \            m[num] = true\n        } else {\n            sum := 0\n         \
    \   for num > 0 {\n                sum += num % 10\n                num = num\
    \ / 10\n            }\n            m[sum] = true\n        }\n    }\n    for _,\
    \ val := range m {\n        if val {\n            total += 1\n        }\n    }\n\
    \    return total\n}\n", "    counter := 0\n    for _, val := range arr {\n  \
    \      for _, v := range fmt.Sprintf(\"%d\", val) {\n            if v == '-' {\n\
    \                continue\n            }\n            num, _ := fmt.Sscanf(string(v),\
    \ \"%d\", &num)\n            counter += num\n        }\n    }\n    return counter\n\
    }\n", "    var count int\n    for _, v := range arr {\n        if v == 0 {\n \
    \           continue\n        }\n        if v < 0 {\n            v = v * -1\n\
    \        }\n        for v > 0 {\n            count += v % 10\n            v =\
    \ v / 10\n        }\n    }\n    return count\n}\n", "    var cnt int = 0\n   \
    \ for _, v := range arr {\n        if v > 0 {\n            cnt += sum_digits(v)\n\
    \        } else {\n            cnt += sum_digits(-v)\n        }\n    }\n    return\
    \ cnt\n}\n", "    count := 0\n    for _, num := range arr {\n        if sum_digits(num)\
    \ > 0 {\n            count++\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for _, num := range arr {\n        if num < 0 {\n            num =\
    \ -num\n        }\n        if count_digits(num) > 0 {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    count := 0\n    for _, i := range\
    \ arr {\n        if i > 0 {\n            count += sum_digits(i)\n        } else\
    \ {\n            count += first_signed_digit(i)\n        }\n    }\n    return\
    \ count\n}\n", "    // TODO\n    return 0\n}\n", "    count := 0\n    for _, value\
    \ := range arr {\n        sum := 0\n        for value != 0 {\n            if value\
    \ < 0 {\n                sum += value % 10\n            } else {\n           \
    \     sum += value % 10\n            }\n            value /= 10\n        }\n \
    \       if sum > 0 {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, v := range arr {\n        digits := get_digits(v)\n\
    \        if sum_digits(digits) > 0 {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n", "    if arr == nil {\n        return 0\n    }\n    count\
    \ := 0\n    for _, v := range arr {\n        if v < 0 {\n            sum := v\
    \ * -1\n            sum += sum / 10\n            sum %= 10\n            if sum\
    \ != 0 {\n                count += 1\n            }\n        } else {\n      \
    \      sum := v\n            sum += sum / 10\n            sum %= 10\n        \
    \    if sum != 0 {\n                count += 1\n            }\n        }\n   \
    \ }\n    return count\n}\n", "    count := 0\n    for _, v := range arr {\n  \
    \      if is_positive(v) {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n", "    count := 0\n    for _, x := range arr {\n        s := 0\n\
    \        if x < 0 {\n            s = -x\n        } else {\n            s = x\n\
    \        }\n        for s > 0 {\n            s, _ = divmod(s, 10)\n          \
    \  count += 1\n        }\n    }\n    return count\n}\n", "    var ret int\n  \
    \  for _, x := range arr {\n        var y int\n        if x < 0 {\n          \
    \  y = -x\n        } else {\n            y = x\n        }\n        var sum int\n\
    \        for y > 0 {\n            sum += y % 10\n            y /= 10\n       \
    \ }\n        if sum > 0 {\n            ret++\n        }\n    }\n    return ret\n\
    }\n", "    var count int = 0\n    for _, val := range arr {\n        if val ==\
    \ 0 {\n            continue\n        }\n        if val < 0 {\n            val\
    \ = -val\n        }\n        if sum_digits(val) > 0 {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    // TODO add your code here\n  \
    \  return 0\n}\n", "    cnt := 0\n    for _, num := range arr {\n        if num\
    \ < 0 {\n            num = -num\n        }\n        for num > 0 {\n          \
    \  cnt += num % 10\n            num /= 10\n        }\n    }\n    return cnt\n\
    }\n", "    result := 0\n    for _, val := range arr {\n        sval := fmt.Sprintf(\"\
    %d\", val)\n        sum := 0\n        for _, v := range sval {\n            iv,\
    \ _ := strconv.Atoi(string(v))\n            sum += iv\n        }\n        if sum\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result\n}\n", " \
    \   var cnt int = 0\n    for _, v := range arr {\n        if v < 0 {\n       \
    \     cnt += count_digits(-v)\n        } else {\n            cnt += count_digits(v)\n\
    \        }\n    }\n    return cnt\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
