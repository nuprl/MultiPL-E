name: HumanEval_7_filter_by_substring
language: go_test.go
prompt: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"\
  abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"\
  array\"}\nfunc filter_by_substring(strings []string, substring string) []string\
  \ {\n"
tests: "func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\"\
  , \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var filtered_strings []string\n    for _, str := range strings\
    \ {\n        if strings.Contains(str, substring) {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    new_list := []string{}\n    for _, str := range strings {\n       \
    \ if str != \"\" && substring != \"\" && stringInSlice(substring, str) {\n   \
    \         new_list = append(new_list, str)\n        }\n    }\n    return new_list\n\
    }\n", "    filtered_strings := []string{}\n    for _, s := range strings {\n \
    \       if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n", "    filtered := []string{}\n\
    \    for _, s := range strings {\n        if stringContains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filteredStrings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var output []string\n    for _, str := range strings\
    \ {\n        if string_contains(str, substring) {\n            output = append(output,\
    \ str)\n        }\n    }\n    return output\n}\n", "    var filtered_strings []string\n\
    \    for _, str := range strings {\n        if contains(str, substring) {\n  \
    \          filtered_strings = append(filtered_strings, str)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    res := []string{}\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            res = append(res,\
    \ s)\n        }\n    }\n    return res\n}\n", "    result := []string{}\n    for\
    \ _, s := range strings {\n        if contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var results\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(substring)\
    \ {\n            for i := 0; i < len(str)-len(substring)+1; i++ {\n          \
    \      if str[i:i+len(substring)] == substring {\n                    results\
    \ = append(results, str)\n                    break\n                }\n     \
    \       }\n        }\n    }\n    return results\n}\n", "    filtered := []string{}\n\
    \    for _, s := range strings {\n        if contains(s, substring) {\n      \
    \      filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    // TODO: replace with your code\n    return []string{}\n}\n", "   \
    \ result := []string{}\n    for _,s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, str := range strings {\n        if (contains(str, substring)) {\n \
    \           result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n", "    out := []string{}\n    for _, str := range strings\
    \ {\n        if contains(str, substring) {\n            out = append(out, str)\n\
    \        }\n    }\n    return out\n}\n", "    result := []string{}\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        result = append(result, str)\n        }\n    }\n    return result\n}\n",
  "    output := []string{}\n    for _, str := range strings {\n        if str_has_substring(str,\
    \ substring) {\n            output = append(output, str)\n        }\n    }\n \
    \   return output\n}\n", "    output := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            output = append(output,\
    \ s)\n        }\n    }\n    return output\n}\n", "    var filtered []string\n\
    \    for _, value := range strings {\n        if string_contains(value, substring)\
    \ {\n            filtered = append(filtered, value)\n        }\n    }\n    return\
    \ filtered\n}\n", "    // TODO: implement\n    return strings\n}\n", "    filtered\
    \ := []string{}\n    for _, string := range strings {\n        if stringContains(string,\
    \ substring) {\n            filtered = append(filtered, string)\n        }\n \
    \   }\n    return filtered\n}\n", "    // TODO: Add your code here\n    return\
    \ []string{}\n}\n", "    filtered := []string{}\n    for _, str := range strings\
    \ {\n        if strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, s := range strings {\n        if (string_contains(s, substring)) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    ret := []string{}\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n", "    filtered := []string{}\n    for _, s := range strings {\n  \
    \      if string_contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    filtered := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered_strings []string\n    for _, i := range strings {\n  \
    \      if strings.Contains(i, substring) {\n            filtered_strings = append(filtered_strings,\
    \ i)\n        }\n    }\n    return filtered_strings\n}\n", "    result := []string{}\n\
    \    for _, str := range strings {\n        if str == \"\" {\n            continue\n\
    \        }\n        if str[0] == substring[0] {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, v := range strings {\n        if strings.Contains(v,\
    \ substring) {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n", "    var output []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            output = append(output,\
    \ s)\n        }\n    }\n    return output\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := []string{}\n    for _, s := range strings {\n\
    \        if string(s[0]) == substring {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n", "    result := []string{}\n    for\
    \ _, s := range strings {\n        if string(s[0]) == substring {\n          \
    \  result = append(result, s)\n        }\n    }\n    return result\n}\n", "  \
    \  output := []string{}\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            output = append(output, s)\n        }\n    }\n   \
    \ return output\n}\n", "    stringsToReturn := []string{}\n    for _, v := range\
    \ strings {\n        if stringInString(v, substring) {\n            stringsToReturn\
    \ = append(stringsToReturn, v)\n        }\n    }\n    return stringsToReturn\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ contains(str, substring) {\n            result = append(result, str)\n     \
    \   }\n    }\n    return result\n}\n", "    result := []string{}\n    for _, word\
    \ := range strings {\n        if word == substring {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, str := range strings {\n        if\
    \ contains(str, substring) {\n            result = append(result, str)\n     \
    \   }\n    }\n    return result\n}\n", "    filtered := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n",
  "    var result []string\n    for _, v := range strings {\n        if string_contains(v,\
    \ substring) {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if is_substring(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    filtered := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var results []string\n    for _, value := range strings {\n       \
    \ if contains(value, substring) {\n            results = append(results, value)\n\
    \        }\n    }\n    return results\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if contains(str, substring) {\n         \
    \   result = append(result, str)\n        }\n    }\n    return result\n}\n", " \
    \   var out []string\n    for _, v := range strings {\n        if strings.Contains(v,\
    \ substring) {\n            out = append(out, v)\n        }\n    }\n    return\
    \ out\n}\n", "    var results []string\n    for _, element := range strings {\n\
    \        if contains(element, substring) {\n            results = append(results,\
    \ element)\n        }\n    }\n    return results\n}\n", "    var res []string\n\
    \    for _, s := range strings {\n        if string(s).Contains(substring) {\n\
    \            res = append(res, s)\n        }\n    }\n    return res\n}\n", " \
    \   result := []string{}\n    for _, str := range strings {\n        if (stringContains(str,\
    \ substring)) {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n", "    filtered := []string{}\n    for _, s := range strings\
    \ {\n        if contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var ret []string\n   \
    \ for _, s := range strings {\n        if stringContains(s, substring) {\n   \
    \         ret = append(ret, s)\n        }\n    }\n    return ret\n}\n", "    var\
    \ result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    // Create empty output list\n    var output []string\n\
    \n    // Loop over all strings in input list\n    for _, v := range strings {\n\
    \        // Is substring contained in string?\n        if is_contained_in_string(v,\
    \ substring) {\n            // Yes, append string to output list\n           \
    \ output = append(output, v)\n        }\n    }\n\n    // Return output list\n\
    \    return output\n}\n", "    result := []string{}\n    for _, one_string :=\
    \ range strings {\n        if (contains(one_string, substring)) {\n          \
    \  result = append(result, one_string)\n        }\n    }\n    return result\n\
    }\n", "    ret := []string{}\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n", "    filtered := []string{}\n    for _, word := range strings {\n\
    \        if string_contains(word, substring) {\n            filtered = append(filtered,\
    \ word)\n        }\n    }\n    return filtered\n}\n", "    // Fill here\n    var\
    \ result []string\n\n    for _, str := range strings {\n        if len(str) >=\
    \ len(substring) {\n            b := true\n            for i := 0; i < len(substring);\
    \ i++ {\n                if str[i] != substring[i] {\n                    b =\
    \ false\n                    break\n                }\n            }\n       \
    \     if b {\n                result = append(result, str)\n            }\n  \
    \      }\n    }\n\n    return result\n}\n", "    filtered_strings := []string{}\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered_strings = append(filtered_strings, str)\n        }\n\
    \    }\n    return filtered_strings\n}\n", "    result := []string{}\n    for\
    \ _, s := range strings {\n        if substringIn(s, substring) {\n          \
    \  result = append(result, s)\n        }\n    }\n    return result\n}\n", "  \
    \  result := []string{}\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    filtered := []string{}\n    for _, str := range strings\
    \ {\n        if strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n", "    var ret []string\n \
    \   for _, str := range strings {\n        if contains(str, substring) {\n   \
    \         ret = append(ret, str)\n        }\n    }\n    return ret\n}\n", "  \
    \  output := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            output = append(output, s)\n        }\n    }\n   \
    \ return output\n}\n", "    var new_slice []string\n    for _, elem := range strings\
    \ {\n        if string_contains(elem, substring) {\n            new_slice = append(new_slice,\
    \ elem)\n        }\n    }\n    return new_slice\n}\n", "    result := []string{}\n\
    \    for _, v := range strings {\n        if contains(v, substring) {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    filtered := []string{}\n    for _, word := range strings {\n        if word\
    \ == substring {\n            filtered = append(filtered, word)\n        }\n \
    \   }\n    return filtered\n}\n", "    filtered := []string{}\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    //\
    \ TODO: write your solution to the task here\n    return []string{}\n}\n", " \
    \   i := 0\n    for _, s := range strings {\n        if contains(s, substring)\
    \ {\n            strings[i] = s\n            i++\n        }\n    }\n    return\
    \ strings[:i]\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if strContains(str, substring) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    out := []string{}\n  \
    \  for _, s := range strings {\n        if (string_contains(s, substring)) {\n\
    \            out = append(out, s)\n        }\n    }\n    return out\n}\n", " \
    \   var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, val := range strings\
    \ {\n        if strings.Contains(val, substring) {\n            result = append(result,\
    \ val)\n        }\n    }\n    return result\n}\n", "    filtered_strings := []string{}\n\
    \    for _, v := range strings {\n        if strings.Contains(v, substring) {\n\
    \            filtered_strings = append(filtered_strings, v)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    r := []string{}\n    for _, s := range\
    \ strings {\n        if contains(s, substring) {\n            r = append(r, s)\n\
    \        }\n    }\n    return r\n}\n", "    var result []string\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  result = append(result, s)\n        }\n    }\n    return result\n}\n", "  \
    \  filtered_strings := []string{}\n    for _, str := range strings {\n       \
    \ if (is_substring(str, substring)) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n", "    result := []string{}\n\
    \    for _, str := range strings {\n        if string(str[:]) == substring {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if stringInSlice(substring, s) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   var result []string\n    for _, string := range strings {\n        if contains(string,\
    \ substring) {\n            result = append(result, string)\n        }\n    }\n\
    \    return result\n}\n", "    result := []string{}\n    for _, string := range\
    \ strings {\n        if string_contains(string, substring) {\n            result\
    \ = append(result, string)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []string\n    for _, item := range strings {\n        if (item == substring)\
    \ {\n            result = append(result, item)\n        }\n    }\n    return result\n\
    }\n", "    var output []string\n    for _, str := range strings {\n        if\
    \ string_contains(str, substring) {\n            output = append(output, str)\n\
    \        }\n    }\n    return output\n}\n", "    var res []string\n    for _,\
    \ str := range strings {\n        if strings.Contains(str, substring) {\n    \
    \        res = append(res, str)\n        }\n    }\n    return res\n}\n", "   \
    \ result := []string{}\n    for _, word := range strings {\n        if wordContainsSubstring(word,\
    \ substring) {\n            result = append(result, word)\n        }\n    }\n\
    \    return result\n}\n", "    // Implementation goes here\n    return []string{}\n\
    }\n", "    var ret []string\n    for _, val := range strings {\n        if strings.Contains(val,\
    \ substring) {\n            ret = append(ret, val)\n        }\n    }\n    return\
    \ ret\n}\n", "    ret := []string{}\n    for _, s := range strings {\n       \
    \ if strings.Contains(s, substring) {\n            ret = append(ret, s)\n    \
    \    }\n    }\n    return ret\n}\n", "    filtered_strings := []string{}\n   \
    \ for _, s := range strings {\n        if string_contains(s, substring) {\n  \
    \          filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    result := []string{}\n    for _, s :=\
    \ range strings {\n        if string_contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    new_strings\
    \ := []string{}\n    for _, s := range strings {\n        if string_contains(s,\
    \ substring) {\n            new_strings = append(new_strings, s)\n        }\n\
    \    }\n    return new_strings\n}\n", "    ret := []string{}\n    for _, v :=\
    \ range strings {\n        if strings.Contains(v, substring) {\n            ret\
    \ = append(ret, v)\n        }\n    }\n    return ret\n}\n", "    result := []string{}\n\
    \    for _, s := range strings {\n        if (s[0] == substring[0]) {\n      \
    \      result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    if len(strings) == 0 {\n        return strings\n    }\n\n    result := []string{}\n\
    \    for _, s := range strings {\n        if stringContains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (is_substring(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, v := range strings {\n        if is_substring(v, substring) {\n  \
    \          result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, string := range strings\
    \ {\n        if strings.Contains(string, substring) {\n            result = append(result,\
    \ string)\n        }\n    }\n    return result\n}\n", "    filtered_strings :=\
    \ []string{}\n    for _, str := range strings {\n        if contains(str, substring)\
    \ {\n            filtered_strings = append(filtered_strings, str)\n        }\n\
    \    }\n    return filtered_strings\n}\n", "    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    length\
    \ := len(strings)\n    if length == 0 {\n        return []string{}\n    }\n  \
    \  result := make([]string, 0, length)\n    for _, str := range strings {\n  \
    \      if strings.Contains(str, substring) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if contains(s, substring) {\n      \
    \      result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    result := []string{}\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n", "    output := []string{}\n    for _, v := range strings\
    \ {\n        if strings.Contains(v, substring) {\n            output = append(output,\
    \ v)\n        }\n    }\n    return output\n}\n", "    var strings_filtered []string\n\
    \n    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            strings_filtered = append(strings_filtered, s)\n        }\n    }\n\
    \n    return strings_filtered\n}\n", "    var filteredStrings []string\n    if\
    \ len(strings) == 0 {\n        return filteredStrings\n    }\n    for _, s :=\
    \ range strings {\n        if stringContains(s, substring) {\n            filteredStrings\
    \ = append(filteredStrings, s)\n        }\n    }\n    return filteredStrings\n\
    }\n", "    output := []string{}\n    for _, s := range strings {\n        if len(s)\
    \ > 0 && string(s[0]) == substring {\n            output = append(output, s)\n\
    \        }\n    }\n    return output\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if strings.Contains(str, substring) {\n \
    \           result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    ret := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n", "    // YOUR CODE HERE\n    return nil\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    filtered := []string{}\n    for _, string := range strings {\n    \
    \    if contains(string, substring) {\n            filtered = append(filtered,\
    \ string)\n        }\n    }\n    return filtered\n}\n", "    var output []string\n\
    \    for _, v := range strings {\n        if stringContains(v, substring) {\n\
    \            output = append(output, v)\n        }\n    }\n    return output\n\
    }\n", "    res := []string{}\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            res = append(res, s)\n        }\n    }\n    return\
    \ res\n}\n", "    result := []string{}\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, str := range strings {\n        if contains(str, substring) {\n   \
    \         result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if string_contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if len(s) < len(substring) {\n            continue\n        }\n \
    \       if s[:len(substring)] == substring {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if string_contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    if len(strings) == 0 {\n        return strings\n    }\n    var result\
    \ []string\n    for _, item := range strings {\n        if strings.Contains(item,\
    \ substring) {\n            result = append(result, item)\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n \
    \   for _, s := range strings {\n        if string_contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    filtered_strings := []string{}\n    for _, str := range strings {\n\
    \        if strings.Contains(str, substring) {\n            filtered_strings =\
    \ append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    filtered := []string{}\n    for _, s := range strings {\n        if\
    \ contains(s, substring) {\n            filtered = append(filtered, s)\n     \
    \   }\n    }\n    return filtered\n}\n", "    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if string_contains(s, substring) {\n      \
    \      filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    new_strings := []string{}\n    for _, string := range strings {\n \
    \       if stringContains(string, substring) {\n            new_strings = append(new_strings,\
    \ string)\n        }\n    }\n    return new_strings\n}\n", "    filtered := []string{}\n\
    \    for _, value := range strings {\n        if contains_substring(value, substring)\
    \ {\n            filtered = append(filtered, value)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []string\n    for _, s := range strings {\n\
    \        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var ret []string\n    for\
    \ _, s := range strings {\n        if string_contains(s, substring) {\n      \
    \      ret = append(ret, s)\n        }\n    }\n    return ret\n}\n", "    filtered\
    \ := []string{}\n    for _, str := range strings {\n        if contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := []string{}\n    for _, str := range strings {\n\
    \        if strHasSubstring(str, substring) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var found_strings []string\n\
    \    for _, s := range strings {\n        if idx := strings.Index(s, substring);\
    \ idx != -1 {\n            found_strings = append(found_strings, s)\n        }\n\
    \    }\n    return found_strings\n}\n", "    var result []string\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  result = append(result, s)\n        }\n    }\n    return result\n}\n", "  \
    \  l := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            l = append(l, s)\n        }\n    }\n    return l\n\
    }\n", "    var result []string\n    for _, value := range strings {\n        if\
    \ strings.Contains(value, substring) {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered_strings []string\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n", "    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    var result []string\n    for _, s\
    \ := range strings {\n        if strings.Contains(s, substring) {\n          \
    \  result = append(result, s)\n        }\n    }\n    return result\n}\n", "  \
    \  filtered := []string{}\n    for _, val := range strings {\n        if contains(val,\
    \ substring) {\n            filtered = append(filtered, val)\n        }\n    }\n\
    \    return filtered\n}\n", "    output := []string{}\n    for _, value := range\
    \ strings {\n        if strings.Contains(value, substring) {\n            output\
    \ = append(output, value)\n        }\n    }\n    return output\n}\n", "    var\
    \ result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    if len(strings) == 0 {\n\
    \        return strings\n    }\n    if len(substring) == 0 {\n        return strings\n\
    \    }\n    filtered_strings := make([]string, 0)\n    for _, str := range strings\
    \ {\n        if len(str) == 0 {\n            continue\n        }\n        for\
    \ _, character := range str {\n            if rune(substring[0]) == character\
    \ {\n                filtered_strings = append(filtered_strings, str)\n      \
    \          break\n            }\n        }\n    }\n    return filtered_strings\n\
    }\n", "    filtered := []string{}\n    for _, v := range strings {\n        if\
    \ contains(v, substring) {\n            filtered = append(filtered, v)\n     \
    \   }\n    }\n    return filtered\n}\n", "    filtered := []string{}\n    for\
    \ _, s := range strings {\n        if(contains(s, substring)) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, s := range strings {\n        if contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    result := []string{}\n    for _, s := range strings {\n\
    \        if contains(s, substring) {\n            result = append(result, s)\n\
    \        }\n    }\n    return result\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if string_contains(s, substring) {\n      \
    \      filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    // TODO: implement this\n    return nil\n}\n", "    filtered := []string{}\n\
    \    for _, i := range strings {\n        if string_contains(i, substring) {\n\
    \            filtered = append(filtered, i)\n        }\n    }\n    return filtered\n\
    }\n", "    // ^ Initial value of result should be list of strings which is the\
    \ same\n    //   type as the type of the strings argument\n    result := []string{}\n\
    \    for _, s := range strings {\n        if s[0] == substring[0] {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   filtered := []string{}\n    for _,str := range strings {\n        if contains(str,\
    \ substring) {\n            filtered = append(filtered, str)\n        }\n    }\n\
    \    return filtered\n}\n", "    if len(strings) == 0 {\n        return strings\n\
    \    }\n    out := []string{}\n    for _, s := range strings {\n        if string_in_string(s,\
    \ substring) {\n            out = append(out, s)\n        }\n    }\n    return\
    \ out\n}\n", "    result := []string{}\n    for _, s := range strings {\n    \
    \    if contains(s, substring) {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if contains(s, substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var ret []string\n    for\
    \ _, str := range strings {\n        if contains(str, substring) {\n         \
    \   ret = append(ret, str)\n        }\n    }\n    return ret\n}\n", "    var new_list\
    \ []string\n    for _, s := range strings {\n        if string_contains(s, substring)\
    \ {\n            new_list = append(new_list, s)\n        }\n    }\n    return\
    \ new_list\n}\n", "    //fmt.Println(\"Filter on substring: \", substring)\n \
    \   found_matches := []string{}\n    for _, item := range strings {\n        if\
    \ (stringContainsSubstring(item, substring)) {\n            found_matches = append(found_matches,\
    \ item)\n        }\n    }\n    return found_matches\n}\n", "    filtered := []string{}\n\
    \    for _, str := range strings {\n        if string_contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered_strings []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if substr(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    strings_with_substring := []string{}\n    for _, str\
    \ := range strings {\n        if strings.Contains(str, substring) {\n        \
    \    strings_with_substring = append(strings_with_substring, str)\n        }\n\
    \    }\n    return strings_with_substring\n}\n", "    var result []string\n  \
    \  for _, s := range strings {\n        if len(s) < len(substring) {\n       \
    \     continue\n        }\n        found := true\n        for i := 0; i < len(substring);\
    \ i++ {\n            if s[i] != substring[i] {\n                found = false\n\
    \                break\n            }\n        }\n        if found {\n       \
    \     result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var filtered []string\n    for _, str := range\
    \ strings {\n        if strContains(str, substring) {\n            filtered =\
    \ append(filtered, str)\n        }\n    }\n    return filtered\n}\n", "    res\
    \ := []string{}\n    for _, s := range strings {\n        if string(s).Contains(substring)\
    \ {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
  "    var new_strings []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            new_strings = append(new_strings, s)\n        }\n\
    \    }\n    return new_strings\n}\n", "    output := []string{}\n    for _, this_string\
    \ := range strings {\n        if strings.Contains(this_string, substring) {\n\
    \            output = append(output, this_string)\n        }\n    }\n    return\
    \ output\n}\n", "    result := []string{}\n    for _, str := range strings {\n\
    \        if strings.Contains(str, substring) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    output := []string{}\n\
    \    for _, s := range strings {\n        if is_substring(s, substring) {\n  \
    \          output = append(output, s)\n        }\n    }\n    return output\n}\n",
  "    newStrings := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            newStrings = append(newStrings, s)\n        }\n  \
    \  }\n    return newStrings\n}\n", "    filtered := []string{}\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ new_strings []string\n    for _, val := range strings {\n        if (val ==\
    \ substring) {\n            new_strings = append(new_strings, val)\n        }\n\
    \    }\n    return new_strings\n}\n", "    var output []string\n    for _, str\
    \ := range strings {\n        if string_contains(str, substring) {\n         \
    \   output = append(output, str)\n        }\n    }\n    return output\n}\n", " \
    \   filtered := []string{}\n    for _, str := range strings {\n        if (stringInclude(str,\
    \ substring)) {\n            filtered = append(filtered, str)\n        }\n   \
    \ }\n    return filtered\n}\n", "    var result []string\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            result\
    \ = append(result, str)\n        }\n    }\n    return result\n}\n", "    var res\
    \ []string\n    for _, s := range strings {\n        if stringInSlice(substring,\
    \ s) {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n",
  "    var subset []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            subset = append(subset, s)\n        }\n    }\n   \
    \ return subset\n}\n", "    var filtered_strings []string\n\n    for _, s := range\
    \ strings {\n        if contains(s, substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n\n    return filtered_strings\n\
    }\n", "    if len(strings) == 0 {\n        return strings\n    }\n    ans := make([]string,\
    \ 0)\n    for _, s := range strings {\n        if len(s) > 0 && s[0] == substring[0]\
    \ {\n            ans = append(ans, s)\n        }\n    }\n    return ans\n}\n",
  "    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    result := []string{}\n    for _, str := range\
    \ strings {\n        if contains(str, substring) {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    result := []string{}\n\
    \    for _, s := range strings {\n        if len(s) == 0 {\n            continue\n\
    \        }\n        if len(substring) == 0 {\n            result = append(result,\
    \ s)\n            continue\n        }\n        if string(s[0]) == substring {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    filtered := []string{}\n    for _, input_string := range strings {\n\
    \        if strings.Contains(input_string, substring) {\n            filtered\
    \ = append(filtered, input_string)\n        }\n    }\n    return filtered\n}\n",
  "    newList := []string{}\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            newList = append(newList, str)\n        }\n    }\n\
    \    return newList\n}\n", "    result := []string{}\n    for _, i := range strings\
    \ {\n        if strings.Contains(i, substring) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    filtered := []string{}\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    strings_included := []string{}\n    for _, element := range strings\
    \ {\n        if contains(element, substring) {\n            strings_included =\
    \ append(strings_included, element)\n        }\n    }\n    return strings_included\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
