name: HumanEval_69_search
language: go_test.go
prompt: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a non-empty list of positive integers. Return the greatest integer that\
  \ is greater than \n// zero, and has a frequency greater than or equal to the value\
  \ of the integer itself. \n// The frequency of an integer is the number of times\
  \ it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n\
  // >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3,\
  \ 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst\
  \ []int) int {\n"
tests: "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
  \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
  \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
  \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n\
  \     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}),\
  \ expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3,\
  \ 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected:\
  \ -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
  \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7,\
  \ 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n \
  \    { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
  \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
  \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
  \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5,\
  \ 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual:\
  \ candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected:\
  \ 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10,\
  \ 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}),\
  \ expected: -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7,\
  \ 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10,\
  \ 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4,\
  \ 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
  \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var m = make(map[int]int)\n    for _, i := range lst {\n      \
    \  m[i]++\n    }\n    var result = -1\n    for key, count := range m {\n     \
    \   if key <= count && key > result {\n            result = key\n        }\n \
    \   }\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v] += 1\n    }\n    for i := len(lst) - 1; i > 0; i-- {\n \
    \       if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    m := make(map[int]int)\n    for _, num := range lst {\n        m[num]++\n\
    \    }\n    for _, v := range m {\n        if v >= v {\n            return v\n\
    \        }\n    }\n    return -1\n}\n", "    counts := make(map[int]int)\n   \
    \ for _, e := range lst {\n        counts[e] += 1\n    }\n    for i := len(lst)\
    \ - 1; i > 0; i-- {\n        if v, ok := counts[i]; ok && v >= i {\n         \
    \   return i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, n := range lst {\n        m[n]++\n    }\n    var max int\n    for\
    \ k, v := range m {\n        if v >= k && k > max {\n            max = k\n   \
    \     }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n\
    }\n", "    return 0\n}\n", "    // put all the integers into a hashmap\n    //\
    \ iterate through the hashmap and find the value greater than zero and has a frequency\
    \ \n    // greater than or equal to the value of the integer itself\n\n    frequency\
    \ := make(map[int]int)\n    for _, v := range lst {\n        _, ok := frequency[v]\n\
    \        if ok {\n            frequency[v]++\n        } else {\n            frequency[v]\
    \ = 1\n        }\n    }\n\n    for k, v := range frequency {\n        if k > 0\
    \ && v >= k {\n            return k\n        }\n    }\n\n    return -1\n}\n",
  "    mapVals := make(map[int]int)\n    for _, v := range lst {\n        mapVals[v]++\n\
    \    }\n    num := -1\n    for k, v := range mapVals {\n        if k > 0 && k\
    \ <= v && k > num {\n            num = k\n        }\n    }\n    return num\n}\n",
  "    result := -1\n    counts := make(map[int]int)\n    for _, num := range lst\
    \ {\n        counts[num]++\n    }\n    for _, num := range lst {\n        if num\
    \ > result && counts[num] >= num {\n            result = num\n        }\n    }\n\
    \    return result\n}\n", "    // TODO\n    return -1\n}\n", "    // iterate through\
    \ the list, find the greatest integer with a frequency greater than or equal to\
    \ the value itself\n    var greatest_freq_greater_int int = -1\n    var current_freq\
    \ int = 1\n    var current_int int = -1\n    for i := 0; i < len(lst); i++ {\n\
    \        // if i is last element\n        if i == len(lst) - 1 {\n           \
    \ if current_int == lst[i] {\n                if current_freq >= current_int &&\
    \ current_int > greatest_freq_greater_int {\n                    greatest_freq_greater_int\
    \ = current_int\n                }\n            }\n        } else {\n        \
    \    if current_int == lst[i] {\n                current_freq += 1\n         \
    \   } else {\n                if current_freq >= current_int && current_int >\
    \ greatest_freq_greater_int {\n                    greatest_freq_greater_int =\
    \ current_int\n                }\n                current_int = lst[i]\n     \
    \           current_freq = 1\n            }\n        }\n    }\n    return greatest_freq_greater_int\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v] +=\
    \ 1\n    }\n    for k, v := range m {\n        if k >= v {\n            return\
    \ -1\n        }\n    }\n    for k, v := range m {\n        if v >= k {\n     \
    \       return k\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0\
    \ {\n        return -1\n    }\n    numbers := make(map[int]int)\n    for _, n\
    \ := range lst {\n        numbers[n]++\n    }\n    var result int\n    for k,\
    \ v := range numbers {\n        if v >= k && k > result {\n            result\
    \ = k\n        }\n    }\n    if result == 0 {\n        return -1\n    }\n    return\
    \ result\n}\n", "    numbers, nums := make(map[int]int), make(map[int]int)\n \
    \   for _, v := range lst {\n        numbers[v] += 1\n    }\n    for k, v := range\
    \ numbers {\n        nums[v] = k\n    }\n    for k, v := range nums {\n      \
    \  if k >= v {\n            return v\n        }\n    }\n    return -1\n}\n", " \
    \   if len(lst) == 0 {\n        return -1\n    }\n    maxValue := 0\n    valueFreq\
    \ := make(map[int]int)\n    for _, v := range lst {\n        valueFreq[v]++\n\
    \        if v > maxValue {\n            maxValue = v\n        }\n    }\n    for\
    \ i := maxValue; i > 0; i-- {\n        if valueFreq[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    // return search1(lst)\n    return\
    \ search2(lst)\n}\n", "    // Your code here.\n    return -1\n}\n", "    count\
    \ := make(map[int]int)\n    for _, val := range lst {\n        count[val]++\n\
    \    }\n    for _, val := range lst {\n        if count[val] >= val {\n      \
    \      return val\n        }\n    }\n    return -1\n}\n", "    // Fill this in.\n\
    \    m := make(map[int]int)\n    for _, val := range lst {\n        m[val] +=\
    \ 1\n    }\n    for key, val := range m {\n        if key <= val {\n         \
    \   return key\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    var max int\n    for\
    \ k, v := range m {\n        if v >= k && k > max {\n            max = k\n   \
    \     }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n\
    }\n", "    const valueNotFound = -1\n    m := make(map[int]int)\n    for _, l\
    \ := range lst {\n        m[l]++\n    }\n    for k, v := range m {\n        if\
    \ v >= k {\n            return k\n        }\n    }\n    return valueNotFound\n\
    }\n", "    lst_dict := make(map[int]int)\n    for _, num := range lst {\n    \
    \    lst_dict[num] += 1\n    }\n    for _, num := range lst {\n        if lst_dict[num]\
    \ >= num {\n            return num\n        }\n    }\n    return -1\n}\n", " \
    \   if len(lst) == 0 {\n        return -1\n    }\n    elemFrequency := make(map[int]int)\n\
    \    for _, i := range lst {\n        elemFrequency[i]++\n    }\n    result :=\
    \ -1\n    for i, freq := range elemFrequency {\n        if freq >= i && i > result\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n", "    m\
    \ := make(map[int]int)\n    max := -1\n    for _, v := range lst {\n        if\
    \ _, ok := m[v]; ok {\n            m[v] += 1\n        } else {\n            m[v]\
    \ = 1\n        }\n        if v > max && m[v] >= v {\n            max = v\n   \
    \     }\n    }\n    return max\n}\n", "    return search1(lst)\n}\n", "    numbers\
    \ := make(map[int]int)\n    for _, value := range lst {\n        numbers[value]\
    \ += 1\n    }\n    for _, value := range lst {\n        if value == numbers[value]\
    \ {\n            return value\n        }\n    }\n    return -1\n}\n", "    //\
    \ Implement me!\n    // Approach 1: using a hash table to track the frequencies\
    \ of each of the integers in the list,\n    // and the hash table will be set\
    \ to zero after the iteration\n    if len(lst) == 0 {\n        return -1\n   \
    \ }\n    max := 0\n    hash := make(map[int]int)\n    for _, n := range lst {\n\
    \        hash[n] += 1\n        if n > max {\n            max = n\n        }\n\
    \    }\n    for i := 1; i <= max; i++ {\n        if hash[i] >= i {\n         \
    \   return i\n        }\n    }\n    return -1\n}\n", "    // key: num\n    //\
    \ value: frequency\n    m := make(map[int]int)\n    for _, num := range lst {\n\
    \        if _, ok := m[num]; ok {\n            m[num] += 1\n        } else {\n\
    \            m[num] = 1\n        }\n    }\n    for _, num := range lst {\n   \
    \     if num > 0 && m[num] >= num {\n            return num\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    var\
    \ vals = make(map[int]int)\n    for _, v := range lst {\n        vals[v] += 1\n\
    \    }\n    var res = -1\n    for i, c := range vals {\n        if c >= i && i\
    \ > res {\n            res = i\n        }\n    }\n    return res\n}\n", "    myMap\
    \ := make(map[int]int)\n    for _, num := range lst {\n        if myMap[num] >\
    \ 0 {\n            myMap[num] += 1\n        } else {\n            myMap[num] =\
    \ 1\n        }\n    }\n    max := -1\n    for key, val := range myMap {\n    \
    \    if key == val && val > max {\n            max = key\n        }\n    }\n \
    \   return max\n}\n", "    hm := make(map[int]int)\n    result := -1\n    count\
    \ := 0\n    for _, x := range lst {\n        count = hm[x]\n        hm[x] = count\
    \ + 1\n        if hm[x] >= x && x > result {\n            result = x\n       \
    \ }\n    }\n    return result\n}\n", "    return 0\n}\n", "    freqMap := make(map[int]int)\n\
    \    for _, v := range lst {\n        freqMap[v]++\n    }\n    var ret int\n \
    \   for k, v := range freqMap {\n        if k > 0 && v >= k {\n            if\
    \ ret == 0 || k > ret {\n                ret = k\n            }\n        }\n \
    \   }\n    if ret == 0 {\n        return -1\n    }\n    return ret\n}\n", "  \
    \  res := 0\n    for _, val := range lst {\n        if val > res {\n         \
    \   res = val\n        }\n    }\n    dict := make(map[int]int)\n    for _, val\
    \ := range lst {\n        dict[val]++\n    }\n    for i := res; i > 0; i-- {\n\
    \        if dict[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    // ToDo: implement this function\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    freq := make(map[int]int)\n \
    \   for _, v := range lst {\n        freq[v]++\n    }\n    max := 0\n    for k,\
    \ v := range freq {\n        if k == v && k > max {\n            max = k\n   \
    \     }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n\
    }\n", "    max := 0\n    freq := make(map[int]int)\n    for _, item := range lst\
    \ {\n        freq[item] += 1\n        if freq[item] >= item && item > max {\n\
    \            max = item\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    return max\n}\n", "    counts := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        counts[v] += 1\n    }\n    for _, v := range lst {\n  \
    \      if counts[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    max:= 0\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n        if v > max {\n            max = v\n        }\n  \
    \  }\n    for i := max; i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    frequencyMap := make(map[int]int)\n    for _, num := range lst\
    \ {\n        frequencyMap[num] += 1\n    }\n    if frequencyMap[1] > 0 {\n   \
    \     return 1\n    }\n    for _, num := range lst {\n        if frequencyMap[num]\
    \ >= num && num > 1 {\n            return num\n        }\n    }\n    return -1\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    // map of int to\
    \ count of each integer\n    m := make(map[int]int)\n    max := 0\n    for _,\
    \ i := range lst {\n        m[i]++\n        if i > max {\n            max = i\n\
    \        }\n    }\n    for i := max; i > 0; i-- {\n        if m[i] >= i {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n", "    res := -1\n \
    \   m := make(map[int]int)\n    for _,v := range lst {\n        m[v]++\n    }\n\
    \    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            res\
    \ = i\n            break\n        }\n    }\n    return res\n}\n", "    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    max, freq :=\
    \ lst[0], 1\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > max {\n\
    \            max = lst[i]\n            freq = 1\n        } else if lst[i] == max\
    \ {\n            freq++\n        }\n    }\n    if freq >= max {\n        return\
    \ max\n    }\n    return -1\n}\n", "    mostFrequent, maxFrequency := 0, 0\n \
    \   frequencies := make(map[int]int)\n    for _, v := range lst {\n        frequencies[v]++\n\
    \        if frequencies[v] > maxFrequency {\n            maxFrequency = frequencies[v]\n\
    \            mostFrequent = v\n        }\n    }\n    if maxFrequency >= mostFrequent\
    \ {\n        return mostFrequent\n    }\n    return -1\n}\n", "    // find the\
    \ max number in the array\n    max := 0\n    for _, elem := range lst {\n    \
    \    if elem > max {\n            max = elem\n        }\n    }\n    // count up\
    \ the frequencies\n    frequency := make([]int, max+1)\n    for _, elem := range\
    \ lst {\n        frequency[elem]++\n    }\n    // iterate through frequency.\n\
    \    // if there is an element that frequency is greater than or equal to its\
    \ value,\n    // that is the answer.\n    for i, elem := range frequency {\n \
    \       if i > 0 && elem >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    // O(n)\n    result := -1\n    if lst == nil || len(lst) == 0\
    \ {\n        return result\n    }\n    var frequency map[int]int = make(map[int]int)\n\
    \    for _, x := range lst {\n        frequency[x]++\n    }\n    for k, v := range\
    \ frequency {\n        if k > 0 && k <= v {\n            result = k\n        }\n\
    \    }\n    return result\n}\n\n//==============================================================",
  "    if len(lst) == 0 {\n        return -1\n    }\n    hash := make(map[int]int)\n\
    \    for _, n := range lst {\n        if _, exist := hash[n]; exist {\n      \
    \      hash[n]++\n        } else {\n            hash[n] = 1\n        }\n    }\n\
    \    result := -1\n    for n, nTimes := range hash {\n        if n == 1 && nTimes\
    \ == 1 {\n            continue\n        }\n        if nTimes >= n {\n        \
    \    result = n\n        }\n    }\n    return result\n}\n", '    type result ',
  "    n := len(lst)\n    m := make(map[int]int)\n    for i := 0; i < n; i++ {\n \
    \       m[lst[i]]++\n    }\n    highest_f := 0\n    highest_i := 0\n    for i,\
    \ f := range m {\n        if f >= i && f >= highest_f {\n            highest_f\
    \ = f\n            highest_i = i\n        }\n    }\n    if highest_f >= highest_i\
    \ {\n        return highest_i\n    }\n    return -1\n}\n", "    max := -1\n  \
    \  count := make(map[int]int)\n    for _, val := range lst {\n        count[val]++\n\
    \        if val > max && count[val] >= val {\n            max = val\n        }\n\
    \    }\n    return max\n}\n", "    // type of the hash map used as a counter\n\
    \    // key: int value, value: number of occurrences\n    type Counter map[int]int\n\
    \    // returns a new Counter initialized with the values of the slice lst\n \
    \   var newCounter = func(lst []int) Counter {\n        m := make(Counter)\n \
    \       for _, v := range lst {\n            m[v]++\n        }\n        return\
    \ m\n    }\n    // returns the greatest key value of the counter if it is >= to\
    \ the number of occurrences of the value\n    // returns -1 otherwise\n    var\
    \ maxIfOccurencesGreater = func(m Counter) int {\n        var max = -1\n     \
    \   for k, v := range m {\n            if v >= k && k > max {\n              \
    \  max = k\n            }\n        }\n        return max\n    }\n    return maxIfOccurencesGreater(newCounter(lst))\n\
    }\n", "    m := make(map[int]int)\n    max := -1\n    for _, v := range lst {\n\
    \        m[v]++\n        if m[v] >= v && v > max {\n            max = v\n    \
    \    }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    var elementMap = make(map[int]int)\n    for _, element := range lst\
    \ {\n        elementMap[element] += 1\n    }\n    for i := len(lst) - 1; i >=\
    \ 0; i-- {\n        if elementMap[i] >= i {\n            return i\n        }\n\
    \    }\n    return -1\n}\n", "    max := 0\n    num := 0\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n        f :=\
    \ freq[i]\n        if f >= i && f > num {\n            num = i\n        }\n  \
    \  }\n    if num > 0 {\n        return num\n    }\n    return -1\n}\n", "    m\
    \ := make(map[int]int)\n    for _, item := range lst {\n        m[item] += 1\n\
    \    }\n    for _, item := range lst {\n        if item > 0 && m[item] >= item\
    \ {\n            return item\n        }\n    }\n    return -1\n}\n", "    cnt\
    \ := make(map[int]int)\n    for _, e := range lst {\n        cnt[e]++\n    }\n\
    \    for _, e := range lst {\n        if e > 0 && cnt[e] >= e {\n            return\
    \ e\n        }\n    }\n    return -1\n}\n", "    mapa := make(map[int]int)\n \
    \   for _, v := range lst {\n        mapa[v]++\n    }\n    for _, v := range lst\
    \ {\n        if mapa[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    var counts = make(map[int]int)\n    var candidates = make(map[int]int)\n\
    \    for _, x := range lst {\n        counts[x]++\n        candidates[x] = x\n\
    \    }\n    for x, v := range candidates {\n        if counts[v] < x {\n     \
    \       delete(candidates, x)\n        }\n    }\n    var max int\n    for x, _\
    \ := range candidates {\n        if x > max {\n            max = x\n        }\n\
    \    }\n    if max > 0 {\n        return max\n    }\n    return -1\n}\n", "  \
    \  max := 0\n    maxCnt := 0\n    counts := make(map[int]int)\n    for _, val\
    \ := range lst {\n        counts[val] += 1\n        if counts[val] > maxCnt {\n\
    \            max = val\n            maxCnt = counts[val]\n        }\n    }\n \
    \   if maxCnt < max {\n        return -1\n    }\n    return max\n}\n", "    m\
    \ := make(map[int]int)\n    for _, item := range lst {\n        m[item]++\n  \
    \  }\n    max := -1\n    for _, item := range lst {\n        if item <= m[item]\
    \ && item > max {\n            max = item\n        }\n    }\n    return max\n\
    }\n", "    d := make(map[int]int)\n    for _, value := range lst {\n        d[value]++\n\
    \    }\n    max := -1\n    for k, v := range d {\n        if v >= k && k > max\
    \ {\n            max = k\n        }\n    }\n    return max\n}\n", "    int_cnt_map\
    \ := make(map[int]int)\n    for _, v := range lst {\n        int_cnt_map[v] +=\
    \ 1\n    }\n    for k, v := range int_cnt_map {\n        if k == v {\n       \
    \     return k\n        }\n    }\n    return -1\n}\n", "    return -1\n}\n", " \
    \   // Implement your solution here\n    return -1\n}\n", "    lstLen := len(lst)\n\
    \    if lstLen == 0 {\n        return -1\n    }\n    if lstLen == 1 {\n      \
    \  return 1\n    }\n    // Save the frequency of each number.\n    numsFreq :=\
    \ make(map[int]int)\n    // Save the numbers that have a frequency greater than\
    \ or equal to its value.\n    numsGreater := make([]int, 0)\n    for _, num :=\
    \ range lst {\n        numsFreq[num]++\n        if numsFreq[num] >= num {\n  \
    \          numsGreater = append(numsGreater, num)\n        }\n    }\n    if len(numsGreater)\
    \ == 0 {\n        return -1\n    }\n    // Sort numsGreater.\n    for i := 0;\
    \ i < len(numsGreater); i++ {\n        for j := i + 1; j < len(numsGreater); j++\
    \ {\n            if numsGreater[i] < numsGreater[j] {\n                temp :=\
    \ numsGreater[i]\n                numsGreater[i] = numsGreater[j]\n          \
    \      numsGreater[j] = temp\n            }\n        }\n    }\n    return numsGreater[0]\n\
    }\n", "    count := make(map[int]int)\n    for _, i := range lst {\n        count[i]++\n\
    \    }\n    var result int\n    for _, i := range lst {\n        if count[i] >=\
    \ i && i > result {\n            result = i\n        }\n    }\n    if result ==\
    \ 0 {\n        return -1\n    }\n    return result\n}\n", "    if len(lst) ==\
    \ 0 {\n        return -1\n    }\n    mp := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        mp[v]++\n    }\n    max, val := -1, -1\n    for k, v :=\
    \ range mp {\n        if v >= k && v > max {\n            max = v\n          \
    \  val = k\n        }\n    }\n    return val\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if m[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    table := make(map[int]int)\n\
    \    for _, v := range lst {\n        table[v]++\n    }\n    max := 0\n    for\
    \ k, v := range table {\n        if k >= v {\n            continue\n        }\n\
    \        if k > max {\n            max = k\n        }\n    }\n    return max\n\
    }\n", "    for i := 0; i < len(lst); i++ {\n        count := 0\n        for j\
    \ := 0; j < len(lst); j++ {\n            if lst[i] == lst[j] {\n             \
    \   count++\n            }\n        }\n        if count >= lst[i] {\n        \
    \    return lst[i]\n        }\n    }\n    return -1\n}\n", "    if len(lst) ==\
    \ 0 {\n        return -1\n    }\n    var max int\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v] += 1\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    for i := max; i > 0; i-- {\n        if m[i]\
    \ >= i {\n            return i\n        }\n    }\n    return -1\n}\n", "    numbers\
    \ := make(map[int]int)\n    max := 0\n    for _, num := range lst {\n        if\
    \ _, ok := numbers[num]; ok {\n            numbers[num]++\n        } else {\n\
    \            numbers[num] = 1\n        }\n        if num > max {\n           \
    \ max = num\n        }\n    }\n    for num := max; num > 0; num-- {\n        if\
    \ count, ok := numbers[num]; ok {\n            if count >= num {\n           \
    \     return num\n            }\n        }\n    }\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    result := 0\n    frequency :=\
    \ make(map[int]int)\n    for _, i := range lst {\n        frequency[i]++\n   \
    \ }\n    for i, f := range frequency {\n        if f >= i && i > result {\n  \
    \          result = i\n        }\n    }\n    if result == 0 {\n        return\
    \ -1\n    }\n    return result\n}\n", "    // Create a counter for each number\n\
    \    counter := make(map[int]int)\n    for _, n := range lst {\n        counter[n]++\n\
    \    }\n    // Get the maximum of the numbers which occur more than once\n   \
    \ max := -1\n    for key, value := range counter {\n        if key <= value &&\
    \ key > max {\n            max = key\n        }\n    }\n    return max\n}\n",
  "    freq := make(map[int]int)\n    for _, n := range lst {\n        freq[n]++\n\
    \    }\n    for n, f := range freq {\n        if n <= f {\n            return\
    \ n\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    hist := map[int]int{}\n    for _,v := range lst {\n        hist[v]\
    \ += 1\n    }\n    max := -1\n    for k,v := range hist {\n        if v >= k &&\
    \ k > max {\n            max = k\n        }\n    }\n    return max\n}\n", "  \
    \  // TODO: Improve the implementation\n    lstDict := make(map[int]int)\n   \
    \ for _, val := range lst {\n        _, ok := lstDict[val]\n        if ok {\n\
    \            lstDict[val] += 1\n        } else {\n            lstDict[val] = 1\n\
    \        }\n    }\n    //fmt.Println(lstDict)\n    result := -1\n    for k, v\
    \ := range lstDict {\n        if v >= k && result < k {\n            result =\
    \ k\n        }\n    }\n    return result\n}\n", "    max := -1\n    counts :=\
    \ make(map[int]int)\n    for _, v := range lst {\n        counts[v]++\n      \
    \  if counts[v] >= v && v > max {\n            max = v\n        }\n    }\n   \
    \ return max\n}\n", "    // TODO\n    return -1\n}\n", "    if len(lst) == 0 {\n\
    \        return -1\n    }\n    vals := make(map[int]int)\n    max := 0\n    for\
    \ _, v := range lst {\n        vals[v]++\n        if vals[v] >= v && v > max {\n\
    \            max = v\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n   \
    \ }\n    // set up map to store the counts for each number\n    counts := make(map[int]int)\n\
    \    for _, num := range lst {\n        if _, ok := counts[num]; ok {\n      \
    \      counts[num]++\n        } else {\n            counts[num] = 1\n        }\n\
    \    }\n    // iterate over the numbers and find the max one that occurs >= itself\n\
    \    var result int\n    for num, count := range counts {\n        if num > result\
    \ && count >= num {\n            result = num\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n", "    hmap := make(map[int]int)\n\
    \    for _, x := range lst {\n        hmap[x]++\n    }\n    for _, x := range\
    \ lst {\n        if x > 0 && hmap[x] >= x {\n            return x\n        }\n\
    \    }\n    return -1\n}\n", "    counter := make(map[int]int)\n    for _, e :=\
    \ range lst {\n        counter[e] += 1\n    }\n    var max_key int\n    for key,\
    \ value := range counter {\n        if key <= value && key > max_key {\n     \
    \       max_key = key\n        }\n    }\n    if max_key == 0 {\n        return\
    \ -1\n    }\n    return max_key\n}\n", "    m := make(map[int]int)\n    for _,\
    \ e := range lst {\n        m[e]++\n    }\n    for _, e := range lst {\n     \
    \   if e > 0 && m[e] >= e {\n            return e\n        }\n    }\n    return\
    \ -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    fmt.Println(m)\n    // sort all keys in asc order\n    keys\
    \ := make([]int, 0, len(m))\n    for k := range m {\n        keys = append(keys,\
    \ k)\n    }\n    for i := 0; i < len(keys); i++ {\n        for j := i + 1; j <\
    \ len(keys); j++ {\n            if keys[i] > keys[j] {\n                keys[i],\
    \ keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n    fmt.Println(keys)\n\
    \    for _, k := range keys {\n        if k > m[k] {\n            return -1\n\
    \        }\n        if k <= m[k] {\n            return k\n        }\n    }\n \
    \   return -1\n}\n", "    a := make([]int, len(lst))\n    for _, n := range lst\
    \ {\n        a[n-1] += 1\n    }\n    for i, n := range a {\n        if n >= i+1\
    \ {\n            return i+1\n        }\n    }\n    return -1\n}\n", "    m :=\
    \ make(map[int]int)\n    // go through the list\n    for _, i := range lst {\n\
    \        m[i]++\n    }\n    // go through the map\n    for i, v := range m {\n\
    \        if i <= v {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    //const maxFreq = 100\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v] += 1\n    }\n    var maxV int\n    for k, v := range\
    \ m {\n        if k == v && k > maxV {\n            maxV = k\n        }\n    }\n\
    \    if maxV == 0 {\n        return -1\n    }\n    return maxV\n}\n", "    //\n\
    \    // Your code goes here.\n    //\n\n    return -1\n}\n", "    nums := make(map[int]int)\n\
    \    max := -1\n    for _, v := range lst {\n        nums[v] += 1\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    for i := max; i > 0; i--\
    \ {\n        if nums[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    var max, min int\n    if lst == nil || len(lst) == 0 {\n    \
    \    return -1\n    }\n    max = lst[0]\n    min = lst[0]\n    freqMap := make(map[int]int)\n\
    \    for _, v := range lst {\n        freqMap[v] += 1\n        if v > max {\n\
    \            max = v\n        }\n        if v < min {\n            min = v\n \
    \       }\n    }\n    for i := max; i >= min; i-- {\n        if v, ok := freqMap[i];\
    \ ok && v >= i {\n            return i\n        }\n    }\n    return -1\n}\n",
  "    var m = make(map[int]int)\n    for _, v := range lst {\n        m[v] += 1\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n", "    // Your code here\n\
    \    cnt := make(map[int]int)\n    for _, v := range lst {\n        cnt[v] +=\
    \ 1\n    }\n    for _, v := range lst {\n        if cnt[v] >= v {\n          \
    \  return v\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    var r = -1\n    for k,\
    \ v := range m {\n        if k <= v && r < k {\n            r = k\n        }\n\
    \    }\n    return r\n}\n", "    m := make(map[int]int)\n    var max, res int\n\
    \    for _, v := range lst {\n        m[v]++\n        if v > max {\n         \
    \   max = v\n        }\n    }\n    for i := max; i > 0; i-- {\n        if m[i]\
    \ >= i {\n            res = i\n            break\n        }\n    }\n    if res\
    \ == 0 {\n        res = -1\n    }\n    return res\n}\n", "    integerMap := make(map[int]int)\n\
    \    maxInt := 0\n    maxFrequency := 0\n    for _, v := range lst {\n       \
    \ if v > maxInt {\n            maxInt = v\n        }\n        integerMap[v]++\n\
    \    }\n    for integer, frequency := range integerMap {\n        if integer >\
    \ maxFrequency && frequency >= integer {\n            maxFrequency = integer\n\
    \        }\n    }\n    if maxFrequency == 0 {\n        return -1\n    }\n    return\
    \ maxFrequency\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    max_int := 0\n    max_freq := 0\n    for i, v := range\
    \ m {\n        if i > 0 && v >= i && v > max_freq {\n            max_int = i\n\
    \            max_freq = v\n        }\n    }\n    if max_int == 0 {\n        return\
    \ -1\n    }\n    return max_int\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    for _, value := range lst {\n        if value > 0 {\n       \
    \     count := 0\n            for _, v := range lst {\n                if v ==\
    \ value {\n                    count++\n                }\n            }\n   \
    \         if count >= value {\n                return value\n            }\n \
    \       }\n    }\n    return -1\n}\n", "    // Count the occurences of each number.\
    \ \n    // If nums less than or equal to the length of lst, return nums; otherwise,\
    \ return -1.\n    nums := make(map[int]int)\n    for _, n := range lst {\n   \
    \     nums[n]++\n    }\n    for n, c := range nums {\n        if c >= n {\n  \
    \          return n\n        }\n    }\n    return -1\n}\n", "    max := -1\n \
    \   if len(lst) == 0 {\n        return max\n    }\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for k, v := range\
    \ freq {\n        if v >= k && k > max {\n            max = k\n        }\n   \
    \ }\n    return max\n}\n", "    // your code here\n    return 0\n}\n", "    freq\
    \ := make(map[int]int)\n    for _, n := range lst {\n        freq[n]++\n    }\n\
    \    for _, n := range lst {\n        if n > 0 && freq[n] >= n {\n           \
    \ return n\n        }\n    }\n    return -1\n}\n", "    dict := make(map[int]int)\n\
    \    for _, n := range lst {\n        dict[n]++\n    }\n    var largest int\n\
    \    for k, v := range dict {\n        if k > v {\n            continue\n    \
    \    }\n        if k > largest {\n            largest = k\n        }\n    }\n\
    \    if largest > 0 {\n        return largest\n    }\n    return -1\n}\n", " \
    \   // Count numbers\n    count := make(map[int]int)\n    for _, v := range lst\
    \ {\n        count[v]++\n    }\n    // Find max\n    max := -1\n    for k, v :=\
    \ range count {\n        if v >= k && k > max {\n            max = k\n       \
    \ }\n    }\n    return max\n}\n", "    var counts = make(map[int]int)\n    for\
    \ _, i := range lst {\n        counts[i]++\n    }\n    max := -1\n    for i, c\
    \ := range counts {\n        if c >= i && i > max {\n            max = i\n   \
    \     }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    counts := make(map[int]int)\n    for _, v := range lst {\n  \
    \      if _, ok := counts[v]; ok {\n            counts[v] += 1\n        } else\
    \ {\n            counts[v] = 1\n        }\n    }\n    for i := len(lst); i > 0;\
    \ i-- {\n        for k, v := range counts {\n            if k == v && k >= i {\n\
    \                return i\n            }\n        }\n    }\n    return -1\n}\n",
  "    freq := make(map[int]int)\n    for _, n := range lst {\n        freq[n]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n     \
    \       return i\n        }\n    }\n    return -1\n}\n", "    freq := make(map[int]int)\n\
    \    for _,v := range lst {\n        freq[v]++\n    }\n    var result int\n  \
    \  for i, v := range freq {\n        if i <= v && i > result {\n            result\
    \ = i\n        }\n    }\n    if result == 0 {\n        return -1\n    }\n    return\
    \ result\n}\n", "    dict := make(map[int]int)\n    for _, num := range lst {\n\
    \        if _, ok := dict[num]; ok {\n            dict[num]++\n        } else\
    \ {\n            dict[num] = 1\n        }\n    }\n    var highest int\n    for\
    \ num, freq := range dict {\n        if num > highest && freq >= num {\n     \
    \       highest = num\n        }\n    }\n    if highest == 0 {\n        return\
    \ -1\n    }\n    return highest\n}\n", "    m := make(map[int]int)\n    for _,\
    \ v := range lst {\n        m[v]++\n    }\n    res := -1\n    for k, v := range\
    \ m {\n        if v >= k && k > res {\n            res = k\n        }\n    }\n\
    \    return res\n}\n", "    freqMap := make(map[int]int)\n    for _, n := range\
    \ lst {\n        freqMap[n]++\n    }\n    for _, n := range lst {\n        if\
    \ n > 0 && freqMap[n] >= n {\n            return n\n        }\n    }\n    return\
    \ -1\n}\n", "    dict := make(map[int]int)\n    var max int\n    for _, v := range\
    \ lst {\n        dict[v] += 1\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    for i := max; i > 0; i-- {\n        if dict[i] >= i {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n", "    var freq map[int]int\
    \ = make(map[int]int)\n    for _, v := range lst {\n        if freq[v] > 0 {\n\
    \            freq[v]++\n        } else {\n            freq[v] = 1\n        }\n\
    \    }\n    var result, max int = -1, 0\n    for i, v := range freq {\n      \
    \  if i >= v && v > max {\n            result = i\n            max = v\n     \
    \   }\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    freq := make(map[int]int)\n    for _, num := range lst {\n  \
    \      freq[num]++\n    }\n    for i := len(lst) - 1; i > 0; i-- {\n        if\
    \ v, ok := freq[i]; ok && v >= i {\n            return i\n        }\n    }\n \
    \   return -1\n}\n", "    // create map of integers and their counts\n    intmap\
    \ := make(map[int]int)\n    for _, val := range lst {\n        intmap[val]++\n\
    \    }\n    // Create a slice of integers and their counts\n    intslice := make([]int,\
    \ 0)\n    for key, val := range intmap {\n        intslice = append(intslice,\
    \ key)\n        intslice = append(intslice, val)\n    }\n    // fmt.Println(intslice)\n\
    \    // Create slice of integers whose count >= integer value\n    intslice2 :=\
    \ make([]int, 0)\n    for i:=0; i<len(intslice); i=i+2 {\n        if intslice[i+1]\
    \ >= intslice[i] {\n            intslice2 = append(intslice2, intslice[i])\n \
    \       }\n    }\n    // fmt.Println(intslice2)\n    // If no values in intslice2,\
    \ return -1\n    if len(intslice2) == 0 {\n        return -1\n    }\n    // Sort\
    \ intslice2 and return the last value\n    intslice3 := sort(intslice2)\n    return\
    \ intslice3[len(intslice3)-1]\n}\n", "    return searchR(lst, make(map[int]int))\n\
    }\n", "    res, freq := -1, 0\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v] += 1\n    }\n    for k, v := range m {\n        if v >=\
    \ k && v >= freq {\n            res, freq = k, v\n        }\n    }\n    return\
    \ res\n}\n", "    m := make(map[int]int)\n    for _, n := range lst {\n      \
    \  m[n]++\n    }\n    var ans, f int\n    for n, c := range m {\n        if c\
    \ >= n && c >= f {\n            ans = n\n            f = c\n        }\n    }\n\
    \    if f > 0 {\n        return ans\n    }\n    return -1\n}\n", "    result,\
    \ max := -1, 0\n    count := make(map[int]int)\n    for _, v := range lst {\n\
    \        count[v]++\n        if v > max {\n            max = v\n        }\n  \
    \  }\n    for i := 1; i <= max; i++ {\n        if count[i] >= i {\n          \
    \  result = i\n        }\n    }\n    return result\n}\n", "    res := -1\n   \
    \ m := make(map[int]int)\n    for _, n := range lst {\n        if n > 0 {\n  \
    \          if count, ok := m[n]; ok {\n                m[n] = count + 1\n    \
    \        } else {\n                m[n] = 1\n            }\n        }\n    }\n\
    \    for k, count := range m {\n        if count >= k {\n            res = k\n\
    \        }\n    }\n    return res\n}\n", "    const (\n        OutOfBounds = -1\n\
    \    )\n    if len(lst) == 0 {\n        return OutOfBounds\n    }\n    var (\n\
    \        histogram map[int]int = make(map[int]int)\n        el int\n        result\
    \ int = OutOfBounds\n    )\n    for _, el = range lst {\n        histogram[el]++\n\
    \    }\n    for el, val := range histogram {\n        if val >= el && el > result\
    \ {\n            result = el\n        }\n    }\n    return result\n}\n\ntype SearchTest ",
  "    freq := make(map[int]int)\n    max := 0\n    for _,v := range lst {\n     \
    \   freq[v]++\n        if freq[v] >= v && v > max {\n            max = v\n   \
    \     }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n\
    }\n", "    var res int = -1\n    // do your magic here\n    return res\n}\n",
  "    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v] +=\
    \ 1\n    }\n    var res int\n    for k, v := range freq {\n        if k > v {\n\
    \            continue\n        }\n        if k >= res {\n            res = k\n\
    \        }\n    }\n    if res == 0 {\n        return -1\n    }\n    return res\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    for i := 1; i < len(lst);\
    \ i++ {\n        if lst[i] == 0 {\n            continue\n        }\n        var\
    \ cnt int\n        for j := 0; j < len(lst); j++ {\n            if lst[j] == i\
    \ {\n                cnt++\n            }\n        }\n        if cnt >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    // TODO: Implement\
    \ the solution\n    return -1\n}\n", "    freqMap := make(map[int]int)\n    for\
    \ _, value := range lst {\n        freqMap[value]++\n    }\n    for i := len(lst);\
    \ i > 0; i-- {\n        if freqMap[i] >= i {\n            return i\n        }\n\
    \    }\n    return -1\n}\n", "    // Implement me!\n    if len(lst) == 0 {\n \
    \       return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if v,\
    \ ok := m[i]; ok && v >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    var result\
    \ int\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v] +=\
    \ 1\n    }\n    for k, v := range m {\n        if k > 0 && k <= v {\n        \
    \    if result < k {\n                result = k\n            }\n        }\n \
    \   }\n    if result > 0 {\n        return result\n    }\n    return -1\n}\n",
  "    numCnt := make(map[int]int)\n    for _, v := range lst {\n        numCnt[v]\
    \ = numCnt[v] + 1\n    }\n    var res int\n    for i := len(lst) - 1; i >= 0;\
    \ i-- {\n        if cnt, ok := numCnt[i]; ok && cnt >= i {\n            res =\
    \ i\n            break\n        }\n    }\n    if res == 0 {\n        return -1\n\
    \    }\n    return res\n}\n", "    var histogram = make(map[int]int)\n    for\
    \ _, x := range lst {\n        histogram[x]++\n    }\n    for _, x := range lst\
    \ {\n        if histogram[x] >= x {\n            return x\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    if\
    \ len(lst) == 1 {\n        return 1\n    }\n    p := make(map[int]int)\n    for\
    \ _, v := range lst {\n        p[v]++\n    }\n    for k, v := range p {\n    \
    \    if k >= v {\n            continue\n        }\n        return k\n    }\n \
    \   return -1\n}\n", "    freq := make(map[int]int)\n    max := 0\n    for _,\
    \ n := range lst {\n        freq[n]++\n        if n > max {\n            max =\
    \ n\n        }\n    }\n    for i := max; i > 0; i-- {\n        if freq[i] >= i\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n", "    return\
    \ search1(lst)\n}\n", "    m := make(map[int]int)\n    for _, i := range lst {\n\
    \        m[i] += 1\n    }\n    var result int\n    for k, v := range m {\n   \
    \     if k > 0 && v >= k && k > result {\n            result = k\n        }\n\
    \    }\n    if result > 0 {\n        return result\n    }\n    return -1\n}\n",
  "    frequencyMap := map[int]int{}\n    maxFrequency := 0\n    maxValue := 0\n \
    \   for _, v := range lst {\n        frequencyMap[v]++\n        if v > maxValue\
    \ {\n            maxValue = v\n        }\n        if frequencyMap[v] > maxFrequency\
    \ {\n            maxFrequency = frequencyMap[v]\n        }\n    }\n    for k,\
    \ v := range frequencyMap {\n        if v == maxFrequency && k == maxValue {\n\
    \            return k\n        }\n    }\n    return -1\n}\n", "    items := map[int]int{}\n\
    \    for _, item := range lst {\n        items[item]++\n    }\n    for _, item\
    \ := range lst {\n        if items[item] >= item {\n            return item\n\
    \        }\n    }\n    return -1\n}\n", "    hm := make(map[int]int)\n    for\
    \ _, v := range lst {\n        if _, ok := hm[v]; ok {\n            hm[v]++\n\
    \        } else {\n            hm[v] = 1\n        }\n    }\n    maxKey := -1\n\
    \    for k, v := range hm {\n        if v >= k && k > maxKey {\n            maxKey\
    \ = k\n        }\n    }\n    return maxKey\n}\n", "    n := len(lst)\n    if n\
    \ == 0 {\n        return -1\n    }\n    // \uBC1C\uC0DD \uBE48\uB3C4 \uC800\uC7A5\
    \n    m := make(map[int]int)\n    for _, num := range lst {\n        m[num] +=\
    \ 1\n    }\n    // \uCD5C\uB300 \uAC12\n    max := 0\n    for key, value := range\
    \ m {\n        if value >= key && key > max {\n            max = key\n       \
    \ }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n}\n",
  "    int_map := make(map[int]int)\n    for _, e := range lst {\n        if _, ok\
    \ := int_map[e]; ok {\n            int_map[e] += 1\n        } else {\n       \
    \     int_map[e] = 1\n        }\n    }\n    greater := 0\n    for k, v := range\
    \ int_map {\n        if k > v && k > greater {\n            greater = k\n    \
    \    }\n    }\n    if greater == 0 {\n        return -1\n    }\n    return greater\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, n := range lst {\n        m[n]++\n    }\n    max_key := -1\n    max_value\
    \ := -1\n    for k, v := range m {\n        if v >= k && v > max_value {\n   \
    \         max_key = k\n            max_value = v\n        }\n    }\n    return\
    \ max_key\n}\n", "    // create a list of unique elements\n    var unique []int\n\
    \    unique = append(unique, lst[0])\n    for i := 1; i < len(lst); i++ {\n  \
    \      isUnique := true\n        for j := 0; j < len(unique); j++ {\n        \
    \    if lst[i] == unique[j] {\n                isUnique = false\n            \
    \    break\n            }\n        }\n        if isUnique {\n            unique\
    \ = append(unique, lst[i])\n        }\n    }\n    // con", "    counts := make(map[int]int)\n\
    \    for _, i := range lst {\n        counts[i] += 1\n    }\n    for _, i := range\
    \ lst {\n        if counts[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, i := range lst {\n\
    \        if _, ok := m[i]; ok {\n            m[i]++\n        } else {\n      \
    \      m[i] = 1\n        }\n    }\n    r := -1\n    for k, v := range m {\n  \
    \      if v >= k && k > r {\n            r = k\n        }\n    }\n    return r\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v] +=\
    \ 1\n    }\n    var result int\n    var found bool\n    for k, v := range m {\n\
    \        if k <= v && k > result {\n            result = k\n            found\
    \ = true\n        }\n    }\n    if found {\n        return result\n    }\n   \
    \ return -1\n}\n", "    res := make(map[int]int)\n    for _, v := range lst {\n\
    \        res[v]++\n    }\n    max := -1\n    for k, v := range res {\n       \
    \ if k <= v && k > max {\n            max = k\n        }\n    }\n    return max\n\
    }\n", "    m := make(map[int]int)\n    for _, i := range lst {\n        m[i]++\n\
    \    }\n    r := -1\n    for _, i := range lst {\n        if i > 0 && m[i] >=\
    \ i && i > r {\n            r = i\n        }\n    }\n    return r\n}\n", "   \
    \ if len(lst) == 0 {\n        return -1\n    }\n    var count map[int]int = make(map[int]int)\n\
    \    for _, v := range lst {\n        if v < 1 {\n            continue\n     \
    \   }\n        count[v]++\n    }\n    var result int = -1\n    for i, v := range\
    \ count {\n        if i > v {\n            continue\n        }\n        if result\
    \ == -1 || i > result {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    counter\
    \ := make(map[int]int)\n    for _, num := range lst {\n        if _, ok := counter[num];\
    \ ok {\n            counter[num] += 1\n        } else {\n            counter[num]\
    \ = 1\n        }\n    }\n    var result int\n    for key, value := range counter\
    \ {\n        if key >= value && key > result {\n            result = key\n   \
    \     }\n    }\n    if result == 0 {\n        return -1\n    }\n    return result\n\
    }\n", "    dict := make(map[int]int)\n    for _, el := range lst {\n        dict[el]++\n\
    \    }\n    result := -1\n    for key, freq := range dict {\n        if freq >=\
    \ key && key > result {\n            result = key\n        }\n    }\n    return\
    \ result\n}\n", "    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    numFreq := make(map[int]int)\n    for _, num := range lst {\n\
    \        numFreq[num]++\n    }\n    for _, num := range lst {\n        if numFreq[num]\
    \ >= num {\n            return num\n        }\n    }\n    return -1\n}\n", " \
    \   freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]\
    \ += 1\n    }\n    result := -1\n    for num, f := range freq {\n        if num\
    \ <= f && num > result {\n            result = num\n        }\n    }\n    return\
    \ result\n}\n", "    freq := make(map[int]int)\n    for _, v := range lst {\n\
    \        freq[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if freq[i]\
    \ >= i {\n            return i\n        }\n    }\n    return -1\n}\n", "    results\
    \ := map[int]int{}\n    for _, elem := range lst {\n        results[elem] += 1\n\
    \    }\n    max := -1\n    for elem, count := range results {\n        if count\
    \ >= elem && elem > max {\n            max = elem\n        }\n    }\n    return\
    \ max\n}\n", "    mostPopularInt, popularity := -1, 0\n    for _, i := range lst\
    \ {\n        intFreq := frequency(lst, i)\n        if intFreq > popularity &&\
    \ intFreq >= i {\n            mostPopularInt, popularity = i, intFreq\n      \
    \  }\n    }\n    return mostPopularInt\n}\n", "    freq := make(map[int]int)\n\
    \    for _, item := range lst {\n        freq[item] += 1\n    }\n    res := -1\n\
    \    for key, val := range freq {\n        if key <= val && key > res {\n    \
    \        res = key\n        }\n    }\n    return res\n}\n", "    count := make(map[int]int)\n\
    \    for _, num := range lst {\n        count[num]++\n    }\n    for _, num :=\
    \ range lst {\n        if num > 0 && count[num] >= num {\n            return num\n\
    \        }\n    }\n    return -1\n}\n", "    var output int = -1\n    var freq\
    \ = make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n\
    \    for k, v := range freq {\n        if k >= v && k > output {\n           \
    \ output = k\n        }\n    }\n    return output\n}\n", "    n := make(map[int]int)\n\
    \    for _, v := range lst {\n        n[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if n[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    freq := make(map[int]int)\n    for _, n := range lst\
    \ {\n        freq[n]++\n    }\n    for n, c := range freq {\n        if n > 0\
    \ && c >= n {\n            return n\n        }\n    }\n    return -1\n}\n", " \
    \   if len(lst) == 0 {\n        return -1\n    }\n    counts := make(map[int]int)\n\
    \    for _, value := range lst {\n        if _, ok := counts[value]; ok {\n  \
    \          counts[value]++\n        } else {\n            counts[value] = 1\n\
    \        }\n    }\n    for value, count := range counts {\n        if value <=\
    \ count {\n            return value\n        }\n    }\n    return -1\n}\n", " \
    \   occurrences := make(map[int]int)\n    for _, v := range lst {\n        occurrences[v]++\n\
    \    }\n    max := -1\n    for v, n := range occurrences {\n        if n >= v\
    \ && v > max {\n            max = v\n        }\n    }\n    return max\n}\n", " \
    \   mostFrequent := -1\n    mostFrequentCount := 0\n    mapNumbers := make(map[int]int)\n\
    \    for _, num := range lst {\n        mapNumbers[num] += 1\n        if mapNumbers[num]\
    \ > mostFrequentCount && mapNumbers[num] >= num {\n            mostFrequent =\
    \ num\n            mostFrequentCount = mapNumbers[num]\n        }\n    }\n   \
    \ return mostFrequent\n}\n", "    // TODO: Please implement the solution by yourself.\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    var\
    \ numCountMap = make(map[int]int)\n    for _, v := range lst {\n        numCountMap[v]++\n\
    \    }\n    var result int\n    for _, v := range lst {\n        if v > result\
    \ && numCountMap[v] >= v {\n            result = v\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n", "    // TODO - Add\
    \ your code here\n    return 0\n}\n", "    freqMap := make(map[int]int)\n    max\
    \ := 0\n    for _, v := range lst {\n        freqMap[v]++\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    for i := max; i > 0; i-- {\n \
    \       if freqMap[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    m := make(map[int]int)\n    var key int\n    for _, v := range\
    \ lst {\n        m[v]++\n        if m[v] == v {\n            key = v\n       \
    \ }\n    }\n    if key > 0 {\n        return key\n    }\n    return -1\n}\n",
  "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n\
    \    res := -1\n    for v, f := range m {\n        if f >= v && v > res {\n  \
    \          res = v\n        }\n    }\n    return res\n}\n", "    return 0\n}\n",
  "    cnt := make(map[int]int)\n    for _, v := range lst {\n        cnt[v]++\n \
    \   }\n    for _, v := range lst {\n        if v == cnt[v] {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    max := 1\n    maxNum := lst[0]\n    counts := make(map[int]int)\n\
    \    for _, i := range lst {\n        if i > max {\n            max = i\n    \
    \    }\n        if _, ok := counts[i]; ok {\n            counts[i]++\n       \
    \ } else {\n            counts[i] = 1\n        }\n    }\n    for i, j := range\
    \ counts {\n        if i == j && i >= maxNum {\n            maxNum = i\n     \
    \   }\n    }\n    if maxNum < max {\n        return -1\n    }\n    return maxNum\n\
    }\n", "    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i]\
    \ += 1\n    }\n    // freq is now a map of {value: frequency}\n    for i := len(lst);\
    \ i > 0; i-- {\n        if freq[i] >= i {\n            return i\n        }\n \
    \   }\n    return -1\n}\n", "    return 0\n}\n", "    freq := make(map[int]int)\n\
    \    for _, n := range lst {\n        freq[n]++\n    }\n    result := -1\n   \
    \ for n, f := range freq {\n        if n > 0 && f >= n && n > result {\n     \
    \       result = n\n        }\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    var tmp = make(map[int]int)\n    for _,\
    \ value := range lst {\n        tmp[value]++\n    }\n    var result int\n    for\
    \ key, value := range tmp {\n        if key <= value && key > result {\n     \
    \       result = key\n        }\n    }\n    if result == 0 {\n        return -1\n\
    \    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    var max, maxi int\n    for i, n := range lst {\n        if n > max\
    \ {\n            max = n\n            maxi = i\n        }\n    }\n    freq :=\
    \ make([]int, max+1)\n    for _, n := range lst {\n        freq[n]++\n    }\n\
    \    var res int\n    for i, n := range freq {\n        if n >= i && n >= freq[res]\
    \ {\n            res = i\n        }\n    }\n    if res == 0 {\n        return\
    \ -1\n    }\n    return res\n}\n", "    m := make(map[int]int)\n    for _, value\
    \ := range lst {\n        m[value] += 1\n    }\n    for _, value := range lst\
    \ {\n        if m[value] >= value {\n            return value\n        }\n   \
    \ }\n    return -1\n}\n", "    intMap := make(map[int]int)\n    for _, v := range\
    \ lst {\n        intMap[v] += 1\n    }\n    greatest := -1\n    for key, value\
    \ := range intMap {\n        if key <= value && key > greatest {\n           \
    \ greatest = key\n        }\n    }\n    return greatest\n}\n", "    var max int\
    \ = 0\n\n    // dict - map of each number and its frequency\n    dict := make(map[int]int)\n\
    \    for _, n := range lst {\n        dict[n] += 1\n        if n > max {\n   \
    \         max = n\n        }\n    }\n\n    for i := max; i > 0; i-- {\n      \
    \  if dict[i] >= i {\n            return i\n        }\n    }\n\n    return -1\n\
    }\n", "    if len(lst) < 1 {\n        return -1\n    }\n    ret := -1\n    n :=\
    \ make(map[int]int)\n    for _, num := range lst {\n        if val, ok := n[num];\
    \ ok {\n            n[num] = val + 1\n        } else {\n            n[num] = 1\n\
    \        }\n    }\n    for k, v := range n {\n        if k <= v && ret < k {\n\
    \            ret = k\n        }\n    }\n    return ret\n}\n", "    m := make(map[int]int)\n\
    \    for _, e := range lst {\n        if v, ok := m[e]; ok {\n            m[e]\
    \ = v + 1\n        } else {\n            m[e] = 1\n        }\n    }\n    x :=\
    \ -1\n    for k, v := range m {\n        if k > 0 && k <= v && k > x {\n     \
    \       x = k\n        }\n    }\n    return x\n}\n", "    // FILL ME IN\n    return\
    \ -1\n}\n", "    m := make(map[int]int)\n    for _, item := range lst {\n    \
    \    m[item]++\n    }\n    max := -1\n    for item, freq := range m {\n      \
    \  if freq >= item && freq > max {\n            max = item\n        }\n    }\n\
    \    return max\n}\n", "    result, repeat := -1, -1\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n        if m[v] >= v && v > repeat\
    \ {\n            result, repeat = v, v\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]int)\n    max := -1\n    for _, v := range lst {\n\
    \        m[v]++\n        if m[v] >= v && v > max {\n            max = v\n    \
    \    }\n    }\n    return max\n}\n", "    var result int = -1\n    var count [101]int\n\
    \    for _, num := range lst {\n        count[num]++\n    }\n    for i := 100;\
    \ i > 0; i-- {\n        if count[i] >= i {\n            result = i\n         \
    \   break\n        }\n    }\n    return result\n}\n", "    var result = -1\n \
    \   var freq = make(map[int]int)\n    for _, item := range lst {\n        freq[item]++\n\
    \    }\n    for _, item := range lst {\n        if freq[item] >= item && item\
    \ > result {\n            result = item\n        }\n    }\n    return result\n\
    }\n", "    map_ := make(map[int]int)\n    for _, n := range lst {\n        map_[n]\
    \ += 1\n    }\n    result := -1\n    for k, v := range map_ {\n        if k >\
    \ 0 && v >= k && k > result {\n            result = k\n        }\n    }\n    return\
    \ result\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    sort.Ints(lst)\n\
    \    count, current := 1, lst[0]\n    for i, v := range lst {\n        if i ==\
    \ 0 {\n            continue\n        }\n        if v == current {\n          \
    \  count++\n        } else {\n            if v > count {\n                count\
    \ = 1\n                current = v\n            } else {\n                return\
    \ v\n            }\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, el := range lst {\n        m[el] += 1\n    }\n    for i := 1; i <\
    \ len(lst); i++ {\n        if m[i] >= i {\n            return i\n        }\n \
    \   }\n    return -1\n}\n", "    // TODO: implement it\n    return -1\n}\n", " \
    \   frequencies := make(map[int]int)\n    for _, num := range lst {\n        frequencies[num]++\n\
    \    }\n    max := -1\n    for num, frequency := range frequencies {\n       \
    \ if num <= frequency && num > max {\n            max = num\n        }\n    }\n\
    \    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n   \
    \ m := make(map[int]int)\n    for _, e := range lst {\n        m[e]++\n    }\n\
    \    maxKey := 0\n    for k, v := range m {\n        if k >= v && k > maxKey {\n\
    \            maxKey = k\n        }\n    }\n    if maxKey == 0 {\n        return\
    \ -1\n    }\n    return maxKey\n}\n", "    // YOUR CODE HERE\n    return -1\n\
    }\n", "    max := -1\n    freq := map[int]int{}\n    for _, val := range lst {\n\
    \        freq[val] += 1\n        if val > max && freq[val] >= val {\n        \
    \    max = val\n        }\n    }\n    return max\n}\n", "    posInts := map[int]int{}\n\
    \    max := 0\n    // For each positive integer in the list, create a record in\
    \ the posInts map\n    // with the value being the number of times the integer\
    \ appears in the list.\n    for _, v := range lst {\n        if v > 0 {\n    \
    \        _, ok := posInts[v]\n            if ok {\n                posInts[v]\
    \ += 1\n            } else {\n                posInts[v] = 1\n            }\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \    }\n    // Check to see if any of the integers in the list have a frequency\
    \ that is greater than or\n    // equal to the value of the integer itself, if\
    \ so return the greatest of the integers.\n    // Return -1 if no such value exists.\n\
    \    for i := max; i > 0; i-- {\n        v, ok := posInts[i]\n        if ok &&\
    \ v >= i {\n            return i\n        }\n    }\n    return -1\n}\n", "   \
    \ max := -1\n    counts := make(map[int]int)\n    for _, n := range lst {\n  \
    \      if n == 0 {\n            continue\n        }\n        counts[n]++\n   \
    \     if counts[n] >= n && n > max {\n            max = n\n        }\n    }\n\
    \    return max\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
