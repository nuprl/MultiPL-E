language: go_test.go
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    var res []int\n    res = append(res, 1)\n    res = append(res, 3)\n\
    \    res = append(res, 2)\n    if n <= 3 {\n        return res[:n+1]\n    }\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ 1 + i / 2)\n        } else {\n            res = append(res, res[i-1] + res[i-2]\
    \ + res[i+1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp7rrcha6y_test.go:39\
    \ +0x209\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7rrcha6y_test.go:53\
    \ +0x73\ntesting.tRunner(0xc000192680, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n        \
    \    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpy95hqofo_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpy95hqofo_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    rst := make([]int, n + 1)\n    for i\
    \ := 0; i <= n; i++ {\n        if i == 0 {\n            rst[i] = 1\n        }\
    \ else if i % 2 == 0 {\n            rst[i] = 1 + i / 2\n        } else {\n   \
    \         rst[i] = rst[i - 1] + rst[i - 2] + rst[i + 1]\n        }\n    }\n  \
    \  return rst\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpk8so67a6_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpk8so67a6_test.go:45 +0xd66\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var arr []int\n    for i := 0; i <= n;\
    \ i++ {\n        if i == 0 {\n            arr = append(arr, 1)\n        } else\
    \ if i == 1 {\n            arr = append(arr, 3)\n        } else if i == 2 {\n\
    \            arr = append(arr, 2)\n        } else if i % 2 == 0 {\n          \
    \  arr = append(arr, 1 + i / 2)\n        } else {\n            arr = append(arr,\
    \ arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpoz9wx1ng_test.go:36\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpoz9wx1ng_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        seq := []int{1, 3, 2}\n\
    \        for i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n            \
    \    seq = append(seq, 1 + i / 2)\n            } else {\n                seq =\
    \ append(seq, seq[i - 1] + seq[i - 2] + seq[i + 1])\n            }\n        }\n\
    \        return seq\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp41w0qr3a_test.go:37\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp41w0qr3a_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    r := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        n1 :=\
    \ r[i - 1]\n        n2 := r[i - 2]\n        n3 := r[i - 3]\n        if i % 2 ==\
    \ 0 {\n            r = append(r, 1 + i / 2)\n        } else {\n            r =\
    \ append(r, n1 + n2 + n3)\n        }\n    }\n    return r\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp7n9c10bo_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp7n9c10bo_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp7n9c10bo_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp7n9c10bo_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp7n9c10bo_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp7n9c10bo_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp7n9c10bo_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp7n9c10bo_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \n    a := make([]int, n + 1)\n    a[0] = 1\n    a[1] = 3\n    for i := 2; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            a[i] = 1 + i / 2\n        } else\
    \ {\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n        }\n    }\n   \
    \ return a\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmplwdpefa6_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmplwdpefa6_test.go:49 +0x4a5\n\
    testing.tRunner(0xc0001031e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n\n    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] =\
    \ 3\n    result[2] = 2\n\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0\
    \ {\n            result[i] = 1 + i / 2\n        } else {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpbb3k_lh6_test.go:38\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbb3k_lh6_test.go:52 +0x4ac\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ret := make([]int, n + 1)\n    ret[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            ret[i]\
    \ = 1 + i / 2\n        } else {\n            ret[i] = ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1]\n        }\n    }\n    return ret\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp4ywqc066_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4ywqc066_test.go:44 +0xd06\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tvar (\n\t\ti = 0\n\t\ttmp = []int{1, 3,\
    \ 2}\n\t\ttri = []int{1, 3, 2}\n\t)\n\tif n <= 2 {\n\t\treturn tri[:n+1]\n\t}\n\
    \tfor ; i < n - 2; i++ {\n\t\ttmp[0] = tmp[1]\n\t\ttmp[1] = tmp[2]\n\t\ttmp[2]\
    \ = tmp[0] + tmp[1] + tri[len(tri) - 2]\n\t\ttri = append(tri, tmp[2])\n\t}\n\t\
    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmpwcg3r93v_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpwcg3r93v_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12) %!s(int=28)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpwcg3r93v_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12) %!s(int=28) %!s(int=52)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpwcg3r93v_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12)\
    \ %!s(int=28) %!s(int=52) %!s(int=108)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpwcg3r93v_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12) %!s(int=28) %!s(int=52) %!s(int=108)\
    \ %!s(int=212)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpwcg3r93v_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=12) %!s(int=28) %!s(int=52) %!s(int=108) %!s(int=212)\
    \ %!s(int=428)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpwcg3r93v_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=12)\
    \ %!s(int=28) %!s(int=52) %!s("
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    dp := make([]int, n + 1)\n    for i :=\
    \ 1; i <= n; i++ {\n        if i % 2 == 0 {\n            dp[i] = 1 + i / 2\n \
    \       } else {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i + 1]\n    \
    \    }\n    }\n    return dp\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpxqi2b_4n_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpxqi2b_4n_test.go:43 +0xcc6\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    t := make([]int, n + 1)\n    t[0] = 1\n    t[1] = 3\n    t[2] = 2\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            t[i] = 1 + i / 2\n\
    \        } else {\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n       \
    \ }\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpiao9fnrf_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpiao9fnrf_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n+1)\n    r[0] = 1\n\
    \    r[1] = 3\n    r[2] = 2\n    if n == 0 {\n        return r[:1]\n    }\n  \
    \  if n == 1 {\n        return r[:2]\n    }\n    if n == 2 {\n        return r[:3]\n\
    \    }\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            r[i]\
    \ = 1 + i / 2\n        } else {\n            r[i] = r[i-1] + r[i-2] + r[i+1]\n\
    \        }\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpgdm6n1qa_test.go:42\
    \ +0x14d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgdm6n1qa_test.go:55\
    \ +0x46\ntesting.tRunner(0xc0001964e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    var triList []int\n    triList = append(triList, 1)\n    for i :=\
    \ 1; i <= n; i++ {\n        triList = append(triList, triN(i))\n    }\n    return\
    \ triList\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaccvtdfy_test.go:31:35: undefined: triN

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // write your code in Go 1.4\n    seq\
    \ := make([]int, n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq[i] = 1 + i /\
    \ 2\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1]\n        }\n    }\n    return seq\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp8k5n8477_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp8k5n8477_test.go:47 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    slice := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ (i + 1) % 2 == 0 {\n            slice = append(slice, 1 + (i + 1) / 2)\n   \
    \     } else {\n            slice = append(slice, slice[i - 1] + slice[i - 2]\
    \ + slice[i + 1])\n        }\n    }\n    return slice\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [5]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [5] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160048})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpyg1l5p1k_test.go:42\
    \ +0x247\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyg1l5p1k_test.go:57\
    \ +0xa2\ntesting.tRunner(0xc000103380, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var ret []int\n    ret = append(ret,\
    \ 1)\n    if n <= 0 {\n        return ret\n    }\n    ret = append(ret, 3)\n \
    \   if n == 1 {\n        return ret\n    }\n    ret = append(ret, 2)\n    if n\
    \ == 2 {\n        return ret\n    }\n    ret = append(ret, 8)\n    var num int\n\
    \    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            num = 1 +\
    \ i / 2\n        } else {\n            num = ret[i - 1] + ret[i - 2] + ret[i -\
    \ 3]\n        }\n        ret = append(ret, num)\n    }\n    return ret\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__2 (0.00s)\n\
    \        tmpo_9a0ncc_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=13)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n      \
    \  tmpo_9a0ncc_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpo_9a0ncc_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4) %!s(int=20)]'\n\
    \    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpo_9a0ncc_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=13) %!s(int=4) %!s(int=20) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpo_9a0ncc_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4)\
    \ %!s(int=20) %!s(int=5) %!s(int=29)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmpo_9a0ncc_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4) %!s(int=20) %!s(int=5) %!s(int=29)\
    \ %!s(int=6) %!s(int=40) %!s(int=7) %!s(int=53) %!s(int=8) %!s(int=68) %!s(int=9)\
    \ %!s(int=85) %!s(int=10) %!s(int=104) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tif n == 0 {\n\t\treturn []int{1}\n\t}\n\
    \tswitch {\n\tcase n == 1:\n\t\treturn []int{1, 3}\n\tcase n == 2:\n\t\treturn\
    \ []int{1, 3, 2}\n\tdefault:\n\t\ttmp := tri(n - 1)\n\t\treturn append(tmp, tmp[n\
    \ - 1] + tmp[n - 2] + tmp[n - 3])\n\t}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpju57xqfz_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpju57xqfz_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpju57xqfz_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpju57xqfz_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpju57xqfz_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpju57xqfz_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpju57xqfz_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpju57xqfz_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    s := []int{1, 3, 2}\n    for i := 3;\
    \ i <= n; i++ {\n        s = append(s, s[i - 1] + s[i - 2] + s[i - 3])\n    }\n\
    \    return s\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp0e0qezme_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp0e0qezme_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp0e0qezme_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp0e0qezme_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp0e0qezme_test.go:61: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp0e0qezme_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp0e0qezme_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp0e0qezme_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    t := make([]int, n+1)\n    t[0] = 1\n    t[1] = 3\n    for i := 2;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            t[i] = 1 + i / 2\n     \
    \   } else {\n            t[i] = t[i-1] + t[i-2] + t[i+1]\n        }\n    }\n\
    \    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpwxmh8mzr_test.go:35\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwxmh8mzr_test.go:48 +0xbf9\n\
    testing.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    res[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2]\
    \ + res[i + 1]\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp5tvqe48t_test.go:45\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5tvqe48t_test.go:60\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpgosmf5q3_test.go:45\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgosmf5q3_test.go:60\
    \ +0xa2\ntesting.tRunner(0xc00019e1a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \n    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    for i :=\
    \ 2; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n\
    \        } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n\
    \        }\n    }\n\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpscqz64q5_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpscqz64q5_test.go:50 +0x4a5\n\
    testing.tRunner(0xc0001036c0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    a := []int{1, 3, 2}\n    if n < 3 {\n\
    \        return a[:n+1]\n    }\n    a = append(a, 0)\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            a[i] = a[i/2] + 1\n        } else\
    \ {\n            a[i] = a[i-1] + a[i-2] + a[i+1]\n        }\n    }\n    return\
    \ a\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpcv0c0ol8_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpcv0c0ol8_test.go:47 +0x11c8\n\
    testing.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n\n    if n == 1 {\n        return []int{1}\n    }\n\n    result := []int{1,\
    \ 3}\n    if n == 2 {\n        return result\n    }\n\n    for i := 2; i < n;\
    \ i++ {\n        num := 0\n        if i % 2 == 0 {\n            num = 1 + i /\
    \ 2\n        } else {\n            num = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n        result = append(result, num)\n    }\n\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp798vumw5_test.go:43\
    \ +0x18c\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp798vumw5_test.go:59\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    if n ==\
    \ 0 {\n        return res\n    }\n    if n == 1 {\n        res[1] = 3\n      \
    \  return res\n    }\n    res[1] = 3\n    res[2] = 2\n    res[3] = 8\n    for\
    \ i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i /\
    \ 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1]\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmplduuraz0_test.go:40\
    \ +0x13c\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmplduuraz0_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc000192680, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    for i\
    \ := 0; i <= n; i++ {\n        if i == 0 {\n            res[i] = 1\n        }\
    \ else if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n   \
    \         res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp3qcmb359_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp3qcmb359_test.go:45 +0xd66\n\
    testing.tRunner(0xc000199380, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n + 1)\n    result[0] = 1\n    for i := 1; i\
    \ <= n; i++ {\n        switch i {\n        case 1:\n            result[i] = 3\n\
    \        case 2:\n            result[i] = 2\n        default:\n            if\
    \ i % 2 == 0 {\n                result[i] = 1 + i / 2\n            } else {\n\
    \                result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n \
    \           }\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp4pci5bm3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp4pci5bm3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4pci5bm3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp4pci5bm3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp4pci5bm3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp4pci5bm3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp4pci5bm3_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp4pci5bm3_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    rs := make([]int, n + 1)\n    rs[0] =\
    \ 1\n    rs[1] = 3\n    rs[2] = 2\n    for i := 3; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            rs[i] = rs[i - 2] + 1 + i / 2\n        } else {\n  \
    \          rs[i] = rs[i - 1] + rs[i - 2] + rs[i - 3]\n        }\n    }\n    return\
    \ rs\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp3s1wkbk5_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp3s1wkbk5_test.go:54 +0x405\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n + 1)\n    if n ==\
    \ 0 {\n        return r\n    }\n    r[0] = 1\n    r[1] = 3\n    for i := 2; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            r[i] = 1 + i / 2\n       \
    \ } else {\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n        }\n   \
    \ }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d0000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpcl8xdc8w_test.go:35\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpcl8xdc8w_test.go:48 +0xc2c\n\
    testing.tRunner(0xc0001991e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    var sequence []int\n    for i := 0; i <= n; i++ {\n        tri :=\
    \ 0\n        if i == 0 {\n            tri = 1\n        } else if i == 1 {\n  \
    \          tri = 3\n        } else if i == 2 {\n            tri = 2\n        }\
    \ else if i % 2 == 0 {\n            tri = 1 + i / 2\n        } else {\n      \
    \      tri = tri(i - 1) + tri(i - 2) + tri(i + 1)\n        }\n        sequence\
    \ = append(sequence, tri)\n    }\n    return sequence\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3paxuof_test.go:40:19: invalid operation: cannot call non-function tri
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{1}\n    case 1:\n        return []int{1, 3}\n    case 2:\n        return\
    \ []int{1, 3, 2}\n    }\n    r := []int{1, 3, 2}\n    for i := 3; i <= n; i++\
    \ {\n        if i & 1 == 0 {\n            r = append(r, 1 + i / 2)\n        }\
    \ else {\n            r = append(r, r[i - 1] + r[i - 2] + r[i + 1])\n        }\n\
    \    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpwb8cl_jb_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwb8cl_jb_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ret := make([]int, n + 1)\n    ret[0]\
    \ = 1\n    ret[1] = 3\n    ret[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i & 1 == 0 {\n            ret[i] = 1 + i / 2\n        } else {\n        \
    \    ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d0000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp7129g02x_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7129g02x_test.go:46 +0x4a6\n\
    testing.tRunner(0xc000198ea0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // TODO: Write your code here\n    return\
    \ nil\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmphkxe9hik_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphkxe9hik_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphkxe9hik_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphkxe9hik_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphkxe9hik_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmphkxe9hik_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmphkxe9hik_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmphkxe9hik_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmphkxe9hik_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphkxe9hik_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tresult := make([]int, n+1)\n\tif n == 0\
    \ {\n\t\treturn result\n\t}\n\n\tresult[0] = 1\n\tresult[1] = 3\n\tresult[2] =\
    \ 2\n\tfor i := 3; i <= n; i++ {\n\t\tresult[i] = result[i-1] + result[i-2] +\
    \ result[i-3]\n\t}\n\treturn result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpf69mqd1k_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpf69mqd1k_test.go:55 +0x2db\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    arr := make([]int, n + 1)\n    arr[0]\
    \ = 1\n    arr[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            arr[i] = 1 + i / 2\n        } else {\n            arr[i] = arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]\n        }\n    }\n    return arr\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp6w8i9f4g_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6w8i9f4g_test.go:45 +0x4a5\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // just a hint, you have to implement\
    \ it by yourself\n    return []int{}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp2gzyv5ib_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp2gzyv5ib_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp2gzyv5ib_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp2gzyv5ib_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp2gzyv5ib_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp2gzyv5ib_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp2gzyv5ib_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp2gzyv5ib_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp2gzyv5ib_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp2gzyv5ib_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp9nok9bz1_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp9nok9bz1_test.go:45 +0x4a5\n\
    testing.tRunner(0xc0001036c0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // The first n + 1 numbers of the Tribonacci\
    \ sequence are:\n    // [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418,\
    \ 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352,\
    \ 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733,\
    \ 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\
    \ 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162,\
    \ 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842,\
    \ 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141,\
    \ 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393,\
    \ 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464,\
    \ 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591,\
    \ 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673,\
    \ 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120,\
    \ 4660046610375530309, 7540113804746346429\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4eupigih_test.go:27:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073832
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tif n < 1 {\n\t\treturn []int{}\n\t}\n\t\
    result := []int{1, 3, 2}\n\ti := 3\n\tfor i <= n {\n\t\tif i % 2 == 0 {\n\t\t\t\
    result = append(result, 1 + i / 2)\n\t\t} else {\n\t\t\tresult = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n\t\t}\n\t\ti++\n\t}\n\treturn\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpo9mq53_j_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpo9mq53_j_test.go:48 +0x13a6\n\
    testing.tRunner(0xc000192680, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var trib []int\n    trib = append(trib,\
    \ 1)\n    for i := 0; i < n; i++ {\n        tmp := 0\n        if i % 2 == 0 {\n\
    \            tmp = 1 + i / 2\n        } else {\n            if i < 2 {\n     \
    \           tmp = 1\n            } else {\n                tmp = trib[i - 1] +\
    \ trib[i - 2] + trib[i + 1]\n            }\n        }\n        trib = append(trib,\
    \ tmp)\n    }\n    return trib\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpx4cmzug7_test.go:35\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpx4cmzug7_test.go:51 +0x1234\n\
    testing.tRunner(0xc000103380, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n + 1)\n    r[0] = 1\n\
    \    r[1] = 3\n    r[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            r[i] = 1 + i / 2\n        } else {\n            r[i] = r[i\
    \ - 1] + r[i - 2] + r[i + 1]\n        }\n    }\n    return r\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001e2000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001e2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp4vj78dmw_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4vj78dmw_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001831e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri []int\n    for i := 0; i <= n;\
    \ i++ {\n        if i == 0 {\n            tri = append(tri, 1)\n        } else\
    \ if i == 1 {\n            tri = append(tri, 3)\n        } else if i == 2 {\n\
    \            tri = append(tri, 2)\n        } else if i % 2 == 0 {\n          \
    \  tri = append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri,\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpinto5jx4_test.go:36\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpinto5jx4_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, 0)\n    if n <= 0\
    \ {\n        return res\n    }\n    var f func(n int) int\n    f = func(n int)\
    \ int {\n        if n == 1 {\n            return 3\n        }\n        if n %\
    \ 2 == 0 {\n            return 1 + n / 2\n        }\n        return f(n - 1) +\
    \ f(n - 2) + f(n + 1)\n    }\n    for i := 1; i <= n; i++ {\n        res = append(res,\
    \ f(i))\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpouy76s2z_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmpouy76s2z_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)\
    \ %!s(int=5) %!s(int=35)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmpouy76s2z_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', g"
  timestamp: 1660073833
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    memo := make([]int, n + 1)\n    memo[0]\
    \ = 3\n    memo[1] = 2\n    memo[2] = 1\n    return rTri(n, memo)\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj95zrla5_test.go:29:12: undefined: rTri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n\n    var res []int\n    res = append(res, 1)\n    for i := 1; i <= n;\
    \ i++ {\n        switch {\n        case i == 1:\n            res = append(res,\
    \ 3)\n        case i % 2 == 0:\n            res = append(res, 1 + i / 2)\n   \
    \     default:\n            res = append(res, res[i-1] + res[i-2] + res[i+1])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5149e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5149e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp25deeyal_test.go:38\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp25deeyal_test.go:51 +0x1566\n\
    testing.tRunner(0xc0001964e0, 0x52a2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{}\n    // FILL THIS IN\n\
    \    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpgysb_bj7_test.go:52: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgysb_bj7_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgysb_bj7_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgysb_bj7_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgysb_bj7_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpgysb_bj7_test.go:52: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpgysb_bj7_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpgysb_bj7_test.go:52: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpgysb_bj7_test.go:52: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgysb_bj7_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    seq := make([]int, n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq[i]\
    \ = 1 + i / 2\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2]\
    \ + seq[i + 1]\n        }\n    }\n    return seq\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpn6cr6uo7_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpn6cr6uo7_test.go:49 +0x4ac\n\
    testing.tRunner(0xc000103860, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        l := []int{1, 3, 2}\n  \
    \      for i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n              \
    \  l = append(l, 1 + i / 2)\n            } else {\n                l = append(l,\
    \ l[i - 1] + l[i - 2] + l[i + 1])\n            }\n        }\n        return l\n\
    \    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpfjz7_x_w_test.go:37\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfjz7_x_w_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ret := make([]int, n+1)\n    ret[0] =\
    \ 1\n    ret[1] = 3\n    ret[2] = 2\n    for i := 3; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            ret[i] = 1 + i / 2\n        } else {\n           \
    \ ret[i] = ret[i-1] + ret[i-2] + ret[i+1]\n        }\n    }\n    return ret\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpvmhvd6d7_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpvmhvd6d7_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073835
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    l := make([]int, n+1)\n    if n == 0\
    \ {\n        return l\n    }\n    l[0] = 1\n    if n == 1 {\n        return l\n\
    \    }\n    l[1] = 3\n    if n == 2 {\n        return l\n    }\n    l[2] = 2\n\
    \    if n == 3 {\n        return l\n    }\n    for i := 3; i <= n; i++ {\n   \
    \     if i%2 == 0 {\n            l[i] = 1 + i/2\n        } else {\n          \
    \  l[i] = l[i-1] + l[i-2] + l[i+1]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp94lcta2o_test.go:45\
    \ +0x15c\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp94lcta2o_test.go:60\
    \ +0xa2\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpcwe1_z3q_test.go:45\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpcwe1_z3q_test.go:60\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073604
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    out := make([]int, n + 1)\n    for i\
    \ := 1; i <= n; i++ {\n        var t int\n        if i == 1 {\n            t =\
    \ 3\n        } else if i & 1 == 0 {\n            t = 1 + i / 2\n        } else\
    \ {\n            t = out[i - 1] + out[i - 2] + out[i + 1]\n        }\n       \
    \ out[i] = t\n    }\n    return out\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpvqhafgzv_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpvqhafgzv_test.go:47 +0xc0c\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Your code here...\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpr1gc0b4__test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpr1gc0b4__test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpr1gc0b4__test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpr1gc0b4__test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpr1gc0b4__test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpr1gc0b4__test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpr1gc0b4__test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpr1gc0b4__test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpr1gc0b4__test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpr1gc0b4__test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    sequence := []int{1, 3, 2}\n    if n\
    \ <= 2 {\n        return sequence[:n + 1]\n    }\n    for i := 3; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            sequence = append(sequence, 1 + i /\
    \ 2)\n        } else {\n            sequence = append(sequence, sequence[i - 1]\
    \ + sequence[i - 2] + sequence[i + 1])\n        }\n    }\n    return sequence\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp7sy7r4m5_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7sy7r4m5_test.go:46 +0x13f1\n\
    testing.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    seq := make([]int, n + 1)\n    seq[0]\
    \ = 1\n    seq[1] = 3\n    seq[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            seq[i] = 1 + i / 2\n        } else {\n        \
    \    seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n        }\n    }\n    return\
    \ seq\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpjz71wyvn_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpjz71wyvn_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{1}\n    case 1:\n        return []int{1, 3}\n    case 2:\n        return\
    \ []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i := 3; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            res = append(res, 1 + i / 2)\n     \
    \   } else {\n            res = append(res, res[i - 1] + res[i - 2] + res[i +\
    \ 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n \
    \ candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpzjbpyf61_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpzjbpyf61_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    result := make([]int, n+1)\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpgosmf5q3_test.go:45\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgosmf5q3_test.go:60\
    \ +0xa2\ntesting.tRunner(0xc00019e1a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    tri := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        tri = append(tri, tri[i - 3] + tri[i - 2] + tri[i\
    \ - 1])\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpmfu798e6_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpmfu798e6_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmfu798e6_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmfu798e6_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmfu798e6_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpmfu798e6_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmfu798e6_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmfu798e6_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    l := make([]int, n + 1)\n    l[0] = 1\n    l[1] = 3\n    l[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        l[i] = l[i - 1] + l[i - 2] + l[i - 3]\n\
    \    }\n    return l\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [2]\
    \ with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with\
    \ length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpku0ugx6h_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpku0ugx6h_test.go:54 +0x2c6\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n + 1)\n    r[0] = 1\n\
    \    r[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n      \
    \      r[i] = 1 + i / 2\n        } else {\n            r[i] = r[i - 1] + r[i -\
    \ 2] + r[i + 1]\n        }\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpxf2o66op_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpxf2o66op_test.go:45 +0x4a5\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var r []int = []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            r = append(r, 1\
    \ + i / 2)\n        } else {\n            r = append(r, r[i - 1] + r[i - 2] +\
    \ r[i + 1])\n        }\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpifr4f4ff_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpifr4f4ff_test.go:43 +0x13e6\n\
    testing.tRunner(0xc000103380, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n\n    rst := make([]int, n + 1)\n    rst[0] = 1\n    rst[1] = 3\n    rst[2]\
    \ = 2\n    rst[3] = 8\n\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0\
    \ {\n            rst[i] = 1 + i / 2\n        } else {\n            rst[i] = rst[i\
    \ - 1] + rst[i - 2] + rst[i + 1]\n        }\n    }\n\n    return rst\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpe20qvlt4_test.go:39\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpe20qvlt4_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a6340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    a := []int{1, 3, 2}\n    if n < 3 {\n        return a[:n+1]\n    }\n    for\
    \ i := 3; i <= n; i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i-3])\n   \
    \ }\n    return a\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpznjelimg_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpznjelimg_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpznjelimg_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpznjelimg_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpznjelimg_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpznjelimg_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpznjelimg_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpznjelimg_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // TODO: return the list of the first\
    \ n + 1 numbers of the Tribonacci sequence.\n    return []int{}\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpmqosrzhi_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpmqosrzhi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmqosrzhi_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmqosrzhi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmqosrzhi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpmqosrzhi_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpmqosrzhi_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpmqosrzhi_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpmqosrzhi_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpmqosrzhi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tif n < 1 {\n\t\treturn []int{1}\n\t}\n\t\
    out := []int{1, 3, 2}\n\tfor i := 3; i <= n; i++ {\n\t\tv := 0\n\t\tif i % 2 ==\
    \ 0 {\n\t\t\tv = 1 + i / 2\n\t\t} else {\n\t\t\tv = out[i - 1] + out[i - 2] +\
    \ out[i - 3]\n\t\t}\n\t\tout = append(out, v)\n\t}\n\treturn out\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp54rsusa5_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp54rsusa5_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp54rsusa5_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp54rsusa5_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp54rsusa5_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp54rsusa5_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp54rsusa5_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp54rsusa5_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    // initialize array to sum of first two elements\n \
    \   tri := make([]int, n + 1)\n    tri[0] = 1\n    tri[1] = 3\n    // compute\
    \ rest\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            tri[i]\
    \ = 1 + i / 2\n        } else {\n            tri[i] = tri[i - 1] + tri[i - 2]\
    \ + tri[i + 1]\n        }\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmptjhx9imm_test.go:43\
    \ +0x175\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmptjhx9imm_test.go:56\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    l := n + 1\n    res := make([]int, l)\n    if l > 0 {\n        res[0] = 1\n\
    \    }\n    if l > 1 {\n        res[1] = 3\n    }\n    if l > 2 {\n        res[2]\
    \ = 2\n    }\n    for i := 3; i < l; i++ {\n        res[i] = res[i - 1] + res[i\
    \ - 2] + res[i - 3]\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpdtn8hb9o_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpdtn8hb9o_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdtn8hb9o_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdtn8hb9o_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpdtn8hb9o_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpdtn8hb9o_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpdtn8hb9o_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdtn8hb9o_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    a, b, c := 1, 3, 2\n    res := []int{1,\
    \ 3, 2}\n    for i := 3; i <= n; i++ {\n        n := a + b + c\n        res =\
    \ append(res, n)\n        a, b, c = b, c, n\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpf3__3ztf_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpf3__3ztf_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpf3__3ztf_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpf3__3ztf_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpf3__3ztf_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpf3__3ztf_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpf3__3ztf_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpf3__3ztf_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    t := []int{1, 3, 2}\n    for i := 2; i < n; i++ {\n        if i % 2 == 0\
    \ {\n            t = append(t, 1 + i / 2)\n        } else {\n            t = append(t,\
    \ t[i - 1] + t[i - 2] + t[i + 1])\n        }\n    }\n    return t\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp5aitdlep_test.go:42\
    \ +0x236\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5aitdlep_test.go:56\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    results := make([]int, n + 1)\n    results[0] = 1\n    results[1] = 3\n \
    \   results[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           results[i] = 1 + i / 2\n        } else {\n            results[i] =\
    \ results[i - 1] + results[i - 2] + results[i + 1]\n        }\n    }\n    return\
    \ results\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpelni16yv_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpelni16yv_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073836
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    ret := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            ret = append(ret, 1 + i / 2)\n        } else {\n   \
    \         ret = append(ret, ret[i - 1] + ret[i - 2] + ret[i + 1])\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp6pkdhdhb_test.go:42\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6pkdhdhb_test.go:56\
    \ +0x73\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073604
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    seq := make([]int, n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq[i] =\
    \ 1 + i / 2\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2] +\
    \ seq[i + 1]\n        }\n    }\n    return seq\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpn1bwlc48_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpn1bwlc48_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri []int\n    for i := 0; i <= n;\
    \ i++ {\n        if i == 0 {\n            tri = append(tri, 1)\n        } else\
    \ if i == 1 {\n            tri = append(tri, 3)\n        } else if i == 2 {\n\
    \            tri = append(tri, 2)\n        } else if i % 2 == 0 {\n          \
    \  tri = append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri,\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpinto5jx4_test.go:36\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpinto5jx4_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tvar result []int\n\tresult = append(result,\
    \ 1)\n\tfor i := 1; i <= n; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tresult = append(result,\
    \ i/2)\n\t\t} else {\n\t\t\tresult = append(result, result[i-2] + result[i-1]\
    \ + result[i+1])\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpbcpt7g4x_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbcpt7g4x_test.go:44 +0x139c\n\
    testing.tRunner(0xc000103520, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    result := make([]int, n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp1xhggw28_test.go:40\
    \ +0x1b5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1xhggw28_test.go:53\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    for i\
    \ := 0; i <= n; i++ {\n        if i <= 2 {\n            res[i] = 1\n        }\
    \ else {\n            res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n        }\n\
    \    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpfb5m3oe2_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpfb5m3oe2_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpfb5m3oe2_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=9)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpfb5m3oe2_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=17)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpfb5m3oe2_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=17) %!s(int=31)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpfb5m3oe2_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=17) %!s(int=31)\
    \ %!s(int=57)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpfb5m3oe2_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=17) %!s(int=31) %!s(int=57)\
    \ %!s(int=105)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpfb5m3oe2_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int="
  timestamp: 1660073838
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 2}\n    }\n    res := []int{1, 3, 2}\n    for i := 3; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 + i /\
    \ 2)\n        } else {\n            res = append(res, res[i - 1] + res[i - 2]\
    \ + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp6kfx31qq_test.go:39\
    \ +0x1f2\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6kfx31qq_test.go:52\
    \ +0x46\ntesting.tRunner(0xc0001a6340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmpp9b9928b_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmpp9b9928b_test.go:50: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n\
    \        tmpp9b9928b_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpp9b9928b_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpp9b9928b_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestTri/test_num__8 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestTri/test_num__9 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    res := make([]int, n + 1)\n    if n == 0 {\n        return res\n    }\n \
    \   res[0] = 1\n    if n == 1 {\n        return res\n    }\n    res[1] = 3\n \
    \   if n == 2 {\n        return res\n    }\n    res[2] = 2\n    for i := 3; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n     \
    \   } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n    \
    \    }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp6wt92xuw_test.go:45\
    \ +0x15c\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6wt92xuw_test.go:58\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var list []int\n    for i := 0; i <=\
    \ n; i++ {\n        if i == 0 {\n            list = append(list, 1)\n        }\
    \ else if i == 1 {\n            list = append(list, 3)\n        } else if i ==\
    \ 2 {\n            list = append(list, 2)\n        } else if i % 2 == 0 {\n  \
    \          list = append(list, 1 + i / 2)\n        } else {\n            list\
    \ = append(list, list[i - 1] + list[i - 2] + list[i + 1])\n        }\n    }\n\
    \    return list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp4d4dw7yi_test.go:36\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4d4dw7yi_test.go:49\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    var ret = make([]int,\
    \ n+1)\n    ret[0] = 1\n    ret[1] = 3\n    ret[2] = 2\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            ret[i] = 1 + i / 2\n        } else\
    \ {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1]\n        }\n    }\n \
    \   return ret\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpq1kqpakg_test.go:39\
    \ +0x155\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpq1kqpakg_test.go:52\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var a, b, c, tmp int = 3, 2, 1, 0\n \
    \   ret := make([]int, n+1)\n    for i := 0; i <= n; i++ {\n        if i == 0\
    \ {\n            ret[i] = a\n        } else if i == 1 {\n            ret[i] =\
    \ b\n        } else if i == 2 {\n            ret[i] = c\n        } else {\n  \
    \          if i % 2 == 0 {\n                tmp = 1 + i / 2\n            } else\
    \ {\n                tmp = a + b + c\n            }\n            a = b\n     \
    \       b = c\n            c = tmp\n            ret[i] = tmp\n        }\n    }\n\
    \    return ret\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmppixqy65j_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmppixqy65j_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmppixqy65j_test.go:71: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6) %!s(int=3) %!s(int=10)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmppixqy65j_test.go:71: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmppixqy65j_test.go:71: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=6) %!s(int=3)\
    \ %!s(int=10) %!s(int=4) %!s(int=17)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmppixqy65j_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=4) %!s(int=17)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmppixqy65j_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=4) %!s(int=17) %!s(int=5)\
    \ %!s(int=26)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmppixqy65j_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        result := []int{1, 3, 2}\n\
    \        i := 3\n        for ; i <= n; i++ {\n            if i % 2 == 0 {\n  \
    \              result = append(result, 1 + i / 2)\n            } else {\n    \
    \            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n            }\n        }\n        return result\n    }\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpnbubftpo_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnbubftpo_test.go:52\
    \ +0x46\ntesting.tRunner(0xc000103380, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        r := tri(n - 1)\n      \
    \  if n % 2 == 0 {\n            r = append(r, 1 + n / 2)\n        } else {\n \
    \           r = append(r, r[n - 1] + r[n - 2] + r[n + 1])\n        }\n       \
    \ return r\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpaeisf6h8_test.go:36\
    \ +0x1b6\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpaeisf6h8_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n\n    res := make([]int, n + 1)\n    if n == 1 {\n        res[0] = 1\n\
    \        res[1] = 3\n        return res\n    }\n\n    res[0] = 1\n    res[1] =\
    \ 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2]\
    \ + res[i + 1]\n        }\n    }\n\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp71o43bzi_test.go:42\
    \ +0x155\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp71o43bzi_test.go:56\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{1, 3, 2}\n    for i := 3;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            tri = append(tri, 1 + i\
    \ / 2)\n        } else {\n            tri = append(tri, tri[i - 1] + tri[i - 2]\
    \ + tri[i + 1])\n        }\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpzneosw2n_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpzneosw2n_test.go:43 +0x13e6\n\
    testing.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    arr := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        arr = append(arr, nextTri(arr))\n    }\n    return\
    \ arr\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpweqtgott_test.go:36:27: undefined: nextTri

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = 1 + i / 2\n        } else {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp261r3c4r_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp261r3c4r_test.go:44 +0xd06\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri []int\n    if n == 0 {\n    \
    \    return tri\n    }\n    tri = make([]int, n + 1)\n    tri[0] = 1\n    tri[1]\
    \ = 3\n    tri[2] = 2\n    var i int\n    for i = 3; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            tri[i] = 1 + i / 2\n        } else {\n           \
    \ tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        }\n    }\n    return\
    \ tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpu970fq_m_test.go:38\
    \ +0x115\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpu970fq_m_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001036c0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tif n == 0 {\n\t\treturn []int{1}\n\t} else\
    \ if n == 1 {\n\t\treturn []int{1, 3}\n\t} else if n == 2 {\n\t\treturn []int{1,\
    \ 3, 2}\n\t}\n\tseq := []int{1, 3, 2}\n\tfor n > 2 {\n\t\tseq = append(seq, seq[len(seq)\
    \ - 1] + seq[len(seq) - 2] + seq[len(seq) - 3])\n\t\tn--\n\t}\n\treturn seq\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpmr5dfdh1_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpmr5dfdh1_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmr5dfdh1_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmr5dfdh1_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmr5dfdh1_test.go:62: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpmr5dfdh1_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmr5dfdh1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmr5dfdh1_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    rs := make([]int, n + 1)\n    for i :=\
    \ 1; i <= n; i++ {\n        if i == 1 {\n            rs[1] = 3\n        } else\
    \ if i == 2 {\n            rs[2] = 2\n        } else if i == 3 {\n           \
    \ rs[3] = 8\n        } else if i % 2 == 0 {\n            rs[i] = 1 + i / 2\n \
    \       } else {\n            rs[i] = rs[i - 1] + rs[i - 2] + rs[i - 3]\n    \
    \    }\n    }\n    return rs\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmplv8fbnsg_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmplv8fbnsg_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplv8fbnsg_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplv8fbnsg_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplv8fbnsg_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)\
    \ %!s(int=13) %!s(int=4) %!s(int=20)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmplv8fbnsg_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4) %!s(int=20)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplv8fbnsg_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13) %!s(int=4) %!s(int=20) %!s(int=5)\
    \ %!s(int=29)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplv8fbnsg_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    result := make([]int, n + 1)\n    if n > 0 {\n        result[0] = 1\n   \
    \ }\n    if n > 1 {\n        result[1] = 3\n    }\n    if n > 2 {\n        result[2]\
    \ = 2\n    }\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n       \
    \     result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpqw6ljvzz_test.go:42\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpqw6ljvzz_test.go:55\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    var seq []int\n    seq = append(seq, 1, 3, 2)\n    for i := 4; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, 1 + i / 2)\n\
    \        } else {\n            seq = append(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ - 3])\n        }\n    }\n    return seq\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp6s9mtaew_test.go:43\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp6s9mtaew_test.go:58\
    \ +0xa2\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    result := make([]int, n + 1)\n    result[0] = 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n  \
    \      } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpn2yb95i3_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpn2yb95i3_test.go:47 +0xcd3\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var ret []int\n    if n == 0 {\n    \
    \    return ret\n    }\n    ret = append(ret, 1)\n    if n == 1 {\n        return\
    \ ret\n    }\n    ret = append(ret, 3)\n    if n == 2 {\n        return ret\n\
    \    }\n    ret = append(ret, 2)\n    if n == 3 {\n        return ret\n    }\n\
    \    for i := 3; i < n; i++ {\n        val := ret[i - 3] + ret[i - 2] + ret[i\
    \ - 1]\n        ret = append(ret, val)\n    }\n    return ret\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpbfq65y8m_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n   \
    \ --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpbfq65y8m_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66) %!s(int=121)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n    \
    \    tmpbfq65y8m_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=1"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{1}\n\
    \    }\n    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpqh6_oin7_test.go:36\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpqh6_oin7_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    triList := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            newVal := 1 + i /\
    \ 2\n            triList = append(triList, newVal)\n        } else {\n       \
    \     if i == 3 {\n                newVal := triList[i - 1] + triList[i - 2] +\
    \ triList[i + 1]\n                triList = append(triList, newVal)\n        \
    \    } else {\n                newVal := triList[i - 1] + triList[i - 2] + triList[i\
    \ - 3]\n                triList = append(triList, newVal)\n            }\n   \
    \     }\n    }\n    return triList\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp1z8ras2__test.go:32\
    \ +0x210\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp1z8ras2__test.go:50\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    t := []int{1, 3, 2}\n    for i := 3;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            t = append(t, 1 + i / 2)\n\
    \        } else {\n            t = append(t, t[i - 1] + t[i - 2] + t[i + 1])\n\
    \        }\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmps0yfdjqo_test.go:39\
    \ +0x216\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmps0yfdjqo_test.go:52\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, 0)\n    if n == 0\
    \ {\n        return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n  \
    \      return res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return\
    \ res\n    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n\
    \    }\n    for i := 4; i <= n; i++ {\n        res = append(res, res[i - 2] +\
    \ res[i - 3] + res[i - 4])\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpc6a_u90u_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n   \
    \ --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpc6a_u90u_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66) %!s(int=121)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n    \
    \    tmpc6a_u90u_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=1"
  timestamp: 1660073840
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\t// Write your code here\n    if n < 0 {\n\
    \        return nil\n    }\n    res := make([]int, n + 1)\n    res[0] = 1\n  \
    \  res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            res[i] = 1 + i / 2\n        } else {\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpmw_mb1mn_test.go:37\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmw_mb1mn_test.go:50 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // your code here\n    return []int{1,\
    \ 2, 3}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmpxbnaadky_test.go:51: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n       \
    \ tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxbnaadky_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__5\
    \ (0.00s)\n        tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n       \
    \ tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got\
    \ '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n\
    \        tmpxbnaadky_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpxbnaadky_test.go:51: expected\
    \ '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__9\
    \ (0.00s)\n        tmpxbnaadk"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, 0)\n    if n == 0\
    \ {\n        return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n  \
    \      return res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return\
    \ res\n    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n\
    \    }\n    for i := 4; i <= n; i++ {\n        res = append(res, res[i - 1] +\
    \ res[i - 2] + res[i - 3])\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp_ftg1ue2_test.go:42\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp_ftg1ue2_test.go:55 +0x1388\n\
    testing.tRunner(0xc000120340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    result := []int{1, 3, 2}\n    for i := 3;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpwzchyfhk_test.go:39\
    \ +0x1f2\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpwzchyfhk_test.go:52\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var a int = 1\n    var b int = 3\n  \
    \  var c int = 2\n    var temp int\n    res := []int{a, b, c}\n    for i := 4;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            temp = 1 + i / 2\n     \
    \   } else {\n            temp = a + b + c\n        }\n        a = b\n       \
    \ b = c\n        c = temp\n        res = append(res, temp)\n    }\n    return\
    \ res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp8hsxuhuc_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=15)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmp8hsxuhuc_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)\
    \ %!s(int=8) %!s(int=4) %!s(int=15) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=15)\
    \ %!s(int=5) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmp8hsxuhuc_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '["
  timestamp: 1660073842
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    var out []int\n    for i := 1; i <= n + 1; i++ {\n        t := tri0(i)\n\
    \        out = append(out, t)\n    }\n    return out\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpde1qovx8_test.go:30:14: undefined: tri0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // YOUR CODE HERE\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpp8zui86h_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpp8zui86h_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpp8zui86h_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpp8zui86h_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpp8zui86h_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpp8zui86h_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpp8zui86h_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpp8zui86h_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpp8zui86h_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpp8zui86h_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tret := make([]int, n + 1)\n\tret[0] = 1\n\
    \tret[1] = 3\n\tret[2] = 2\n\tfor i := 3; i <= n; i++ {\n\t\tif i % 2 == 0 {\n\
    \t\t\tret[i] = 1 + i / 2\n\t\t} else {\n\t\t\tret[i] = ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1]\n\t\t}\n\t}\n\treturn ret\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmptrtc3lzx_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmptrtc3lzx_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    dp := make([]int, n + 1)\n    dp[0] = 1\n    dp[1] = 3\n    dp[2] = 2\n \
    \   for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            dp[i] = 1\
    \ + i / 2\n        } else {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i\
    \ + 1]\n        }\n    }\n    return dp\n}\n\nfunc TestTri(t *testing.T) {\n \
    \ candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpdde4cpm0_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdde4cpm0_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    s := make([]int, n+1)\n    for i := 1;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            s[i] = 1 + i / 2\n     \
    \   } else {\n            s[i] = s[i-1] + s[i-2] + s[i+1]\n        }\n    }\n\
    \    return s\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpiwb47wy3_test.go:30\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpiwb47wy3_test.go:43 +0xcc6\n\
    testing.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\treturn nil\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp25sclu1e_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp25sclu1e_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp25sclu1e_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp25sclu1e_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp25sclu1e_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp25sclu1e_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp25sclu1e_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp25sclu1e_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp25sclu1e_test.go:50: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp25sclu1e_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n + 1)\n    if\
    \ n > 0 {\n        result[0] = 1\n    }\n    if n > 1 {\n        result[1] = 3\n\
    \    }\n    if n > 2 {\n        result[2] = 2\n    }\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        }\
    \ else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpl04fdyvu_test.go:39\
    \ +0x11c\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpl04fdyvu_test.go:52\
    \ +0x46\ntesting.tRunner(0xc000103520, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    res := make([]int, n + 1)\n    res[0] = 1\n    for i := 1; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else\
    \ {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp2wd6fqpt_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp2wd6fqpt_test.go:47 +0xd06\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, 0)\n    for i := 1;\
    \ i <= n + 1; i++ {\n        res = append(res, fib(i))\n    }\n    return res\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudac4h8n_test.go:27:27: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return nil\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // TODO(sdu): your code here.\n    return\
    \ []int{}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp4m41_a_o_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp4m41_a_o_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4m41_a_o_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp4m41_a_o_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp4m41_a_o_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp4m41_a_o_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp4m41_a_o_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp4m41_a_o_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp4m41_a_o_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp4m41_a_o_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tri := []int{3, 2, 1}\n    if n == 0\
    \ {\n        return []int{}\n    } else if n == 1 {\n        return []int{3}\n\
    \    } else if n == 2 {\n        return []int{3, 2}\n    } else if n == 3 {\n\
    \        return []int{3, 2, 1}\n    }\n    for i := 4; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            tri = append(tri, 1 + i / 2)\n        } else {\n\
    \            tri = append(tri, tri[i - 4] + tri[i - 3] + tri[i - 2])\n       \
    \ }\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp61747o8g_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=13)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmp61747o8g_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=13) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=13)\
    \ %!s(int=5) %!s(int=22)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmp61747o8g_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '["
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var a []int\n    for i := 0; i <= n;\
    \ i++ {\n        if i == 0 {\n            a = append(a, 1)\n        } else if\
    \ i == 1 {\n            a = append(a, 3)\n        } else if i == 2 {\n       \
    \     a = append(a, 2)\n        } else if i % 2 == 0 {\n            a = append(a,\
    \ 1 + i / 2)\n        } else {\n            a = append(a, a[i - 1] + a[i - 2]\
    \ + a[i + 1])\n        }\n    }\n    return a\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmps7mrd8xe_test.go:36\
    \ +0x233\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmps7mrd8xe_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    slice :=\
    \ make([]int, n+1)\n    if n == 0 {\n        return []int{}\n    } else if n ==\
    \ 1 {\n        return []int{1}\n    } else if n == 2 {\n        return []int{1,\
    \ 3}\n    }\n    slice[0] = 1\n    slice[1] = 3\n    slice[2] = 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            slice[i] = 1 + i / 2\n\
    \        } else {\n            slice[i] = slice[i-1] + slice[i-2] + slice[i+1]\n\
    \        }\n    }\n    return slice\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmponu86iu3_test.go:41\
    \ +0x18d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmponu86iu3_test.go:54\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var t [3]int\n    t[0] = 1\n    t[1]\
    \ = 3\n    t[2] = 2\n    var result []int\n    if n == 0 {\n        return result\n\
    \    }\n    result = append(result, t[1])\n    for i := 0; i < n; i++ {\n    \
    \    if i % 2 == 0 {\n            result = append(result, t[0] + (i / 2))\n  \
    \      } else {\n            result = append(result, t[0] + t[1] + t[2])\n   \
    \         t[0] = t[1]\n            t[1] = t[2]\n            t[2] = result[i +\
    \ 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp05lyqhey_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp05lyqhey_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp05lyqhey_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=11) %!s(int=4)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp05lyqhey_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=11) %!s(int=4) %!s(int=19)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp05lyqhey_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=3) %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=11)\
    \ %!s(int=4) %!s(int=19) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp05lyqhey_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=3)\
    \ %!s(int=1) %!s(int=6) %!s(int=4) %!s(int=11) %!s(int=4) %!s(int=19) %!s(int=9)\
    \ %!s(int=36)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp05lyqhey_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=3) %!s(int=1)\
    \ %!s(int=6) %!s(int=4) %!s(int=11) %!s(int=4) %!s(int=19) %!s(int=9) %!s(int=36)\
    \ %!s(int=15)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp05lyqhey_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(in"
  timestamp: 1660073842
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 2}\n    }\n    a, b, c := 1, 3, 2\n    array := []int{a,\
    \ b, c}\n    for i := 3; i <= n; i++ {\n        d := a + b + c\n        a = b\n\
    \        b = c\n        c = d\n        array = append(array, d)\n    }\n    return\
    \ array\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp6lx9zbu8_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp6lx9zbu8_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6lx9zbu8_test.go:68: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6lx9zbu8_test.go:68: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6lx9zbu8_test.go:68: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp6lx9zbu8_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp6lx9zbu8_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp6lx9zbu8_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073843
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var f []int\n    if n > 0 {\n       \
    \ f = make([]int, n + 1)\n        f[0] = 1\n        f[1] = 3\n        for i :=\
    \ 2; i <= n; i++ {\n            if i % 2 == 0 {\n                f[i] = 1 + i\
    \ / 2\n            } else {\n                f[i] = f[i - 1] + f[i - 2] + f[i\
    \ + 1]\n            }\n        }\n    } else {\n        f = make([]int, 1)\n \
    \       f[0] = 1\n    }\n    return f\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpefu_105f_test.go:34\
    \ +0x116\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpefu_105f_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    f, s, t := 1, 3, 2\n    triList := []int{f,\
    \ s, t}\n    for i := 0; i < n; i++ {\n        if (i+1) % 2 == 0 {\n         \
    \   f = 1 + (i+1) / 2\n        } else {\n            f = triList[i-1] + triList[i-2]\
    \ + triList[i+1]\n        }\n        triList = append(triList, f)\n    }\n   \
    \ return triList\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513a40, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpdmmcjpd6_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdmmcjpd6_test.go:45 +0x12d3\n\
    testing.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    ret := make([]int, n + 1)\n    ret[0]\
    \ = 1\n    ret[1] = 3\n    ret[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            ret[i] = 1 + i / 2\n        } else {\n        \
    \    ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1]\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp5a_he72r_test.go:42\
    \ +0x1b5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5a_he72r_test.go:55\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n < 1 {\n  \
    \      return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n\
    \        return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 4; i <= n; i++ {\n        var t int\n\
    \        if i % 2 == 0 {\n            t = 1 + i / 2\n        } else {\n      \
    \      t = result[i - 1] + result[i - 2] + result[i - 3]\n        }\n        result\
    \ = append(result, t)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpdkq7b5ik_test.go:46\
    \ +0x205\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdkq7b5ik_test.go:62\
    \ +0xa2\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n\n    res := make([]int, n +\
    \ 1)\n    res[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpevzn_p0h_test.go:38\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpevzn_p0h_test.go:51 +0xd06\n\
    testing.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n+1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1]\n        }\n\
    \    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp5w8s1usm_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp5w8s1usm_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001036c0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    if n >\
    \ 0 {\n        res[0] = 1\n    }\n    if n > 1 {\n        res[1] = 3\n    }\n\
    \    if n > 2 {\n        res[2] = 2\n    }\n    for i := 3; i <= n; i++ {\n  \
    \      res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n    }\n    return res\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpsxvqcjx2_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpsxvqcjx2_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpsxvqcjx2_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpsxvqcjx2_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpsxvqcjx2_test.go:63: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpsxvqcjx2_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpsxvqcjx2_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpsxvqcjx2_test.go:63:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp76k3ohtk_test.go:39\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp76k3ohtk_test.go:52\
    \ +0x46\ntesting.tRunner(0xc000199040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073604
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    m := make(map[int]int)\n    m[1] = 3\n\
    \    r := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n        r[i] = tri_compute(i,\
    \ m)\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1se9cj5v_test.go:29:16: undefined: tri_compute

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        result := []int{1, 3, 2}\n\
    \        for i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n            \
    \    result = append(result, 1 + i / 2)\n            } else {\n              \
    \  result = append(result, result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \          }\n        }\n        return result\n    }\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmphkr33bpe_test.go:37\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmphkr33bpe_test.go:51\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073604
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    res := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n          \
    \  res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n\
    \    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp03u96gtm_test.go:42\
    \ +0x236\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp03u96gtm_test.go:55\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073604
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{}\n    case 1:\n        return []int{1}\n    case 2:\n        return []int{1,\
    \ 3}\n    case 3:\n        return []int{1, 3, 2}\n    }\n    triResult := []int{1,\
    \ 3, 2}\n    for i := 3; i < n; i++ {\n        var tri int\n        if i % 2 ==\
    \ 0 {\n            tri = 1 + i / 2\n        } else {\n            tri = triResult[i\
    \ - 1] + triResult[i - 2] + triResult[i - 3]\n        }\n        triResult = append(triResult,\
    \ tri)\n    }\n    return triResult\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplf857ry7_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmplf857ry7_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=18) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmplf857ry7_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got "
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = 1 + i / 2\n        } else {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp7rsuub4o_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7rsuub4o_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, n + 1)\n    if\
    \ n == 0 {\n        return result\n    }\n    result[0] = 1\n    result[1] = 3\n\
    \    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpm60fmsw9_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpm60fmsw9_test.go:49 +0x4c5\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    result := []int{1,\
    \ 3, 2}\n    var temp int\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            temp = 1 + i / 2\n        } else {\n            temp = result[i\
    \ - 1] + result[i - 2] + result[i - 3]\n        }\n        result = append(result,\
    \ temp)\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpswuzbh8b_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpswuzbh8b_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpswuzbh8b_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpswuzbh8b_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpswuzbh8b_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpswuzbh8b_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpswuzbh8b_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpswuzbh8b_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n\
    \        } else {\n            res[i] = 1 + i / 2\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp0azmm91o_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp0azmm91o_test.go:54 +0x3d9\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    a := 1\n    b := 3\n    c := 2\n    res := []int{1, 3, 2}\n    for\
    \ i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            x := 1 + i / 2\n\
    \            res = append(res, x)\n        } else {\n            x := a + b +\
    \ c\n            res = append(res, x)\n            a = b\n            b = c\n\
    \            c = x\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmppps6lgvf_test.go:78: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=11)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmppps6lgvf_test.go:78: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=4) %!s(int=11) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=11)\
    \ %!s(int=5) %!s(int=19)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmppps6lgvf_test.go:78: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got '["
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    // To print\
    \ results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return nil\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp1_1oofz6_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp1_1oofz6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp1_1oofz6_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp1_1oofz6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp1_1oofz6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp1_1oofz6_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp1_1oofz6_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp1_1oofz6_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp1_1oofz6_test.go:53: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp1_1oofz6_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    slice := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        slice\
    \ = append(slice, slice[i - 1] + slice[i - 2] + slice[i - 3])\n    }\n    return\
    \ slice\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpn1yc008i_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n   \
    \ --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpn1yc008i_test.go:66: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66) %!s(int=121)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n    \
    \    tmpn1yc008i_test.go:66: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=1"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        rs := []int{1, 3, 2}\n \
    \       var i int\n        for i = 3; i <= n; i++ {\n            if i % 2 == 0\
    \ {\n                rs = append(rs, 1 + i / 2)\n            } else {\n      \
    \          rs = append(rs, rs[i - 1] + rs[i - 2] + rs[i + 1])\n            }\n\
    \        }\n        return rs\n    }\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpq9q2vfdl_test.go:38\
    \ +0x212\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpq9q2vfdl_test.go:52\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n\n    if n == 1 {\n        return []int{1}\n    }\n\n    a := 1\n    b\
    \ := 3\n    c := 2\n    res := []int{a, b, c}\n    for n > 2 {\n        a, b,\
    \ c = b, c, a + b + c\n        res = append(res, c)\n        n--\n    }\n    return\
    \ res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpaxx6wu51_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpaxx6wu51_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpaxx6wu51_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n  \
    \  --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpaxx6wu51_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpaxx6wu51_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpaxx6wu51_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpaxx6wu51_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)\
    \ %!s(int=223)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpaxx6wu51_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n        \
    \    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpy95hqofo_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpy95hqofo_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073830
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    ret := make([]int, n + 1)\n    if n ==\
    \ 0 {\n        return ret\n    }\n\n    ret[0] = 1\n    if n == 1 {\n        return\
    \ ret\n    }\n\n    ret[1] = 3\n    if n == 2 {\n        return ret\n    }\n\n\
    \    for i := 2; i < n; i++ {\n        if i % 2 == 0 {\n            ret[i] = 1\
    \ + i / 2\n        } else {\n            ret[i] = ret[i - 1] + ret[i - 2] + ret[i\
    \ + 1]\n        }\n    }\n\n    return ret\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpo73txja9_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpo73txja9_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpo73txja9_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpo73txja9_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=8) %!s(int=0)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpo73txja9_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3)\
    \ %!s(int=8) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpo73txja9_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=12)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpo73txja9_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=12) %!s(int=5)\
    \ %!s(int=0)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpo73txja9_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(in"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    //TODO:\n    return []int{}\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpfdgtkwdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpfdgtkwdw_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpfdgtkwdw_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpfdgtkwdw_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpfdgtkwdw_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpfdgtkwdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpfdgtkwdw_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpfdgtkwdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpfdgtkwdw_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpfdgtkwdw_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Implement the Tribonacci sequence\
    \ here.\n    r := make([]int, n + 1)\n    if n == 0 {\n        return r\n    }\n\
    \    r[0] = 1\n    r[1] = 3\n    r[2] = 2\n    for i := 3; i <= n; i++ {\n   \
    \     if i % 2 == 0 {\n            r[i] = 1 + i / 2\n        } else {\n      \
    \      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n        }\n    }\n    return r\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpnethhmeg_test.go:37\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnethhmeg_test.go:50 +0x4c5\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    list := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            list = append(list, (1 + i / 2))\n        } else {\n\
    \            list = append(list, (list[i - 1] + list[i - 2] + list[i + 1]))\n\
    \        }\n    }\n    return list\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000162030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000162030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp_pi8ph8z_test.go:42\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp_pi8ph8z_test.go:56\
    \ +0x73\ntesting.tRunner(0xc000103860, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073845
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var res []int\n    for i := 0; i <= n;\
    \ i++ {\n        res = append(res, tri_cal(i))\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqau66ebp_test.go:27:27: undefined: tri_cal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073845
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n + 1)\n    r[0] = 1\n\
    \    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            r[i] = 1\
    \ + i / 2\n        } else {\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\
    \        }\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp0pn6fsss_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp0pn6fsss_test.go:44 +0xd06\n\
    testing.tRunner(0xc000103380, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var seq []int\n    if n == 0 {\n    \
    \    return seq\n    }\n    seq = append(seq, 3)\n    if n == 1 {\n        return\
    \ seq\n    }\n    for i := 1; i < n; i++ {\n        var val int\n        if i%2\
    \ == 0 {\n            val = 1 + i/2\n        } else {\n            val = seq[i-1]\
    \ + seq[i-2] + seq[i-3]\n        }\n        seq = append(seq, val)\n    }\n  \
    \  return seq\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp4dauybn0_test.go:38\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4dauybn0_test.go:52 +0x10ce\n\
    testing.tRunner(0xc0001991e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    seq := make([]int, 0)\n    seq = append(seq,\
    \ 1)\n    seq = append(seq, 3)\n    seq = append(seq, 2)\n    if n < 3 {\n   \
    \     return seq[:n+1]\n    }\n    for i := 3; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            seq = append(seq, 1 + i / 2)\n        } else {\n       \
    \     seq = append(seq, seq[i-1] + seq[i-2] + seq[i+1])\n        }\n    }\n  \
    \  return seq\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpdejbprog_test.go:36\
    \ +0x1fd\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdejbprog_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073846
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{1}\n    case 1:\n        return []int{1, 3}\n    case 2:\n        return\
    \ []int{1, 3, 2}\n    default:\n        result := []int{1, 3, 2}\n        for\
    \ i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n                result =\
    \ append(result, result[i - 1] / 2 + 1)\n            } else {\n              \
    \  result = append(result, result[i - 1] + result[i - 2] + result[i - 3])\n  \
    \          }\n        }\n        return result\n    }\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpp8x7aoq3_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpp8x7aoq3_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpp8x7aoq3_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=12)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpp8x7aoq3_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=12) %!s(int=7)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpp8x7aoq3_test.go:67: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=4)\
    \ %!s(int=12) %!s(int=7) %!s(int=23)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpp8x7aoq3_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=12) %!s(int=7) %!s(int=23)\
    \ %!s(int=12)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpp8x7aoq3_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=4) %!s(int=12) %!s(int=7) %!s(int=23) %!s(int=12)\
    \ %!s(int=42)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpp8x7aoq3_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int="
  timestamp: 1660073846
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    var tri []int\n\
    \    for i := 0; i <= n; i++ {\n        if i == 1 {\n            tri = append(tri,\
    \ 1)\n            tri = append(tri, 3)\n        } else if i == 2 {\n         \
    \   tri = append(tri, 2)\n        } else if i % 2 == 0 {\n            tri = append(tri,\
    \ 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i - 1] + tri[i\
    \ - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp2v60pegj_test.go:41\
    \ +0x285\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp2v60pegj_test.go:54\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    t := make([]int, n + 1)\n    t[0] = 1\n    t[1] = 3\n    t[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            t[i] = t[i\
    \ - 1]\n        } else {\n            t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n\
    \        }\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpppu7q9ok_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpppu7q9ok_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpppu7q9ok_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=6) %!s(int=14)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpppu7q9ok_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=6) %!s(int=14) %!s(int=14)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpppu7q9ok_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=6)\
    \ %!s(int=14) %!s(int=14) %!s(int=34)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpppu7q9ok_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=6) %!s(int=14) %!s(int=14) %!s(int=34)\
    \ %!s(int=34)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpppu7q9ok_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=6) %!s(int=14) %!s(int=14) %!s(int=34) %!s(int=34)\
    \ %!s(int=82)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpppu7q9ok_test.go:73:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s("
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = 1 + i / 2\n        } else {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp7rsuub4o_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7rsuub4o_test.go:49 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    t := []int{1, 3, 2}\n    if n <= 2 {\n\
    \        return t[:n+1]\n    }\n\n    for i := 3; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            t = append(t, 1 + i / 2)\n        } else {\n       \
    \     t = append(t, t[i-1] + t[i-2] + t[i+1])\n        }\n    }\n    return t\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp_3djiofl_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp_3djiofl_test.go:47 +0x13f1\n\
    testing.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return nil\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var res []int\n    if n < 0 {\n     \
    \   return res\n    }\n    //\n    if n == 0 {\n        res = append(res, 1)\n\
    \        return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n      \
    \  return res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return\
    \ res\n    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n\
    \    }\n    //\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n     \
    \       res = append(res, i / 2)\n        } else {\n            res = append(res,\
    \ res[i - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\
    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpx4kpqjcz_test.go:51\
    \ +0x273\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpx4kpqjcz_test.go:66\
    \ +0xa2\ntesting.tRunner(0xc0001164e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    result := make([]int,\
    \ n + 1)\n    result[0] = 1\n    result[1] = 3\n    for i := 2; i <= n; i++ {\n\
    \        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpaerq9ior_test.go:38\
    \ +0x155\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpaerq9ior_test.go:51\
    \ +0x46\ntesting.tRunner(0xc000192680, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    val1, val2, val3 := 1, 3, 2\n    result\
    \ := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        val := 0\n       \
    \ if i % 2 == 0 {\n            val = 1 + i / 2\n        } else {\n           \
    \ val = val1 + val2 + val3\n        }\n        result = append(result, val)\n\
    \        val1, val2, val3 = val2, val3, val\n    }\n    return result\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp49wwxfy3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp49wwxfy3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp49wwxfy3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp49wwxfy3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp49wwxfy3_test.go:69: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp49wwxfy3_test.go:69: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp49wwxfy3_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp49wwxfy3_test.go:69:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tif n == 0 {\n\t\treturn []int{}\n\t}\n\t\
    if n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1, 3}\n\
    \t}\n\t\n\tl := n + 1\n\tr := make([]int, l)\n\tr[0] = 1\n\tr[1] = 3\n\tr[2] =\
    \ 2\n\t\n\tfor i := 3; i < l; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tr[i] = 1 + i /\
    \ 2\n\t\t} else {\n\t\t\tr[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\t\t}\n\t}\n\t\
    \n\treturn r\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x450700?)\n\t/tmp/tmpgj02x0zk_test.go:45\
    \ +0x15b\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgj02x0zk_test.go:59\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    tris := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            tris = append(tris, 1\
    \ + i / 2)\n        } else {\n            tri := tris[i - 3] + tris[i - 2] + tris[i\
    \ - 1]\n            tris = append(tris, tri)\n        }\n    }\n    return tris\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpgt613_dx_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpgt613_dx_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgt613_dx_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgt613_dx_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgt613_dx_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)\
    \ %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpgt613_dx_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)\
    \ %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgt613_dx_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18) %!s(int=5)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgt613_dx_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8)"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    switch n {\n    case 0:\n        return\
    \ []int{}\n    case 1:\n        return []int{1}\n    case 2:\n        return []int{1,\
    \ 3}\n    case 3:\n        return []int{1, 3, 2}\n    }\n    r := []int{1, 3,\
    \ 2}\n    for n > 3 {\n        r = append(r, r[len(r) - 1] + r[len(r) - 2] + r[len(r)\
    \ - 3])\n        n--\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdkzls_wr_test.go:65: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n   \
    \ --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpdkzls_wr_test.go:65: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66) %!s(int=121)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n    \
    \    tmpdkzls_wr_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=1"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri = []int{}\n    for i := 0; i\
    \ <= n; i++ {\n        if i <= 1 {\n            tri = append(tri, 1)\n       \
    \ } else if i == 2 {\n            tri = append(tri, 3)\n        } else if i %\
    \ 2 == 0 {\n            tri = append(tri, 1 + i / 2)\n        } else {\n     \
    \       tri = append(tri, tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n \
    \   }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5149e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5149e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpt9xglhs2_test.go:34\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpt9xglhs2_test.go:47 +0x2473\n\
    testing.tRunner(0xc0001924e0, 0x52a2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    a := make([]int, n+1)\n    a[0] = 1\n\
    \    a[1] = 3\n    a[2] = 2\n    for i := 3; i <= n; i++ {\n        a[i] = a[i-1]\
    \ + a[i-2] + a[i-3]\n    }\n    return a\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpceym8uts_test.go:27\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpceym8uts_test.go:50 +0x2be\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    a, b, c := 0, 1, 3\n    res := []int{a, b, c}\n    for i := 1; i <\
    \ n; i++ {\n        d := a + b + c\n        a, b, c = b, c, d\n        res = append(res,\
    \ d)\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp8do_i6fi_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=8)]'\n    --- FAIL:\
    \ TestTri/test_num__1 (0.00s)\n        tmp8do_i6fi_test.go:60: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n\
    \        tmp8do_i6fi_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=8) %!s(int=15) %!s(int=27)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n\
    \        tmp8do_i6fi_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=15) %!s(int=27) %!s(int=50)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmp8do_i6fi_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=8) %!s(int=15) %!s(int=27) %!s(int=50)\
    \ %!s(int=92)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp8do_i6fi_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=15) %!s(int=27) %!s(int=50) %!s(int=92) %!s(int=169)]'\n\
    \    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp8do_i6fi_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=8) %!s(int=15) %!s(int=27) %!s(int=50) %!s(int=92) %!s(int=169)\
    \ %!s(int=311)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp8do_i6fi_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return\
    \ []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if\
    \ n == 3 {\n        return []int{1, 3, 2}\n    }\n    ret := []int{1, 3, 2}\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            ret = append(ret,\
    \ i / 2 + 1)\n        } else {\n            ret = append(ret, ret[i - 1] + ret[i\
    \ - 2] + ret[i - 3])\n        }\n    }\n    return ret\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpg0tmkp3f_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3\
    \ (0.00s)\n        tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)]'\n    ---\
    \ FAIL: TestTri/test_num__5 (0.00s)\n        tmpg0tmkp3f_test.go:73: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6)\
    \ %!s(int=3) %!s(int=11) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=18) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n      \
    \  tmpg0tmkp3f_test.go:73: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %!s(int=11)]', got "
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return []int{}\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpd9riyqos_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpd9riyqos_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpd9riyqos_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpd9riyqos_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpd9riyqos_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpd9riyqos_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpd9riyqos_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpd9riyqos_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpd9riyqos_test.go:50: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpd9riyqos_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var tri_arr []int\n    tri_arr = append(tri_arr,\
    \ 1)\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            tri_arr\
    \ = append(tri_arr, 1 + i / 2)\n        } else {\n            tri_arr = append(tri_arr,\
    \ \n                tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i + 1])\n      \
    \  }\n    }\n    return tri_arr\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 34\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpx3zi65ov_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpx3zi65ov_test.go:45 +0x13dd\n\
    testing.tRunner(0xc000199040, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    list := []int{1,\
    \ 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            list\
    \ = append(list, 1 + i / 2)\n        } else {\n            list = append(list,\
    \ list[i - 1] + list[i - 2] + list[i + 1])\n        }\n    }\n    return list\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp4rsitq5c_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp4rsitq5c_test.go:49 +0x13a6\n\
    testing.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    res[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2]\
    \ + res[i + 1]\n        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpdgg0zd5v_test.go:36\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdgg0zd5v_test.go:49\
    \ +0x46\ntesting.tRunner(0xc0001031e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return nil\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpalwkiyn0_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpalwkiyn0_test.go:50: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpalwkiyn0_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    for i\
    \ := 1; i <= n; i++ {\n        res[i] = fib3(i)\n    }\n    return res\n}\n\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzx8n2crj_test.go:27:18: undefined: fib3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, 0)\n    result\
    \ = append(result, 1)\n    result = append(result, 3)\n    result = append(result,\
    \ 2)\n    if n <= 2 {\n        return result\n    }\n    for i := 3; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n\
    \        } else {\n            result = append(result, result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5149e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5149e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp3n8fi3_0_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp3n8fi3_0_test.go:49 +0x18d4\n\
    testing.tRunner(0xc0001a01a0, 0x52a2f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073847
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp9nok9bz1_test.go:32\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp9nok9bz1_test.go:45 +0x4a5\n\
    testing.tRunner(0xc0001036c0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073833
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var result []int\n    if n == 0 {\n \
    \       return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n\
    \        return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 4; i <= n; i++ {\n        result =\
    \ append(result, result[i - 3] + result[i - 2] + result[i - 1])\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpgzwii3p2_test.go:42\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgzwii3p2_test.go:55 +0x1332\n\
    testing.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    r := make([]int, n+1)\n    r[0] = 1\n\
    \    r[1] = 3\n    r[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            r[i] = 1 + i / 2\n        } else {\n            r[i] = r[i-1]\
    \ + r[i-2] + r[i+1]\n        }\n    }\n    return r\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpdpt4dr9u_test.go:33\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpdpt4dr9u_test.go:46 +0x4a6\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    if n == 0 {\n        return []int{1}\n    }\n\n    var array []int\n    array\
    \ = append(array, 1)\n    for i := 1; i <= n; i++ {\n        if i == 1 {\n   \
    \         array = append(array, 3)\n        } else if i % 2 == 0 {\n         \
    \   array = append(array, 1 + i / 2)\n        } else {\n            array = append(array,\
    \ array[i - 1] + array[i - 2] + array[i + 1])\n        }\n    }\n    return array\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp0011bfqc_test.go:40\
    \ +0x1cc\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp0011bfqc_test.go:53\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    var xs []int\n    xs = append(xs, 1)\n  \
    \  xs = append(xs, 3)\n    for i := 2; i < n; i++ {\n        xs = append(xs, xs[i\
    \ - 1] + xs[i - 2] + xs[i - 3])\n    }\n    return xs\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6\
    \ [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp3qc7vdgb_test.go:38\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp3qc7vdgb_test.go:50 +0x68\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // TODO: Implement\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpeca22xlc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpeca22xlc_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpeca22xlc_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpeca22xlc_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpeca22xlc_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpeca22xlc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmpeca22xlc_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmpeca22xlc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmpeca22xlc_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpeca22xlc_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073848
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmpp9b9928b_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL:\
    \ TestTri/test_num__2 (0.00s)\n        tmpp9b9928b_test.go:50: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n\
    \        tmpp9b9928b_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpp9b9928b_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpp9b9928b_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestTri/test_num__8 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    ---\
    \ FAIL: TestTri/test_num__9 (0.00s)\n        tmpp9b9928b_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int"
  timestamp: 1660073839
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    nums := make([]int, n + 1)\n    nums[0] = 1\n    nums[1] = 3\n   \
    \ nums[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n      \
    \      nums[i] = 1 + i / 2\n        } else {\n            nums[i] = nums[i - 1]\
    \ + nums[i - 2] + nums[i + 1]\n        }\n    }\n    return nums\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp_6e4y3cz_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp_6e4y3cz_test.go:49 +0x4ac\n\
    testing.tRunner(0xc000103860, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    var result\
    \ []int\n    result = append(result, 1)\n    result = append(result, 3)\n    if\
    \ n == 1 {\n        return result\n    }\n    result = append(result, 2)\n   \
    \ if n == 2 {\n        return result\n    }\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n    \
    \    } else {\n            result = append(result, result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpgp_pss9o_test.go:40\
    \ +0x1e9\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpgp_pss9o_test.go:53\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    s := make([]int, n + 1)\n    s[0] =\
    \ 1\n    s[1] = 3\n    s[2] = 2\n    for i := 3; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            s[i] = 1 + i / 2\n        } else {\n            s[i] =\
    \ s[i - 1] + s[i - 2] + s[i + 1]\n        }\n    }\n    return s\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpcccswkdy_test.go:42\
    \ +0x1b5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpcccswkdy_test.go:55\
    \ +0x46\ntesting.tRunner(0xc0001036c0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    res := make([]int, n+1)\n    res[0] =\
    \ 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i-1] + res[i-2] + res[i+1]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [-1]\
    \ [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 20\
    \ [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5139e0, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpnd_mscmt_test.go:31\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnd_mscmt_test.go:44 +0xd06\n\
    testing.tRunner(0xc0001036c0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    sequence := []int{1, 3, 2}\n    for i := 0; i < n; i++ {\n       \
    \ l := len(sequence)\n        cur := sequence[l - 1] + sequence[l - 2] + sequence[l\
    \ - 3]\n        sequence = append(sequence, cur)\n    }\n    return sequence\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpm1dpbffd_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19)]'\n\
    \    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpm1dpbffd_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)]'\n   \
    \ --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpm1dpbffd_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpm1dpbffd_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11)\
    \ %!s(int=19) %!s(int=36) %!s(int=66) %!s(int=121)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpm1dpbffd_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121) %!s(int=223)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n   \
    \     tmpm1dpbffd_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36) %!s(int=66)\
    \ %!s(int=121) %!s(int=223) %!s(int=410)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpm1dpbffd_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=6) %!s(int=11) %!s(int=19) %!s(int=36)\
    \ %!s(int=66) %!s(int=121) %!s(int=223) %!s(int=410) %!s(int=754)]'\n    --- FAIL:\
    \ TestTri/test_num__7 (0.00s)\n        tmpm1dpbffd_te"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var res []int\n    if n == 0 {\n    \
    \    return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n        return\
    \ res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return res\n\
    \    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n    }\n\
    \    var acc1, acc2, acc3 int\n    for i := 4; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            acc1 = res[i - 1]\n            acc2 = res[i - 2]\n     \
    \       acc3 = res[i - 3]\n            res = append(res, acc1 + acc2 + acc3)\n\
    \        } else {\n            res = append(res, i / 2 + 1)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [3]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000150000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000150000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpnxukudog_test.go:44\
    \ +0x25d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpnxukudog_test.go:63\
    \ +0x73\ntesting.tRunner(0xc000119520, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \n    if n == 0 {\n        return []int{1}\n    }\n\n    if n == 1 {\n       \
    \ return []int{1, 3}\n    }\n\n    if n == 2 {\n        return []int{1, 3, 2}\n\
    \    }\n\n    var ret []int\n    ret = append(ret, 1, 3, 2)\n    for i := 3; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            ret = append(ret, 1 + i /\
    \ 2)\n        } else {\n            ret = append(ret, ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1])\n        }\n    }\n\n    return ret\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpvne93wq7_test.go:47\
    \ +0x225\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpvne93wq7_test.go:61\
    \ +0x46\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    res := make([]int, n+1)\n    res[0] = 1\n    res[1] = 3\n    res[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = res[i/2]\n        } else {\n            res[i] = res[i-1] + res[i-2] + res[i+1]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmpic53n4mv_test.go:36\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpic53n4mv_test.go:49 +0x579\n\
    testing.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    // a, b, c is the tail for tri(n),\
    \ tri(n - 1), tri(n - 2) respectively\n    a, b, c := 2, 3, 8\n    l := []int{1,\
    \ 3, 2, 8}\n    for n > 3 {\n        n--\n        a, b, c = b, c, 1 + n / 2\n\
    \        if n % 2 == 1 {\n            c = c + a + b\n        }\n        l = append(l,\
    \ c)\n    }\n    return l\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n\
    \        tmpx22p2zwr_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpx22p2zwr_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=13)]'\n   \
    \ --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpx22p2zwr_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=14) %!s(int=3) %!s(int=19)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpx22p2zwr_test.go:70: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=4)\
    \ %!s(int=15) %!s(int=3) %!s(int=20)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpx22p2zwr_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=15) %!s(int=4) %!s(int=22) %!s(int=3)\
    \ %!s(int=27)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpx22p2zwr_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=17) %!s(int=4) %!s(int=24) %!s(int=3)\
    \ %!s(int=29)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpx22p2zwr_test.go:70:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120)\
    \ %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=21)\
    \ %!s(int=10) %!s(int=40) %!s(int=9) %!s(int="
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    var r []int\n    return r\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp7sa59hu6_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp7sa59hu6_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp7sa59hu6_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp7sa59hu6_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp7sa59hu6_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp7sa59hu6_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp7sa59hu6_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp7sa59hu6_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp7sa59hu6_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp7sa59hu6_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n\
    \    tri := make([]int, n + 1)\n    tri[0] = 1\n    tri[1] = 3\n    tri[2] = 2\n\
    \    if n == 2 {\n        return tri\n    }\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            tri[i] = tri[i / 2]\n        } else {\n \
    \           tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        }\n    }\n\
    \    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n  \
    \   { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpaji3jd5v_test.go:39\
    \ +0x12d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpaji3jd5v_test.go:52\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    array := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            array = append(array, 1 + i / 2)\n        } else {\n\
    \            array = append(array, array[i - 1] + array[i - 2] + array[i + 1])\n\
    \        }\n    }\n    return array\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp87b01grn_test.go:42\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp87b01grn_test.go:56\
    \ +0x73\ntesting.tRunner(0xc000120340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    // Write your code here\n    return []int{}\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmp3f30ec5g_test.go:51: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmp3f30ec5g_test.go:51: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3f30ec5g_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n    ans := make([]int, n + 1)\n    ans[0] = 1\n    ans[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            ans[i] = 1 + i /\
    \ 2\n        } else {\n            ans[i] = ans[i - 1] + ans[i - 2] + ans[i +\
    \ 1]\n        }\n    }\n    return ans\n}\n\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(...)\n\t/tmp/tmp9v_d7akx_test.go:35\n\
    command-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp9v_d7akx_test.go:48 +0xbf9\n\
    testing.tRunner(0xc000103860, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    result := make([]int, 0)\n    result\
    \ = append(result, 1)\n    if n > 0 {\n        result = append(result, 3)\n  \
    \  }\n    if n > 1 {\n        result = append(result, 2)\n    }\n    if n == 0\
    \ {\n        return result\n    }\n    for i := 3; i <= n; i++ {\n        if i\
    \ % 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n\
    \            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmpq0z3vva6_test.go:40\
    \ +0x225\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpq0z3vva6_test.go:53\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n\tm := map[int]int{}\n\treturn triR(n, m)\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvosa8691_test.go:26:9: undefined: triR

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1,\
    \ 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n\
    \    }\n\n    if n == 1 {\n        return []int{1, 3}\n    }\n\n    slice := make([]int,\
    \ n + 1)\n    slice[0] = 1\n    slice[1] = 3\n    slice[2] = 2\n\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            slice[i] = 1 + i / 2\n\
    \        } else {\n            slice[i] = slice[i - 1] + slice[i - 2] + slice[i\
    \ + 1]\n        }\n    }\n\n    return slice\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x3)\n\t/tmp/tmp38u1584j_test.go:42\
    \ +0x155\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp38u1584j_test.go:56\
    \ +0x46\ntesting.tRunner(0xc0001924e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
