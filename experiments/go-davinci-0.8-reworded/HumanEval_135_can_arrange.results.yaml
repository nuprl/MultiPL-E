language: go_test.go
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    last_index := len(arr) - 1\n\
    \    for index := range arr {\n        if index > 0 && arr[index] <= arr[index\
    \ - 1] {\n            last_index = index - 1\n        }\n    }\n    return last_index\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpfq0yzwxy_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpfq0yzwxy_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpfq0yzwxy_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpfq0yzwxy_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int = 0\n    for i, v := range arr {\n        if i > 0 && v < arr[i-1] {\n\
    \            return max\n        } else if v > arr[max] {\n            max = i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpjj10eyoa_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpjj10eyoa_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpjj10eyoa_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ The algorithm works by having two pointers `i` and `j`. We\n    // initialize\
    \ `i` to 0 and `j` to 1, thus the first element of the\n    // array is always\
    \ less than or equal to the second element. We then\n    // iterate through the\
    \ array. If we find that the current element is\n    // less than or equal to\
    \ the previous element, then we increment `i`\n    // to be `j`. We then set `j`\
    \ to point to the next element. If we reach\n    // the end of the array, then\
    \ we return -1.\n    //\n    // The algorithm also works by keeping track of the\
    \ highest seen value\n    // of `i` at each iteration. This is because the element\
    \ pointed to by\n    // `i` must be less than or equal to the element pointed\
    \ to by `j`. If\n    // we encounter a value pointed to by `j` which is less than\
    \ the value\n    // pointed to by `i`, then we know that no valid solution exists.\n\
    \    if len(arr) < 2 {\n        return -1\n    }\n    i := 0\n    j := 1\n   \
    \ max_i := 0\n    for j < len(arr) {\n        if arr[j] <= arr[i] {\n        \
    \    if i > max_i {\n                max_i = i\n            }\n            i =\
    \ j\n            j += 1\n        } else if arr[j] < arr[max_i] {\n           \
    \ return -1\n        } else {\n            j += 1\n        }\n    }\n    if i\
    \ > max_i {\n        max_i = i\n    }\n    return max_i\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2kekkxte_test.go:73: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2kekkxte_test.go:73:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2kekkxte_test.go:73: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i-1] > arr[i] {\n            return i\n        }\n   \
    \ }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    arr_len\
    \ := len(arr)\n    if arr_len < 2 {\n        return -1\n    }\n    for i := arr_len\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i -\
    \ 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmprh4q3tud_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmprh4q3tud_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmprh4q3tud_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    var max int\n    for i, v :=\
    \ range arr {\n        if i != 0 && v < arr[i-1] {\n            if v > max {\n\
    \                max = v\n            }\n        }\n    }\n    if max == 0 {\n\
    \        return -1\n    }\n    for i, v := range arr {\n        if v == max {\n\
    \            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuclj5u_x_test.go:57: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        } else {\n            return i\n        }\n    }\n   \
    \ return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    n\
    \ := len(arr)\n    if n < 2 {\n        return -1\n    }\n    for i := n - 1; i\
    \ > 0; i-- {\n        if arr[i - 1] <= arr[i] {\n            return i\n      \
    \  }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpsa7u68o6_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpsa7u68o6_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpsa7u68o6_test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpsa7u68o6_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    len\
    \ := len(arr)\n    for i := len - 1; i > 0; i-- {\n        if arr[i] < arr[i -\
    \ 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmplu3cwbs9_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmplu3cwbs9_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmplu3cwbs9_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    i\
    \ := len(arr) - 1\n    last := arr[i]\n    for ; i >= 0; i-- {\n        if arr[i]\
    \ <= last {\n            break\n        }\n        last = arr[i]\n    }\n    return\
    \ i\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpphzpzdq7_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpphzpzdq7_test.go:40\
    \ +0x205\ntesting.tRunner(0xc0000da340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    index\
    \ := -1\n    for i, num := range arr {\n        if num >= arr[i - 1] {\n     \
    \       continue\n        }\n        index = i\n    }\n    return index\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpw9739waf_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpw9739waf_test.go:35\
    \ +0x572\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    ln\
    \ := len(arr)\n    if ln < 2 {\n        return -1\n    }\n    j := -1\n    for\
    \ i := 1; i < ln; i++ {\n        if arr[i-1] > arr[i] {\n            j = i\n \
    \       }\n    }\n    return j\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max_idx\
    \ := -1\n    max_val := -1\n    for idx, val := range arr {\n        if val >\
    \ max_val {\n            max_idx = idx\n            max_val = val\n        }\n\
    \    }\n    return max_idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpa1iraeov_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpa1iraeov_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpa1iraeov_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpa1iraeov_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] <= arr[i - 1] {\n            return i - 1\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_scb5cu3_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_scb5cu3_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_scb5cu3_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ last int = 0\n    var lastIndex int = -1\n    for i, v := range arr {\n    \
    \    if last >= v {\n            lastIndex = i\n        }\n        last = v\n\
    \    }\n    return lastIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    index, length := 0, len(arr)\n\
    \    for i, v := range arr {\n        if v <= arr[i-1] {\n            index =\
    \ i\n        }\n    }\n    if index == length - 1 {\n        return -1\n    }\n\
    \    return index\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmppp_j6y0o_test.go:23\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmppp_j6y0o_test.go:40\
    \ +0x572\ntesting.tRunner(0xc0000da340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptg6dzr5f_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    maxIndex := 0\n    for i := 1;\
    \ i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n            continue\n\
    \        }\n        if arr[i] > arr[maxIndex] {\n            maxIndex = i\n  \
    \      }\n    }\n    if arr[maxIndex] <= arr[maxIndex-1] {\n        return -1\n\
    \    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp15chky9u_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp15chky9u_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp15chky9u_test.go:53: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp15chky9u_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    if len(arr) == 2 {\n        if arr[0] < arr[1] {\n           \
    \ return 1\n        }\n        return -1\n    }\n    max := arr[0]\n    maxIndex\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >= max {\n    \
    \        max = arr[i]\n            maxIndex = i\n        }\n    }\n    if maxIndex\
    \ == 0 {\n        return -1\n    }\n    for i := maxIndex - 1; i >= 0; i-- {\n\
    \        if arr[i] > arr[i + 1] {\n            return i\n        }\n    }\n  \
    \  return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpn1cwm1jq_test.go:66: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpn1cwm1jq_test.go:66:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpn1cwm1jq_test.go:66: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ (\n        max int\n        n = len(arr)\n    )\n    for i := n - 1; i >= 0;\
    \ i-- {\n        if arr[i] >= max {\n            max = arr[i]\n        } else\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmprdol5_ja_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmprdol5_ja_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmprdol5_ja_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    var idx int\n    for i := 0;\
    \ i < len(arr); i++ {\n        if i == 0 {\n            idx = i\n            continue\n\
    \        }\n        if arr[i] < arr[i-1] {\n            idx = i\n        }\n \
    \   }\n    return idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp44nt7_hi_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ constraint: list length must be at least 2\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n\n    // constraint: list is nondecreasing (by definition)\n    if\
    \ !is_nondecreasing(arr) {\n        return -1\n    }\n\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i-1] {\n            return i - 1\n\
    \        }\n    }\n\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7j45cmms_test.go:24:9: undefined: is_nondecreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := arr[0]\n    res := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ <= max {\n            res = i\n        } else {\n            max = arr[i]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmptzaime_g_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmptzaime_g_test.go:41\
    \ +0x215\ntesting.tRunner(0xc0000da340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    idx,\
    \ length := -1, len(arr)\n    for i := length - 1; i > 0; i-- {\n        if arr[i]\
    \ <= arr[i - 1] {\n            continue\n        }\n        idx = i\n        break\n\
    \    }\n    return idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpnpolfoj9_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpnpolfoj9_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpnpolfoj9_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpnpolfoj9_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    idx := -1\n    for i, v := range arr {\n        if v <= arr[i-1]\
    \ {\n            idx = i\n        }\n    }\n    return idx\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpfz9t6ar1_test.go:26\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpfz9t6ar1_test.go:40\
    \ +0x552\ntesting.tRunner(0xc0000da1a0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073335
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    last := len(arr) - 1\n    for\
    \ i := last; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            last =\
    \ i - 1\n        }\n    }\n    return last\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpdb2d3tqj_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpdb2d3tqj_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpdb2d3tqj_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpdb2d3tqj_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    r\
    \ := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n\
    \            r = i - 1\n        }\n    }\n    return r\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpv1yslmsa_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpv1yslmsa_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpv1yslmsa_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ num int\n    var index int = -1\n    for i, value := range arr {\n        if\
    \ i == 0 {\n            continue\n        }\n        if value < num {\n      \
    \      continue\n        }\n        if value >= num {\n            num = value\n\
    \            index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpha7p0zkn_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpha7p0zkn_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpha7p0zkn_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpha7p0zkn_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ return_int int = -1\n    for i, j := 0, 1; j < len(arr); i, j = i+1, j+1 {\n\
    \        if arr[i] >= arr[j] {\n            if return_int == -1 {\n          \
    \      return_int = i\n            } else if return_int < i {\n              \
    \  return_int = i\n            }\n        }\n    }\n    return return_int\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmps90o_98l_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmps90o_98l_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmps90o_98l_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Check if the list is empty\n    if len(arr) == 0 {\n        return -1\n    }\n\
    \n    // If the list only has one element then it is necessarily the \n    //\
    \ largest element in the list since the list does not contain\n    // duplicate\
    \ values.\n    if len(arr) == 1 {\n        return 0\n    }\n\n    // Iterate over\
    \ the given array and compare each element with its\n    // previous element.\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n      \
    \      return i-1\n        }\n    }\n\n    // If no element could be found which\
    \ satisfies the given conditions\n    // then return -1.\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpld_15p_d_test.go:60: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpld_15p_d_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpld_15p_d_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i - 1] {\n       \
    \     continue\n        } else {\n            return i\n        }\n    }\n   \
    \ return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    if l < 2 {\n        return -1\n    }\n    if arr[l-1] <= arr[l-2]\
    \ {\n        return -1\n    }\n    for i := l - 2; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpykp7ywyj_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpykp7ywyj_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpykp7ywyj_test.go:50: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    maxIndex := 0\n    max := arr[0]\n\
    \    for i, v := range arr {\n        if v > max {\n            max = v\n    \
    \        maxIndex = i\n        }\n    }\n    if maxIndex > 0 {\n        if arr[maxIndex\
    \ - 1] > arr[maxIndex] {\n            return -1\n        }\n    }\n    return\
    \ maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5f2tqyjt_test.go:54: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5f2tqyjt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5f2tqyjt_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5f2tqyjt_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        } else {\n            return i\n        }\n    }\n   \
    \ return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    biggest\
    \ := arr[0]\n    index := 0\n    for i, v := range arr {\n        if v > biggest\
    \ {\n            biggest = v\n            index = i\n        }\n    }\n    if\
    \ index == 0 {\n        return -1\n    }\n    for i, v := range arr[:index] {\n\
    \        if v > arr[index] {\n            return -1\n        }\n    }\n    return\
    \ index\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu6fmlnea_test.go:29:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    if l < 2 {\n        return -1\n    }\n    var index int\n \
    \   if arr[l-1] < arr[l-2] {\n        return l-1\n    } else {\n        index\
    \ = can_arrange(arr[:l-1])\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := 0\n    for i := 1; i <\
    \ len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            max = i\n     \
    \   }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpvav7_m8z_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max_index := 0\n    max_value\
    \ := arr[0]\n    if len(arr) == 1 {\n        return max_index\n    }\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] < max_value {\n            return\
    \ i - 1\n        }\n        if arr[i] > max_value {\n            max_value = arr[i]\n\
    \            max_index = i\n        }\n    }\n    return max_index\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2ri0o_85_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2ri0o_85_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2ri0o_85_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2ri0o_85_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := arr[0]\n    idx := -1\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] <= max {\n           \
    \ idx = i\n            max = arr[i]\n        }\n    }\n    return idx\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpfucfhbep_test.go:49: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpfucfhbep_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    if length == 0 {\n        return -1\n    }\n    for i := length\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i -\
    \ 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpvpq5ymsb_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpvpq5ymsb_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpvpq5ymsb_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max int\n    for i, v := range arr {\n        if i > 0 && arr[i-1] > v {\n \
    \           return i - 1\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2sdqk93p_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2sdqk93p_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2sdqk93p_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2sdqk93p_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp2sdqk93p_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    res\
    \ := -1\n    if len(arr) == 0 {\n        return res\n    }\n    index := len(arr)\
    \ - 1\n    last := arr[index]\n    for index > 0 {\n        index--\n        if\
    \ arr[index] <= last {\n            res = index\n            last = arr[index]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpt87032bm_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpt87032bm_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpt87032bm_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpt87032bm_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ result = -1\n    var elem = arr[0]\n    for i, v := range arr {\n        if\
    \ i == 0 {\n            continue\n        }\n        if v < elem {\n         \
    \   result = i\n            elem = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp8njfy9s9_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp8njfy9s9_test.go:43\
    \ +0x72\ntesting.tRunner(0xc0000cc4e0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max_idx := 0\n    for i := 0;\
    \ i < len(arr) - 1; i++ {\n        if arr[i] < arr[i + 1] {\n            max_idx\
    \ = i + 1\n        }\n    }\n    return max_idx\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzeyxx6cw_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpzeyxx6cw_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpzeyxx6cw_test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpzeyxx6cw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] <= arr[i - 1] {\n            return i - 1\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpe274rp7k_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpe274rp7k_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpe274rp7k_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    res := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            res = i\n        }\n    }\n \
    \   return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2gyxco4t_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2gyxco4t_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2gyxco4t_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2gyxco4t_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    res := -1\n    for i := 1; i\
    \ < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n            res = i-1\n\
    \        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0s6xs0qu_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp0s6xs0qu_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp0s6xs0qu_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ <= arr[i-1] {\n            index = i\n        }\n    }\n    if index == 0 {\n\
    \        return -1\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    if arr[len(arr) - 1] <= arr[len(arr)\
    \ - 2] {\n        return -1\n    }\n    for i := len(arr) - 2; i >= 0; i-- {\n\
    \        if arr[i] > arr[i + 1] {\n            return i\n        }\n    }\n  \
    \  return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpwh4jcd_q_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpwh4jcd_q_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpwh4jcd_q_test.go:49: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    idx\
    \ := -1\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] >= arr[i +\
    \ 1] {\n            idx = i\n        }\n    }\n    return idx\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpajjkpjpd_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpajjkpjpd_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpajjkpjpd_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073337
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    if l == 0 {\n        return -1\n    }\n\n    for i := 0; i\
    \ < l - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            return i\n   \
    \     }\n    }\n\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0510fgo2_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp0510fgo2_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp0510fgo2_test.go:49: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    rv\
    \ := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            rv = i\n        }\n    }\n    return rv\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    for i := l - 1; i > 0; i-- {\n        if arr[i] >= arr[i -\
    \ 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpyfhx1xw__test.go:44: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpyfhx1xw__test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpyfhx1xw__test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ n int = len(arr)\n    var i int\n    var last int = -1\n    var result int =\
    \ -1\n    for i = 0; i < n; i++ {\n        if arr[i] < last {\n            if\
    \ result == -1 {\n                result = i - 1\n            } else {\n     \
    \           if arr[i] > arr[result] {\n                    result = i - 1\n  \
    \              }\n            }\n        }\n        last = arr[i]\n    }\n   \
    \ return result\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_sizmzum_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_sizmzum_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_sizmzum_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    size\
    \ := len(arr)\n    if size < 2 {\n        return -1\n    }\n    last := arr[size\
    \ - 1]\n    for i := size - 2; i >= 0; i-- {\n        if arr[i] <= last {\n  \
    \          return i\n        }\n        last = arr[i]\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpvnn_fyut_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpvnn_fyut_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpvnn_fyut_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i - 1] {\n       \
    \     return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp1e_chxgk_test.go:43: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp1e_chxgk_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp1e_chxgk_test.go:43: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    i\
    \ := len(arr) - 1\n    // if the last element is less than the previous, that's\
    \ it\n    if i > 0 && arr[i] < arr[i-1] {\n        return i\n    }\n    // iterate\
    \ the list in reverse, looking for decreasing element\n    for j := i-1; j >=\
    \ 0; j-- {\n        if arr[j] < arr[j+1] {\n            return j\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp9qnq0b2b_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp9qnq0b2b_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    largest := arr[0]\n    idx :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > largest {\n    \
    \        largest = arr[i]\n            idx = i\n        }\n    }\n    return idx\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp89wi2b88_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp89wi2b88_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp89wi2b88_test.go:49: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp89wi2b88_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ index = -1\n    for i, v := range arr {\n        if i > 0 && v < arr[i-1] {\n\
    \            index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    i\
    \ := len(arr) - 1\n    for ; i > 0; i-- {\n        if arr[i] < arr[i-1] {\n  \
    \          return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpmm98zbhf_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpmm98zbhf_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpmm98zbhf_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ ret int = -1\n    var cur int = 0\n    var pre int = 0\n    var len int = len(arr)\n\
    \    for i := 0; i < len; i++ {\n        cur = arr[i]\n        if i > 0 {\n  \
    \          pre = arr[i-1]\n            if cur <= pre {\n                continue\n\
    \            }\n        }\n        ret = i\n    }\n    return ret\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpnfis5rq3_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpnfis5rq3_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpnfis5rq3_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpnfis5rq3_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    // ...\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptdwcpz90_test.go:42: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptdwcpz90_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptdwcpz90_test.go:42: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    _len\
    \ := len(arr)\n    if _len < 2 {\n        return -1\n    }\n    idx := _len -\
    \ 1\n    for i := _len - 2; i >= 0; i-- {\n        if arr[i] <= arr[idx] {\n \
    \           idx = i\n        }\n    }\n    if idx == _len - 1 {\n        return\
    \ -1\n    }\n    return idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5g1ux506_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5g1ux506_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5g1ux506_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5g1ux506_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i-1] >= arr[i] {\n         \
    \   return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ length = len(arr)\n    var result = -1\n    for i := 1; i < length; i++ {\n\
    \        if arr[i] <= arr[i - 1] {\n            continue\n        }\n        result\
    \ = i\n    }\n    return result\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpafcrcrsd_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpafcrcrsd_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpafcrcrsd_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpafcrcrsd_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    largest\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            largest = i\n        }\n    }\n    if largest < len(arr) - 1 {\n\
    \        return largest\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpbnkl51ui_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpbnkl51ui_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ n = len(arr)\n\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n\n    var res = 0\n    for i := n - 1; i > 0; i-- {\n\
    \        if arr[i] <= arr[i - 1] {\n            continue\n        }\n        res\
    \ = i\n        break\n    }\n\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2xuo8vql_test.go:56: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2xuo8vql_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2xuo8vql_test.go:56: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2xuo8vql_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    return divide_can_arrange(arr,\
    \ 0, len(arr)-1)\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpafppkigf_test.go:21:12: undefined: divide_can_arrange

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp77bsec3w_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp77bsec3w_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp77bsec3w_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    var max int\n    max = arr[0]\n\
    \    var ret int\n    ret = -1\n    for i := 1; i < len(arr); i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n            ret = i\n        }\n \
    \   }\n    return ret\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6jv_u2qv_test.go:51: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6jv_u2qv_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6jv_u2qv_test.go:51: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6jv_u2qv_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    maxidx\
    \ := -1\n    for i,v := range arr {\n        if i > 0 && v <= arr[i-1] {\n   \
    \         continue\n        }\n        maxidx = i\n    }\n    return maxidx\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmppio03auy_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmppio03auy_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmppio03auy_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmppio03auy_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    index\
    \ := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Your code here\n    if len(arr) < 1 {\n        return -1\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    index := len(arr) - 1\n    for index >\
    \ 0 {\n        if arr[index] < arr[index - 1] {\n            return index - 1\n\
    \        }\n        index -= 1\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqok7vafn_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqok7vafn_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqok7vafn_test.go:52: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ last_num int = -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >=\
    \ last_num {\n            last_num = arr[i]\n        } else {\n            return\
    \ i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpeekge9x5_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpeekge9x5_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpeekge9x5_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    idx\
    \ := len(arr) - 1\n    for i := len(arr) - 2; i >= 0; i-- {\n        if arr[i]\
    \ > arr[idx] {\n            idx = i\n        }\n    }\n    return idx\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7m5eacy6_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp7m5eacy6_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp7m5eacy6_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp7m5eacy6_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i\
    \ - 1] {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max_idx\
    \ := -1\n    max_val := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ >= max_val {\n            max_idx = i\n            max_val = arr[i]\n      \
    \  }\n    }\n    return max_idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0f2ijyj0_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0f2ijyj0_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0f2ijyj0_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0f2ijyj0_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Base case.\n    if len(arr) == 0 {\n        return -1\n    }\n    var (\n  \
    \      // Initialize the index to -1, meaning no match found.\n        index =\
    \ -1\n        // Initialize the previous number to the last value in the array.\n\
    \        prev = arr[len(arr) - 1]\n    )\n    // Iterate through the array and\
    \ find the largest index of an element\n    // which is not greater than or equal\
    \ to the element immediately\n    // preceding it.\n    for i := len(arr) - 2;\
    \ i >= 0; i-- {\n        if arr[i] <= prev {\n            index = i\n        \
    \    prev = arr[i]\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2s0ykkwq_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2s0ykkwq_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2s0ykkwq_test.go:57: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2s0ykkwq_test.go:57:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Your code here\n    // x := 0\n    var x int\n    for i := len(arr) - 1; i >\
    \ 0; i-- {\n        if arr[i] <= arr[i-1] {\n            x = i\n        }\n  \
    \  }\n    return x\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp5whhiiio_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5whhiiio_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp5whhiiio_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := arr[0]\n    max_idx :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n            max_idx = i\n        }\n    }\n    if max_idx ==\
    \ 0 {\n        return -1\n    }\n    return max_idx\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpxq01ej9m_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpxq01ej9m_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpxq01ej9m_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpxq01ej9m_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    for i := length - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzqc0u84z_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzqc0u84z_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzqc0u84z_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    if len(arr) == 2 {\n        if arr[0] <= arr[1] {\n          \
    \  return 0\n        } else {\n            return -1\n        }\n    }\n    a\
    \ := arr[:len(arr)-1]\n    b := arr[1:]\n    current := -1\n    for i, v := range\
    \ a {\n        if v <= b[i] {\n            current = i\n        }\n    }\n   \
    \ return current\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpuf7v4qgv_test.go:59: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpuf7v4qgv_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpuf7v4qgv_test.go:59: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := -1\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i-1] <= arr[i] {\n            max = i\n  \
    \      }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3af_1dpq_test.go:47: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp3af_1dpq_test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp3af_1dpq_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp3af_1dpq_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ return the largest index of an element which is not greater than or equal to\
    \ the element immediately preceding it.\n    // if no such element exists then\
    \ return -1. The given list will not contain duplicate values.\n    if len(arr)\
    \ == 0 {\n        return -1\n    }\n\n    for i := len(arr) - 1; i > 0; i-- {\n\
    \        if arr[i] < arr[i - 1] {\n            return i\n        }\n    }\n\n\
    \    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i - 1] {\n       \
    \     return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp1e_chxgk_test.go:43: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp1e_chxgk_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp1e_chxgk_test.go:43: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    res\
    \ := -1\n    if len(arr) > 1 {\n        res = 0\n        for i := 1; i < len(arr);\
    \ i++ {\n            if arr[i] < arr[i-1] {\n                res = i\n       \
    \         break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp20tv_9um_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp20tv_9um_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max, max_index := arr[0], 0\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < max {\n            if\
    \ max_index == i - 1 {\n                max_index = i\n                max = arr[i]\n\
    \            } else {\n                return max_index\n            }\n     \
    \   } else {\n            max = arr[i]\n            max_index = i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0got025s_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp0got025s_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp0got025s_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    last\
    \ := arr[0]\n    idx := 0\n    for i, v := range arr {\n        if v <= last {\n\
    \            last = v\n            idx = i\n        }\n    }\n    if idx == 0\
    \ {\n        return -1\n    }\n    return idx\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpsm60chzr_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpsm60chzr_test.go:43\
    \ +0x51\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    if length == 0 {\n        return -1\n    }\n    if length ==\
    \ 1 {\n        return 0\n    }\n    max := -1\n    maxIndex := -1\n    for i :=\
    \ 0; i < length; i++ {\n        if i == 0 {\n            continue\n        }\n\
    \        if arr[i] <= arr[i-1] {\n            if max > arr[i] {\n            \
    \    return maxIndex\n            }\n        } else {\n            if max < arr[i]\
    \ {\n                max = arr[i]\n                maxIndex = i\n            }\n\
    \        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3use7q11_test.go:62: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp3use7q11_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp3use7q11_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp3use7q11_test.go:62:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    len\
    \ := len(arr)\n    for i := len - 1; i > 0; i-- {\n        if arr[i] >= arr[i\
    \ - 1] {\n            return i - 1\n        }\n    }\n    return -1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpzc2lulwq_test.go:44: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpzc2lulwq_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpzc2lulwq_test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ TODO: figure out how to convert the []int to a List object\n    // l := list.List{}\n\
    \    // for i, _ := range arr {\n    //     l.PushBack(arr[i])\n    // }\n   \
    \ //\n    // var maxIndex int\n    // var max int\n    //\n    // for e := l.Front();\
    \ e != nil; e = e.Next() {\n    //     if i := e.Next(); i > max {\n    //   \
    \      max = i\n    //         maxIndex = e.Value\n    //     }\n    // }\n  \
    \  // return maxIndex\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpfkv1gr86_test.go:54: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpfkv1gr86_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpfkv1gr86_test.go:54: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ create a result map\n    var result_map = make(map[int]int)\n    // loop through\
    \ array\n    for index, value := range arr {\n        // find the position of\
    \ the value\n        // compare with the previous index's value\n        result_map[index]\
    \ = value\n    }\n    return 0\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp20p6g_k2_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp20p6g_k2_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp20p6g_k2_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp20p6g_k2_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp20p6g_k2_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n    \
    \        max = arr[i]\n        }\n    }\n    min := max\n    for i := len(arr)\
    \ - 1; i >= 0; i-- {\n        if arr[i] < min {\n            min = arr[i]\n  \
    \      }\n    }\n    return max - min\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyd043u9j_test.go:50: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpyd043u9j_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpyd043u9j_test.go:50: expected '%!s(int=2)', got '%!s(int=9)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpyd043u9j_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmpyd043u9j_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptg6dzr5f_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    largest := -1\n    largest_index\
    \ := -1\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] >= largest\
    \ {\n            largest = arr[i]\n            largest_index = i\n        }\n\
    \    }\n    return largest_index\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmppdvreh0v_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmppdvreh0v_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmppdvreh0v_test.go:49: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmppdvreh0v_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := 0\n    if len(arr) == 0 {\n        return max\n    }\n    for i := 1; i <\
    \ len(arr); i++ {\n        if arr[i-1] <= arr[i] {\n            continue\n   \
    \     }\n        max = i\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp_9ocenx2_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__4 (0.00s)\n        tmp_9ocenx2_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    arrLen\
    \ := len(arr)\n    if arrLen < 2 {\n        return -1\n    }\n    for i := arrLen\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i - 1] {\n            continue\n\
    \        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    // Sort the arr.\n    for i :=\
    \ 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n      \
    \      if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    // Find the index.\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n            return i -\
    \ 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9aa61xxv_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp9aa61xxv_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp9aa61xxv_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Your code here\n    if len(arr) == 0 {\n        return -1\n    }\n    maxIndex\
    \ := 0\n    max := arr[0]\n    for i, v := range arr {\n        if v > max {\n\
    \            max = v\n            maxIndex = i\n        }\n    }\n    if maxIndex\
    \ == 0 {\n        return -1\n    }\n    for i := 0; i < maxIndex; i++ {\n    \
    \    if arr[i] >= arr[maxIndex] {\n            return -1\n        }\n    }\n \
    \   return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpnt8dq_3z_test.go:58: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpnt8dq_3z_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpnt8dq_3z_test.go:58: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpnt8dq_3z_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    lenArr\
    \ := len(arr)\n    if lenArr < 2 {\n        return -1\n    }\n    index := lenArr\
    \ - 1\n    for index >= 1 {\n        if arr[index] < arr[index - 1] {\n      \
    \      break\n        }\n        index--\n    }\n    return index - 1\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9hn_kki1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp9hn_kki1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp9hn_kki1_test.go:49: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    size\
    \ := len(arr)\n    if size < 2 {\n        return -1\n    }\n    for i := size\
    \ - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i -\
    \ 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp7n7qj56f_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp7n7qj56f_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp7n7qj56f_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptg6dzr5f_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ res int = -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1]\
    \ {\n            res = i-1\n        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpei_tlwrg_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpei_tlwrg_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpei_tlwrg_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    index, arr_len := len(arr) - 1,\
    \ len(arr)\n    for i := arr_len - 2; i >= 0; i-- {\n        if arr[i] >= arr[index]\
    \ {\n            index = i\n        }\n    }\n    if index == arr_len - 1 {\n\
    \        return -1\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpjm_7uhkp_test.go:50: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpjm_7uhkp_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpjm_7uhkp_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    n\
    \ := len(arr)\n    if n < 2 {\n        return -1\n    }\n    max := 0\n    for\
    \ i := 1; i < n; i++ {\n        if arr[i-1] < arr[i] {\n            max = i\n\
    \        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2gk1e36t_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2gk1e36t_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2gk1e36t_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2gk1e36t_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    index\
    \ := -1\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i -\
    \ 1] {\n            index = i - 1\n        }\n    }\n    return index\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp1saojwow_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp1saojwow_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp1saojwow_test.go:44: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    idx := len(arr) - 1\n    for\
    \ i:=len(arr)-2; i>=0; i-- {\n        if arr[i] <= arr[i+1] {\n            idx\
    \ = i\n        } else {\n            break\n        }\n    }\n    return idx\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpqttge_5x_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ res, l int\n    l = len(arr)\n\n    for i := l - 1; i > 0; i-- {\n        if\
    \ arr[i] < arr[i - 1] {\n            res = i - 1\n            break\n        }\n\
    \    }\n\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_98t1g4__test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp_98t1g4__test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp_98t1g4__test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp_98t1g4__test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp_98t1g4__test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    n\
    \ := len(arr)\n    idx := n - 1\n    min := arr[n - 1]\n    for i := n - 2; i\
    \ >= 0; i-- {\n        if arr[i] <= min {\n            min = arr[i]\n        \
    \    idx = i\n        }\n    }\n    return idx\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp8g0vhvea_test.go:20\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp8g0vhvea_test.go:41\
    \ +0x219\ntesting.tRunner(0xc000103520, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    m[arr[0]]\
    \ = 0\n    for i, v := range arr {\n        if i == 0 {\n            continue\n\
    \        }\n        if m[v] != 0 {\n            if m[v] < i {\n              \
    \  return m[v]\n            }\n        } else {\n            m[v] = i\n      \
    \  }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpb8tebu_7_test.go:55: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpb8tebu_7_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpb8tebu_7_test.go:55: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    if len(arr) == 2 {\n        if arr[0] <= arr[1] {\n          \
    \  return -1\n        }\n        return 0\n    }\n    arr_map := make(map[int]int)\n\
    \    for i, n := range arr {\n        arr_map[n] = i\n    }\n    for i := len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1] {\n            if i-2 >= 0\
    \ {\n                if arr[i] < arr[i-2] {\n                    return arr_map[arr[i-2]]\n\
    \                }\n            }\n            return -1\n        }\n    }\n \
    \   return arr_map[arr[0]]\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpdbrmp2yn_test.go:64: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpdbrmp2yn_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpdbrmp2yn_test.go:64: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i-1] <= arr[i] {\n            return i\n        }\n  \
    \  }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpxsh7tckp_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpxsh7tckp_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpxsh7tckp_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpxsh7tckp_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    index\
    \ := -1\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] >= arr[i +\
    \ 1] {\n            index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpx1ifugak_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpx1ifugak_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpx1ifugak_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: null
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    // using binary search to find\
    \ the max num index\n    if arr[len(arr) - 1] < arr[len(arr) - 2] {\n        return\
    \ -1\n    }\n    left, right := 0, len(arr) - 1\n    for left < right {\n    \
    \    mid := (left + right) / 2\n        if arr[mid] < arr[mid - 1] {\n       \
    \     right = mid - 1\n        } else {\n            left = mid\n        }\n \
    \   }\n    return left\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073357
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    var max int\n    var maxIndex\
    \ int\n    // max = arr[0]\n    for i, v := range arr {\n        if i == 0 {\n\
    \            continue\n        }\n        if v > max {\n            max = v\n\
    \            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk0c5tayi_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpk0c5tayi_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpk0c5tayi_test.go:53: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpk0c5tayi_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    last_val\
    \ := arr[0]\n    last_idx := 0\n    for idx, val := range arr {\n        if last_val\
    \ > val {\n            return last_idx\n        }\n        last_val = val\n  \
    \      last_idx = idx\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmp_zuug6ky_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmp_zuug6ky_test.go:41\
    \ +0x1fc\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    maxIndex := 0\n    maxNum := arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        num := arr[i]\n        if num <= maxNum {\n            return\
    \ maxIndex\n        }\n        maxIndex = i\n        maxNum = num\n    }\n   \
    \ return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpk2bnx7tc_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpk2bnx7tc_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpk2bnx7tc_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    i\
    \ := len(arr) - 1\n    for i > 0 {\n        if arr[i] < arr[i-1] {\n         \
    \   break\n        }\n        i--\n    }\n    return i - 1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpcn96gxfx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpcn96gxfx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpcn96gxfx_test.go:45: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__4 (0.00s)\n        tmpcn96gxfx_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    prev := -1\n    for i, v := range arr {\n        if v >= prev {\n\
    \            prev = v\n            max = i\n        }\n    }\n    return max\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpv_zx2hwz_test.go:46: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpv_zx2hwz_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpv_zx2hwz_test.go:46: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpv_zx2hwz_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    prev\
    \ := 0\n    for index, value := range arr {\n        if value <= prev {\n    \
    \        return index - 1\n        }\n        prev = value\n    }\n    return\
    \ -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpggixhw8x_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpggixhw8x_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpggixhw8x_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    pre\
    \ := arr[0]\n    for i, v := range arr {\n        if v < pre {\n            return\
    \ i - 1\n        }\n        pre = v\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmphqxt1ore_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmphqxt1ore_test.go:39\
    \ +0x1fc\ntesting.tRunner(0xc0001036c0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ YOUR CODE HERE\n    max := 0\n    for i := 1; i < len(arr); i++ {\n        if\
    \ arr[i] <= arr[i-1] {\n            continue\n        }\n        if i > max {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpv7ak18_a_test.go:48: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpv7ak18_a_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpv7ak18_a_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpv7ak18_a_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmpv7ak18_a_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max = arr[0]\n    var res = -1\n    for i, v := range arr {\n        if v <=\
    \ max {\n            max = v\n            res = i\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmphe4g87a2_test.go:18\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmphe4g87a2_test.go:40\
    \ +0x51\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ i int\n    for i = len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i -\
    \ 1] {\n            continue\n        } else {\n            break\n        }\n\
    \    }\n    return i\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmptf3h94ck_test.go:46: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    if arr[len(arr) - 1] < arr[len(arr)\
    \ - 2] {\n        return len(arr) - 1\n    }\n    for i := len(arr) - 2; i >=\
    \ 0; i-- {\n        if arr[i] < arr[i - 1] {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpnzxa7l7f_test.go:25\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpnzxa7l7f_test.go:40\
    \ +0x4b7\ntesting.tRunner(0xc0001031e0, 0x527f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ TODO: Implement me!\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6rgr9toi_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp6rgr9toi_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp6rgr9toi_test.go:39: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    start_index := 0\n    max_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n\
    \            max_index = i\n        } else {\n            if arr[i] > arr[start_index]\
    \ {\n                max_index = i\n            } else {\n                start_index\
    \ = i\n            }\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpyrvzr2zk_test.go:54: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpyrvzr2zk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpyrvzr2zk_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpyrvzr2zk_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    var i int\n    for i = len(arr)\
    \ - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n            break\n  \
    \      }\n    }\n    return i\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp2mkc506v_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    var max int\n    var maxIndex\
    \ int\n    var maxMaxIndex int\n    var maxMax int\n    for i, v := range arr\
    \ {\n        if i == 0 {\n            max = v\n            maxIndex = i\n    \
    \        continue\n        }\n        if v > max {\n            max = v\n    \
    \        maxIndex = i\n        }\n        if max > maxMax {\n            maxMax\
    \ = max\n            maxMaxIndex = maxIndex\n        }\n    }\n    return maxMaxIndex\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9q2_5u61_test.go:60: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9q2_5u61_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9q2_5u61_test.go:60: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9q2_5u61_test.go:60:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] <= arr[i - 1] {\n            return i - 1\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_scb5cu3_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_scb5cu3_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_scb5cu3_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Index of largest value which is not greater than previous value\n    idx :=\
    \ -1\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            idx\
    \ = i\n        } else if arr[i] <= arr[i-1] {\n            if arr[i] > arr[idx]\
    \ {\n                idx = i\n            }\n        }\n    }\n    return idx\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp855sxk0u_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp855sxk0u_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    i\
    \ := len(arr) - 1\n    for i > 0 {\n        if arr[i-1] <= arr[i] {\n        \
    \    i--\n        } else {\n            break\n        }\n    }\n    return i\
    \ - 1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpldymvlf5_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpldymvlf5_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpldymvlf5_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__4 (0.00s)\n        tmpldymvlf5_test.go:46:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    r\
    \ := -1\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i -\
    \ 1] {\n            r = i\n        }\n    }\n    return r\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpbb4ew8zm_test.go:44: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    max_index\
    \ := 0\n    for index, item := range arr {\n        if item > max {\n        \
    \    max = item\n            max_index = index\n        }\n    }\n    for i :=\
    \ 0; i < max_index; i++ {\n        if arr[i] > arr[max_index] {\n            return\
    \ -1\n        }\n    }\n    return max_index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5yv7lzyc_test.go:54: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5yv7lzyc_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5yv7lzyc_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5yv7lzyc_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    pre := arr[0]\n    index := -1\n\
    \    for i, v := range arr[1:] {\n        if v <= pre {\n            pre = v\n\
    \            index = i + 1\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpnjpwkjsr_test.go:49: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpnjpwkjsr_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ m = len(arr)\n    for i := m - 1; i > 0; i-- {\n        if arr[i - 1] >= arr[i]\
    \ {\n            continue\n        }\n        return i\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpey9qalx2_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpey9qalx2_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpey9qalx2_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpey9qalx2_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ max = -1\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i\
    \ - 1] {\n            continue\n        }\n        max = i\n    }\n    return\
    \ max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp6qn9rbfd_test.go:45: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp6qn9rbfd_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp6qn9rbfd_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp6qn9rbfd_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    if l == 0 {\n        return -1\n    }\n\n    for i := l - 1;\
    \ i > 0; i-- {\n        if arr[i] >= arr[i - 1] {\n            return i - 1\n\
    \        }\n    }\n\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmp2gpjjesc_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp2gpjjesc_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp2gpjjesc_test.go:49: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ If length of array less than 2, return -1\n    if len(arr) < 2 {\n        return\
    \ -1\n    }\n\n    // Range over the array\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        // Compare the value at current index to the one preceding it\n\
    \        if arr[i-1] >= arr[i] {\n            return i\n        }\n    }\n\n \
    \   // Return -1 by default\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    for i := 0; i < len(arr) - 1;\
    \ i++ {\n        if arr[i] >= arr[i + 1] {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpls_645mo_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpls_645mo_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpls_645mo_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    maxIdx :=\
    \ 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n        \
    \    max = arr[i]\n            maxIdx = i\n        }\n    }\n    for i := maxIdx\
    \ - 1; i >= 0; i-- {\n        if arr[i] > arr[i + 1] {\n            return i\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n\
    \  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp3xmbnj0p_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp3xmbnj0p_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp3xmbnj0p_test.go:54: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    res := 0\n    for i, x := range\
    \ arr {\n        if i > 0 && x <= arr[i-1] {\n            res = i\n        }\n\
    \    }\n    return res\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpn1upo_9u_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ TODO: write your code here\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmplo5dywvx_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmplo5dywvx_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmplo5dywvx_test.go:39: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    largest_idx\
    \ := -1\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i-1]\
    \ {\n            largest_idx = i\n        }\n    }\n    return largest_idx\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmphl0bsyjp_test.go:44: expected '%!s(int=3)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmphl0bsyjp_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmphl0bsyjp_test.go:44: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmphl0bsyjp_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //guard\n\
    \    if len(arr) == 0 {\n        return -1\n    }\n\n    m := make(map[int]int)\n\
    \    for i, v := range arr {\n        m[v] = i\n    }\n\n    for i, v := range\
    \ arr {\n        for j := v; j > 0; j-- {\n            if m[j] > i {\n       \
    \         return m[j]\n            }\n        }\n    }\n\n    return -1\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max_idx\
    \ := -1\n    for i := 0; i < len(arr); i++ {\n        if max_idx == -1 || (arr[i]\
    \ <= arr[max_idx] && i > max_idx) {\n            max_idx = i\n        }\n    }\n\
    \    return max_idx\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp16019llw_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp16019llw_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp16019llw_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ res int\n    for i := 1; i < len(arr); i++ {\n        if arr[i] >= arr[i-1]\
    \ {\n            continue\n        }\n        res = i - 1\n    }\n    return res\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9_0rdg53_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9_0rdg53_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9_0rdg53_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9_0rdg53_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp9_0rdg53_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    if length == 0 {\n        return -1\n    }\n\n    max := arr[length\
    \ - 1]\n    maxIndex := length - 1\n    for i := length - 2; i >= 0; i-- {\n \
    \       if arr[i] < max {\n            max = arr[i]\n            maxIndex = i\n\
    \        }\n    }\n\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpxjg5a29q_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpxjg5a29q_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpxjg5a29q_test.go:52: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    // handle the first value as\
    \ a special case\n    index := 0\n    for i, value := range arr {\n        if\
    \ i == 0 {\n            continue\n        }\n        if value < arr[i-1] {\n \
    \           index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpzhptalul_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ TODO\n    if len(arr) < 2 {\n        return -1\n    }\n    var index int\n \
    \   for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n  \
    \          index = i\n            break\n        }\n    }\n    return index\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpwvyt43vy_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073349
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    max\
    \ := -1\n    for i, e := range arr {\n        if e >= max {\n            max =\
    \ i\n        }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpi4rprz0f_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpi4rprz0f_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpi4rprz0f_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    if length == 0 {\n        return -1\n    }\n    if length ==\
    \ 1 {\n        return 0\n    }\n    for i := length - 1; i > 0; i-- {\n      \
    \  if arr[i] <= arr[i - 1] {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073349
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    l\
    \ := len(arr)\n    if l == 0 {\n        return -1\n    }\n\n    m := make(map[int]int)\n\
    \    for i, v := range arr {\n        m[v] = i\n    }\n\n    var max_idx int\n\
    \    for i := 0; i < l; i++ {\n        for j := i + 1; j < l; j++ {\n        \
    \    if arr[j] <= arr[i] {\n                if j > max_idx {\n               \
    \     max_idx = j\n                }\n            }\n        }\n    }\n\n    if\
    \ max_idx == 0 {\n        return -1\n    }\n    return m[arr[max_idx]]\n}\n\n\
    func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    n\
    \ := len(arr)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n  \
    \      return 0\n    }\n    right := make([]int, n)\n    right[n-1] = -1\n   \
    \ maxVal := arr[n-1]\n    for i := n-2; i >= 0; i-- {\n        if arr[i] > maxVal\
    \ {\n            maxVal = arr[i]\n        }\n        if arr[i] > arr[i+1] {\n\
    \            right[i] = i\n        } else {\n            right[i] = right[i+1]\n\
    \        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < maxVal {\n\
    \            return i\n        }\n    }\n    return right[0]\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpu5paekh2_test.go:63: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpu5paekh2_test.go:63:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpu5paekh2_test.go:63: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpu5paekh2_test.go:63:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    var last_index = 0\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] <= arr[last_index] {\n        \
    \    last_index = i\n        }\n    }\n    if last_index == len(arr) - 1 {\n \
    \       return -1\n    }\n    return last_index\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpg29lqqlx_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpg29lqqlx_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpg29lqqlx_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpg29lqqlx_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptg6dzr5f_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    if arr[len(arr) - 1] < arr[len(arr)\
    \ - 2] {\n        return len(arr) - 1\n    }\n    return can_arrange(arr[:len(arr)\
    \ - 1])\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] <= arr[i - 1] {\n            return i - 1\n       \
    \ }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpe274rp7k_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpe274rp7k_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpe274rp7k_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    arr2 := make([]int, len(arr))\n    copy(arr2, arr)\n    for i\
    \ := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i-1] {\n            arr2[i]\
    \ = arr[i-1]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr2[i] != arr[i] {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpkae3p4pa_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    var maxIndex int = -1\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i - 1] <= arr[i] {\n       \
    \     if i > maxIndex {\n                maxIndex = i\n            }\n       \
    \ }\n    }\n    return maxIndex\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp961rdu44_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp961rdu44_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp961rdu44_test.go:49: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp961rdu44_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    size\
    \ := len(arr)\n    if size < 2 {\n        return -1\n    }\n    result := 0\n\
    \    for i := 1; i < size; i++ {\n        if arr[i] < arr[i - 1] {\n         \
    \   result = i\n        }\n    }\n    return result\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpkv9f_hin_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i, j := len(arr) - 1, len(arr) - 2; i > 0; i, j = i - 1, j - 1 {\n        if\
    \ arr[i] >= arr[j] {\n            return j\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpf2d3tqru_test.go:43: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpf2d3tqru_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpf2d3tqru_test.go:43: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    pos := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ <= arr[i-1] {\n            continue\n        }\n        pos = i\n    }\n   \
    \ return pos\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4kk6djm9_test.go:51: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4kk6djm9_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4kk6djm9_test.go:51: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4kk6djm9_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    cur, max := arr[0], arr[0]\n\
    \    res := -1\n    for i, v := range arr {\n        if v >= cur {\n         \
    \   if v > max {\n                max = v\n                res = i\n         \
    \   }\n        } else {\n            cur = v\n        }\n    }\n    return res\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9odyd_s4_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9odyd_s4_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9odyd_s4_test.go:53: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp9odyd_s4_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    if len(arr) == 2 {\n        if arr[0] < arr[1] {\n           \
    \ return 1\n        }\n        return -1\n    }\n    var prev int\n    var largest\
    \ int\n    for i, v := range arr {\n        if i == 0 {\n            prev = v\n\
    \            continue\n        }\n        if v <= prev {\n            if i-1 >\
    \ largest {\n                largest = i-1\n            }\n        }\n       \
    \ prev = v\n    }\n    if len(arr)-1 > largest {\n        largest = len(arr)-1\n\
    \    }\n    return largest\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpkvzjqi9x_test.go:67: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpkvzjqi9x_test.go:67:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpkvzjqi9x_test.go:67: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i, v := range arr {\n        if i > 0 && v >= arr[i-1] {\n            return\
    \ i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpzwc2ryf6_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpzwc2ryf6_test.go:43:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpzwc2ryf6_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpzwc2ryf6_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    max := arr[0]\n    index := 0\n\
    \    for i,v := range arr {\n        if v > max {\n            max = v\n     \
    \       index = i\n        }\n    }\n    if index == 0 {\n        return -1\n\
    \    } else {\n        return index\n    }\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2ftcu4rg_test.go:53: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2ftcu4rg_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2ftcu4rg_test.go:53: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2ftcu4rg_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ i, j int\n    var res int = -1\n    l := len(arr)\n\n    for i = 0; i < l; i++\
    \ {\n        for j = i + 1; j < l; j++ {\n            if arr[j] <= arr[i] {\n\
    \                if j > res {\n                    res = j\n                }\n\
    \            }\n        }\n    }\n\n    return res\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 0
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i-1] >= arr[i] {\n            return i\n        }\n  \
    \  }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate :=\
    \ can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := 0\n    for i, v := range\
    \ arr {\n        if v >= arr[max] {\n            max = i\n        }\n    }\n \
    \   return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp0zzzgvg__test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp0zzzgvg__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp0zzzgvg__test.go:47: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp0zzzgvg__test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    max := arr[0]\n    max_index :=\
    \ 0\n    for i, v := range arr[1:] {\n        if v <= max {\n            max =\
    \ v\n            max_index = i + 1\n        }\n    }\n    return max_index\n}\n\
    \nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptsgfsza3_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmptsgfsza3_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmptsgfsza3_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ index = -1\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i\
    \ + 1] {\n            index = i\n        }\n    }\n    return index\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp8tn7583c_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp8tn7583c_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp8tn7583c_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        }\n        return i\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp5arguex5_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp5arguex5_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    result\
    \ := -1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] <= arr[i-1] {\n\
    \            result = i - 1\n        }\n    }\n    return result\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmph2_duiju_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmph2_duiju_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmph2_duiju_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] < arr[i - 1] {\n        \
    \    return i - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp40b3a149_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp40b3a149_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    res\
    \ := -1\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i] >= arr[i -\
    \ 1] {\n            continue\n        } else {\n            res = i - 1\n    \
    \        break\n        }\n    }\n    return res\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqe85y16a_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpqe85y16a_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpqe85y16a_test.go:47: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073350
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    size\
    \ := len(arr)\n    if size < 2 {\n        return -1\n    }\n    last := arr[size\
    \ - 1]\n    index := size - 2\n    for ; index >= 0; index-- {\n        if arr[index]\
    \ <= last {\n            break\n        }\n    }\n    return index\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__1\
    \ (0.00s)\n        tmpv6soi0a4_test.go:49: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpv6soi0a4_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpv6soi0a4_test.go:49: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ min = 0\n    var max = len(arr) - 1\n    var medium = 0\n    for min < max {\n\
    \        medium = (min + max) / 2\n        if arr[medium] > arr[medium + 1] {\n\
    \            max = medium\n        } else {\n            min = medium + 1\n  \
    \      }\n    }\n    return max\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpqshpdhu6_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpqshpdhu6_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpqshpdhu6_test.go:49: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpqshpdhu6_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := len(arr) - 1; i > 0; i-- {\n        if arr[i] <= arr[i - 1] {\n       \
    \     continue\n        } else {\n            return i\n        }\n    }\n   \
    \ return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected:\
    \ 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp4f0252fc_test.go:45: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp4f0252fc_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return\
    \ 0\n    }\n    maxIdx := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i]\
    \ <= arr[i-1] {\n            if arr[i] >= arr[maxIdx] {\n                return\
    \ i-1\n            }\n        } else {\n            if arr[i] >= arr[maxIdx] {\n\
    \                maxIdx = i\n            }\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp_pr23sp__test.go:56: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp_pr23sp__test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp_pr23sp__test.go:56: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    n\
    \ := len(arr)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n  \
    \      return 0\n    }\n    i := n - 1\n    for i > 0 {\n        if arr[i] <=\
    \ arr[i - 1] {\n            i--\n        } else {\n            break\n       \
    \ }\n    }\n    if i == 0 {\n        return -1\n    }\n    return i\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpkcnhcnq3_test.go:56: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmpkcnhcnq3_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmpkcnhcnq3_test.go:56: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmpkcnhcnq3_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ Your code here\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n \
    \ candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp1unk0sib_test.go:39: expected '%!s(int=3)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp1unk0sib_test.go:39:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp1unk0sib_test.go:39: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    length\
    \ := len(arr)\n    if length == 0 {\n        return -1\n    }\n    last := arr[length\
    \ - 1]\n    for i := length - 2; i >= 0; i-- {\n        if arr[i] <= last {\n\
    \            last = arr[i]\n        } else {\n            return i\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpegwqo2wq_test.go:50: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpegwqo2wq_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpegwqo2wq_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    for\
    \ i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpenz0v5ez_test.go:43: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpenz0v5ez_test.go:43:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpenz0v5ez_test.go:43: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    var\
    \ l = len(arr)\n    var prev = arr[0]\n    var result = -1\n    for i := 1; i\
    \ < l; i++ {\n        if arr[i] <= prev {\n            result = i\n        } else\
    \ {\n            prev = arr[i]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual:\
    \ candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4,\
    \ 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.can_arrange(...)\n\t/tmp/tmpmutyikxz_test.go:19\n\
    command-line-arguments_test.TestCan_Arrange(0x0?)\n\t/tmp/tmpmutyikxz_test.go:42\
    \ +0x215\ntesting.tRunner(0xc000103380, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    m := make(map[int]int)\n    cur\
    \ := arr[0]\n    ret := 0\n    for i, val := range arr {\n        if _, ok :=\
    \ m[val]; !ok {\n            m[val] = i\n        }\n        if val <= cur {\n\
    \            cur = val\n            ret = i\n        }\n    }\n    return ret\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp9zybgm6b_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp9zybgm6b_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp9zybgm6b_test.go:53: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for index := len(arr) - 1; index\
    \ > 0; index-- {\n        if arr[index] < arr[index - 1] {\n            return\
    \ index - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T)\
    \ {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmpfeqw4278_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmpfeqw4278_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmpfeqw4278_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[i - 1] {\n\
    \            index = i\n        }\n    }\n    return index\n}\n\nfunc TestCan_Arrange(t\
    \ *testing.T) {\n  candidate := can_arrange\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1,\
    \ 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7,\
    \ 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}),\
    \ expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp2myvjvme_test.go:44: expected '%!s(int=3)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__1 (0.00s)\n        tmp2myvjvme_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__2\
    \ (0.00s)\n        tmp2myvjvme_test.go:44: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__3 (0.00s)\n        tmp2myvjvme_test.go:44:\
    \ expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestCan_Arrange/test_num__4\
    \ (0.00s)\n        tmp2myvjvme_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    //\
    \ TODO Your code here!\n    for i := len(arr) - 1; i > 0; i-- {\n        if arr[i]\
    \ < arr[i - 1] {\n            return i - 1\n        }\n    }\n    return -1\n\
    }\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n\
    \     { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual:\
    \ candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual:\
    \ candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}),\
    \ expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmp4ttad3a5_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmp4ttad3a5_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmp4ttad3a5_test.go:44: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073351
- exit_code: 1
  program: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Create a function which returns the largest index of an element which\n//\
    \ is not greater than or equal to the element immediately preceding it. If\n//\
    \ no such element exists then return -1. The given list will not contain\n// duplicate\
    \ values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>>\
    \ can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    if\
    \ len(arr) < 2 {\n        return -1\n    }\n    for i := len(arr) - 1; i > 0;\
    \ i-- {\n        if arr[i] < arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\nfunc TestCan_Arrange(t *testing.T) {\n  candidate\
    \ := can_arrange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 4, 3, 5}), expected: 3 },\n     { actual: candidate([]int{1, 2, 4, 5}), expected:\
    \ -1 },\n     { actual: candidate([]int{1, 4, 2, 5, 6, 7, 8, 9, 10}), expected:\
    \ 2 },\n     { actual: candidate([]int{4, 8, 5, 7, 3}), expected: 4 },\n     {\
    \ actual: candidate([]int{}), expected: -1 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCan_Arrange (0.00s)\n    --- FAIL: TestCan_Arrange/test_num__0\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCan_Arrange/test_num__2 (0.00s)\n        tmptg6dzr5f_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCan_Arrange/test_num__3\
    \ (0.00s)\n        tmptg6dzr5f_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
