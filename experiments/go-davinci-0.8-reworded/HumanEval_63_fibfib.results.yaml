language: go_test.go
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    first,\
    \ second, third := 0, 0, 1\n    curr := 0\n    for i := 3; i <= n; i++ {\n   \
    \     curr = first + second + third\n        first = second\n        second =\
    \ third\n        third = curr\n    }\n    return curr\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    one\
    \ := 0\n    two := 0\n    three := 1\n    for i := 2; i < n; i++ {\n        four\
    \ := one + two + three\n        one = two\n        two = three\n        three\
    \ = four\n    }\n    return one + two + three\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp57r56hha_test.go:61: expected '%!s(int=4)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp57r56hha_test.go:61: expected\
    \ '%!s(int=24)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp57r56hha_test.go:61: expected '%!s(int=81)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp57r56hha_test.go:61:\
    \ expected '%!s(int=274)', got '%!s(int=504)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp57r56hha_test.go:61: expected '%!s(int=927)', got '%!s(int=1705)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    a, b, c :=\
    \ 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a + b + c\n\
    \    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    //\
    \ there are many ways to implement a fibbonacci sequnece, but since we are dealing\
    \ with \n    // a 3 number sequence, we can use a custom implementation.\n   \
    \ f1 := 0\n    f2 := 0\n    f3 := 1\n    for i := 2; i < n; i++ {\n        f1\
    \ = f2\n        f2 = f3\n        f3 = f1 + f2 + f3\n    }\n    return f3\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp1q_b82cl_test.go:62: expected '%!s(int=4)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp1q_b82cl_test.go:62: expected\
    \ '%!s(int=24)', got '%!s(int=169)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp1q_b82cl_test.go:62: expected '%!s(int=81)', got '%!s(int=985)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp1q_b82cl_test.go:62:\
    \ expected '%!s(int=274)', got '%!s(int=5741)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp1q_b82cl_test.go:62: expected '%!s(int=927)', got '%!s(int=33461)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return fibfib_rec(n, 0, 0, 1)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp616e7gjg_test.go:21:12: undefined: fibfib_rec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    a, b,\
    \ c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, c + b +\
    \ a\n    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate :=\
    \ fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    var n2,\
    \ n1, n0 int\n    n2 = 0\n    n1 = 0\n    n0 = 1\n    for i := 3; i <= n; i++\
    \ {\n        n2, n1, n0 = n1, n0, n2 + n1 + n0\n    }\n    return n0\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n ==\
    \ 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n   \
    \ if n == 5 {\n        return 4\n    }\n    a, b, c := 1, 1, 2\n    for i := 5;\
    \ i < n; i++ {\n        c = b + a + c\n        a = b\n        b = c\n    }\n \
    \   return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpw5ve_ji1_test.go:67: expected '%!s(int=24)', got '%!s(int=22)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpw5ve_ji1_test.go:67:\
    \ expected '%!s(int=81)', got '%!s(int=128)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpw5ve_ji1_test.go:67: expected '%!s(int=274)', got '%!s(int=746)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpw5ve_ji1_test.go:67:\
    \ expected '%!s(int=927)', got '%!s(int=4348)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    //fmt.Println(\"fibfib(\", n, \")\")\n    if n < 0\
    \ {\n        return 0\n    } else if n < 2 {\n        return 0\n    } else if\
    \ n == 2 {\n        return 1\n    } else {\n        f1 := fibfib(n-1)\n      \
    \  f2 := fibfib(n-2)\n        f3 := fibfib(n-3)\n        return f1 + f2 + f3\n\
    \    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\t\
    return 0\n\tcase 2:\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    var res [3]int\n    res[0] = 0\n    res[1] =\
    \ 0\n    res[2] = 1\n    for i := 4; i <= n; i++ {\n        res[0] = res[1]\n\
    \        res[1] = res[2]\n        res[2] = res[0] + res[1] + res[2]\n    }\n \
    \   return res[2]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpy707oq94_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy707oq94_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy707oq94_test.go:58: expected '%!s(int=24)', got '%!s(int=70)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy707oq94_test.go:58:\
    \ expected '%!s(int=81)', got '%!s(int=408)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy707oq94_test.go:58: expected '%!s(int=274)', got '%!s(int=2378)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy707oq94_test.go:58:\
    \ expected '%!s(int=927)', got '%!s(int=13860)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a, b,\
    \ c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        d := a + b + c\n      \
    \  a, b, c = b, c, d\n    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a := 0\n    b := 0\n    c := 1\n    var d int\n   \
    \ if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n  \
    \  }\n    if n == 2 {\n        return c\n    }\n    for i := 3; i <= n; i++ {\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n \
    \   return d\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var f0, f1, f2, curr int\n    for i := 0; i < n; i++\
    \ {\n        curr = f0 + f1 + f2\n        f0 = f1\n        f1 = f2\n        f2\
    \ = curr\n    }\n    return curr\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpqrzqbymk_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpqrzqbymk_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpqrzqbymk_test.go:50: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpqrzqbymk_test.go:50: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpqrzqbymk_test.go:50: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpqrzqbymk_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074763
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 2; i < n; i++\
    \ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    a, b,\
    \ c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a + b +\
    \ c\n    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate :=\
    \ fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpo8uvei4l_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpo8uvei4l_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpo8uvei4l_test.go:46: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpo8uvei4l_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpo8uvei4l_test.go:46: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    sum := 0\n    a, b, c := 0, 0, 1\n    for i\
    \ := 3; i <= n; i++ {\n        sum = a + b + c\n        a = b\n        b = c\n\
    \        c = sum\n    }\n    return sum\n}\n\nfunc TestFibfib(t *testing.T) {\n\
    \  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\t\
    return 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n < 3 {\n\t\treturn n - 1\n\t}\n\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp8tvpj05n_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp8tvpj05n_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp8tvpj05n_test.go:47: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp8tvpj05n_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp8tvpj05n_test.go:47: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    f0, f1, f2 := 0, 0, 1\n    for i := 0; i < n; i++ {\n\
    \        f0, f1, f2 = f1, f2, f0 + f1 + f2\n    }\n    return f0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // return fibfibNaive(n)\n    return fibfibFast(n)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8np2mh39_test.go:22:12: undefined: fibfibFast

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074815
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch {\n    case n == 0:\n        return 0\n    case\
    \ n == 1:\n        return 0\n    case n == 2:\n        return 1\n    default:\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074817
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    prevPrev,\
    \ prev, cur := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        prevPrev, prev,\
    \ cur = prev, cur, prev + prevPrev + prev\n    }\n    return cur\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpb33l_z49_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpb33l_z49_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=9)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpb33l_z49_test.go:50: expected '%!s(int=81)', got '%!s(int=22)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpb33l_z49_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=56)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpb33l_z49_test.go:50: expected '%!s(int=927)', got '%!s(int=145)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074817
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074763
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\treturn -1\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmprx5149i6_test.go:43: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmprx5149i6_test.go:43: expected\
    \ '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmprx5149i6_test.go:43: expected '%!s(int=4)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmprx5149i6_test.go:43: expected\
    \ '%!s(int=24)', got '%!s(int=-1)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmprx5149i6_test.go:43: expected '%!s(int=81)', got '%!s(int=-1)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmprx5149i6_test.go:43:\
    \ expected '%!s(int=274)', got '%!s(int=-1)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmprx5149i6_test.go:43: expected '%!s(int=927)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn\
    \ 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a, b, c := 0, 0, 1\n    switch n {\n    case 0:\n \
    \       return a\n    case 1:\n        return b\n    case 2:\n        return c\n\
    \    }\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n    }\n\
    \    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var (\n        fn_1, fn_2, fn_3 int\n    )\n    switch\
    \ {\n    case n < 3:\n        return n - 1\n    case n == 3:\n        return 2\n\
    \    }\n    fn_1, fn_2, fn_3 = 1, 2, 4\n    for i := 4; i <= n; i++ {\n      \
    \  fn_1, fn_2, fn_3 = fn_2, fn_3, fn_1 + fn_2 + fn_3\n    }\n    return fn_3\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp1gekpfug_test.go:56: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp1gekpfug_test.go:56: expected\
    \ '%!s(int=24)', got '%!s(int=81)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp1gekpfug_test.go:56: expected '%!s(int=81)', got '%!s(int=274)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp1gekpfug_test.go:56:\
    \ expected '%!s(int=274)', got '%!s(int=927)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp1gekpfug_test.go:56: expected '%!s(int=927)', got '%!s(int=3136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    f1, f2, f3 := 0, 0, 1\n    for i := 0; i < n; i++ {\n\
    \        if i == 0 {\n            f1 = 0\n        } else if i == 1 {\n       \
    \     f2 = 0\n        } else if i == 2 {\n            f3 = 1\n        } else {\n\
    \            tmp := f1 + f2 + f3\n            f1 = f2\n            f2 = f3\n \
    \           f3 = tmp\n        }\n    }\n    return f3\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmptb069oyj_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmptb069oyj_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmptb069oyj_test.go:58: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmptb069oyj_test.go:58:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmptb069oyj_test.go:58: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmptb069oyj_test.go:58:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    dp := make([]int,\
    \ n+1)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    dp[0] = 0\n    dp[1]\
    \ = 0\n    dp[2] = 1\n    for i := 3; i <= n; i++ {\n        dp[i] = dp[i-1] +\
    \ dp[i-2] + dp[i-3]\n    }\n    return dp[n]\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n-1\n    }\n\n    var a,\
    \ b, c int = 0, 0, 1\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n\
    \    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    f := make([]int, n+1)\n    f[1] = 0\n    f[2]\
    \ = 0\n    f[3] = 1\n    for i := 4; i <= n; i++ {\n        f[i] = f[i-1] + f[i-2]\
    \ + f[i-3]\n    }\n    return f[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpdnk_hn_8_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpdnk_hn_8_test.go:56: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpdnk_hn_8_test.go:56: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpdnk_hn_8_test.go:56:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpdnk_hn_8_test.go:56: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpdnk_hn_8_test.go:56:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n\
    \    if n == 5 {\n        return 4\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    f0, f1, f2 := 0, 0, 1\n    for i := 3; i <= n; i++\
    \ {\n        f0, f1, f2 = f1, f2, f0 + f1 + f2\n    }\n    return f2\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpo08w3m8c_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5w5d1dpi_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp5w5d1dpi_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp5w5d1dpi_test.go:49: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp5w5d1dpi_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp5w5d1dpi_test.go:49: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp5w5d1dpi_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a,\
    \ b, c := 0, 0, 1\n    result := 0\n    for i := 3; i <= n; i++ {\n        result\
    \ = a + b + c\n        a = b\n        b = c\n        c = result\n    }\n    return\
    \ result\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Define a sequence of fibonacci numbers.\n    fibs\
    \ := []int{0, 1}\n    // Recursively compute n-th fibonacci number by summing\
    \ the previous three numbers.\n    if n == 0 {\n        return 0\n    } else if\
    \ n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\
    \ else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9_g_b67_test.go:22:5: fibs declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    n0, n1, n2 := 0, 0, 1\n    for i := 3; i <= n; i++\
    \ {\n        n0, n1, n2 = n1, n2, n1 + n2 + n0\n    }\n    return n2\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpo8fxxsqk_test.go:47: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n-1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmplx44c4l3_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmplx44c4l3_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmplx44c4l3_test.go:46: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmplx44c4l3_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmplx44c4l3_test.go:46: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // FILL IN CODE HERE\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmppzjvdk75_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmppzjvdk75_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmppzjvdk75_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmppzjvdk75_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmppzjvdk75_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmppzjvdk75_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tswitch n {\n\tcase 0:\n\t\treturn 0\n\tcase 1:\n\t\t\
    return 0\n\tcase 2:\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    n1, n2, n3\
    \ := 0, 0, 1\n    for i := 2; i <= n; i++ {\n        n1, n2, n3 = n2, n3, n2 +\
    \ n3 + n1\n    }\n    return n3\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp4u8pl4de_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp4u8pl4de_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp4u8pl4de_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp4u8pl4de_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp4u8pl4de_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp4u8pl4de_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // BEGIN\n    if n < 3 {\n        return n - 1\n  \
    \  }\n    // END\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp53hzbg61_test.go:48: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp53hzbg61_test.go:48: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp53hzbg61_test.go:48: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp53hzbg61_test.go:48:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp53hzbg61_test.go:48: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // base cases\n    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n-1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmplx44c4l3_test.go:46: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmplx44c4l3_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmplx44c4l3_test.go:46: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmplx44c4l3_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmplx44c4l3_test.go:46: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    } else if n == 3\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp4gi165hq_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp4gi165hq_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp4gi165hq_test.go:49: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp4gi165hq_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp4gi165hq_test.go:49: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp4gi165hq_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // TODO: Implement\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpbz1xrf48_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpbz1xrf48_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpbz1xrf48_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpbz1xrf48_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpbz1xrf48_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpbz1xrf48_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    fibfib := 0\n    firstfib := 0\n    secondfib := 0\n\
    \    thirdfib := 1\n    for i := 0; i < n; i++ {\n        fibfib = firstfib +\
    \ secondfib + thirdfib\n        firstfib = secondfib\n        secondfib = thirdfib\n\
    \        thirdfib = fibfib\n    }\n    return fibfib\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpxisuno_u_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpxisuno_u_test.go:53: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpxisuno_u_test.go:53: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpxisuno_u_test.go:53: expected\
    \ '%!s(int=24)', got '%!s(int=81)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpxisuno_u_test.go:53: expected '%!s(int=81)', got '%!s(int=274)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpxisuno_u_test.go:53:\
    \ expected '%!s(int=274)', got '%!s(int=927)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpxisuno_u_test.go:53: expected '%!s(int=927)', got '%!s(int=3136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\treturn\
    \ 0\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074819
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    fibs := []int{0, 0, 1}\n    for i := 3; i <=\
    \ n; i++ {\n        fibs = append(fibs, fibs[i-1]+fibs[i-2]+fibs[i-3])\n    }\n\
    \    return fibs[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    fn2\
    \ := 0\n    fn1 := 0\n    fn := 1\n    for i := 3; i <= n; i++ {\n        fn2\
    \ = fn1\n        fn1 = fn\n        fn = fn1 + fn2 + fn2\n    }\n    return fn\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpn3ipckta_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpn3ipckta_test.go:60: expected\
    \ '%!s(int=24)', got '%!s(int=43)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpn3ipckta_test.go:60: expected '%!s(int=81)', got '%!s(int=171)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpn3ipckta_test.go:60:\
    \ expected '%!s(int=274)', got '%!s(int=683)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpn3ipckta_test.go:60: expected '%!s(int=927)', got '%!s(int=2731)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    f0, f1, f2 := 0, 0, 1\n    sum := 0\n    for\
    \ i := 3; i <= n; i++ {\n        sum = f0 + f1 + f2\n        f0, f1, f2 = f1,\
    \ f2, sum\n    }\n    return sum\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a, b, c := 0, 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b, c = b, c, a + b + c\n    }\n    return a\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    last2, last1, result := 0, 1, 0\n    for i :=\
    \ 3; i <= n; i++ {\n        result = last2 + last1 + result\n        last2, last1\
    \ = last1, result\n    }\n    return result\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp7q1gfu54_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp7q1gfu54_test.go:53: expected\
    \ '%!s(int=24)', got '%!s(int=99)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp7q1gfu54_test.go:53: expected '%!s(int=81)', got '%!s(int=577)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp7q1gfu54_test.go:53:\
    \ expected '%!s(int=274)', got '%!s(int=3363)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp7q1gfu54_test.go:53: expected '%!s(int=927)', got '%!s(int=19601)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n < 2 {\n\t\treturn 0\n\t}\n\tif n == 2 {\n\t\treturn\
    \ 1\n\t}\n\tfibs := []int{0, 0, 1}\n\tfor i := 3; i <= n; i++ {\n\t\tfibs = append(fibs,\
    \ fibs[i-1]+fibs[i-2]+fibs[i-3])\n\t}\n\treturn fibs[n]\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // If n is less than 3, return the n-th element of\
    \ the Fibonacci sequence\n    if n < 3 {\n        return fibonacci(n)\n    }\n\
    \n    // The memoizing algorithm for Fibonacci works for FibFib too.\n    var\
    \ f []int\n    for i := 0; i <= n; i++ {\n        f = append(f, -1)\n    }\n \
    \   return fibfibMemo(n, f)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95tl12zt_test.go:23:16: undefined: fibonacci

    /tmp/tmp95tl12zt_test.go:31:12: undefined: fibfibMemo

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i < n; i++\
    \ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpncvlimd2_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpncvlimd2_test.go:53: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpncvlimd2_test.go:53: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpncvlimd2_test.go:53:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpncvlimd2_test.go:53: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpncvlimd2_test.go:53:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n < 2 {\n\t\treturn\
    \ 0\n\t}\n\tif n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074821
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var i int\n    for j, k, l := 0, 0, 1; i < n; i++ {\n\
    \        j, k, l = k, l, k + l + j\n    }\n    return j\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzbqa1e8_test.go:25:12: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074820
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n    current,\
    \ next, after := 0, 1, 1\n    for i := 3; i <= n; i++ {\n        current, next,\
    \ after = next, after, current + next + after\n    }\n    return current\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp4x8_zs5r_test.go:50: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp4x8_zs5r_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=13)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp4x8_zs5r_test.go:50: expected '%!s(int=81)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp4x8_zs5r_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp4x8_zs5r_test.go:50: expected '%!s(int=927)', got '%!s(int=504)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a,\
    \ b, c := 0, 0, 1\n    for i := 2; i < n; i++ {\n        a, b, c = b, c, a + b\
    \ + c\n    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074821
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n - 1\n    }\n\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmphdglh88z_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmphdglh88z_test.go:47: expected\
    \ '%!s(int=24)', got '%!s(int=11)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmphdglh88z_test.go:47: expected '%!s(int=81)', got '%!s(int=37)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmphdglh88z_test.go:47:\
    \ expected '%!s(int=274)', got '%!s(int=125)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmphdglh88z_test.go:47: expected '%!s(int=927)', got '%!s(int=423)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    fib\
    \ := []int{0, 0, 1}\n    for i := 3; i <= n; i++ {\n        fib = append(fib,\
    \ fib[i-1]+fib[i-2]+fib[i-3])\n    }\n    return fib[n]\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var sum1, sum2, sum3 int\n    if n == 0 {\n       \
    \ return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n\
    \        return 1\n    } else {\n        sum1 = 0\n        sum2 = 0\n        sum3\
    \ = 1\n        for i := 3; i <= n; i++ {\n            sum1, sum2, sum3 = sum2,\
    \ sum3, sum1 + sum2 + sum3\n        }\n        return sum3\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    fib := []int{0, 0, 1}\n    if n < 3 {\n        return\
    \ fib[n]\n    }\n    for i := 3; i <= n; i++ {\n        fib = append(fib, fib[i-1]+fib[i-2]+fib[i-3])\n\
    \    }\n    return fib[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate :=\
    \ fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    default:\n        //\
    \ Use memoization to cache FibFibs results\n        var f []int\n        f = append(f,\
    \ 0)\n        f = append(f, 0)\n        f = append(f, 1)\n        for i := 3;\
    \ i <= n; i++ {\n            f = append(f, f[i-1]+f[i-2]+f[i-3])\n        }\n\
    \        return f[n]\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n < 3 {\n\t\treturn 0\n\t} else if n == 3 {\n\t\t\
    return 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpvolhm3yg_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpvolhm3yg_test.go:48: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpvolhm3yg_test.go:48: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpvolhm3yg_test.go:48:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpvolhm3yg_test.go:48: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpvolhm3yg_test.go:48:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a := 0\n    b := 0\n    c := 1\n    if n == 0 {\n \
    \       return a\n    }\n    if n == 1 {\n        return b\n    }\n    if n ==\
    \ 2 {\n        return c\n    }\n    var i int\n    for i = 0; i < n-2; i++ {\n\
    \        d := a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    res := make([]int, n+1)\n    res[0] = 0\n    res[1]\
    \ = 0\n    res[2] = 1\n    for i := 3; i <= n; i++ {\n        res[i] = res[i-1]\
    \ + res[i-2] + res[i-3]\n    }\n    return res[n]\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fibfib(...)\n\t/tmp/tmpa9wmplk2_test.go:24\n\
    command-line-arguments_test.TestFibfib(0x0?)\n\t/tmp/tmpa9wmplk2_test.go:39 +0x5a\n\
    testing.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Write your code here\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074763
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    c := make(chan int)\n    go fibfibHelper(n-1,\
    \ c)\n    go fibfibHelper(n-2, c)\n    go fibfibHelper(n-3, c)\n    a, b, f :=\
    \ <-c, <-c, <-c\n    return a + b + f\n}\n\nfunc TestFibfib(t *testing.T) {\n\
    \  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpduf1057r_test.go:28:8: undefined: fibfibHelper

    /tmp/tmpduf1057r_test.go:29:8: undefined: fibfibHelper

    /tmp/tmpduf1057r_test.go:30:8: undefined: fibfibHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a, b, c := 0, 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b, c = b, c, a + b + c\n    }\n    return a\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    a, b, c := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        a, b, c = b, c, a + b + c\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // TODO: implement me!\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmph36e6tc8_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmph36e6tc8_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmph36e6tc8_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmph36e6tc8_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmph36e6tc8_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmph36e6tc8_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074821
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    f := make([]int, 0)\n    f = append(f, 0)\n    f =\
    \ append(f, 0)\n    f = append(f, 1)\n    for i := 3; i <= n; i++ {\n        f\
    \ = append(f, f[i-1] + f[i-2] + f[i-3])\n    }\n    return f[n]\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\t\
    return 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    prev := 0\n    curr := 1\n    for i := 2; i\
    \ < n; i++ {\n        last := curr\n        curr = prev + curr + last\n      \
    \  prev = last\n    }\n    return curr\n}\n\nfunc TestFibfib(t *testing.T) {\n\
    \  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpbdh3dzf9_test.go:56: expected '%!s(int=4)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpbdh3dzf9_test.go:56: expected\
    \ '%!s(int=24)', got '%!s(int=169)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpbdh3dzf9_test.go:56: expected '%!s(int=81)', got '%!s(int=985)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpbdh3dzf9_test.go:56:\
    \ expected '%!s(int=274)', got '%!s(int=5741)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpbdh3dzf9_test.go:56: expected '%!s(int=927)', got '%!s(int=33461)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var fib [3]int\n    fib[0] = 0\n    fib[1] = 0\n  \
    \  fib[2] = 1\n    if n == 0 {\n        return fib[0]\n    }\n    if n == 1 {\n\
    \        return fib[1]\n    }\n    if n == 2 {\n        return fib[2]\n    }\n\
    \    for i := 3; i <= n; i++ {\n        fib[0] = fib[1]\n        fib[1] = fib[2]\n\
    \        fib[2] = fib[0] + fib[1] + fib[2]\n    }\n    return fib[2]\n}\n\nfunc\
    \ TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpldo14l0b_test.go:61: expected '%!s(int=4)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpldo14l0b_test.go:61: expected\
    \ '%!s(int=24)', got '%!s(int=169)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpldo14l0b_test.go:61: expected '%!s(int=81)', got '%!s(int=985)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpldo14l0b_test.go:61:\
    \ expected '%!s(int=274)', got '%!s(int=5741)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpldo14l0b_test.go:61: expected '%!s(int=927)', got '%!s(int=33461)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n\tif n == 0 {\n\t\treturn 0\n\t} else if n == 1 {\n\t\t\
    return 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // TODO: implement the function.\n    return 0\n}\n\
    \nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpmt_nhorp_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpmt_nhorp_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpmt_nhorp_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpmt_nhorp_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpmt_nhorp_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpmt_nhorp_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    p := []int{0, 0, 1}\n    for i := 3; i <= n; i++ {\n\
    \        p = append(p, p[len(p)-1] + p[len(p)-2] + p[len(p)-3])\n    }\n    return\
    \ p[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    }\n    // Find the three nearest Fibonacci numbers\
    \ (Fn-1, Fn-2, Fn-3)\n    // F0, F1, F2 and F3 (used as initial values for the\
    \ algorithm).\n    fib3 := 0\n    fib2 := 0\n    fib1 := 1\n    result := 0\n\
    \    for i := 3; i <= n; i++ {\n        result = fib1 + fib2 + fib3\n        fib3\
    \ = fib2\n        fib2 = fib1\n        fib1 = result\n    }\n    return result\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    n1\
    \ := 0\n    n2 := 0\n    n3 := 1\n    var n4 int\n    for i := 3; i <= n; i++\
    \ {\n        n4 = n1 + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 =\
    \ n4\n    }\n    return n4\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    a, b, c := 0, 0, 1\n    if n == 0 {\n        return\
    \ a\n    } else if n == 1 {\n        return b\n    } else if n == 2 {\n      \
    \  return c\n    }\n    for i := 3; i <= n; i++ {\n        a, b, c = b, c, a+b+c\n\
    \    }\n    return c\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    switch n {\n    case 0:\n        return 0\n    case\
    \ 1:\n        return 0\n    case 2:\n        return 1\n    }\n    minusOne :=\
    \ 1\n    minusTwo := 0\n    minusThree := 0\n    var result int\n    for i :=\
    \ 2; i < n; i++ {\n        result = minusOne + minusTwo + minusThree\n       \
    \ minusThree = minusTwo\n        minusTwo = minusOne\n        minusOne = result\n\
    \    }\n    return result\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate :=\
    \ fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    return 0\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpjgct79r3_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpjgct79r3_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpjgct79r3_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074816
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    var\
    \ memo = make([]int, n+1)\n    memo[0] = 0\n    memo[1] = 0\n    memo[2] = 1\n\
    \    for i := 3; i <= n; i++ {\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3]\n\
    \    }\n    return memo[n]\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // TODO: Implement.\n    return 0\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp3yqcixeb_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3yqcixeb_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3yqcixeb_test.go:44: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3yqcixeb_test.go:44: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmp3yqcixeb_test.go:44: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3yqcixeb_test.go:44:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n < 2\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n\n   \
    \ var sum int\n    f3 := 0\n    f2 := 0\n    f1 := 1\n    for i := 3; i <= n;\
    \ i++ {\n        sum = f1 + f2 + f3\n        f3 = f2\n        f2 = f1\n      \
    \  f1 = sum\n    }\n\n    return sum\n}\n\nfunc TestFibfib(t *testing.T) {\n \
    \ candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual: candidate(5),\
    \ expected: 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual:\
    \ candidate(10), expected: 81 },\n     { actual: candidate(12), expected: 274\
    \ },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    x, y, z := 0, 0, 1\n    for i := 3; i <= n;\
    \ i++ {\n        x, y, z = y, z, x + y + z\n    }\n    return z\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n\
    \    if n == 5 {\n        return 4\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074818
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return 0\n    }\n    if n == 3\
    \ {\n        return 1\n    }\n    ret := 0\n    for i := 0; i < 3; i++ {\n   \
    \     ret += fibfib(n-i-1)\n    }\n    return ret\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpe2f5c66o_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpe2f5c66o_test.go:53: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpe2f5c66o_test.go:53: expected '%!s(int=24)', got '%!s(int=13)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpe2f5c66o_test.go:53:\
    \ expected '%!s(int=81)', got '%!s(int=44)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpe2f5c66o_test.go:53: expected '%!s(int=274)', got '%!s(int=149)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpe2f5c66o_test.go:53:\
    \ expected '%!s(int=927)', got '%!s(int=504)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    a,\
    \ b, c := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        d := a + b + c\n   \
    \     a = b\n        b = c\n        c = d\n    }\n    return c\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    // Base case.\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    // Recursive case.\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    var a, b, c, d int\n    switch n {\n    case 0:\n \
    \       return 0\n    case 1:\n        return 0\n    case 2:\n        return 1\n\
    \    default:\n        for i := 3; i <= n; i++ {\n            a = b\n        \
    \    b = c\n            c = d\n            d = a + b + c\n        }\n        return\
    \ d\n    }\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1),\
    \ expected: 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual:\
    \ candidate(8), expected: 24 },\n     { actual: candidate(10), expected: 81 },\n\
    \     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpg0muyohs_test.go:59: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpg0muyohs_test.go:59: expected\
    \ '%!s(int=24)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpg0muyohs_test.go:59: expected '%!s(int=81)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpg0muyohs_test.go:59: expected\
    \ '%!s(int=274)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__6 (0.00s)\n\
    \        tmpg0muyohs_test.go:59: expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 3 {\n        return n-1\n    }\n\n    f0, f1,\
    \ f2 := 0, 0, 1\n    for i := 3; i <= n; i++ {\n        f0, f1, f2 = f1, f2, f1+f2+f0\n\
    \    }\n    return f2\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if\
    \ n < 0 {\n        return -1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074822
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else {\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc\
    \ fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074713
