name: HumanEval_142_sum_squares
language: go_test.go
prompt: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // \"\n// This function will take a list of integers. For all entries in the list,\
  \ the function shall square the integer entry if its index is a \n// multiple of\
  \ 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple\
  \ of 3. The function will not \n// change the entries in the list whose indexes\
  \ are not a multiple of 3 or 4. The function shall then return the sum of all entries.\
  \ \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// PATCH list\n// >>>\
  \ lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n"
tests: "func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual:\
  \ candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
  \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected:\
  \ 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
  \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
  \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99, 1,\
  \ 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0,\
  \ 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36,\
  \ 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual:\
  \ candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13,\
  \ 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var total int\n    for k, v := range lst {\n        if k % 3 ==\
    \ 0 {\n            total += v * v\n        } else if k % 4 == 0 {\n          \
    \  total += v * v * v\n        } else {\n            total += v\n        }\n \
    \   }\n    return total\n}\n", "    var sum int\n    for i,v := range lst {\n\
    \        if i % 3 == 0 {\n            sum += v * v\n        }\n        if i %\
    \ 4 == 0 && i % 3 != 0 {\n            sum += v * v * v\n        }\n        if\
    \ i % 3 != 0 && i % 4 != 0 {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for i, num := range lst {\n        if i % 3 ==\
    \ 0 {\n            num = num * num\n        } else if i % 4 == 0 {\n         \
    \   num = num * num * num\n        }\n        sum += num\n    }\n    return sum\n\
    }\n", "    var total int = 0\n    var i int = 0\n    for _, e := range lst {\n\
    \        if i % 3 == 0 {\n            total += e * e\n        } else if i % 4\
    \ == 0 {\n            total += e * e * e\n        } else {\n            total\
    \ += e\n        }\n        i++\n    }\n    return total\n}\n", "    sum := 0\n\
    \    for i, v := range lst {\n        if i % 3 == 0 {\n            sum += v *\
    \ v\n        } else if i % 4 == 0 {\n            sum += v * v * v\n        } else\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n\n//--------------------------------------------",
  "    var total int\n    for i, j := range lst {\n        if i % 3 == 0 {\n     \
    \       total += j * j\n        } else if i % 4 == 0 {\n            total += j\
    \ * j * j\n        } else {\n            total += j\n        }\n    }\n    return\
    \ total\n}\n", "    sum := 0\n    for idx, val := range lst {\n        if idx\
    \ % 3 == 0 {\n            sum += val * val\n        } else if idx % 4 == 0 {\n\
    \            sum += val * val * val\n        } else {\n            sum += val\n\
    \        }\n    }\n    return sum\n}\n", "    for i, j := range lst {\n      \
    \  if i % 3 == 0 {\n            lst[i] = j * j\n        } else if i % 4 == 0 {\n\
    \            lst[i] = j * j * j\n        } else {\n            continue\n    \
    \    }\n    }\n    sum := 0\n    for _, j := range lst {\n        sum += j\n \
    \   }\n    return sum\n}\n", "    var sum int\n    for i, val := range lst {\n\
    \        switch {\n        case i % 3 == 0:\n            sum += val * val\n  \
    \      case i % 4 == 0:\n            sum += val * val * val\n        default:\n\
    \            sum += val\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ int = 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n            sum\
    \ += v * v\n        }\n        if i % 4 == 0 && i % 3 != 0 {\n            sum\
    \ += v * v * v\n        }\n    }\n    return sum\n}\n", "    var sum int = 0\n\
    \    for i, v := range lst {\n        if i % 3 == 0 {\n            sum += v *\
    \ v\n        } else if i % 4 == 0 {\n            sum += v * v * v\n        } else\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ int = 0\n\n    for i, _ := range lst {\n        if i % 3 == 0 {\n          \
    \  lst[i] = lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            lst[i]\
    \ = lst[i] * lst[i] * lst[i]\n        }\n        sum += lst[i]\n    }\n\n    return\
    \ sum\n}\n", "\tsum := 0\n\tfor i, v := range lst {\n\t\tif i%3 == 0 {\n\t\t\t\
    sum += v*v\n\t\t} else if i%4 == 0 {\n\t\t\tsum += v*v*v\n\t\t} else {\n\t\t\t\
    sum += v\n\t\t}\n\t}\n\treturn sum\n}\n", "    sum := 0\n    for i, e := range\
    \ lst {\n        f := e\n        if i % 3 == 0 {\n            f = e * e\n    \
    \    }\n        if i % 4 == 0 && i % 3 != 0 {\n            f = e * e * e\n   \
    \     }\n        sum += f\n    }\n    return sum\n}\n", "    sum := 0\n    for\
    \ i, v := range lst {\n        if i % 3 == 0 {\n            sum += v * v\n   \
    \     } else if i % 4 == 0 {\n            sum += v * v * v\n        } else {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n", "    var sum int\n\
    \    for i, v := range lst {\n        if i % 3 == 0 {\n            sum += v *\
    \ v\n        } else if i % 4 == 0 {\n            sum += v * v * v\n        } else\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n", "\treturn 0\n\
    }\n", "    sum := 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n  \
    \          v = v * v\n        } else if i % 4 == 0 {\n            v = v * v *\
    \ v\n        }\n        sum += v\n    }\n    return sum\n}\n", "\tfor i, elem\
    \ := range lst {\n\t\tif i % 3 == 0 {\n\t\t\tlst[i] = elem * elem\n\t\t} else\
    \ if i % 4 == 0 {\n\t\t\tlst[i] = elem * elem * elem\n\t\t}\n\t}\n\tsum := 0\n\
    \tfor _, elem := range lst {\n\t\tsum += elem\n\t}\n\treturn sum\n}\n", "    var\
    \ sum int = 0\n    for i, v := range lst {\n        if i % 3 == 0 {\n        \
    \    sum += v * v\n        } else if i % 4 == 0 {\n            sum += v * v *\
    \ v\n        } else {\n            sum += v\n        }\n    }\n    return sum\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
