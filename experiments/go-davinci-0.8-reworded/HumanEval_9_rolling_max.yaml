name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2,\
  \ 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int\
  \ {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    rolling_max := make([]int, len(numbers))\n    for i, _ := range\
    \ numbers {\n        if i == 0 {\n            rolling_max[i] = numbers[i]\n  \
    \      } else {\n            if numbers[i] > rolling_max[i-1] {\n            \
    \    rolling_max[i] = numbers[i]\n            } else {\n                rolling_max[i]\
    \ = rolling_max[i-1]\n            }\n        }\n    }\n    return rolling_max\n\
    }\n", "    // TODO: implement me\n    return []int{1, 2, 3, 3, 3, 4, 4}\n}\n",
  "    var max int\n    res := make([]int, len(numbers))\n    for i, e := range numbers\
    \ {\n        if i == 0 {\n            max = e\n        } else {\n            if\
    \ e > max {\n                max = e\n            }\n        }\n        res[i]\
    \ = max\n    }\n    return res\n}\n", "    result := make([]int, len(numbers))\n\
    \    for i, number := range numbers {\n        if i == 0 {\n            result[i]\
    \ = number\n        } else {\n            if number > result[i-1] {\n        \
    \        result[i] = number\n            } else {\n                result[i] =\
    \ result[i-1]\n            }\n        }\n    }\n    return result\n}\n", "   \
    \ var (\n        maxs = make([]int, len(numbers))\n        max = numbers[0]\n\
    \    )\n    for i, n := range numbers {\n        if n > max {\n            max\
    \ = n\n        }\n        maxs[i] = max\n    }\n    return maxs\n}\n", "    rolling_max_list\
    \ := make([]int, len(numbers))\n    var max = numbers[0]\n    for idx, num :=\
    \ range numbers {\n        if num > max {\n            max = num\n        }\n\
    \        rolling_max_list[idx] = max\n    }\n    return rolling_max_list\n}\n",
  "    max := numbers[0]\n    result := make([]int, len(numbers))\n    result[0] =\
    \ max\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] > max {\n\
    \            max = numbers[i]\n        }\n        result[i] = max\n    }\n   \
    \ return result\n}\n", "    var result []int\n    if len(numbers) == 0 {\n   \
    \     return result\n    }\n    var lastMax int = numbers[0]\n    result = append(result,\
    \ lastMax)\n    for _, n := range numbers[1:] {\n        if n > lastMax {\n  \
    \          lastMax = n\n        }\n        result = append(result, lastMax)\n\
    \    }\n    return result\n}\n", "    m := []int{}\n    for i, number := range\
    \ numbers {\n        if i == 0 {\n            m = append(m, number)\n        }\
    \ else {\n            if number > m[i-1] {\n                m = append(m, number)\n\
    \            } else {\n                m = append(m, m[i-1])\n            }\n\
    \        }\n    }\n    return m\n}\n", "    var max int\n    var result []int\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        result = append(result, max)\n    }\n    return\
    \ result\n}\n", "    var result []int\n\n    if len(numbers) > 0 {\n        result\
    \ = append(result, numbers[0])\n    }\n\n    for i, number := range numbers {\n\
    \        if i > 0 {\n            previous := result[i - 1]\n            if number\
    \ > previous {\n                result = append(result, number)\n            }\
    \ else {\n                result = append(result, previous)\n            }\n \
    \       }\n    }\n\n    return result\n}\n", "    result := make([]int, len(numbers))\n\
    \    max := numbers[0]\n    result[0] = max\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] > max {\n            max = numbers[i]\n       \
    \ }\n        result[i] = max\n    }\n    return result\n}\n", "    var n = len(numbers)\n\
    \    if n == 0 {\n        return numbers\n    }\n    var result = make([]int,\
    \ n)\n    result[0] = numbers[0]\n    for i := 1; i < n; i++ {\n        if numbers[i]\
    \ > result[i-1] {\n            result[i] = numbers[i]\n        } else {\n    \
    \        result[i] = result[i-1]\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(numbers))\n    result[0] = numbers[0]\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] > result[i-1] {\n     \
    \       result[i] = numbers[i]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) == 0 {\n    \
    \    return []int{}\n    }\n    rolling_max_numbers := make([]int, len(numbers))\n\
    \    rolling_max_numbers[0] = numbers[0]\n    max := numbers[0]\n    for i, n\
    \ := range numbers[1:] {\n        if n > max {\n            max = n\n        }\n\
    \        rolling_max_numbers[i+1] = max\n    }\n    return rolling_max_numbers\n\
    }\n", "    result := make([]int, len(numbers))\n    maxValue := numbers[0]\n \
    \   result[0] = maxValue\n    for i := 1; i < len(numbers); i++ {\n        result[i]\
    \ = result[i-1]\n        if maxValue < numbers[i] {\n            maxValue = numbers[i]\n\
    \            result[i] = maxValue\n        }\n    }\n    return result\n}\n",
  "    rolling_max := make([]int, len(numbers))\n    for i, x := range numbers {\n\
    \        rolling_max[i] = x\n        for j := 0; j < i; j++ {\n            if\
    \ rolling_max[j] > rolling_max[i] {\n                rolling_max[i] = rolling_max[j]\n\
    \            }\n        }\n    }\n    return rolling_max\n}\n", "    var rolling_max\
    \ []int\n    max := 0\n    for _, n := range numbers {\n        if n > max {\n\
    \            max = n\n        }\n        rolling_max = append(rolling_max, max)\n\
    \    }\n    return rolling_max\n}\n", "    result := make([]int, len(numbers))\n\
    \    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n       \
    \ if numbers[i] > result[i-1] {\n            result[i] = numbers[i]\n        }\
    \ else {\n            result[i] = result[i-1]\n        }\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    max :=\
    \ numbers[0]\n    result := []int{max}\n\n    for _, number := range numbers[1:]\
    \ {\n        if number > max {\n            max = number\n        }\n        result\
    \ = append(result, max)\n    }\n\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
